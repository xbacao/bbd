
bin/bbda.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data         000001c2  00800100  000034dc  00003570  2**0  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034dc  00000000  00000000  00000094  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b8  008002c2  008002c2  00003732  2**0  ALLOC
  3 .stab         00009f60  00000000  00000000  00003734  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000073b1  00000000  00000000  0000d694  2**0  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00014a45  2**0  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014a68  2**2  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00014aa8  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  0001509c  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  0001563e  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  0001565b  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
008002c2 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Time.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800193 l     O .data	0000000c monthDays
00800481 l     O .bss	00000004 cacheTime
00800485 l     O .bss	00000007 tm
0080047d l     O .bss	00000004 sysTime
00800106 l     O .data	00000004 syncInterval
00800475 l     O .bss	00000004 nextSyncTime
00800473 l     O .bss	00000002 Status
00800479 l     O .bss	00000004 prevMillis
00000000 l    df *ABS*	00000000 bbda.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000007e4 l     F .text	00000006 _GLOBAL__sub_I_timeSynced
000007ea l     F .text	00000008 _GLOBAL__sub_D_timeSynced
00000000 l    df *ABS*	00000000 gsm_ard.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001cb l     O .text	00000009 AT_CIFSR
0000008a l     O .text	00000006 AT_ERROR
00000163 l     O .text	0000000e AT_CIPSERVER_R
00000155 l     O .text	0000000e AT_CIPSERVER_RESP
00000146 l     O .text	0000000f AT_CIPSERVER_SET
00000090 l     O .text	00000003 AT_OK
0000010e l     O .text	00000025 AT_CSTT
00000105 l     O .text	00000009 AT_CIICR
00000068 l     O .text	0000000d AT_CIPSTATUS
000000a8 l     O .text	0000000b AT_CONNECT_OK
0000007e l     O .text	0000000c AT_CIPCLOSE
00000075 l     O .text	00000009 AT_CIPCLOSE_OK
00000263 l     O .text	00000003 AT
0080027e l     O .data	00000020 _POSSIBLE_BRS
0000025a l     O .text	00000009 AT_CPIN_R
0000024d l     O .text	0000000d AT_CPIN_READY
0000023e l     O .text	0000000f AT_CPIN_SIM_PIN
00000231 l     O .text	0000000d AT_CPIN_SET
00000227 l     O .text	0000000a AT_CIURC_R
0000021d l     O .text	0000000a AT_CIURC_0
00000213 l     O .text	0000000a AT_CIURC_1
00000208 l     O .text	0000000b AT_CIURC_SET
000001fe l     O .text	0000000a AT_CGATT_R
000001f4 l     O .text	0000000a AT_CGATT_0
000001ea l     O .text	0000000a AT_CGATT_1
000001df l     O .text	0000000b AT_CGATT_SET_ON
000001bf l     O .text	0000000c AT_CIPMODE_R
000001b3 l     O .text	0000000c AT_CIPMODE_0
000001a7 l     O .text	0000000c AT_CIPMODE_1
0000019a l     O .text	0000000d AT_CIPMODE
00000171 l     O .text	00000029 AT_CGDCONT
0000013b l     O .text	0000000b AT_CIPSHUT
00000133 l     O .text	00000008 AT_SHUT_OK
000001d4 l     O .text	0000000b AT_CGATT_SET_OFF
000000fa l     O .text	0000000b AT_CIPMUX_R
000000ef l     O .text	0000000b AT_CIPMUX_0
000000e4 l     O .text	0000000b AT_CIPMUX_1
000000d8 l     O .text	0000000c AT_CIPMUX_SET
000000b3 l     O .text	00000025 AT_CIPSTART_SET
0000009d l     O .text	0000000b AT_CIPSEND
0000009b l     O .text	00000002 AT_CIPSEND_PROMPT
00000093 l     O .text	00000008 AT_CIPSEND_OK
00000000 l    df *ABS*	00000000 SoftwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Print.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring_digital.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002a52 l     F .text	00000052 turnOffPWM
00000000 l    df *ABS*	00000000 HardwareSerial0.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002c38 l     F .text	0000005a _GLOBAL__sub_I___vector_18
00000000 l    df *ABS*	00000000 _clear_bss.o
000002f2 l       .text	00000000 .do_clear_bss_start
000002f0 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 socket_bbd.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008004d0 l     O .bss	00000001 timer0_fract
00000000 l    df *ABS*	00000000 hooks.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002b76 l     F .text	00000002 __empty
00000000 l    df *ABS*	00000000 new.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 main.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _divmodhi4.o
0000316c l       .text	00000000 __divmodhi4_neg1
00003174 l       .text	00000000 __divmodhi4_neg2
0000317a l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
000031a2 l       .text	00000000 __udivmodsi4_ep
00003188 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
000031d8 l       .text	00000000 __divmodsi4_neg2
000031e6 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0000321c l       .text	00000000 __udivmodhi4_ep
0000320e l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _exit.o
000034da l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 scheduler.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000316  w      .text	00000000 __vector_22
008004d5 g     O .bss	00000004 timer0_overflow_count
000010cc g     F .text	00000280 Gsm_Ard::_recv_socket(int)
00002ef6 g     F .text	00000002 operator new[](unsigned int)
00002742 g     F .text	00000136 SoftwareSerial::begin(long)
00002b76  w    F .text	00000002 yield
000002b6 g     O .text	0000000a port_to_mode_PGM
00000316  w      .text	00000000 __vector_1
00002d1e g     F .text	00000006 Print::println()
00002e72 g     F .text	00000020 Print::println(int, int)
000022c6 g     F .text	0000006a Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)
00000c44 g     F .text	0000003a Gsm_Ard::Gsm_Ard()
00002510 g     F .text	00000050 SoftwareSerial::listen()
00000c44 g     F .text	0000003a Gsm_Ard::Gsm_Ard()
0000ffa0 g       *ABS*	00000000 __DATA_REGION_LENGTH__
008004d1 g     O .bss	00000004 timer0_millis
00000a06 g     F .text	0000000e year(unsigned long)
00002f2a g     F .text	0000001c HardwareSerial::peek()
00002d44 g     F .text	00000094 Print::printNumber(unsigned long, unsigned char)
00003206 g       .text	00000028 .hidden __udivmodhi4
00002c92 g     F .text	00000052 Print::write(unsigned char const*, unsigned int)
00000c7e g     F .text	00000110 Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)
008004ce g     O .bss	00000002 SoftwareSerial::active_object
00001f8c g     F .text	000001b4 Gsm_Ard::_connect_tcp_socket()
00000068 g       .text	00000000 __trampolines_start
000034dc g       .text	00000000 _etext
0000143e g     F .text	0000012c Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)
00002f12 g     F .text	00000018 HardwareSerial::available()
00000316  w      .text	00000000 __vector_24
00000318 g     F .text	00000002 loop
00002f88 g     F .text	00000042 HardwareSerial::_tx_udr_empty_irq()
00000316  w      .text	00000000 __vector_12
00002ef8  w    F .text	00000002 initVariant
000031f8 g       .text	0000000e .hidden __bswapsi2
0000300c g     F .text	0000008c HardwareSerial::write(unsigned char)
00000316 g       .text	00000000 __bad_interrupt
000026f0 g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
0000369e g       *ABS*	00000000 __data_load_end
00000316  w      .text	00000000 __vector_6
0000323a g     F .text	00000130 malloc
0000134c g     F .text	000000a8 Gsm_Ard::_recv_tcp_data(unsigned int*)
00800102 g     O .data	00000002 __malloc_heap_start
000009bc g     F .text	0000004a refreshCache(unsigned long)
00000068 g       .text	00000000 __trampolines_end
00002560 g     F .text	000000e8 __vector_3
00002b1c g     F .text	0000005a digitalWrite
00002ce4  w    F .text	0000002a Print::write(char const*)
00002aa4 g     F .text	00000078 pinMode
0000028e g     O .text	00000014 digital_pin_to_port_PGM
00000316  w      .text	00000000 __vector_23
000034dc g       *ABS*	00000000 __data_load_start
000002c6 g       .text	00000000 __dtors_end
0080057a g       .bss	00000000 __bss_end
00002654 g     F .text	0000004e SoftwareSerial::setTX(unsigned char)
00002384 g     F .text	00000042 SoftwareSerial::read()
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
000019fc g     F .text	0000044c Gsm_Ard::init_gsm_module()
00000316  w      .text	00000000 __vector_25
00800576 g     O .bss	00000002 __brkval
00000e5a g     F .text	00000040 Gsm_Ard::_get_rsp(char**)
00002e66 g     F .text	0000000c Print::print(int, int)
00000c20 g     F .text	00000024 Gsm_Ard::_clear_sock_buff()
00000bc0 g     F .text	0000000c day()
00000a14 g     F .text	00000066 setTime(unsigned long)
00000316  w      .text	00000000 __vector_11
008002c2 g     O .bss	00000001 started
000002c6  w      .text	00000000 __init
00002eca g     F .text	0000000c Print::print(unsigned char, int)
00002488 g     F .text	00000030 SoftwareSerial::peek()
00000ee4 g     F .text	000001e8 Gsm_Ard::_recv_string(int, int)
00000bd8 g     F .text	00000004 year()
00002f6e  w    F .text	0000001a serialEventRun()
00002fca g     F .text	00000042 HardwareSerial::flush()
00000316  w      .text	00000000 __vector_13
00002330 g     F .text	0000002e get_time_request_msg(char**)
00000316  w      .text	00000000 __vector_17
00002bdc g     F .text	0000004a __vector_19
00002d24 g     F .text	00000020 Print::println(char const*)
00000316  w      .text	00000000 __vector_7
000034c4 g       .text	00000014 .hidden __do_global_dtors
008004d9 g     O .bss	0000009d Serial
008002b1  w    O .data	00000010 vtable for HardwareSerial
000002e8 g       .text	00000010 .hidden __do_clear_bss
00002d10 g     F .text	0000000e Print::print(char)
00002c26 g     F .text	00000012 Serial0_available()
00810000 g       .stab	00000000 __eeprom_end
000023c6 g     F .text	000000c0 SoftwareSerial::write(unsigned char)
0000027a g     O .text	00000014 digital_pin_to_bit_mask_PGM
00003098 g     F .text	000000be HardwareSerial::begin(unsigned long, unsigned char)
0080048c g     O .bss	00000001 SoftwareSerial::_receive_buffer_head
00800100 g     O .data	00000002 __malloc_heap_end
00002648 g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
00000e9a g     F .text	0000000c Gsm_Ard::get_gsm_state()
00000000 g       .text	00000000 __vectors
0000348a g     F .text	0000001c strncmp
008002c2 g       .data	00000000 __data_end
000018a4 g     F .text	00000158 Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)
000034a6 g     F .text	0000001e strncpy
00002ed6 g     F .text	00000020 Print::println(unsigned char, int)
00000000  w      .text	00000000 __vector_default
00003156 g       .text	00000026 .hidden __divmodhi4
00002560 g     F .text	000000e8 __vector_5
000024b8 g     F .text	0000002c SoftwareSerial::available()
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
0000322e g       .text	0000000c .hidden __tablejump2__
000029dc g     F .text	00000076 init
0000031a g     F .text	00000102 syncTimeWithServer()
0080048e g     O .bss	00000040 SoftwareSerial::_receive_buffer
000002c0 g       .text	00000000 __ctors_start
000013f4 g     F .text	0000004a Gsm_Ard::_write_cmd(char const*)
0000235e g     F .text	00000026 decode_time_rsp_msg(char*, unsigned char, unsigned long*)
0080048d g     O .bss	00000001 SoftwareSerial::_receive_buffer_tail
000002d2 g       .text	00000016 .hidden __do_copy_data
00800471 g     O .bss	00000002 getTimePtr
008002c2 g       .bss	00000000 __bss_start
00002efa g     F .text	00000018 main
00001e48 g     F .text	00000144 Gsm_Ard::dettachGPRS()
00000a7a g     F .text	00000122 now()
00002560 g     F .text	000000e8 __vector_4
00002d0e g     F .text	00000002 Print::print(char const*)
00002924 g     F .text	0000004a micros
000031e8 g       .text	00000010 .hidden __negsi2
0000174e g     F .text	00000156 Gsm_Ard::_disconnect_tcp_socket()
000024e4 g     F .text	0000002c SoftwareSerial::stopListening()
008002c3 g     O .bss	000001ad gsm
00000000  w      *ABS*	00000000 __heap_end
00000316  w      .text	00000000 __vector_9
0000296e g     F .text	0000006e delay
0000156a g     F .text	000001e4 Gsm_Ard::attachGPRS()
00000316  w      .text	00000000 __vector_2
00000bcc g     F .text	0000000c month()
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000041c g     F .text	00000034 printDigits(int)
00000bfc g     F .text	00000024 Gsm_Ard::_clear_rsp_buff()
00000450 g     F .text	00000074 digitalClockDisplay()
000007f2 g     F .text	000001ca breakTime(unsigned long, tmElements_t&)
00000bdc g     F .text	00000020 Gsm_Ard::_clear_recv_buff()
00000316  w      .text	00000000 __vector_21
0080029e  w    O .data	00000010 vtable for SoftwareSerial
00000316  w      .text	00000000 __vector_15
00000ba8 g     F .text	0000000c minute()
000002ac g     O .text	0000000a port_to_output_PGM
00002eb2 g     F .text	00000018 Print::print(unsigned long, int)
000004c4 g     F .text	00000320 setup
0080057a g       .stab	00000000 __heap_start
00002e92 g     F .text	00000020 Print::println(long, int)
000002c4 g       .text	00000000 __dtors_start
000002c4 g       .text	00000000 __ctors_end
000031c0 g       .text	00000028 .hidden __divmodsi4
000008ff  w      *ABS*	00000000 __stack
000002a2 g     O .text	0000000a port_to_input_PGM
00000ea6 g     F .text	0000003e Gsm_Ard::get_socket_rsp(char**)
008002c2 g       .data	00000000 _edata
00002648 g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
0080057a g       .stab	00000000 _end
00000316  w      .text	00000000 __vector_8
00000bb4 g     F .text	0000000c second()
00000266 g     O .text	00000014 digital_pin_to_timer_PGM
0000347c g     F .text	0000000e strcpy_P
00000d8e g     F .text	000000cc Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)
000034c4  w      .text	00000000 .hidden exit
00002dd8 g     F .text	0000008e Print::print(long, int)
00003156 g       .text	00000000 .hidden _div
00002f46 g     F .text	00000028 HardwareSerial::read()
00800578 g     O .bss	00000002 __flp
0000317c g       .text	00000044 .hidden __udivmodsi4
00000b9c g     F .text	0000000c hour()
00002140 g     F .text	00000186 Gsm_Ard::_send_tcp_data(char*, unsigned int)
000026a2 g     F .text	0000004e SoftwareSerial::setRX(unsigned char)
00002486 g     F .text	00000002 SoftwareSerial::flush()
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
000034c4 g       .text	00000000 .hidden _exit
00800470 g     O .bss	00000001 timeSynced
00000316  w      .text	00000000 __vector_14
00000316  w      .text	00000000 __vector_10
00002878 g     F .text	00000094 __vector_16
00800100 g       .data	00000000 __data_start
000026f0 g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
00002b78 g     F .text	00000064 __vector_18
00000400 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00800104 g     O .data	00000002 __malloc_margin
00000316  w      .text	00000000 __vector_20
0000290c g     F .text	00000018 millis
0000336a g     F .text	00000112 free
000002f8 g       .text	00000016 .hidden __do_global_ctors



Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	62 c1       	rjmp	.+708    	; 0x2c6 <__dtors_end>
       2:	00 00       	nop
       4:	88 c1       	rjmp	.+784    	; 0x316 <__bad_interrupt>
       6:	00 00       	nop
       8:	86 c1       	rjmp	.+780    	; 0x316 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_3>
      10:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_3>
      14:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__vector_3>
      18:	7e c1       	rjmp	.+764    	; 0x316 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7c c1       	rjmp	.+760    	; 0x316 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7a c1       	rjmp	.+756    	; 0x316 <__bad_interrupt>
      22:	00 00       	nop
      24:	78 c1       	rjmp	.+752    	; 0x316 <__bad_interrupt>
      26:	00 00       	nop
      28:	76 c1       	rjmp	.+748    	; 0x316 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	74 c1       	rjmp	.+744    	; 0x316 <__bad_interrupt>
      2e:	00 00       	nop
      30:	72 c1       	rjmp	.+740    	; 0x316 <__bad_interrupt>
      32:	00 00       	nop
      34:	70 c1       	rjmp	.+736    	; 0x316 <__bad_interrupt>
      36:	00 00       	nop
      38:	6e c1       	rjmp	.+732    	; 0x316 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6c c1       	rjmp	.+728    	; 0x316 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__vector_16>
      44:	68 c1       	rjmp	.+720    	; 0x316 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <__vector_18>
      4c:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <__vector_19>
      50:	62 c1       	rjmp	.+708    	; 0x316 <__bad_interrupt>
      52:	00 00       	nop
      54:	60 c1       	rjmp	.+704    	; 0x316 <__bad_interrupt>
      56:	00 00       	nop
      58:	5e c1       	rjmp	.+700    	; 0x316 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5c c1       	rjmp	.+696    	; 0x316 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5a c1       	rjmp	.+692    	; 0x316 <__bad_interrupt>
      62:	00 00       	nop
      64:	58 c1       	rjmp	.+688    	; 0x316 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
__trampolines_start():
      68:	41 54       	subi	r20, 0x41	; 65
      6a:	2b 43       	sbci	r18, 0x3B	; 59
      6c:	49 50       	subi	r20, 0x09	; 9
      6e:	53 54       	subi	r21, 0x43	; 67
      70:	41 54       	subi	r20, 0x41	; 65
      72:	55 53       	subi	r21, 0x35	; 53
	...

00000075 <AT_CIPCLOSE_OK>:
      75:	43 4c 4f 53 45 20 4f 4b 00                          CLOSE OK.

0000007e <AT_CIPCLOSE>:
      7e:	41 54 2b 43 49 50 43 4c 4f 53 45 00                 AT+CIPCLOSE.

0000008a <AT_ERROR>:
      8a:	45 52 52 4f 52 00                                   ERROR.

00000090 <AT_OK>:
      90:	4f 4b 00                                            OK.

00000093 <AT_CIPSEND_OK>:
      93:	53 45 4e 44 20 4f 4b 00                             SEND OK.

0000009b <AT_CIPSEND_PROMPT>:
      9b:	3e 00                                               >.

0000009d <AT_CIPSEND>:
      9d:	41 54 2b 43 49 50 53 45 4e 44 00                    AT+CIPSEND.

000000a8 <AT_CONNECT_OK>:
      a8:	43 4f 4e 4e 45 43 54 20 4f 4b 00                    CONNECT OK.

000000b3 <AT_CIPSTART_SET>:
      b3:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 54 43 50     AT+CIPSTART="TCP
      c3:	22 2c 22 31 37 38 2e 36 32 2e 36 2e 34 34 22 2c     ","178.62.6.44",
      d3:	37 37 37 37 00                                      7777.

000000d8 <AT_CIPMUX_SET>:
      d8:	41 54 2b 43 49 50 4d 55 58 3d 30 00                 AT+CIPMUX=0.

000000e4 <AT_CIPMUX_1>:
      e4:	2b 43 49 50 4d 55 58 3a 20 31 00                    +CIPMUX: 1.

000000ef <AT_CIPMUX_0>:
      ef:	2b 43 49 50 4d 55 58 3a 20 30 00                    +CIPMUX: 0.

000000fa <AT_CIPMUX_R>:
      fa:	41 54 2b 43 49 50 4d 55 58 3f 00                    AT+CIPMUX?.

00000105 <AT_CIICR>:
     105:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

0000010e <AT_CSTT>:
     10e:	41 54 2b 43 53 54 54 3d 22 69 6e 74 65 72 6e 65     AT+CSTT="interne
     11e:	74 2e 76 6f 64 61 66 6f 6e 65 2e 70 74 22 2c 22     t.vodafone.pt","
     12e:	22 2c 22 22 00                                      ","".

00000133 <AT_SHUT_OK>:
     133:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000013b <AT_CIPSHUT>:
     13b:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000146 <AT_CIPSERVER_SET>:
     146:	41 54 2b 43 49 50 53 45 52 56 45 52 3d 30 00        AT+CIPSERVER=0.

00000155 <AT_CIPSERVER_RESP>:
     155:	2b 43 49 50 53 45 52 56 45 52 3a 20 30 00           +CIPSERVER: 0.

00000163 <AT_CIPSERVER_R>:
     163:	41 54 2b 43 49 50 53 45 52 56 45 52 3f 00           AT+CIPSERVER?.

00000171 <AT_CGDCONT>:
     171:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     181:	22 2c 22 69 6e 74 65 72 6e 65 74 2e 76 6f 64 61     ","internet.voda
     191:	66 6f 6e 65 2e 70 74 22 00                          fone.pt".

0000019a <AT_CIPMODE>:
     19a:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 00              AT+CIPMODE=0.

000001a7 <AT_CIPMODE_1>:
     1a7:	2b 43 49 50 4d 4f 44 45 3a 20 31 00                 +CIPMODE: 1.

000001b3 <AT_CIPMODE_0>:
     1b3:	2b 43 49 50 4d 4f 44 45 3a 20 30 00                 +CIPMODE: 0.

000001bf <AT_CIPMODE_R>:
     1bf:	41 54 2b 43 49 50 4d 4f 44 45 3f 00                 AT+CIPMODE?.

000001cb <AT_CIFSR>:
     1cb:	41 54 2b 43 49 46 53 52 00                          AT+CIFSR.

000001d4 <AT_CGATT_SET_OFF>:
     1d4:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000001df <AT_CGATT_SET_ON>:
     1df:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000001ea <AT_CGATT_1>:
     1ea:	2b 43 47 41 54 54 3a 20 31 00                       +CGATT: 1.

000001f4 <AT_CGATT_0>:
     1f4:	2b 43 47 41 54 54 3a 20 30 00                       +CGATT: 0.

000001fe <AT_CGATT_R>:
     1fe:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

00000208 <AT_CIURC_SET>:
     208:	41 54 2b 43 49 55 52 43 3d 30 00                    AT+CIURC=0.

00000213 <AT_CIURC_1>:
     213:	2b 43 49 55 52 43 3a 20 30 00                       +CIURC: 0.

0000021d <AT_CIURC_0>:
     21d:	2b 43 49 55 52 43 3a 20 31 00                       +CIURC: 1.

00000227 <AT_CIURC_R>:
     227:	41 54 2b 43 49 55 52 43 3f 00                       AT+CIURC?.

00000231 <AT_CPIN_SET>:
     231:	41 54 2b 43 50 49 4e 3d 30 30 34 38 00              AT+CPIN=0048.

0000023e <AT_CPIN_SIM_PIN>:
     23e:	2b 43 50 49 4e 3a 20 53 49 4d 20 50 49 4e 00        +CPIN: SIM PIN.

0000024d <AT_CPIN_READY>:
     24d:	2b 43 50 49 4e 3a 20 52 45 41 44 59 00              +CPIN: READY.

0000025a <AT_CPIN_R>:
     25a:	41 54 2b 43 50 49 4e 3f 00                          AT+CPIN?.

00000263 <AT>:
     263:	41 54 00                                            AT.

00000266 <digital_pin_to_timer_PGM>:
     266:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     276:	00 00 00 00                                         ....

0000027a <digital_pin_to_bit_mask_PGM>:
     27a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     28a:	04 08 10 20                                         ... 

0000028e <digital_pin_to_port_PGM>:
     28e:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     29e:	03 03 03 03                                         ....

000002a2 <port_to_input_PGM>:
     2a2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002ac <port_to_output_PGM>:
     2ac:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002b6 <port_to_mode_PGM>:
     2b6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002c0 <__ctors_start>:
__ctors_start():
     2c0:	f2 03       	fmuls	r23, r18
     2c2:	1c 16       	cp	r1, r28

000002c4 <__ctors_end>:
__dtors_start():
     2c4:	f5 03       	fmuls	r23, r21

000002c6 <__dtors_end>:
__dtors_end():
     2c6:	11 24       	eor	r1, r1
     2c8:	1f be       	out	0x3f, r1	; 63
     2ca:	cf ef       	ldi	r28, 0xFF	; 255
     2cc:	d8 e0       	ldi	r29, 0x08	; 8
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	cd bf       	out	0x3d, r28	; 61

000002d2 <__do_copy_data>:
__do_copy_data():
     2d2:	12 e0       	ldi	r17, 0x02	; 2
     2d4:	a0 e0       	ldi	r26, 0x00	; 0
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	ec ed       	ldi	r30, 0xDC	; 220
     2da:	f4 e3       	ldi	r31, 0x34	; 52
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__do_copy_data+0x10>
     2de:	05 90       	lpm	r0, Z+
     2e0:	0d 92       	st	X+, r0
     2e2:	a2 3c       	cpi	r26, 0xC2	; 194
     2e4:	b1 07       	cpc	r27, r17
     2e6:	d9 f7       	brne	.-10     	; 0x2de <__do_copy_data+0xc>

000002e8 <__do_clear_bss>:
__do_clear_bss():
     2e8:	25 e0       	ldi	r18, 0x05	; 5
     2ea:	a2 ec       	ldi	r26, 0xC2	; 194
     2ec:	b2 e0       	ldi	r27, 0x02	; 2
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <.do_clear_bss_start>

000002f0 <.do_clear_bss_loop>:
     2f0:	1d 92       	st	X+, r1

000002f2 <.do_clear_bss_start>:
     2f2:	aa 37       	cpi	r26, 0x7A	; 122
     2f4:	b2 07       	cpc	r27, r18
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <.do_clear_bss_loop>

000002f8 <__do_global_ctors>:
__do_global_ctors():
     2f8:	11 e0       	ldi	r17, 0x01	; 1
     2fa:	c2 e6       	ldi	r28, 0x62	; 98
     2fc:	d1 e0       	ldi	r29, 0x01	; 1
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <__do_global_ctors+0x10>
     300:	21 97       	sbiw	r28, 0x01	; 1
     302:	fe 01       	movw	r30, r28
     304:	0e 94 17 19 	call	0x322e	; 0x322e <__tablejump2__>
     308:	c0 36       	cpi	r28, 0x60	; 96
     30a:	d1 07       	cpc	r29, r17
     30c:	c9 f7       	brne	.-14     	; 0x300 <__do_global_ctors+0x8>
     30e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <main>
     312:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__do_global_dtors>

00000316 <__bad_interrupt>:
__vector_22():
     316:	74 ce       	rjmp	.-792    	; 0x0 <__vectors>

00000318 <loop>:
loop():
bin/bbda.cpp:86
  } while(!started);

}

void loop()
{
     318:	08 95       	ret

0000031a <syncTimeWithServer()>:
_Z18syncTimeWithServerv():
bin/bbda.cpp:128
  -2    bad http response
  -3    error setting new time
  -4    error detaching gprs
  -10   gprs module not active
*/
int syncTimeWithServer(){
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	2a 97       	sbiw	r28, 0x0a	; 10
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
bin/bbda.cpp:132
  int n;
  unsigned int rsp_len;

  if(gsm.get_gsm_state()!=GSM_IP_STATE || !started){
     332:	83 ec       	ldi	r24, 0xC3	; 195
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	b1 d5       	rcall	.+2914   	; 0xe9a <Gsm_Ard::get_gsm_state()>
     338:	04 97       	sbiw	r24, 0x04	; 4
     33a:	21 f4       	brne	.+8      	; 0x344 <syncTimeWithServer()+0x2a>
     33c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
     340:	81 11       	cpse	r24, r1
     342:	43 c0       	rjmp	.+134    	; 0x3ca <syncTimeWithServer()+0xb0>
bin/bbda.cpp:133
    return 1;
     344:	01 e0       	ldi	r16, 0x01	; 1
     346:	10 e0       	ldi	r17, 0x00	; 0
     348:	5d c0       	rjmp	.+186    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
bin/bbda.cpp:148
  n=gsm.send_socket_msg(msg, REQUEST_TIME_MSG_SIZE, &rsp_len);
  if(n){
    return 3000+n;
  }

  char* rsp = new char[rsp_len];
     34a:	89 85       	ldd	r24, Y+9	; 0x09
     34c:	9a 85       	ldd	r25, Y+10	; 0x0a
     34e:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <operator new[](unsigned int)>
     352:	9e 83       	std	Y+6, r25	; 0x06
     354:	8d 83       	std	Y+5, r24	; 0x05
bin/bbda.cpp:149
  n=gsm.get_socket_rsp(&rsp);
     356:	be 01       	movw	r22, r28
     358:	6b 5f       	subi	r22, 0xFB	; 251
     35a:	7f 4f       	sbci	r23, 0xFF	; 255
     35c:	83 ec       	ldi	r24, 0xC3	; 195
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	a2 d5       	rcall	.+2884   	; 0xea6 <Gsm_Ard::get_socket_rsp(char**)>
bin/bbda.cpp:150
  if(n){
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	21 f0       	breq	.+8      	; 0x36e <syncTimeWithServer()+0x54>
bin/bbda.cpp:151
    return 4000+n;
     366:	8c 01       	movw	r16, r24
     368:	00 56       	subi	r16, 0x60	; 96
     36a:	10 4f       	sbci	r17, 0xF0	; 240
     36c:	4b c0       	rjmp	.+150    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
bin/bbda.cpp:155
  }

  time_t cur_time;
  n=decode_time_rsp_msg(rsp, rsp_len, &cur_time);
     36e:	ae 01       	movw	r20, r28
     370:	4f 5f       	subi	r20, 0xFF	; 255
     372:	5f 4f       	sbci	r21, 0xFF	; 255
     374:	69 85       	ldd	r22, Y+9	; 0x09
     376:	8d 81       	ldd	r24, Y+5	; 0x05
     378:	9e 81       	ldd	r25, Y+6	; 0x06
     37a:	0e 94 af 11 	call	0x235e	; 0x235e <decode_time_rsp_msg(char*, unsigned char, unsigned long*)>
     37e:	8c 01       	movw	r16, r24
bin/bbda.cpp:156
  if(n){
     380:	89 2b       	or	r24, r25
     382:	e9 f4       	brne	.+58     	; 0x3be <syncTimeWithServer()+0xa4>
bin/bbda.cpp:160
    return 5000;
  }

  Serial.print("TIME:");
     384:	6a e0       	ldi	r22, 0x0A	; 10
     386:	71 e0       	ldi	r23, 0x01	; 1
     388:	89 ed       	ldi	r24, 0xD9	; 217
     38a:	94 e0       	ldi	r25, 0x04	; 4
     38c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
bin/bbda.cpp:161
  Serial.println((long)cur_time);
     390:	49 81       	ldd	r20, Y+1	; 0x01
     392:	5a 81       	ldd	r21, Y+2	; 0x02
     394:	6b 81       	ldd	r22, Y+3	; 0x03
     396:	7c 81       	ldd	r23, Y+4	; 0x04
     398:	2a e0       	ldi	r18, 0x0A	; 10
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	89 ed       	ldi	r24, 0xD9	; 217
     39e:	94 e0       	ldi	r25, 0x04	; 4
     3a0:	0e 94 49 17 	call	0x2e92	; 0x2e92 <Print::println(long, int)>
bin/bbda.cpp:163

  setTime(cur_time+3600);
     3a4:	69 81       	ldd	r22, Y+1	; 0x01
     3a6:	7a 81       	ldd	r23, Y+2	; 0x02
     3a8:	8b 81       	ldd	r24, Y+3	; 0x03
     3aa:	9c 81       	ldd	r25, Y+4	; 0x04
     3ac:	60 5f       	subi	r22, 0xF0	; 240
     3ae:	71 4f       	sbci	r23, 0xF1	; 241
     3b0:	8f 4f       	sbci	r24, 0xFF	; 255
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	2f d3       	rcall	.+1630   	; 0xa14 <setTime(unsigned long)>
bin/bbda.cpp:164
  timeSynced = true;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <timeSynced>
     3bc:	23 c0       	rjmp	.+70     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
bin/bbda.cpp:157
    return 5000;
     3be:	08 e8       	ldi	r16, 0x88	; 136
     3c0:	13 e1       	ldi	r17, 0x13	; 19
     3c2:	20 c0       	rjmp	.+64     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
bin/bbda.cpp:139
    return 2;
     3c4:	02 e0       	ldi	r16, 0x02	; 2
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	1d c0       	rjmp	.+58     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
bin/bbda.cpp:136
  char * msg = new char[REQUEST_TIME_MSG_SIZE];
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <operator new[](unsigned int)>
     3d2:	98 87       	std	Y+8, r25	; 0x08
     3d4:	8f 83       	std	Y+7, r24	; 0x07
bin/bbda.cpp:137
  n=get_time_request_msg(&msg);
     3d6:	ce 01       	movw	r24, r28
     3d8:	07 96       	adiw	r24, 0x07	; 7
     3da:	0e 94 98 11 	call	0x2330	; 0x2330 <get_time_request_msg(char**)>
bin/bbda.cpp:138
  if(n){
     3de:	89 2b       	or	r24, r25
     3e0:	89 f7       	brne	.-30     	; 0x3c4 <syncTimeWithServer()+0xaa>
bin/bbda.cpp:143
  n=gsm.send_socket_msg(msg, REQUEST_TIME_MSG_SIZE, &rsp_len);
     3e2:	6f 81       	ldd	r22, Y+7	; 0x07
     3e4:	78 85       	ldd	r23, Y+8	; 0x08
     3e6:	9e 01       	movw	r18, r28
     3e8:	27 5f       	subi	r18, 0xF7	; 247
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	45 e0       	ldi	r20, 0x05	; 5
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	83 ec       	ldi	r24, 0xC3	; 195
     3f2:	92 e0       	ldi	r25, 0x02	; 2
     3f4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)>
bin/bbda.cpp:144
  if(n){
     3f8:	00 97       	sbiw	r24, 0x00	; 0
     3fa:	09 f4       	brne	.+2      	; 0x3fe <syncTimeWithServer()+0xe4>
     3fc:	a6 cf       	rjmp	.-180    	; 0x34a <syncTimeWithServer()+0x30>
bin/bbda.cpp:145
    return 3000+n;
     3fe:	8c 01       	movw	r16, r24
     400:	08 54       	subi	r16, 0x48	; 72
     402:	14 4f       	sbci	r17, 0xF4	; 244
bin/bbda.cpp:167

  return 0;
}
     404:	c8 01       	movw	r24, r16
     406:	2a 96       	adiw	r28, 0x0a	; 10
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <printDigits(int)>:
_Z11printDigitsi():
bin/bbda.cpp:371
  Serial.print(" ");
  Serial.print(year());
  Serial.println();
}

void printDigits(int digits){
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	ec 01       	movw	r28, r24
bin/bbda.cpp:373
  // utility function for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
     422:	6e e0       	ldi	r22, 0x0E	; 14
     424:	71 e0       	ldi	r23, 0x01	; 1
     426:	89 ed       	ldi	r24, 0xD9	; 217
     428:	94 e0       	ldi	r25, 0x04	; 4
     42a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
bin/bbda.cpp:374
  if(digits < 10)
     42e:	ca 30       	cpi	r28, 0x0A	; 10
     430:	d1 05       	cpc	r29, r1
     432:	2c f4       	brge	.+10     	; 0x43e <printDigits(int)+0x22>
bin/bbda.cpp:375
    Serial.print('0');
     434:	60 e3       	ldi	r22, 0x30	; 48
     436:	89 ed       	ldi	r24, 0xD9	; 217
     438:	94 e0       	ldi	r25, 0x04	; 4
     43a:	0e 94 88 16 	call	0x2d10	; 0x2d10 <Print::print(char)>
bin/bbda.cpp:376
  Serial.print(digits);
     43e:	4a e0       	ldi	r20, 0x0A	; 10
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	be 01       	movw	r22, r28
     444:	89 ed       	ldi	r24, 0xD9	; 217
     446:	94 e0       	ldi	r25, 0x04	; 4
bin/bbda.cpp:377
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
bin/bbda.cpp:376
  Serial.print(digits);
     44c:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <Print::print(int, int)>

00000450 <digitalClockDisplay()>:
_Z19digitalClockDisplayv():
bin/bbda.cpp:357
void digitalClockDisplay(){
     450:	a5 d3       	rcall	.+1866   	; 0xb9c <hour()>
     452:	4a e0       	ldi	r20, 0x0A	; 10
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	bc 01       	movw	r22, r24
     458:	89 ed       	ldi	r24, 0xD9	; 217
     45a:	94 e0       	ldi	r25, 0x04	; 4
     45c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <Print::print(int, int)>
     460:	a3 d3       	rcall	.+1862   	; 0xba8 <minute()>
     462:	dc df       	rcall	.-72     	; 0x41c <printDigits(int)>
     464:	a7 d3       	rcall	.+1870   	; 0xbb4 <second()>
     466:	da df       	rcall	.-76     	; 0x41c <printDigits(int)>
     468:	6c e7       	ldi	r22, 0x7C	; 124
     46a:	72 e0       	ldi	r23, 0x02	; 2
     46c:	89 ed       	ldi	r24, 0xD9	; 217
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
     474:	a5 d3       	rcall	.+1866   	; 0xbc0 <day()>
     476:	4a e0       	ldi	r20, 0x0A	; 10
     478:	50 e0       	ldi	r21, 0x00	; 0
     47a:	bc 01       	movw	r22, r24
     47c:	89 ed       	ldi	r24, 0xD9	; 217
     47e:	94 e0       	ldi	r25, 0x04	; 4
     480:	0e 94 33 17 	call	0x2e66	; 0x2e66 <Print::print(int, int)>
     484:	6c e7       	ldi	r22, 0x7C	; 124
     486:	72 e0       	ldi	r23, 0x02	; 2
     488:	89 ed       	ldi	r24, 0xD9	; 217
     48a:	94 e0       	ldi	r25, 0x04	; 4
     48c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
     490:	9d d3       	rcall	.+1850   	; 0xbcc <month()>
     492:	4a e0       	ldi	r20, 0x0A	; 10
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	bc 01       	movw	r22, r24
     498:	89 ed       	ldi	r24, 0xD9	; 217
     49a:	94 e0       	ldi	r25, 0x04	; 4
     49c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <Print::print(int, int)>
     4a0:	6c e7       	ldi	r22, 0x7C	; 124
     4a2:	72 e0       	ldi	r23, 0x02	; 2
     4a4:	89 ed       	ldi	r24, 0xD9	; 217
     4a6:	94 e0       	ldi	r25, 0x04	; 4
     4a8:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
     4ac:	95 d3       	rcall	.+1834   	; 0xbd8 <year()>
     4ae:	4a e0       	ldi	r20, 0x0A	; 10
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	bc 01       	movw	r22, r24
     4b4:	89 ed       	ldi	r24, 0xD9	; 217
     4b6:	94 e0       	ldi	r25, 0x04	; 4
     4b8:	0e 94 33 17 	call	0x2e66	; 0x2e66 <Print::print(int, int)>
     4bc:	89 ed       	ldi	r24, 0xD9	; 217
     4be:	94 e0       	ldi	r25, 0x04	; 4
     4c0:	0c 94 8f 16 	jmp	0x2d1e	; 0x2d1e <Print::println()>

000004c4 <setup>:
setup():
bin/bbda.cpp:32
{
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	cd 5a       	subi	r28, 0xAD	; 173
     4d4:	d1 40       	sbci	r29, 0x01	; 1
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     4e0:	26 e0       	ldi	r18, 0x06	; 6
     4e2:	40 e8       	ldi	r20, 0x80	; 128
     4e4:	55 e2       	ldi	r21, 0x25	; 37
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	89 ed       	ldi	r24, 0xD9	; 217
     4ec:	94 e0       	ldi	r25, 0x04	; 4
     4ee:	0e 94 4c 18 	call	0x3098	; 0x3098 <HardwareSerial::begin(unsigned long, unsigned char)>
bin/bbda.cpp:40
  gsm=Gsm_Ard();
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	a6 d3       	rcall	.+1868   	; 0xc44 <Gsm_Ard::Gsm_Ard()>
     4f8:	fe 01       	movw	r30, r28
     4fa:	31 96       	adiw	r30, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:30
#define DEBUG_STATES

enum GSM_STATE{GSM_OFF_STATE, GSM_ON_STATE, GSM_PIN_STATE, GSM_GPRS_STATE, GSM_IP_STATE, GSM_TCP_STATE};
enum BUFF_STATE{BUFF_READY, BUFF_USED};

class Gsm_Ard{
     4fc:	a3 ec       	ldi	r26, 0xC3	; 195
     4fe:	b2 e0       	ldi	r27, 0x02	; 2
     500:	81 91       	ld	r24, Z+
     502:	8d 93       	st	X+, r24
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	a3 34       	cpi	r26, 0x43	; 67
     508:	b8 07       	cpc	r27, r24
     50a:	d1 f7       	brne	.-12     	; 0x500 <setup+0x3c>
     50c:	de 01       	movw	r26, r28
     50e:	af 57       	subi	r26, 0x7F	; 127
     510:	bf 4f       	sbci	r27, 0xFF	; 255
     512:	e3 e4       	ldi	r30, 0x43	; 67
     514:	f3 e0       	ldi	r31, 0x03	; 3
     516:	8d 91       	ld	r24, X+
     518:	81 93       	st	Z+, r24
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	e3 3c       	cpi	r30, 0xC3	; 195
     51e:	f8 07       	cpc	r31, r24
     520:	d1 f7       	brne	.-12     	; 0x516 <setup+0x52>
     522:	de 01       	movw	r26, r28
     524:	af 5f       	subi	r26, 0xFF	; 255
     526:	be 4f       	sbci	r27, 0xFE	; 254
     528:	e3 ec       	ldi	r30, 0xC3	; 195
     52a:	f3 e0       	ldi	r31, 0x03	; 3
     52c:	8d 91       	ld	r24, X+
     52e:	81 93       	st	Z+, r24
     530:	84 e0       	ldi	r24, 0x04	; 4
     532:	e3 34       	cpi	r30, 0x43	; 67
     534:	f8 07       	cpc	r31, r24
     536:	d1 f7       	brne	.-12     	; 0x52c <setup+0x68>
     538:	cf 57       	subi	r28, 0x7F	; 127
     53a:	de 4f       	sbci	r29, 0xFE	; 254
     53c:	88 81       	ld	r24, Y
     53e:	99 81       	ldd	r25, Y+1	; 0x01
     540:	c1 58       	subi	r28, 0x81	; 129
     542:	d1 40       	sbci	r29, 0x01	; 1
     544:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <gsm+0x181>
     548:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <gsm+0x180>
     54c:	cd 57       	subi	r28, 0x7D	; 125
     54e:	de 4f       	sbci	r29, 0xFE	; 254
     550:	88 81       	ld	r24, Y
     552:	99 81       	ldd	r25, Y+1	; 0x01
     554:	c3 58       	subi	r28, 0x83	; 131
     556:	d1 40       	sbci	r29, 0x01	; 1
     558:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <gsm+0x183>
     55c:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <gsm+0x182>
     560:	cb 57       	subi	r28, 0x7B	; 123
     562:	de 4f       	sbci	r29, 0xFE	; 254
     564:	88 81       	ld	r24, Y
     566:	99 81       	ldd	r25, Y+1	; 0x01
     568:	c5 58       	subi	r28, 0x85	; 133
     56a:	d1 40       	sbci	r29, 0x01	; 1
     56c:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <gsm+0x185>
     570:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <gsm+0x184>
     574:	c9 57       	subi	r28, 0x79	; 121
     576:	de 4f       	sbci	r29, 0xFE	; 254
     578:	88 81       	ld	r24, Y
     57a:	99 81       	ldd	r25, Y+1	; 0x01
     57c:	c7 58       	subi	r28, 0x87	; 135
     57e:	d1 40       	sbci	r29, 0x01	; 1
     580:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <gsm+0x187>
     584:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <gsm+0x186>
     588:	c7 57       	subi	r28, 0x77	; 119
     58a:	de 4f       	sbci	r29, 0xFE	; 254
     58c:	88 81       	ld	r24, Y
     58e:	99 81       	ldd	r25, Y+1	; 0x01
     590:	c9 58       	subi	r28, 0x89	; 137
     592:	d1 40       	sbci	r29, 0x01	; 1
     594:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <gsm+0x189>
     598:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <gsm+0x188>
     59c:	c5 57       	subi	r28, 0x75	; 117
     59e:	de 4f       	sbci	r29, 0xFE	; 254
     5a0:	88 81       	ld	r24, Y
     5a2:	99 81       	ldd	r25, Y+1	; 0x01
     5a4:	cb 58       	subi	r28, 0x8B	; 139
     5a6:	d1 40       	sbci	r29, 0x01	; 1
     5a8:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <gsm+0x18b>
     5ac:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <gsm+0x18a>
     5b0:	c3 57       	subi	r28, 0x73	; 115
     5b2:	de 4f       	sbci	r29, 0xFE	; 254
     5b4:	88 81       	ld	r24, Y
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	cd 58       	subi	r28, 0x8D	; 141
     5ba:	d1 40       	sbci	r29, 0x01	; 1
     5bc:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <gsm+0x18d>
     5c0:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <gsm+0x18c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:34
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
     5c4:	cf 56       	subi	r28, 0x6F	; 111
     5c6:	de 4f       	sbci	r29, 0xFE	; 254
     5c8:	88 81       	ld	r24, Y
     5ca:	99 81       	ldd	r25, Y+1	; 0x01
     5cc:	c1 59       	subi	r28, 0x91	; 145
     5ce:	d1 40       	sbci	r29, 0x01	; 1
     5d0:	90 93 54 04 	sts	0x0454, r25	; 0x800454 <gsm+0x191>
     5d4:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <gsm+0x190>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     5d8:	cd 56       	subi	r28, 0x6D	; 109
     5da:	de 4f       	sbci	r29, 0xFE	; 254
     5dc:	88 81       	ld	r24, Y
     5de:	99 81       	ldd	r25, Y+1	; 0x01
     5e0:	aa 81       	ldd	r26, Y+2	; 0x02
     5e2:	bb 81       	ldd	r27, Y+3	; 0x03
     5e4:	c3 59       	subi	r28, 0x93	; 147
     5e6:	d1 40       	sbci	r29, 0x01	; 1
     5e8:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <gsm+0x192>
     5ec:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <gsm+0x193>
     5f0:	a0 93 57 04 	sts	0x0457, r26	; 0x800457 <gsm+0x194>
     5f4:	b0 93 58 04 	sts	0x0458, r27	; 0x800458 <gsm+0x195>
     5f8:	c9 56       	subi	r28, 0x69	; 105
     5fa:	de 4f       	sbci	r29, 0xFE	; 254
     5fc:	88 81       	ld	r24, Y
     5fe:	99 81       	ldd	r25, Y+1	; 0x01
     600:	aa 81       	ldd	r26, Y+2	; 0x02
     602:	bb 81       	ldd	r27, Y+3	; 0x03
     604:	c7 59       	subi	r28, 0x97	; 151
     606:	d1 40       	sbci	r29, 0x01	; 1
     608:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <gsm+0x196>
     60c:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <gsm+0x197>
     610:	a0 93 5b 04 	sts	0x045B, r26	; 0x80045b <gsm+0x198>
     614:	b0 93 5c 04 	sts	0x045C, r27	; 0x80045c <gsm+0x199>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:50

#ifndef GCC_VERSION
#define GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
#endif

class SoftwareSerial : public Stream
     618:	c5 56       	subi	r28, 0x65	; 101
     61a:	de 4f       	sbci	r29, 0xFE	; 254
     61c:	88 81       	ld	r24, Y
     61e:	cb 59       	subi	r28, 0x9B	; 155
     620:	d1 40       	sbci	r29, 0x01	; 1
     622:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <gsm+0x19a>
     626:	c4 56       	subi	r28, 0x64	; 100
     628:	de 4f       	sbci	r29, 0xFE	; 254
     62a:	88 81       	ld	r24, Y
     62c:	cc 59       	subi	r28, 0x9C	; 156
     62e:	d1 40       	sbci	r29, 0x01	; 1
     630:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <gsm+0x19b>
     634:	c3 56       	subi	r28, 0x63	; 99
     636:	de 4f       	sbci	r29, 0xFE	; 254
     638:	88 81       	ld	r24, Y
     63a:	99 81       	ldd	r25, Y+1	; 0x01
     63c:	cd 59       	subi	r28, 0x9D	; 157
     63e:	d1 40       	sbci	r29, 0x01	; 1
     640:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <gsm+0x19d>
     644:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <gsm+0x19c>
     648:	c1 56       	subi	r28, 0x61	; 97
     64a:	de 4f       	sbci	r29, 0xFE	; 254
     64c:	88 81       	ld	r24, Y
     64e:	cf 59       	subi	r28, 0x9F	; 159
     650:	d1 40       	sbci	r29, 0x01	; 1
     652:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <gsm+0x19e>
     656:	c0 56       	subi	r28, 0x60	; 96
     658:	de 4f       	sbci	r29, 0xFE	; 254
     65a:	88 81       	ld	r24, Y
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	c0 5a       	subi	r28, 0xA0	; 160
     660:	d1 40       	sbci	r29, 0x01	; 1
     662:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <gsm+0x1a0>
     666:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <gsm+0x19f>
     66a:	ce 55       	subi	r28, 0x5E	; 94
     66c:	de 4f       	sbci	r29, 0xFE	; 254
     66e:	88 81       	ld	r24, Y
     670:	99 81       	ldd	r25, Y+1	; 0x01
     672:	c2 5a       	subi	r28, 0xA2	; 162
     674:	d1 40       	sbci	r29, 0x01	; 1
     676:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <gsm+0x1a2>
     67a:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <gsm+0x1a1>
     67e:	cc 55       	subi	r28, 0x5C	; 92
     680:	de 4f       	sbci	r29, 0xFE	; 254
     682:	88 81       	ld	r24, Y
     684:	c4 5a       	subi	r28, 0xA4	; 164
     686:	d1 40       	sbci	r29, 0x01	; 1
     688:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <gsm+0x1a3>
     68c:	cb 55       	subi	r28, 0x5B	; 91
     68e:	de 4f       	sbci	r29, 0xFE	; 254
     690:	88 81       	ld	r24, Y
     692:	99 81       	ldd	r25, Y+1	; 0x01
     694:	c5 5a       	subi	r28, 0xA5	; 165
     696:	d1 40       	sbci	r29, 0x01	; 1
     698:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <gsm+0x1a5>
     69c:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <gsm+0x1a4>
     6a0:	c9 55       	subi	r28, 0x59	; 89
     6a2:	de 4f       	sbci	r29, 0xFE	; 254
     6a4:	88 81       	ld	r24, Y
     6a6:	99 81       	ldd	r25, Y+1	; 0x01
     6a8:	c7 5a       	subi	r28, 0xA7	; 167
     6aa:	d1 40       	sbci	r29, 0x01	; 1
     6ac:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <gsm+0x1a7>
     6b0:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <gsm+0x1a6>
     6b4:	c7 55       	subi	r28, 0x57	; 87
     6b6:	de 4f       	sbci	r29, 0xFE	; 254
     6b8:	88 81       	ld	r24, Y
     6ba:	99 81       	ldd	r25, Y+1	; 0x01
     6bc:	c9 5a       	subi	r28, 0xA9	; 169
     6be:	d1 40       	sbci	r29, 0x01	; 1
     6c0:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <gsm+0x1a9>
     6c4:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <gsm+0x1a8>
     6c8:	c5 55       	subi	r28, 0x55	; 85
     6ca:	de 4f       	sbci	r29, 0xFE	; 254
     6cc:	88 81       	ld	r24, Y
     6ce:	99 81       	ldd	r25, Y+1	; 0x01
     6d0:	cb 5a       	subi	r28, 0xAB	; 171
     6d2:	d1 40       	sbci	r29, 0x01	; 1
     6d4:	90 93 6e 04 	sts	0x046E, r25	; 0x80046e <gsm+0x1ab>
     6d8:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <gsm+0x1aa>
     6dc:	c3 55       	subi	r28, 0x53	; 83
     6de:	de 4f       	sbci	r29, 0xFE	; 254
     6e0:	98 81       	ld	r25, Y
     6e2:	cd 5a       	subi	r28, 0xAD	; 173
     6e4:	d1 40       	sbci	r29, 0x01	; 1
     6e6:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <gsm+0x1ac>
     6ea:	90 fb       	bst	r25, 0
     6ec:	80 f9       	bld	r24, 0
     6ee:	96 95       	lsr	r25
     6f0:	91 70       	andi	r25, 0x01	; 1
     6f2:	90 fb       	bst	r25, 0
     6f4:	81 f9       	bld	r24, 1
     6f6:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <gsm+0x1ac>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:30
     6fa:	ce 01       	movw	r24, r28
     6fc:	81 57       	subi	r24, 0x71	; 113
     6fe:	9e 4f       	sbci	r25, 0xFE	; 254
     700:	0e 94 24 13 	call	0x2648	; 0x2648 <SoftwareSerial::~SoftwareSerial()>
bin/bbda.cpp:43
  Serial.println("GSM Shield init");
     704:	60 e1       	ldi	r22, 0x10	; 16
     706:	71 e0       	ldi	r23, 0x01	; 1
     708:	89 ed       	ldi	r24, 0xD9	; 217
     70a:	94 e0       	ldi	r25, 0x04	; 4
     70c:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
bin/bbda.cpp:46
    n=gsm.init_gsm_module();
     710:	83 ec       	ldi	r24, 0xC3	; 195
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <Gsm_Ard::init_gsm_module()>
     718:	7c 01       	movw	r14, r24
bin/bbda.cpp:47
    if(n){
     71a:	89 2b       	or	r24, r25
     71c:	71 f5       	brne	.+92     	; 0x77a <setup+0x2b6>
bin/bbda.cpp:73
        started=true;
     71e:	11 e0       	ldi	r17, 0x01	; 1
bin/bbda.cpp:55
    n=gsm.attachGPRS();
     720:	83 ec       	ldi	r24, 0xC3	; 195
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	22 d7       	rcall	.+3652   	; 0x156a <Gsm_Ard::attachGPRS()>
     726:	7c 01       	movw	r14, r24
bin/bbda.cpp:56
    if(!n){
     728:	89 2b       	or	r24, r25
     72a:	09 f0       	breq	.+2      	; 0x72e <setup+0x26a>
bin/bbda.cpp:57
      n=syncTimeWithServer();
     72c:	58 c0       	rjmp	.+176    	; 0x7de <setup+0x31a>
     72e:	f5 dd       	rcall	.-1046   	; 0x31a <syncTimeWithServer()>
     730:	7c 01       	movw	r14, r24
bin/bbda.cpp:58
      if(n){
     732:	89 2b       	or	r24, r25
     734:	b1 f1       	breq	.+108    	; 0x7a2 <setup+0x2de>
bin/bbda.cpp:59
        Serial.print("ERROR: SYNC TIME ");
     736:	68 e4       	ldi	r22, 0x48	; 72
     738:	71 e0       	ldi	r23, 0x01	; 1
     73a:	89 ed       	ldi	r24, 0xD9	; 217
     73c:	94 e0       	ldi	r25, 0x04	; 4
     73e:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
bin/bbda.cpp:60
        Serial.println(n);
     742:	4a e0       	ldi	r20, 0x0A	; 10
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	b7 01       	movw	r22, r14
     748:	89 ed       	ldi	r24, 0xD9	; 217
     74a:	94 e0       	ldi	r25, 0x04	; 4
     74c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <Print::println(int, int)>
bin/bbda.cpp:65
      n=gsm.dettachGPRS();
     750:	83 ec       	ldi	r24, 0xC3	; 195
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <Gsm_Ard::dettachGPRS()>
     758:	7c 01       	movw	r14, r24
bin/bbda.cpp:66
      if(n){
     75a:	89 2b       	or	r24, r25
     75c:	29 f1       	breq	.+74     	; 0x7a8 <setup+0x2e4>
bin/bbda.cpp:67
        Serial.print("ERROR: DETTACH GPRS ");
     75e:	6a e5       	ldi	r22, 0x5A	; 90
     760:	71 e0       	ldi	r23, 0x01	; 1
bin/bbda.cpp:77
      Serial.print("ERROR: COULD NOT ATTACH GPRS ");
     762:	89 ed       	ldi	r24, 0xD9	; 217
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
bin/bbda.cpp:78
      Serial.println(n);
     76a:	4a e0       	ldi	r20, 0x0A	; 10
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	b7 01       	movw	r22, r14
     770:	89 ed       	ldi	r24, 0xD9	; 217
     772:	94 e0       	ldi	r25, 0x04	; 4
     774:	0e 94 39 17 	call	0x2e72	; 0x2e72 <Print::println(int, int)>
     778:	20 c0       	rjmp	.+64     	; 0x7ba <setup+0x2f6>
bin/bbda.cpp:48
      Serial.print("ERROR: COULD NOT INITIALIZE GSM MODULE ");
     77a:	60 e2       	ldi	r22, 0x20	; 32
     77c:	71 e0       	ldi	r23, 0x01	; 1
     77e:	89 ed       	ldi	r24, 0xD9	; 217
     780:	94 e0       	ldi	r25, 0x04	; 4
     782:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
bin/bbda.cpp:49
      Serial.println(n);
     786:	4a e0       	ldi	r20, 0x0A	; 10
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	b7 01       	movw	r22, r14
     78c:	89 ed       	ldi	r24, 0xD9	; 217
     78e:	94 e0       	ldi	r25, 0x04	; 4
     790:	0e 94 39 17 	call	0x2e72	; 0x2e72 <Print::println(int, int)>
bin/bbda.cpp:50
      delay(10000);
     794:	60 e1       	ldi	r22, 0x10	; 16
     796:	77 e2       	ldi	r23, 0x27	; 39
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 b7 14 	call	0x296e	; 0x296e <delay>
     7a0:	b7 cf       	rjmp	.-146    	; 0x710 <setup+0x24c>
bin/bbda.cpp:63
        started=true;
     7a2:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <__data_end>
     7a6:	d4 cf       	rjmp	.-88     	; 0x750 <setup+0x28c>
bin/bbda.cpp:71
        Serial.println("CLOCK");
     7a8:	6f e6       	ldi	r22, 0x6F	; 111
     7aa:	71 e0       	ldi	r23, 0x01	; 1
     7ac:	89 ed       	ldi	r24, 0xD9	; 217
     7ae:	94 e0       	ldi	r25, 0x04	; 4
     7b0:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
bin/bbda.cpp:72
        digitalClockDisplay();
     7b4:	4d de       	rcall	.-870    	; 0x450 <digitalClockDisplay()>
bin/bbda.cpp:73
        started=true;
     7b6:	10 93 c2 02 	sts	0x02C2, r17	; 0x8002c2 <__data_end>
bin/bbda.cpp:81
  } while(!started);
     7ba:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
     7be:	88 23       	and	r24, r24
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <setup+0x300>
     7c2:	ae cf       	rjmp	.-164    	; 0x720 <setup+0x25c>
bin/bbda.cpp:83
}
     7c4:	c3 55       	subi	r28, 0x53	; 83
     7c6:	de 4f       	sbci	r29, 0xFE	; 254
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	08 95       	ret
bin/bbda.cpp:77
      Serial.print("ERROR: COULD NOT ATTACH GPRS ");
     7de:	65 e7       	ldi	r22, 0x75	; 117
     7e0:	71 e0       	ldi	r23, 0x01	; 1
     7e2:	bf cf       	rjmp	.-130    	; 0x762 <setup+0x29e>

000007e4 <_GLOBAL__sub_I_timeSynced>:
_GLOBAL__sub_I_timeSynced():
bin/bbda.cpp:23
Gsm_Ard gsm;
     7e4:	83 ec       	ldi	r24, 0xC3	; 195
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	2d c2       	rjmp	.+1114   	; 0xc44 <Gsm_Ard::Gsm_Ard()>

000007ea <_GLOBAL__sub_D_timeSynced>:
_GLOBAL__sub_D_timeSynced():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:30
     7ea:	81 e5       	ldi	r24, 0x51	; 81
     7ec:	94 e0       	ldi	r25, 0x04	; 4
     7ee:	0c 94 24 13 	jmp	0x2648	; 0x2648 <SoftwareSerial::~SoftwareSerial()>

000007f2 <breakTime(unsigned long, tmElements_t&)>:
_Z9breakTimemR12tmElements_t():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:151
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
     7f2:	6f 92       	push	r6
     7f4:	7f 92       	push	r7
     7f6:	8f 92       	push	r8
     7f8:	9f 92       	push	r9
     7fa:	af 92       	push	r10
     7fc:	bf 92       	push	r11
     7fe:	cf 92       	push	r12
     800:	df 92       	push	r13
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	6b 01       	movw	r12, r22
     810:	7c 01       	movw	r14, r24
     812:	ea 01       	movw	r28, r20
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:162
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     814:	8c e3       	ldi	r24, 0x3C	; 60
     816:	88 2e       	mov	r8, r24
     818:	91 2c       	mov	r9, r1
     81a:	a1 2c       	mov	r10, r1
     81c:	b1 2c       	mov	r11, r1
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	a5 01       	movw	r20, r10
     824:	94 01       	movw	r18, r8
     826:	0e 94 be 18 	call	0x317c	; 0x317c <__udivmodsi4>
     82a:	68 83       	st	Y, r22
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:164
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     82c:	ca 01       	movw	r24, r20
     82e:	b9 01       	movw	r22, r18
     830:	a5 01       	movw	r20, r10
     832:	94 01       	movw	r18, r8
     834:	0e 94 be 18 	call	0x317c	; 0x317c <__udivmodsi4>
     838:	69 83       	std	Y+1, r22	; 0x01
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:165
  time /= 60; // now it is hours
     83a:	c7 01       	movw	r24, r14
     83c:	b6 01       	movw	r22, r12
     83e:	20 e1       	ldi	r18, 0x10	; 16
     840:	3e e0       	ldi	r19, 0x0E	; 14
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	0e 94 be 18 	call	0x317c	; 0x317c <__udivmodsi4>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:166
  tm.Hour = time % 24;
     84a:	ca 01       	movw	r24, r20
     84c:	b9 01       	movw	r22, r18
     84e:	28 e1       	ldi	r18, 0x18	; 24
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	0e 94 be 18 	call	0x317c	; 0x317c <__udivmodsi4>
     85a:	6a 83       	std	Y+2, r22	; 0x02
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:167
  time /= 24; // now it is days
     85c:	c7 01       	movw	r24, r14
     85e:	b6 01       	movw	r22, r12
     860:	20 e8       	ldi	r18, 0x80	; 128
     862:	31 e5       	ldi	r19, 0x51	; 81
     864:	41 e0       	ldi	r20, 0x01	; 1
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	0e 94 be 18 	call	0x317c	; 0x317c <__udivmodsi4>
     86c:	69 01       	movw	r12, r18
     86e:	7a 01       	movw	r14, r20
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:168
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     870:	ca 01       	movw	r24, r20
     872:	b9 01       	movw	r22, r18
     874:	6c 5f       	subi	r22, 0xFC	; 252
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	8f 4f       	sbci	r24, 0xFF	; 255
     87a:	9f 4f       	sbci	r25, 0xFF	; 255
     87c:	27 e0       	ldi	r18, 0x07	; 7
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	0e 94 be 18 	call	0x317c	; 0x317c <__udivmodsi4>
     888:	6f 5f       	subi	r22, 0xFF	; 255
     88a:	6b 83       	std	Y+3, r22	; 0x03
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:171
  
  year = 0;  
  days = 0;
     88c:	81 2c       	mov	r8, r1
     88e:	91 2c       	mov	r9, r1
     890:	54 01       	movw	r10, r8
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:170
  year = 0;  
     892:	40 e0       	ldi	r20, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:172
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     894:	94 e6       	ldi	r25, 0x64	; 100
     896:	69 2e       	mov	r6, r25
     898:	71 2c       	mov	r7, r1
     89a:	00 e9       	ldi	r16, 0x90	; 144
     89c:	11 e0       	ldi	r17, 0x01	; 1
     89e:	24 2f       	mov	r18, r20
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	2e 54       	subi	r18, 0x4E	; 78
     8a4:	38 4f       	sbci	r19, 0xF8	; 248
     8a6:	f9 01       	movw	r30, r18
     8a8:	e3 70       	andi	r30, 0x03	; 3
     8aa:	ff 27       	eor	r31, r31
     8ac:	30 97       	sbiw	r30, 0x00	; 0
     8ae:	f9 f4       	brne	.+62     	; 0x8ee <breakTime(unsigned long, tmElements_t&)+0xfc>
     8b0:	c9 01       	movw	r24, r18
     8b2:	b3 01       	movw	r22, r6
     8b4:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
     8b8:	89 2b       	or	r24, r25
     8ba:	31 f4       	brne	.+12     	; 0x8c8 <breakTime(unsigned long, tmElements_t&)+0xd6>
     8bc:	c9 01       	movw	r24, r18
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
     8c4:	89 2b       	or	r24, r25
     8c6:	99 f4       	brne	.+38     	; 0x8ee <breakTime(unsigned long, tmElements_t&)+0xfc>
     8c8:	8e e6       	ldi	r24, 0x6E	; 110
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	a0 e0       	ldi	r26, 0x00	; 0
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	88 0e       	add	r8, r24
     8d2:	99 1e       	adc	r9, r25
     8d4:	aa 1e       	adc	r10, r26
     8d6:	bb 1e       	adc	r11, r27
     8d8:	d5 01       	movw	r26, r10
     8da:	c4 01       	movw	r24, r8
     8dc:	aa 27       	eor	r26, r26
     8de:	bb 27       	eor	r27, r27
     8e0:	c8 16       	cp	r12, r24
     8e2:	d9 06       	cpc	r13, r25
     8e4:	ea 06       	cpc	r14, r26
     8e6:	fb 06       	cpc	r15, r27
     8e8:	38 f0       	brcs	.+14     	; 0x8f8 <breakTime(unsigned long, tmElements_t&)+0x106>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:173
    year++;
     8ea:	4f 5f       	subi	r20, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:172
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     8ec:	d8 cf       	rjmp	.-80     	; 0x89e <breakTime(unsigned long, tmElements_t&)+0xac>
     8ee:	8d e6       	ldi	r24, 0x6D	; 109
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	a0 e0       	ldi	r26, 0x00	; 0
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ec cf       	rjmp	.-40     	; 0x8d0 <breakTime(unsigned long, tmElements_t&)+0xde>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:175
  }
  tm.Year = year; // year is offset from 1970 
     8f8:	4e 83       	std	Y+6, r20	; 0x06
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:177
  
  days -= LEAP_YEAR(year) ? 366 : 365;
     8fa:	30 97       	sbiw	r30, 0x00	; 0
     8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
     8fe:	4c c0       	rjmp	.+152    	; 0x998 <__stack+0x99>
     900:	c9 01       	movw	r24, r18
     902:	64 e6       	ldi	r22, 0x64	; 100
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
     90a:	89 2b       	or	r24, r25
     90c:	39 f4       	brne	.+14     	; 0x91c <__stack+0x1d>
     90e:	c9 01       	movw	r24, r18
     910:	60 e9       	ldi	r22, 0x90	; 144
     912:	71 e0       	ldi	r23, 0x01	; 1
     914:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
     918:	89 2b       	or	r24, r25
     91a:	f1 f5       	brne	.+124    	; 0x998 <__stack+0x99>
     91c:	8e e6       	ldi	r24, 0x6E	; 110
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	a0 e0       	ldi	r26, 0x00	; 0
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	88 1a       	sub	r8, r24
     926:	99 0a       	sbc	r9, r25
     928:	aa 0a       	sbc	r10, r26
     92a:	bb 0a       	sbc	r11, r27
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:178
  time  -= days; // now it is days in this year, starting at 0
     92c:	c8 18       	sub	r12, r8
     92e:	d9 08       	sbc	r13, r9
     930:	ea 08       	sbc	r14, r10
     932:	fb 08       	sbc	r15, r11
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:185
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
     934:	c9 01       	movw	r24, r18
     936:	64 e6       	ldi	r22, 0x64	; 100
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
     93e:	8c 01       	movw	r16, r24
     940:	c9 01       	movw	r24, r18
     942:	60 e9       	ldi	r22, 0x90	; 144
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
     94a:	a3 e9       	ldi	r26, 0x93	; 147
     94c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:183
  for (month=0; month<12; month++) {
     94e:	20 e0       	ldi	r18, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:191
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
     950:	4c 91       	ld	r20, X
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:194
    }
    
    if (time >= monthLength) {
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	11 96       	adiw	r26, 0x01	; 1
     95a:	c4 16       	cp	r12, r20
     95c:	d5 06       	cpc	r13, r21
     95e:	e6 06       	cpc	r14, r22
     960:	f7 06       	cpc	r15, r23
     962:	38 f0       	brcs	.+14     	; 0x972 <__stack+0x73>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:195
      time -= monthLength;
     964:	c4 1a       	sub	r12, r20
     966:	d5 0a       	sbc	r13, r21
     968:	e6 0a       	sbc	r14, r22
     96a:	f7 0a       	sbc	r15, r23
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:183
  for (month=0; month<12; month++) {
     96c:	2f 5f       	subi	r18, 0xFF	; 255
     96e:	2c 30       	cpi	r18, 0x0C	; 12
     970:	c1 f4       	brne	.+48     	; 0x9a2 <__stack+0xa3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:200
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
     972:	2f 5f       	subi	r18, 0xFF	; 255
     974:	2d 83       	std	Y+5, r18	; 0x05
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:201
  tm.Day = time + 1;     // day of month
     976:	c3 94       	inc	r12
     978:	cc 82       	std	Y+4, r12	; 0x04
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:202
}
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	bf 90       	pop	r11
     98c:	af 90       	pop	r10
     98e:	9f 90       	pop	r9
     990:	8f 90       	pop	r8
     992:	7f 90       	pop	r7
     994:	6f 90       	pop	r6
     996:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:177
  days -= LEAP_YEAR(year) ? 366 : 365;
     998:	8d e6       	ldi	r24, 0x6D	; 109
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	a0 e0       	ldi	r26, 0x00	; 0
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	c1 cf       	rjmp	.-126    	; 0x924 <__stack+0x25>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:184
    if (month==1) { // february
     9a2:	21 30       	cpi	r18, 0x01	; 1
     9a4:	a9 f6       	brne	.-86     	; 0x950 <__stack+0x51>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:185
      if (LEAP_YEAR(year)) {
     9a6:	30 97       	sbiw	r30, 0x00	; 0
     9a8:	39 f4       	brne	.+14     	; 0x9b8 <__stack+0xb9>
     9aa:	01 15       	cp	r16, r1
     9ac:	11 05       	cpc	r17, r1
     9ae:	11 f4       	brne	.+4      	; 0x9b4 <__stack+0xb5>
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	11 f4       	brne	.+4      	; 0x9b8 <__stack+0xb9>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:186
        monthLength=29;
     9b4:	4d e1       	ldi	r20, 0x1D	; 29
     9b6:	cd cf       	rjmp	.-102    	; 0x952 <__stack+0x53>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:188
        monthLength=28;
     9b8:	4c e1       	ldi	r20, 0x1C	; 28
     9ba:	cb cf       	rjmp	.-106    	; 0x952 <__stack+0x53>

000009bc <refreshCache(unsigned long)>:
_Z12refreshCachem():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:42
void refreshCache(time_t t) {
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	6b 01       	movw	r12, r22
     9c6:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:43
  if (t != cacheTime) {
     9c8:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <cacheTime>
     9cc:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <cacheTime+0x1>
     9d0:	a0 91 83 04 	lds	r26, 0x0483	; 0x800483 <cacheTime+0x2>
     9d4:	b0 91 84 04 	lds	r27, 0x0484	; 0x800484 <cacheTime+0x3>
     9d8:	8c 15       	cp	r24, r12
     9da:	9d 05       	cpc	r25, r13
     9dc:	ae 05       	cpc	r26, r14
     9de:	bf 05       	cpc	r27, r15
     9e0:	69 f0       	breq	.+26     	; 0x9fc <refreshCache(unsigned long)+0x40>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:44
    breakTime(t, tm); 
     9e2:	45 e8       	ldi	r20, 0x85	; 133
     9e4:	54 e0       	ldi	r21, 0x04	; 4
     9e6:	c7 01       	movw	r24, r14
     9e8:	b6 01       	movw	r22, r12
     9ea:	03 df       	rcall	.-506    	; 0x7f2 <breakTime(unsigned long, tmElements_t&)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:45
    cacheTime = t; 
     9ec:	c0 92 81 04 	sts	0x0481, r12	; 0x800481 <cacheTime>
     9f0:	d0 92 82 04 	sts	0x0482, r13	; 0x800482 <cacheTime+0x1>
     9f4:	e0 92 83 04 	sts	0x0483, r14	; 0x800483 <cacheTime+0x2>
     9f8:	f0 92 84 04 	sts	0x0484, r15	; 0x800484 <cacheTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:47
}
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	08 95       	ret

00000a06 <year(unsigned long)>:
_Z4yearm():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:137
int year(time_t t) { // the year for the given time
     a06:	da df       	rcall	.-76     	; 0x9bc <refreshCache(unsigned long)>
     a08:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <tm+0x6>
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	8e 54       	subi	r24, 0x4E	; 78
     a10:	98 4f       	sbci	r25, 0xF8	; 248
     a12:	08 95       	ret

00000a14 <setTime(unsigned long)>:
_Z7setTimem():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:274
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:280
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
     a18:	60 93 7d 04 	sts	0x047D, r22	; 0x80047d <sysTime>
     a1c:	70 93 7e 04 	sts	0x047E, r23	; 0x80047e <sysTime+0x1>
     a20:	80 93 7f 04 	sts	0x047F, r24	; 0x80047f <sysTime+0x2>
     a24:	90 93 80 04 	sts	0x0480, r25	; 0x800480 <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:281
  nextSyncTime = (uint32_t)t + syncInterval;
     a28:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <syncInterval>
     a2c:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <syncInterval+0x1>
     a30:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <syncInterval+0x2>
     a34:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <syncInterval+0x3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	80 0f       	add	r24, r16
     a3e:	91 1f       	adc	r25, r17
     a40:	a2 1f       	adc	r26, r18
     a42:	b3 1f       	adc	r27, r19
     a44:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <nextSyncTime>
     a48:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <nextSyncTime+0x1>
     a4c:	a0 93 77 04 	sts	0x0477, r26	; 0x800477 <nextSyncTime+0x2>
     a50:	b0 93 78 04 	sts	0x0478, r27	; 0x800478 <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:282
  Status = timeSet;
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <Status+0x1>
     a5c:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <Status>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:283
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     a60:	0e 94 86 14 	call	0x290c	; 0x290c <millis>
     a64:	60 93 79 04 	sts	0x0479, r22	; 0x800479 <prevMillis>
     a68:	70 93 7a 04 	sts	0x047A, r23	; 0x80047a <prevMillis+0x1>
     a6c:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <prevMillis+0x2>
     a70:	90 93 7c 04 	sts	0x047C, r25	; 0x80047c <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:284
} 
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <now()>:
_Z3nowv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:250
time_t now() {
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     a86:	0e 94 86 14 	call	0x290c	; 0x290c <millis>
     a8a:	c0 90 79 04 	lds	r12, 0x0479	; 0x800479 <prevMillis>
     a8e:	d0 90 7a 04 	lds	r13, 0x047A	; 0x80047a <prevMillis+0x1>
     a92:	e0 90 7b 04 	lds	r14, 0x047B	; 0x80047b <prevMillis+0x2>
     a96:	f0 90 7c 04 	lds	r15, 0x047C	; 0x80047c <prevMillis+0x3>
     a9a:	8b 01       	movw	r16, r22
     a9c:	9c 01       	movw	r18, r24
     a9e:	0c 19       	sub	r16, r12
     aa0:	1d 09       	sbc	r17, r13
     aa2:	2e 09       	sbc	r18, r14
     aa4:	3f 09       	sbc	r19, r15
     aa6:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <sysTime>
     aaa:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <sysTime+0x1>
     aae:	a0 91 7f 04 	lds	r26, 0x047F	; 0x80047f <sysTime+0x2>
     ab2:	b0 91 80 04 	lds	r27, 0x0480	; 0x800480 <sysTime+0x3>
     ab6:	08 3e       	cpi	r16, 0xE8	; 232
     ab8:	13 40       	sbci	r17, 0x03	; 3
     aba:	21 05       	cpc	r18, r1
     abc:	31 05       	cpc	r19, r1
     abe:	d0 f0       	brcs	.+52     	; 0xaf4 <now()+0x7a>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:254
    sysTime++;
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	a1 1d       	adc	r26, r1
     ac4:	b1 1d       	adc	r27, r1
     ac6:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <sysTime>
     aca:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <sysTime+0x1>
     ace:	a0 93 7f 04 	sts	0x047F, r26	; 0x80047f <sysTime+0x2>
     ad2:	b0 93 80 04 	sts	0x0480, r27	; 0x800480 <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:255
    prevMillis += 1000;	
     ad6:	b7 01       	movw	r22, r14
     ad8:	a6 01       	movw	r20, r12
     ada:	48 51       	subi	r20, 0x18	; 24
     adc:	5c 4f       	sbci	r21, 0xFC	; 252
     ade:	6f 4f       	sbci	r22, 0xFF	; 255
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	40 93 79 04 	sts	0x0479, r20	; 0x800479 <prevMillis>
     ae6:	50 93 7a 04 	sts	0x047A, r21	; 0x80047a <prevMillis+0x1>
     aea:	60 93 7b 04 	sts	0x047B, r22	; 0x80047b <prevMillis+0x2>
     aee:	70 93 7c 04 	sts	0x047C, r23	; 0x80047c <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     af2:	c9 cf       	rjmp	.-110    	; 0xa86 <now()+0xc>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:260
  if (nextSyncTime <= sysTime) {
     af4:	40 91 75 04 	lds	r20, 0x0475	; 0x800475 <nextSyncTime>
     af8:	50 91 76 04 	lds	r21, 0x0476	; 0x800476 <nextSyncTime+0x1>
     afc:	60 91 77 04 	lds	r22, 0x0477	; 0x800477 <nextSyncTime+0x2>
     b00:	70 91 78 04 	lds	r23, 0x0478	; 0x800478 <nextSyncTime+0x3>
     b04:	84 17       	cp	r24, r20
     b06:	95 07       	cpc	r25, r21
     b08:	a6 07       	cpc	r26, r22
     b0a:	b7 07       	cpc	r27, r23
     b0c:	68 f0       	brcs	.+26     	; 0xb28 <now()+0xae>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:261
    if (getTimePtr != 0) {
     b0e:	e0 91 71 04 	lds	r30, 0x0471	; 0x800471 <getTimePtr>
     b12:	f0 91 72 04 	lds	r31, 0x0472	; 0x800472 <getTimePtr+0x1>
     b16:	30 97       	sbiw	r30, 0x00	; 0
     b18:	39 f0       	breq	.+14     	; 0xb28 <now()+0xae>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:262
      time_t t = getTimePtr();
     b1a:	09 95       	icall
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:263
      if (t != 0) {
     b1c:	61 15       	cp	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	81 05       	cpc	r24, r1
     b22:	91 05       	cpc	r25, r1
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:264
        setTime(t);
     b24:	81 f0       	breq	.+32     	; 0xb46 <now()+0xcc>
     b26:	76 df       	rcall	.-276    	; 0xa14 <setTime(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:271
  return (time_t)sysTime;
     b28:	60 91 7d 04 	lds	r22, 0x047D	; 0x80047d <sysTime>
     b2c:	70 91 7e 04 	lds	r23, 0x047E	; 0x80047e <sysTime+0x1>
     b30:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <sysTime+0x2>
     b34:	90 91 80 04 	lds	r25, 0x0480	; 0x800480 <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:272
}
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	df 90       	pop	r13
     b42:	cf 90       	pop	r12
     b44:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:266
        nextSyncTime = sysTime + syncInterval;
     b46:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <sysTime>
     b4a:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <sysTime+0x1>
     b4e:	a0 91 7f 04 	lds	r26, 0x047F	; 0x80047f <sysTime+0x2>
     b52:	b0 91 80 04 	lds	r27, 0x0480	; 0x800480 <sysTime+0x3>
     b56:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <syncInterval>
     b5a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <syncInterval+0x1>
     b5e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <syncInterval+0x2>
     b62:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <syncInterval+0x3>
     b66:	84 0f       	add	r24, r20
     b68:	95 1f       	adc	r25, r21
     b6a:	a6 1f       	adc	r26, r22
     b6c:	b7 1f       	adc	r27, r23
     b6e:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <nextSyncTime>
     b72:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <nextSyncTime+0x1>
     b76:	a0 93 77 04 	sts	0x0477, r26	; 0x800477 <nextSyncTime+0x2>
     b7a:	b0 93 78 04 	sts	0x0478, r27	; 0x800478 <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:267
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	20 91 73 04 	lds	r18, 0x0473	; 0x800473 <Status>
     b86:	30 91 74 04 	lds	r19, 0x0474	; 0x800474 <Status+0x1>
     b8a:	23 2b       	or	r18, r19
     b8c:	11 f4       	brne	.+4      	; 0xb92 <now()+0x118>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	90 93 74 04 	sts	0x0474, r25	; 0x800474 <Status+0x1>
     b96:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <Status>
     b9a:	c6 cf       	rjmp	.-116    	; 0xb28 <now()+0xae>

00000b9c <hour()>:
_Z4hourv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:54
  refreshCache(t);
     b9c:	6e df       	rcall	.-292    	; 0xa7a <now()>
     b9e:	0e df       	rcall	.-484    	; 0x9bc <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:55
  return tm.Hour;  
     ba0:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <tm+0x2>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:51
}
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	08 95       	ret

00000ba8 <minute()>:
_Z6minutev():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:93
  refreshCache(t);
     ba8:	68 df       	rcall	.-304    	; 0xa7a <now()>
     baa:	08 df       	rcall	.-496    	; 0x9bc <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:94
  return tm.Minute;  
     bac:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <tm+0x1>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:90
}
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	08 95       	ret

00000bb4 <second()>:
_Z6secondv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:102
  refreshCache(t);
     bb4:	62 df       	rcall	.-316    	; 0xa7a <now()>
     bb6:	02 df       	rcall	.-508    	; 0x9bc <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:103
  return tm.Second;
     bb8:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <tm>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:99
}
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	08 95       	ret

00000bc0 <day()>:
_Z3dayv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:111
  refreshCache(t);
     bc0:	5c df       	rcall	.-328    	; 0xa7a <now()>
     bc2:	fc de       	rcall	.-520    	; 0x9bc <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:112
  return tm.Day;
     bc4:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <tm+0x4>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:108
}
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	08 95       	ret

00000bcc <month()>:
_Z5monthv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:129
  refreshCache(t);
     bcc:	56 df       	rcall	.-340    	; 0xa7a <now()>
     bce:	f6 de       	rcall	.-532    	; 0x9bc <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:130
  return tm.Month;
     bd0:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <tm+0x5>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:126
}
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	08 95       	ret

00000bd8 <year()>:
_Z4yearv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:134
  return year(now()); 
     bd8:	50 df       	rcall	.-352    	; 0xa7a <now()>
     bda:	15 cf       	rjmp	.-470    	; 0xa06 <year(unsigned long)>

00000bdc <Gsm_Ard::_clear_recv_buff()>:
_ZN7Gsm_Ard16_clear_recv_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:865
  _recv_buff_state=BUFF_USED;
  return 0;
}

void Gsm_Ard::_clear_recv_buff(){
  _recv_buff_idx=0;
     bdc:	fc 01       	movw	r30, r24
     bde:	e0 58       	subi	r30, 0x80	; 128
     be0:	fe 4f       	sbci	r31, 0xFE	; 254
     be2:	11 82       	std	Z+1, r1	; 0x01
     be4:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:866
  memset(_recv_buff, 0, RECV_BUFF_LEN);
     be6:	20 e8       	ldi	r18, 0x80	; 128
     be8:	fc 01       	movw	r30, r24
     bea:	11 92       	st	Z+, r1
     bec:	2a 95       	dec	r18
     bee:	e9 f7       	brne	.-6      	; 0xbea <Gsm_Ard::_clear_recv_buff()+0xe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:867
  _recv_buff_state=BUFF_READY;
     bf0:	88 57       	subi	r24, 0x78	; 120
     bf2:	9e 4f       	sbci	r25, 0xFE	; 254
     bf4:	fc 01       	movw	r30, r24
     bf6:	11 82       	std	Z+1, r1	; 0x01
     bf8:	10 82       	st	Z, r1
     bfa:	08 95       	ret

00000bfc <Gsm_Ard::_clear_rsp_buff()>:
_ZN7Gsm_Ard15_clear_rsp_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:871
}

void Gsm_Ard::_clear_rsp_buff(){
  _rsp_buff_idx=0;
     bfc:	fc 01       	movw	r30, r24
     bfe:	ee 57       	subi	r30, 0x7E	; 126
     c00:	fe 4f       	sbci	r31, 0xFE	; 254
     c02:	11 82       	std	Z+1, r1	; 0x01
     c04:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:872
  memset(_rsp_buff, 0, RSP_BUFF_LEN);
     c06:	e2 50       	subi	r30, 0x02	; 2
     c08:	f1 40       	sbci	r31, 0x01	; 1
     c0a:	20 e8       	ldi	r18, 0x80	; 128
     c0c:	df 01       	movw	r26, r30
     c0e:	1d 92       	st	X+, r1
     c10:	2a 95       	dec	r18
     c12:	e9 f7       	brne	.-6      	; 0xc0e <Gsm_Ard::_clear_rsp_buff()+0x12>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:873
  _rsp_buff_state=BUFF_READY;
     c14:	86 57       	subi	r24, 0x76	; 118
     c16:	9e 4f       	sbci	r25, 0xFE	; 254
     c18:	fc 01       	movw	r30, r24
     c1a:	11 82       	std	Z+1, r1	; 0x01
     c1c:	10 82       	st	Z, r1
     c1e:	08 95       	ret

00000c20 <Gsm_Ard::_clear_sock_buff()>:
_ZN7Gsm_Ard16_clear_sock_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:877
}

void Gsm_Ard::_clear_sock_buff(){
  _sock_buff_idx=0;
     c20:	fc 01       	movw	r30, r24
     c22:	ec 57       	subi	r30, 0x7C	; 124
     c24:	fe 4f       	sbci	r31, 0xFE	; 254
     c26:	11 82       	std	Z+1, r1	; 0x01
     c28:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:878
  memset(_sock_buff, 0, SOCK_BUFF_LEN);
     c2a:	e4 58       	subi	r30, 0x84	; 132
     c2c:	f1 09       	sbc	r31, r1
     c2e:	20 e8       	ldi	r18, 0x80	; 128
     c30:	df 01       	movw	r26, r30
     c32:	1d 92       	st	X+, r1
     c34:	2a 95       	dec	r18
     c36:	e9 f7       	brne	.-6      	; 0xc32 <Gsm_Ard::_clear_sock_buff()+0x12>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:879
  _sock_buff_state=BUFF_READY;
     c38:	84 57       	subi	r24, 0x74	; 116
     c3a:	9e 4f       	sbci	r25, 0xFE	; 254
     c3c:	fc 01       	movw	r30, r24
     c3e:	11 82       	std	Z+1, r1	; 0x01
     c40:	10 82       	st	Z, r1
     c42:	08 95       	ret

00000c44 <Gsm_Ard::Gsm_Ard()>:
_ZN7Gsm_ArdC2Ev():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:67
Gsm_Ard::Gsm_Ard(){
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	ec 01       	movw	r28, r24
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	48 e0       	ldi	r20, 0x08	; 8
     c4e:	67 e0       	ldi	r22, 0x07	; 7
     c50:	82 57       	subi	r24, 0x72	; 114
     c52:	9e 4f       	sbci	r25, 0xFE	; 254
     c54:	0e 94 78 13 	call	0x26f0	; 0x26f0 <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:68
  _gsm_state=GSM_OFF_STATE;
     c58:	fe 01       	movw	r30, r28
     c5a:	ea 57       	subi	r30, 0x7A	; 122
     c5c:	fe 4f       	sbci	r31, 0xFE	; 254
     c5e:	11 82       	std	Z+1, r1	; 0x01
     c60:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:69
  _clear_recv_buff();
     c62:	ce 01       	movw	r24, r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:70
  _clear_rsp_buff();
     c64:	bb df       	rcall	.-138    	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
     c66:	ce 01       	movw	r24, r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:71
  _clear_sock_buff();
     c68:	c9 df       	rcall	.-110    	; 0xbfc <Gsm_Ard::_clear_rsp_buff()>
     c6a:	ce 01       	movw	r24, r28
     c6c:	d9 df       	rcall	.-78     	; 0xc20 <Gsm_Ard::_clear_sock_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:73
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     c6e:	6f e9       	ldi	r22, 0x9F	; 159
     c70:	71 e0       	ldi	r23, 0x01	; 1
     c72:	89 ed       	ldi	r24, 0xD9	; 217
     c74:	94 e0       	ldi	r25, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:75
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:73
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     c7a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <Print::println(char const*)>

00000c7e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>:
_ZN7Gsm_Ard20_fetch_rsp_from_recvEPKcjPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:882
}

int Gsm_Ard::_fetch_rsp_from_recv(const char* cmd, unsigned int cmd_size, unsigned int* rsp_len){
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	ec 01       	movw	r28, r24
     c8c:	89 01       	movw	r16, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:884
  unsigned int i, start_idx;
  if(_rsp_buff_state!=BUFF_READY || _recv_buff_state!=BUFF_USED){
     c8e:	dc 01       	movw	r26, r24
     c90:	a6 57       	subi	r26, 0x76	; 118
     c92:	be 4f       	sbci	r27, 0xFE	; 254
     c94:	8d 91       	ld	r24, X+
     c96:	9c 91       	ld	r25, X
     c98:	11 97       	sbiw	r26, 0x01	; 1
     c9a:	89 2b       	or	r24, r25
     c9c:	09 f0       	breq	.+2      	; 0xca0 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x22>
     c9e:	6b c0       	rjmp	.+214    	; 0xd76 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xf8>
     ca0:	fe 01       	movw	r30, r28
     ca2:	e8 57       	subi	r30, 0x78	; 120
     ca4:	fe 4f       	sbci	r31, 0xFE	; 254
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x32>
     cae:	63 c0       	rjmp	.+198    	; 0xd76 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xf8>
     cb0:	7b 01       	movw	r14, r22
     cb2:	9e 01       	movw	r18, r28
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:887
    return 1;
  }
  for(i=0;i<cmd_size;i++){
     cb8:	48 17       	cp	r20, r24
     cba:	59 07       	cpc	r21, r25
     cbc:	51 f0       	breq	.+20     	; 0xcd2 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x54>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:888
    if(cmd[i]!=_recv_buff[i]){
     cbe:	f7 01       	movw	r30, r14
     cc0:	71 91       	ld	r23, Z+
     cc2:	7f 01       	movw	r14, r30
     cc4:	f9 01       	movw	r30, r18
     cc6:	61 91       	ld	r22, Z+
     cc8:	9f 01       	movw	r18, r30
     cca:	76 13       	cpse	r23, r22
     ccc:	57 c0       	rjmp	.+174    	; 0xd7c <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xfe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:887
  for(i=0;i<cmd_size;i++){
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	f3 cf       	rjmp	.-26     	; 0xcb8 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x3a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:893
      return 2;
    }
  }

  if(_recv_buff[i]!=CR_CHAR || _recv_buff[i+1]!=NL_CHAR || _recv_buff[i+2]!=CR_CHAR || _recv_buff[i+3]!=NL_CHAR){
     cd2:	fe 01       	movw	r30, r28
     cd4:	e4 0f       	add	r30, r20
     cd6:	f5 1f       	adc	r31, r21
     cd8:	80 81       	ld	r24, Z
     cda:	8d 30       	cpi	r24, 0x0D	; 13
     cdc:	09 f0       	breq	.+2      	; 0xce0 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x62>
     cde:	51 c0       	rjmp	.+162    	; 0xd82 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x104>
     ce0:	81 81       	ldd	r24, Z+1	; 0x01
     ce2:	8a 30       	cpi	r24, 0x0A	; 10
     ce4:	09 f0       	breq	.+2      	; 0xce8 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x6a>
     ce6:	4d c0       	rjmp	.+154    	; 0xd82 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x104>
     ce8:	82 81       	ldd	r24, Z+2	; 0x02
     cea:	8d 30       	cpi	r24, 0x0D	; 13
     cec:	09 f0       	breq	.+2      	; 0xcf0 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x72>
     cee:	49 c0       	rjmp	.+146    	; 0xd82 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x104>
     cf0:	83 81       	ldd	r24, Z+3	; 0x03
     cf2:	8a 30       	cpi	r24, 0x0A	; 10
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x7a>
     cf6:	45 c0       	rjmp	.+138    	; 0xd82 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x104>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:897
    return 3;
  }

  i+=4;
     cf8:	4c 5f       	subi	r20, 0xFC	; 252
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	fe 01       	movw	r30, r28
     cfe:	e4 0f       	add	r30, r20
     d00:	f5 1f       	adc	r31, r21
     d02:	bf 01       	movw	r22, r30
     d04:	9f 01       	movw	r18, r30
     d06:	2c 1b       	sub	r18, r28
     d08:	3d 0b       	sbc	r19, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:900
  start_idx=i;

  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     d0a:	81 91       	ld	r24, Z+
     d0c:	8d 30       	cpi	r24, 0x0D	; 13
     d0e:	79 f5       	brne	.+94     	; 0xd6e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xf0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:904
    i++;
  }

  if(i!=_recv_buff_idx-2){
     d10:	fe 01       	movw	r30, r28
     d12:	e0 58       	subi	r30, 0x80	; 128
     d14:	fe 4f       	sbci	r31, 0xFE	; 254
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	02 97       	sbiw	r24, 0x02	; 2
     d1c:	82 17       	cp	r24, r18
     d1e:	93 07       	cpc	r25, r19
     d20:	99 f5       	brne	.+102    	; 0xd88 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x10a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:908
    return 4;
  }

  _rsp_buff_idx=i-start_idx;
     d22:	c9 01       	movw	r24, r18
     d24:	84 1b       	sub	r24, r20
     d26:	95 0b       	sbc	r25, r21
     d28:	ac 01       	movw	r20, r24
     d2a:	7e 01       	movw	r14, r28
     d2c:	9e e7       	ldi	r25, 0x7E	; 126
     d2e:	e9 1a       	sub	r14, r25
     d30:	9e ef       	ldi	r25, 0xFE	; 254
     d32:	f9 0a       	sbc	r15, r25
     d34:	f7 01       	movw	r30, r14
     d36:	51 83       	std	Z+1, r21	; 0x01
     d38:	40 83       	st	Z, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:909
  _rsp_buff_state=BUFF_USED;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	8d 93       	st	X+, r24
     d40:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:911

  strncpy(_rsp_buff, _recv_buff+start_idx, _rsp_buff_idx);
     d42:	ce 01       	movw	r24, r28
     d44:	80 58       	subi	r24, 0x80	; 128
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:913

  _clear_recv_buff();
     d4c:	ce 01       	movw	r24, r28
     d4e:	46 df       	rcall	.-372    	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:915

  *rsp_len=_rsp_buff_idx;
     d50:	f7 01       	movw	r30, r14
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	f8 01       	movw	r30, r16
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:916
  return 0;
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:917
}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:900
  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     d6e:	80 81       	ld	r24, Z
     d70:	8a 30       	cpi	r24, 0x0A	; 10
     d72:	41 f6       	brne	.-112    	; 0xd04 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x86>
     d74:	cd cf       	rjmp	.-102    	; 0xd10 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x92>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:885
    return 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	f2 cf       	rjmp	.-28     	; 0xd60 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xe2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:889
      return 2;
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	ef cf       	rjmp	.-34     	; 0xd60 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xe2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:894
    return 3;
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	ec cf       	rjmp	.-40     	; 0xd60 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xe2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:905
    return 4;
     d88:	84 e0       	ldi	r24, 0x04	; 4
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	e9 cf       	rjmp	.-46     	; 0xd60 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xe2>

00000d8e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>:
_ZN7Gsm_Ard17_fetch_rsp_wo_cmdEPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:919

int Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int* rsp_len){
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	ec 01       	movw	r28, r24
     d9c:	8b 01       	movw	r16, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:921
  unsigned int i, start_idx;
  if(_rsp_buff_state!=BUFF_READY || _recv_buff_state!=BUFF_USED){
     d9e:	dc 01       	movw	r26, r24
     da0:	a6 57       	subi	r26, 0x76	; 118
     da2:	be 4f       	sbci	r27, 0xFE	; 254
     da4:	8d 91       	ld	r24, X+
     da6:	9c 91       	ld	r25, X
     da8:	11 97       	sbiw	r26, 0x01	; 1
     daa:	89 2b       	or	r24, r25
     dac:	09 f0       	breq	.+2      	; 0xdb0 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x22>
     dae:	4f c0       	rjmp	.+158    	; 0xe4e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xc0>
     db0:	fe 01       	movw	r30, r28
     db2:	e8 57       	subi	r30, 0x78	; 120
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x32>
     dbe:	47 c0       	rjmp	.+142    	; 0xe4e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xc0>
     dc0:	fe 01       	movw	r30, r28
     dc2:	cf 01       	movw	r24, r30
     dc4:	8c 1b       	sub	r24, r28
     dc6:	9d 0b       	sbc	r25, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:925
    return 1;
  }
  start_idx=0;
  while(_recv_buff[start_idx]!=CR_CHAR || _recv_buff[start_idx+1]!=NL_CHAR){
     dc8:	21 91       	ld	r18, Z+
     dca:	2d 30       	cpi	r18, 0x0D	; 13
     dcc:	d1 f7       	brne	.-12     	; 0xdc2 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x34>
     dce:	20 81       	ld	r18, Z
     dd0:	2a 30       	cpi	r18, 0x0A	; 10
     dd2:	b9 f7       	brne	.-18     	; 0xdc2 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x34>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:929
    start_idx++;
  }

  start_idx+=2;
     dd4:	02 96       	adiw	r24, 0x02	; 2
     dd6:	fe 01       	movw	r30, r28
     dd8:	e8 0f       	add	r30, r24
     dda:	f9 1f       	adc	r31, r25
     ddc:	bf 01       	movw	r22, r30
     dde:	af 01       	movw	r20, r30
     de0:	4c 1b       	sub	r20, r28
     de2:	5d 0b       	sbc	r21, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:932
  i=start_idx;

  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     de4:	21 91       	ld	r18, Z+
     de6:	2d 30       	cpi	r18, 0x0D	; 13
     de8:	71 f5       	brne	.+92     	; 0xe46 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xb8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:936
    i++;
  }

  if(i!=_recv_buff_idx-2){
     dea:	fe 01       	movw	r30, r28
     dec:	e0 58       	subi	r30, 0x80	; 128
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	20 81       	ld	r18, Z
     df2:	31 81       	ldd	r19, Z+1	; 0x01
     df4:	22 50       	subi	r18, 0x02	; 2
     df6:	31 09       	sbc	r19, r1
     df8:	24 17       	cp	r18, r20
     dfa:	35 07       	cpc	r19, r21
     dfc:	59 f5       	brne	.+86     	; 0xe54 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xc6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:940
    return 3;
  }

  _rsp_buff_idx=i-start_idx;
     dfe:	48 1b       	sub	r20, r24
     e00:	59 0b       	sbc	r21, r25
     e02:	7e 01       	movw	r14, r28
     e04:	8e e7       	ldi	r24, 0x7E	; 126
     e06:	e8 1a       	sub	r14, r24
     e08:	8e ef       	ldi	r24, 0xFE	; 254
     e0a:	f8 0a       	sbc	r15, r24
     e0c:	f7 01       	movw	r30, r14
     e0e:	51 83       	std	Z+1, r21	; 0x01
     e10:	40 83       	st	Z, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:941
  _rsp_buff_state=BUFF_USED;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	8d 93       	st	X+, r24
     e18:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:943

  strncpy(_rsp_buff, _recv_buff+start_idx, _rsp_buff_idx);
     e1a:	ce 01       	movw	r24, r28
     e1c:	80 58       	subi	r24, 0x80	; 128
     e1e:	9f 4f       	sbci	r25, 0xFF	; 255
     e20:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:945

  _clear_recv_buff();
     e24:	ce 01       	movw	r24, r28
     e26:	da de       	rcall	.-588    	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:947

  *rsp_len=_rsp_buff_idx;
     e28:	f7 01       	movw	r30, r14
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	f8 01       	movw	r30, r16
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:948
  return 0;
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:949
}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:932
  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     e46:	20 81       	ld	r18, Z
     e48:	2a 30       	cpi	r18, 0x0A	; 10
     e4a:	49 f6       	brne	.-110    	; 0xdde <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x50>
     e4c:	ce cf       	rjmp	.-100    	; 0xdea <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x5c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:922
    return 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	f2 cf       	rjmp	.-28     	; 0xe38 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xaa>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:937
    return 3;
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	ef cf       	rjmp	.-34     	; 0xe38 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xaa>

00000e5a <Gsm_Ard::_get_rsp(char**)>:
_ZN7Gsm_Ard8_get_rspEPPc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:952


int Gsm_Ard::_get_rsp(char** rsp){
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ec 01       	movw	r28, r24
     e60:	fb 01       	movw	r30, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:953
  if(_rsp_buff_state!=BUFF_USED){
     e62:	dc 01       	movw	r26, r24
     e64:	a6 57       	subi	r26, 0x76	; 118
     e66:	be 4f       	sbci	r27, 0xFE	; 254
     e68:	8d 91       	ld	r24, X+
     e6a:	9c 91       	ld	r25, X
     e6c:	11 97       	sbiw	r26, 0x01	; 1
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	89 f4       	brne	.+34     	; 0xe94 <Gsm_Ard::_get_rsp(char**)+0x3a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:956
    return 1;
  }
  strncpy(*rsp, _rsp_buff, _rsp_buff_idx);
     e72:	18 97       	sbiw	r26, 0x08	; 8
     e74:	4d 91       	ld	r20, X+
     e76:	5c 91       	ld	r21, X
     e78:	be 01       	movw	r22, r28
     e7a:	60 58       	subi	r22, 0x80	; 128
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	80 81       	ld	r24, Z
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:957
  _clear_rsp_buff();
     e86:	ce 01       	movw	r24, r28
     e88:	b9 de       	rcall	.-654    	; 0xbfc <Gsm_Ard::_clear_rsp_buff()>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:959
  return 0;
}
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:954
    return 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	fa cf       	rjmp	.-12     	; 0xe8e <Gsm_Ard::_get_rsp(char**)+0x34>

00000e9a <Gsm_Ard::get_gsm_state()>:
_ZN7Gsm_Ard13get_gsm_stateEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:971
  _ss.write(CR_CHAR);
  _ss.write(NL_CHAR);
}

GSM_STATE Gsm_Ard::get_gsm_state(){
  return _gsm_state;
     e9a:	8a 57       	subi	r24, 0x7A	; 122
     e9c:	9e 4f       	sbci	r25, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:972
}
     e9e:	fc 01       	movw	r30, r24
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	08 95       	ret

00000ea6 <Gsm_Ard::get_socket_rsp(char**)>:
_ZN7Gsm_Ard14get_socket_rspEPPc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:1000
  }

  return 0;
}

int Gsm_Ard::get_socket_rsp(char** data){
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	ec 01       	movw	r28, r24
     eac:	fb 01       	movw	r30, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:1001
  if(_sock_buff_state!=BUFF_USED){
     eae:	dc 01       	movw	r26, r24
     eb0:	a4 57       	subi	r26, 0x74	; 116
     eb2:	be 4f       	sbci	r27, 0xFE	; 254
     eb4:	8d 91       	ld	r24, X+
     eb6:	9c 91       	ld	r25, X
     eb8:	11 97       	sbiw	r26, 0x01	; 1
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	81 f4       	brne	.+32     	; 0xede <Gsm_Ard::get_socket_rsp(char**)+0x38>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:1005
    return 1;
  }

  strncpy(*data, _sock_buff, _sock_buff_idx);
     ebe:	18 97       	sbiw	r26, 0x08	; 8
     ec0:	4d 91       	ld	r20, X+
     ec2:	5c 91       	ld	r21, X
     ec4:	be 01       	movw	r22, r28
     ec6:	73 95       	inc	r23
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:1006
  _clear_sock_buff();
     ed0:	ce 01       	movw	r24, r28
     ed2:	a6 de       	rcall	.-692    	; 0xc20 <Gsm_Ard::_clear_sock_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:1008

  return 0;
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:1009
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:1002
    return 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	fa cf       	rjmp	.-12     	; 0xed8 <Gsm_Ard::get_socket_rsp(char**)+0x32>

00000ee4 <Gsm_Ard::_recv_string(int, int)>:
_ZN7Gsm_Ard12_recv_stringEii():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:743
int Gsm_Ard::_recv_string(int wait_period, int max_nl){
     ee4:	2f 92       	push	r2
     ee6:	3f 92       	push	r3
     ee8:	4f 92       	push	r4
     eea:	5f 92       	push	r5
     eec:	6f 92       	push	r6
     eee:	7f 92       	push	r7
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	00 d0       	rcall	.+0      	; 0xf0a <Gsm_Ard::_recv_string(int, int)+0x26>
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <Gsm_Ard::_recv_string(int, int)+0x28>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	8b 83       	std	Y+3, r24	; 0x03
     f14:	cb 01       	movw	r24, r22
     f16:	7a 01       	movw	r14, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:744
  if(_recv_buff_state!=BUFF_READY){
     f18:	2b 81       	ldd	r18, Y+3	; 0x03
     f1a:	3c 81       	ldd	r19, Y+4	; 0x04
     f1c:	28 57       	subi	r18, 0x78	; 120
     f1e:	3e 4f       	sbci	r19, 0xFE	; 254
     f20:	3a 83       	std	Y+2, r19	; 0x02
     f22:	29 83       	std	Y+1, r18	; 0x01
     f24:	f9 01       	movw	r30, r18
     f26:	20 81       	ld	r18, Z
     f28:	31 81       	ldd	r19, Z+1	; 0x01
     f2a:	23 2b       	or	r18, r19
     f2c:	09 f0       	breq	.+2      	; 0xf30 <Gsm_Ard::_recv_string(int, int)+0x4c>
     f2e:	cb c0       	rjmp	.+406    	; 0x10c6 <Gsm_Ard::_recv_string(int, int)+0x1e2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:751
      delay(wait_period/10);
     f30:	6a e0       	ldi	r22, 0x0A	; 10
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
     f38:	2b 01       	movw	r4, r22
     f3a:	77 0f       	add	r23, r23
     f3c:	66 08       	sbc	r6, r6
     f3e:	77 08       	sbc	r7, r7
     f40:	8a e0       	ldi	r24, 0x0A	; 10
     f42:	88 2e       	mov	r8, r24
     f44:	91 2c       	mov	r9, r1
     f46:	00 e0       	ldi	r16, 0x00	; 0
     f48:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:750
    if(!_ss.available()){
     f4a:	cb 80       	ldd	r12, Y+3	; 0x03
     f4c:	dc 80       	ldd	r13, Y+4	; 0x04
     f4e:	f2 e7       	ldi	r31, 0x72	; 114
     f50:	cf 1a       	sub	r12, r31
     f52:	fe ef       	ldi	r31, 0xFE	; 254
     f54:	df 0a       	sbc	r13, r31
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:754
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && nl_counter<max_nl){
     f56:	ab 80       	ldd	r10, Y+3	; 0x03
     f58:	bc 80       	ldd	r11, Y+4	; 0x04
     f5a:	20 e8       	ldi	r18, 0x80	; 128
     f5c:	a2 1a       	sub	r10, r18
     f5e:	2e ef       	ldi	r18, 0xFE	; 254
     f60:	b2 0a       	sbc	r11, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:749
  for(int i=0;i<10 && nl_counter<max_nl;i++){
     f62:	0e 15       	cp	r16, r14
     f64:	1f 05       	cpc	r17, r15
     f66:	74 f4       	brge	.+28     	; 0xf84 <Gsm_Ard::_recv_string(int, int)+0xa0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:750
    if(!_ss.available()){
     f68:	c6 01       	movw	r24, r12
     f6a:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <SoftwareSerial::available()>
     f6e:	89 2b       	or	r24, r25
     f70:	09 f0       	breq	.+2      	; 0xf74 <Gsm_Ard::_recv_string(int, int)+0x90>
     f72:	41 c0       	rjmp	.+130    	; 0xff6 <Gsm_Ard::_recv_string(int, int)+0x112>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:751
      delay(wait_period/10);
     f74:	c3 01       	movw	r24, r6
     f76:	b2 01       	movw	r22, r4
     f78:	0e 94 b7 14 	call	0x296e	; 0x296e <delay>
     f7c:	f1 e0       	ldi	r31, 0x01	; 1
     f7e:	8f 1a       	sub	r8, r31
     f80:	91 08       	sbc	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:749
  for(int i=0;i<10 && nl_counter<max_nl;i++){
     f82:	79 f7       	brne	.-34     	; 0xf62 <Gsm_Ard::_recv_string(int, int)+0x7e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:764
  Serial.print("RECV: [");
     f84:	61 ed       	ldi	r22, 0xD1	; 209
     f86:	71 e0       	ldi	r23, 0x01	; 1
     f88:	89 ed       	ldi	r24, 0xD9	; 217
     f8a:	94 e0       	ldi	r25, 0x04	; 4
     f8c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
     f90:	ab 80       	ldd	r10, Y+3	; 0x03
     f92:	bc 80       	ldd	r11, Y+4	; 0x04
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:765
  for(unsigned int j=0;j<_recv_buff_idx;j++){
     f94:	65 01       	movw	r12, r10
     f96:	20 e8       	ldi	r18, 0x80	; 128
     f98:	c2 1a       	sub	r12, r18
     f9a:	2e ef       	ldi	r18, 0xFE	; 254
     f9c:	d2 0a       	sbc	r13, r18
     f9e:	f6 01       	movw	r30, r12
     fa0:	20 81       	ld	r18, Z
     fa2:	31 81       	ldd	r19, Z+1	; 0x01
     fa4:	c5 01       	movw	r24, r10
     fa6:	4b 81       	ldd	r20, Y+3	; 0x03
     fa8:	5c 81       	ldd	r21, Y+4	; 0x04
     faa:	84 1b       	sub	r24, r20
     fac:	95 0b       	sbc	r25, r21
     fae:	82 17       	cp	r24, r18
     fb0:	93 07       	cpc	r25, r19
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <Gsm_Ard::_recv_string(int, int)+0xd2>
     fb4:	46 c0       	rjmp	.+140    	; 0x1042 <Gsm_Ard::_recv_string(int, int)+0x15e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:766
    Serial.print((uint8_t)_recv_buff[j]);
     fb6:	f5 01       	movw	r30, r10
     fb8:	61 91       	ld	r22, Z+
     fba:	5f 01       	movw	r10, r30
     fbc:	4a e0       	ldi	r20, 0x0A	; 10
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	89 ed       	ldi	r24, 0xD9	; 217
     fc2:	94 e0       	ldi	r25, 0x04	; 4
     fc4:	0e 94 65 17 	call	0x2eca	; 0x2eca <Print::print(unsigned char, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:767
    Serial.print(" ");
     fc8:	6c e7       	ldi	r22, 0x7C	; 124
     fca:	72 e0       	ldi	r23, 0x02	; 2
     fcc:	89 ed       	ldi	r24, 0xD9	; 217
     fce:	94 e0       	ldi	r25, 0x04	; 4
     fd0:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
     fd4:	e4 cf       	rjmp	.-56     	; 0xf9e <Gsm_Ard::_recv_string(int, int)+0xba>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:756
        if(_recv_buff_idx>1 && _recv_buff[_recv_buff_idx-1]==NL_CHAR && _recv_buff[_recv_buff_idx-2]==CR_CHAR){
     fd6:	2b 81       	ldd	r18, Y+3	; 0x03
     fd8:	3c 81       	ldd	r19, Y+4	; 0x04
     fda:	82 0f       	add	r24, r18
     fdc:	93 1f       	adc	r25, r19
     fde:	fc 01       	movw	r30, r24
     fe0:	31 97       	sbiw	r30, 0x01	; 1
     fe2:	20 81       	ld	r18, Z
     fe4:	2a 30       	cpi	r18, 0x0A	; 10
     fe6:	39 f4       	brne	.+14     	; 0xff6 <Gsm_Ard::_recv_string(int, int)+0x112>
     fe8:	02 97       	sbiw	r24, 0x02	; 2
     fea:	fc 01       	movw	r30, r24
     fec:	80 81       	ld	r24, Z
     fee:	8d 30       	cpi	r24, 0x0D	; 13
     ff0:	11 f4       	brne	.+4      	; 0xff6 <Gsm_Ard::_recv_string(int, int)+0x112>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:757
          nl_counter++;
     ff2:	0f 5f       	subi	r16, 0xFF	; 255
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:754
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && nl_counter<max_nl){
     ff6:	c6 01       	movw	r24, r12
     ff8:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <SoftwareSerial::available()>
     ffc:	89 2b       	or	r24, r25
     ffe:	09 f4       	brne	.+2      	; 0x1002 <Gsm_Ard::_recv_string(int, int)+0x11e>
    1000:	bd cf       	rjmp	.-134    	; 0xf7c <Gsm_Ard::_recv_string(int, int)+0x98>
    1002:	f5 01       	movw	r30, r10
    1004:	20 80       	ld	r2, Z
    1006:	31 80       	ldd	r3, Z+1	; 0x01
    1008:	f0 e8       	ldi	r31, 0x80	; 128
    100a:	2f 16       	cp	r2, r31
    100c:	31 04       	cpc	r3, r1
    100e:	08 f0       	brcs	.+2      	; 0x1012 <Gsm_Ard::_recv_string(int, int)+0x12e>
    1010:	b5 cf       	rjmp	.-150    	; 0xf7c <Gsm_Ard::_recv_string(int, int)+0x98>
    1012:	0e 15       	cp	r16, r14
    1014:	1f 05       	cpc	r17, r15
    1016:	0c f0       	brlt	.+2      	; 0x101a <Gsm_Ard::_recv_string(int, int)+0x136>
    1018:	b1 cf       	rjmp	.-158    	; 0xf7c <Gsm_Ard::_recv_string(int, int)+0x98>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:755
        _recv_buff[_recv_buff_idx++]=_ss.read();
    101a:	c1 01       	movw	r24, r2
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	f5 01       	movw	r30, r10
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	80 83       	st	Z, r24
    1024:	c6 01       	movw	r24, r12
    1026:	0e 94 c2 11 	call	0x2384	; 0x2384 <SoftwareSerial::read()>
    102a:	eb 81       	ldd	r30, Y+3	; 0x03
    102c:	fc 81       	ldd	r31, Y+4	; 0x04
    102e:	e2 0d       	add	r30, r2
    1030:	f3 1d       	adc	r31, r3
    1032:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:756
        if(_recv_buff_idx>1 && _recv_buff[_recv_buff_idx-1]==NL_CHAR && _recv_buff[_recv_buff_idx-2]==CR_CHAR){
    1034:	f5 01       	movw	r30, r10
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	91 05       	cpc	r25, r1
    103e:	58 f6       	brcc	.-106    	; 0xfd6 <Gsm_Ard::_recv_string(int, int)+0xf2>
    1040:	da cf       	rjmp	.-76     	; 0xff6 <Gsm_Ard::_recv_string(int, int)+0x112>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:769
  Serial.println("]");
    1042:	6b eb       	ldi	r22, 0xBB	; 187
    1044:	71 e0       	ldi	r23, 0x01	; 1
    1046:	89 ed       	ldi	r24, 0xD9	; 217
    1048:	94 e0       	ldi	r25, 0x04	; 4
    104a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:772
  if(_recv_buff_idx==RECV_BUFF_LEN){
    104e:	f6 01       	movw	r30, r12
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	80 38       	cpi	r24, 0x80	; 128
    1056:	91 05       	cpc	r25, r1
    1058:	e1 f4       	brne	.+56     	; 0x1092 <Gsm_Ard::_recv_string(int, int)+0x1ae>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:773
    _clear_recv_buff();
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	be dd       	rcall	.-1156   	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:774
    return 2;
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:786
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	af 90       	pop	r10
    1080:	9f 90       	pop	r9
    1082:	8f 90       	pop	r8
    1084:	7f 90       	pop	r7
    1086:	6f 90       	pop	r6
    1088:	5f 90       	pop	r5
    108a:	4f 90       	pop	r4
    108c:	3f 90       	pop	r3
    108e:	2f 90       	pop	r2
    1090:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:776
  else if(!_recv_buff_idx){
    1092:	89 2b       	or	r24, r25
    1094:	31 f4       	brne	.+12     	; 0x10a2 <Gsm_Ard::_recv_string(int, int)+0x1be>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:777
    _clear_recv_buff();
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	a0 dd       	rcall	.-1216   	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:778
    return 3;
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	e1 cf       	rjmp	.-62     	; 0x1064 <Gsm_Ard::_recv_string(int, int)+0x180>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:780
  else if(nl_counter!=max_nl){
    10a2:	e0 16       	cp	r14, r16
    10a4:	f1 06       	cpc	r15, r17
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:781
    _clear_recv_buff();
    10a6:	31 f0       	breq	.+12     	; 0x10b4 <Gsm_Ard::_recv_string(int, int)+0x1d0>
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	97 dd       	rcall	.-1234   	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:782
    return 4;
    10ae:	84 e0       	ldi	r24, 0x04	; 4
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	d8 cf       	rjmp	.-80     	; 0x1064 <Gsm_Ard::_recv_string(int, int)+0x180>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:784
  _recv_buff_state=BUFF_USED;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:785
  return 0;
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	cf cf       	rjmp	.-98     	; 0x1064 <Gsm_Ard::_recv_string(int, int)+0x180>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:745
    return 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	cc cf       	rjmp	.-104    	; 0x1064 <Gsm_Ard::_recv_string(int, int)+0x180>

000010cc <Gsm_Ard::_recv_socket(int)>:
_ZN7Gsm_Ard12_recv_socketEi():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:788
int Gsm_Ard::_recv_socket(int wait_period){
    10cc:	2f 92       	push	r2
    10ce:	3f 92       	push	r3
    10d0:	4f 92       	push	r4
    10d2:	5f 92       	push	r5
    10d4:	6f 92       	push	r6
    10d6:	7f 92       	push	r7
    10d8:	8f 92       	push	r8
    10da:	9f 92       	push	r9
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <Gsm_Ard::_recv_socket(int)+0x26>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <Gsm_Ard::_recv_socket(int)+0x28>
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	8b 83       	std	Y+3, r24	; 0x03
    10fc:	cb 01       	movw	r24, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:789
  if(_recv_buff_state!=BUFF_READY){
    10fe:	6b 80       	ldd	r6, Y+3	; 0x03
    1100:	7c 80       	ldd	r7, Y+4	; 0x04
    1102:	28 e7       	ldi	r18, 0x78	; 120
    1104:	62 1a       	sub	r6, r18
    1106:	2e ef       	ldi	r18, 0xFE	; 254
    1108:	72 0a       	sbc	r7, r18
    110a:	f3 01       	movw	r30, r6
    110c:	20 81       	ld	r18, Z
    110e:	31 81       	ldd	r19, Z+1	; 0x01
    1110:	23 2b       	or	r18, r19
    1112:	09 f0       	breq	.+2      	; 0x1116 <Gsm_Ard::_recv_socket(int)+0x4a>
    1114:	06 c1       	rjmp	.+524    	; 0x1322 <Gsm_Ard::_recv_socket(int)+0x256>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:792
  if(_gsm_state!=GSM_TCP_STATE){
    1116:	eb 81       	ldd	r30, Y+3	; 0x03
    1118:	fc 81       	ldd	r31, Y+4	; 0x04
    111a:	ea 57       	subi	r30, 0x7A	; 122
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	20 81       	ld	r18, Z
    1120:	31 81       	ldd	r19, Z+1	; 0x01
    1122:	25 30       	cpi	r18, 0x05	; 5
    1124:	31 05       	cpc	r19, r1
    1126:	09 f0       	breq	.+2      	; 0x112a <Gsm_Ard::_recv_socket(int)+0x5e>
    1128:	ff c0       	rjmp	.+510    	; 0x1328 <Gsm_Ard::_recv_socket(int)+0x25c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:803
      delay(wait_period/10);
    112a:	6a e0       	ldi	r22, 0x0A	; 10
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
    1132:	4b 01       	movw	r8, r22
    1134:	77 0f       	add	r23, r23
    1136:	aa 08       	sbc	r10, r10
    1138:	bb 08       	sbc	r11, r11
    113a:	8a e0       	ldi	r24, 0x0A	; 10
    113c:	e8 2e       	mov	r14, r24
    113e:	f1 2c       	mov	r15, r1
    1140:	31 2c       	mov	r3, r1
    1142:	19 82       	std	Y+1, r1	; 0x01
    1144:	21 2c       	mov	r2, r1
    1146:	51 2c       	mov	r5, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:802
    if(!_ss.available()){
    1148:	0b 81       	ldd	r16, Y+3	; 0x03
    114a:	1c 81       	ldd	r17, Y+4	; 0x04
    114c:	02 57       	subi	r16, 0x72	; 114
    114e:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:828
        while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && data_read<trans_size){
    1150:	cb 80       	ldd	r12, Y+3	; 0x03
    1152:	dc 80       	ldd	r13, Y+4	; 0x04
    1154:	f0 e8       	ldi	r31, 0x80	; 128
    1156:	cf 1a       	sub	r12, r31
    1158:	fe ef       	ldi	r31, 0xFE	; 254
    115a:	df 0a       	sbc	r13, r31
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:802
    if(!_ss.available()){
    115c:	c8 01       	movw	r24, r16
    115e:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <SoftwareSerial::available()>
    1162:	89 2b       	or	r24, r25
    1164:	a1 f5       	brne	.+104    	; 0x11ce <Gsm_Ard::_recv_socket(int)+0x102>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:803
      delay(wait_period/10);
    1166:	c5 01       	movw	r24, r10
    1168:	b4 01       	movw	r22, r8
    116a:	0e 94 b7 14 	call	0x296e	; 0x296e <delay>
    116e:	41 2c       	mov	r4, r1
    1170:	31 e0       	ldi	r19, 0x01	; 1
    1172:	e3 1a       	sub	r14, r19
    1174:	f1 08       	sbc	r15, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:801
  for(int i=0;i<10 && !done;i++){
    1176:	11 f0       	breq	.+4      	; 0x117c <Gsm_Ard::_recv_socket(int)+0xb0>
    1178:	44 20       	and	r4, r4
    117a:	81 f3       	breq	.-32     	; 0x115c <Gsm_Ard::_recv_socket(int)+0x90>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:840
  Serial.print("SOCK_RECV: [");
    117c:	6c ec       	ldi	r22, 0xCC	; 204
    117e:	71 e0       	ldi	r23, 0x01	; 1
    1180:	89 ed       	ldi	r24, 0xD9	; 217
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
    1188:	0b 81       	ldd	r16, Y+3	; 0x03
    118a:	1c 81       	ldd	r17, Y+4	; 0x04
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:841
  for(unsigned int j=0;j<_recv_buff_idx;j++){
    118c:	78 01       	movw	r14, r16
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	e4 1a       	sub	r14, r20
    1192:	4e ef       	ldi	r20, 0xFE	; 254
    1194:	f4 0a       	sbc	r15, r20
    1196:	f7 01       	movw	r30, r14
    1198:	20 81       	ld	r18, Z
    119a:	31 81       	ldd	r19, Z+1	; 0x01
    119c:	c8 01       	movw	r24, r16
    119e:	4b 81       	ldd	r20, Y+3	; 0x03
    11a0:	5c 81       	ldd	r21, Y+4	; 0x04
    11a2:	84 1b       	sub	r24, r20
    11a4:	95 0b       	sbc	r25, r21
    11a6:	82 17       	cp	r24, r18
    11a8:	93 07       	cpc	r25, r19
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <Gsm_Ard::_recv_socket(int)+0xe2>
    11ac:	90 c0       	rjmp	.+288    	; 0x12ce <Gsm_Ard::_recv_socket(int)+0x202>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:842
    Serial.print((uint8_t)_recv_buff[j]);
    11ae:	f8 01       	movw	r30, r16
    11b0:	61 91       	ld	r22, Z+
    11b2:	8f 01       	movw	r16, r30
    11b4:	4a e0       	ldi	r20, 0x0A	; 10
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	89 ed       	ldi	r24, 0xD9	; 217
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	0e 94 65 17 	call	0x2eca	; 0x2eca <Print::print(unsigned char, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:843
    Serial.print(" ");
    11c0:	6c e7       	ldi	r22, 0x7C	; 124
    11c2:	72 e0       	ldi	r23, 0x02	; 2
    11c4:	89 ed       	ldi	r24, 0xD9	; 217
    11c6:	94 e0       	ldi	r25, 0x04	; 4
    11c8:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
    11cc:	e4 cf       	rjmp	.-56     	; 0x1196 <Gsm_Ard::_recv_socket(int)+0xca>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:806
      if(ready_for_confirm){
    11ce:	55 20       	and	r5, r5
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <Gsm_Ard::_recv_socket(int)+0x108>
    11d2:	55 c0       	rjmp	.+170    	; 0x127e <Gsm_Ard::_recv_socket(int)+0x1b2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:807
        if(_ss.read()!=0xff){
    11d4:	c8 01       	movw	r24, r16
    11d6:	0e 94 c2 11 	call	0x2384	; 0x2384 <SoftwareSerial::read()>
    11da:	8f 3f       	cpi	r24, 0xFF	; 255
    11dc:	91 05       	cpc	r25, r1
    11de:	09 f4       	brne	.+2      	; 0x11e2 <Gsm_Ard::_recv_socket(int)+0x116>
    11e0:	74 c0       	rjmp	.+232    	; 0x12ca <Gsm_Ard::_recv_socket(int)+0x1fe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:809
          Serial.print("CONFIRM FAILED SOCK_RECV: [");
    11e2:	6d eb       	ldi	r22, 0xBD	; 189
    11e4:	71 e0       	ldi	r23, 0x01	; 1
    11e6:	89 ed       	ldi	r24, 0xD9	; 217
    11e8:	94 e0       	ldi	r25, 0x04	; 4
    11ea:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
    11ee:	0b 81       	ldd	r16, Y+3	; 0x03
    11f0:	1c 81       	ldd	r17, Y+4	; 0x04
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:810
          for(unsigned int j=0;j<_recv_buff_idx;j++){
    11f2:	78 01       	movw	r14, r16
    11f4:	20 e8       	ldi	r18, 0x80	; 128
    11f6:	e2 1a       	sub	r14, r18
    11f8:	2e ef       	ldi	r18, 0xFE	; 254
    11fa:	f2 0a       	sbc	r15, r18
    11fc:	f7 01       	movw	r30, r14
    11fe:	20 81       	ld	r18, Z
    1200:	31 81       	ldd	r19, Z+1	; 0x01
    1202:	c8 01       	movw	r24, r16
    1204:	4b 81       	ldd	r20, Y+3	; 0x03
    1206:	5c 81       	ldd	r21, Y+4	; 0x04
    1208:	84 1b       	sub	r24, r20
    120a:	95 0b       	sbc	r25, r21
    120c:	82 17       	cp	r24, r18
    120e:	93 07       	cpc	r25, r19
    1210:	80 f4       	brcc	.+32     	; 0x1232 <Gsm_Ard::_recv_socket(int)+0x166>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:811
            Serial.print((uint8_t)_recv_buff[j]);
    1212:	f8 01       	movw	r30, r16
    1214:	61 91       	ld	r22, Z+
    1216:	8f 01       	movw	r16, r30
    1218:	4a e0       	ldi	r20, 0x0A	; 10
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	89 ed       	ldi	r24, 0xD9	; 217
    121e:	94 e0       	ldi	r25, 0x04	; 4
    1220:	0e 94 65 17 	call	0x2eca	; 0x2eca <Print::print(unsigned char, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:812
            Serial.print(" ");
    1224:	6c e7       	ldi	r22, 0x7C	; 124
    1226:	72 e0       	ldi	r23, 0x02	; 2
    1228:	89 ed       	ldi	r24, 0xD9	; 217
    122a:	94 e0       	ldi	r25, 0x04	; 4
    122c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
    1230:	e5 cf       	rjmp	.-54     	; 0x11fc <Gsm_Ard::_recv_socket(int)+0x130>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:814
          Serial.print("] N:");
    1232:	69 ed       	ldi	r22, 0xD9	; 217
    1234:	71 e0       	ldi	r23, 0x01	; 1
    1236:	89 ed       	ldi	r24, 0xD9	; 217
    1238:	94 e0       	ldi	r25, 0x04	; 4
    123a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:815
          Serial.println(trans_size);
    123e:	4a e0       	ldi	r20, 0x0A	; 10
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	62 2d       	mov	r22, r2
    1244:	89 ed       	ldi	r24, 0xD9	; 217
    1246:	94 e0       	ldi	r25, 0x04	; 4
    1248:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <Print::println(unsigned char, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:817
          return 3;
    124c:	83 e0       	ldi	r24, 0x03	; 3
    124e:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:862
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	8f 90       	pop	r8
    1270:	7f 90       	pop	r7
    1272:	6f 90       	pop	r6
    1274:	5f 90       	pop	r5
    1276:	4f 90       	pop	r4
    1278:	3f 90       	pop	r3
    127a:	2f 90       	pop	r2
    127c:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:824
        if(!size_set){
    127e:	f9 81       	ldd	r31, Y+1	; 0x01
    1280:	f1 11       	cpse	r31, r1
    1282:	04 c0       	rjmp	.+8      	; 0x128c <Gsm_Ard::_recv_socket(int)+0x1c0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:825
          trans_size=(uint8_t) _ss.read();
    1284:	c8 01       	movw	r24, r16
    1286:	0e 94 c2 11 	call	0x2384	; 0x2384 <SoftwareSerial::read()>
    128a:	28 2e       	mov	r2, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:828
        while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && data_read<trans_size){
    128c:	22 2d       	mov	r18, r2
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3a 83       	std	Y+2, r19	; 0x02
    1292:	29 83       	std	Y+1, r18	; 0x01
    1294:	c8 01       	movw	r24, r16
    1296:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <SoftwareSerial::available()>
    129a:	89 2b       	or	r24, r25
    129c:	71 f0       	breq	.+28     	; 0x12ba <Gsm_Ard::_recv_socket(int)+0x1ee>
    129e:	f6 01       	movw	r30, r12
    12a0:	40 80       	ld	r4, Z
    12a2:	51 80       	ldd	r5, Z+1	; 0x01
    12a4:	f0 e8       	ldi	r31, 0x80	; 128
    12a6:	4f 16       	cp	r4, r31
    12a8:	51 04       	cpc	r5, r1
    12aa:	38 f4       	brcc	.+14     	; 0x12ba <Gsm_Ard::_recv_socket(int)+0x1ee>
    12ac:	83 2d       	mov	r24, r3
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	29 81       	ldd	r18, Y+1	; 0x01
    12b2:	3a 81       	ldd	r19, Y+2	; 0x02
    12b4:	82 17       	cp	r24, r18
    12b6:	93 07       	cpc	r25, r19
    12b8:	d4 f1       	brlt	.+116    	; 0x132e <Gsm_Ard::_recv_socket(int)+0x262>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:832
        if(data_read==trans_size){
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	32 10       	cpse	r3, r2
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	41 2c       	mov	r4, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:833
          ready_for_confirm=true;
    12c2:	58 2e       	mov	r5, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:832
        if(data_read==trans_size){
    12c4:	f1 e0       	ldi	r31, 0x01	; 1
    12c6:	f9 83       	std	Y+1, r31	; 0x01
    12c8:	53 cf       	rjmp	.-346    	; 0x1170 <Gsm_Ard::_recv_socket(int)+0xa4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:820
          done=true;
    12ca:	45 2c       	mov	r4, r5
    12cc:	51 cf       	rjmp	.-350    	; 0x1170 <Gsm_Ard::_recv_socket(int)+0xa4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:845
  Serial.println("]");
    12ce:	6b eb       	ldi	r22, 0xBB	; 187
    12d0:	71 e0       	ldi	r23, 0x01	; 1
    12d2:	89 ed       	ldi	r24, 0xD9	; 217
    12d4:	94 e0       	ldi	r25, 0x04	; 4
    12d6:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:848
  if(_recv_buff_idx==RECV_BUFF_LEN){
    12da:	f7 01       	movw	r30, r14
    12dc:	80 81       	ld	r24, Z
    12de:	91 81       	ldd	r25, Z+1	; 0x01
    12e0:	80 38       	cpi	r24, 0x80	; 128
    12e2:	91 05       	cpc	r25, r1
    12e4:	31 f4       	brne	.+12     	; 0x12f2 <Gsm_Ard::_recv_socket(int)+0x226>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:849
    _clear_recv_buff();
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	78 dc       	rcall	.-1808   	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:850
    return 4;
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	af cf       	rjmp	.-162    	; 0x1250 <Gsm_Ard::_recv_socket(int)+0x184>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:852
  else if(!_recv_buff_idx){
    12f2:	89 2b       	or	r24, r25
    12f4:	31 f4       	brne	.+12     	; 0x1302 <Gsm_Ard::_recv_socket(int)+0x236>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:853
    _clear_recv_buff();
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	70 dc       	rcall	.-1824   	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:854
    return 5;
    12fc:	85 e0       	ldi	r24, 0x05	; 5
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a7 cf       	rjmp	.-178    	; 0x1250 <Gsm_Ard::_recv_socket(int)+0x184>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:856
  else if(!done){
    1302:	41 10       	cpse	r4, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:857
    _clear_recv_buff();
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <Gsm_Ard::_recv_socket(int)+0x246>
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	68 dc       	rcall	.-1840   	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:858
    return 6;
    130c:	86 e0       	ldi	r24, 0x06	; 6
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9f cf       	rjmp	.-194    	; 0x1250 <Gsm_Ard::_recv_socket(int)+0x184>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:860
  _recv_buff_state=BUFF_USED;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	f3 01       	movw	r30, r6
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:861
  return 0;
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	97 cf       	rjmp	.-210    	; 0x1250 <Gsm_Ard::_recv_socket(int)+0x184>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:790
    return 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	94 cf       	rjmp	.-216    	; 0x1250 <Gsm_Ard::_recv_socket(int)+0x184>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:793
    return 2;
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	91 cf       	rjmp	.-222    	; 0x1250 <Gsm_Ard::_recv_socket(int)+0x184>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:829
          _recv_buff[_recv_buff_idx++]=_ss.read();
    132e:	c2 01       	movw	r24, r4
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	f6 01       	movw	r30, r12
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
    1338:	c8 01       	movw	r24, r16
    133a:	0e 94 c2 11 	call	0x2384	; 0x2384 <SoftwareSerial::read()>
    133e:	eb 81       	ldd	r30, Y+3	; 0x03
    1340:	fc 81       	ldd	r31, Y+4	; 0x04
    1342:	e4 0d       	add	r30, r4
    1344:	f5 1d       	adc	r31, r5
    1346:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:830
          data_read++;
    1348:	33 94       	inc	r3
    134a:	a4 cf       	rjmp	.-184    	; 0x1294 <Gsm_Ard::_recv_socket(int)+0x1c8>

0000134c <Gsm_Ard::_recv_tcp_data(unsigned int*)>:
_ZN7Gsm_Ard14_recv_tcp_dataEPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:638
int Gsm_Ard::_recv_tcp_data(unsigned int* data_len){
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
    1362:	5b 01       	movw	r10, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:640
  if(_sock_buff_state==BUFF_USED){
    1364:	7c 01       	movw	r14, r24
    1366:	84 e7       	ldi	r24, 0x74	; 116
    1368:	e8 1a       	sub	r14, r24
    136a:	8e ef       	ldi	r24, 0xFE	; 254
    136c:	f8 0a       	sbc	r15, r24
    136e:	f7 01       	movw	r30, r14
    1370:	80 81       	ld	r24, Z
    1372:	91 81       	ldd	r25, Z+1	; 0x01
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	d9 f1       	breq	.+118    	; 0x13ee <Gsm_Ard::_recv_tcp_data(unsigned int*)+0xa2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:644
  n=_recv_socket(10000);
    1378:	60 e1       	ldi	r22, 0x10	; 16
    137a:	77 e2       	ldi	r23, 0x27	; 39
    137c:	ce 01       	movw	r24, r28
    137e:	a6 de       	rcall	.-692    	; 0x10cc <Gsm_Ard::_recv_socket(int)>
    1380:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:645
  if(n){
    1382:	89 2b       	or	r24, r25
    1384:	71 f0       	breq	.+28     	; 0x13a2 <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x56>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:646
    return 20+n;
    1386:	0c 5e       	subi	r16, 0xEC	; 236
    1388:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:656
}
    138a:	c8 01       	movw	r24, r16
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:649
  _sock_buff_state=BUFF_USED;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	f7 01       	movw	r30, r14
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:650
  strncpy(_sock_buff, _recv_buff, _recv_buff_idx);
    13ac:	6e 01       	movw	r12, r28
    13ae:	f0 e8       	ldi	r31, 0x80	; 128
    13b0:	cf 1a       	sub	r12, r31
    13b2:	fe ef       	ldi	r31, 0xFE	; 254
    13b4:	df 0a       	sbc	r13, r31
    13b6:	f6 01       	movw	r30, r12
    13b8:	40 81       	ld	r20, Z
    13ba:	51 81       	ldd	r21, Z+1	; 0x01
    13bc:	be 01       	movw	r22, r28
    13be:	ce 01       	movw	r24, r28
    13c0:	93 95       	inc	r25
    13c2:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:651
  _sock_buff_idx=_recv_buff_idx;
    13c6:	7e 01       	movw	r14, r28
    13c8:	fc e7       	ldi	r31, 0x7C	; 124
    13ca:	ef 1a       	sub	r14, r31
    13cc:	fe ef       	ldi	r31, 0xFE	; 254
    13ce:	ff 0a       	sbc	r15, r31
    13d0:	f6 01       	movw	r30, r12
    13d2:	80 81       	ld	r24, Z
    13d4:	91 81       	ldd	r25, Z+1	; 0x01
    13d6:	f7 01       	movw	r30, r14
    13d8:	91 83       	std	Z+1, r25	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:653
  _clear_recv_buff();
    13da:	80 83       	st	Z, r24
    13dc:	ce 01       	movw	r24, r28
    13de:	fe db       	rcall	.-2052   	; 0xbdc <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:654
  *data_len=_sock_buff_idx;
    13e0:	f7 01       	movw	r30, r14
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	f5 01       	movw	r30, r10
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
    13ec:	ce cf       	rjmp	.-100    	; 0x138a <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x3e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:641
    return 10;
    13ee:	0a e0       	ldi	r16, 0x0A	; 10
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	cb cf       	rjmp	.-106    	; 0x138a <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x3e>

000013f4 <Gsm_Ard::_write_cmd(char const*)>:
_ZN7Gsm_Ard10_write_cmdEPKc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:961
void Gsm_Ard::_write_cmd(const char* cmd){
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:962
  unsigned int cmd_len=strlen(cmd);
    1400:	fb 01       	movw	r30, r22
    1402:	01 90       	ld	r0, Z+
    1404:	00 20       	and	r0, r0
    1406:	e9 f7       	brne	.-6      	; 0x1402 <Gsm_Ard::_write_cmd(char const*)+0xe>
    1408:	eb 01       	movw	r28, r22
    140a:	9f 01       	movw	r18, r30
    140c:	21 50       	subi	r18, 0x01	; 1
    140e:	31 09       	sbc	r19, r1
    1410:	79 01       	movw	r14, r18
    1412:	8c 01       	movw	r16, r24
    1414:	02 57       	subi	r16, 0x72	; 114
    1416:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:963
  for(unsigned int i=0;i<cmd_len;i++){
    1418:	ce 15       	cp	r28, r14
    141a:	df 05       	cpc	r29, r15
    141c:	21 f0       	breq	.+8      	; 0x1426 <Gsm_Ard::_write_cmd(char const*)+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:964
    _ss.write(cmd[i]);
    141e:	69 91       	ld	r22, Y+
    1420:	c8 01       	movw	r24, r16
    1422:	d1 d7       	rcall	.+4002   	; 0x23c6 <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:963
  for(unsigned int i=0;i<cmd_len;i++){
    1424:	f9 cf       	rjmp	.-14     	; 0x1418 <Gsm_Ard::_write_cmd(char const*)+0x24>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:966
  _ss.write(CR_CHAR);
    1426:	6d e0       	ldi	r22, 0x0D	; 13
    1428:	c8 01       	movw	r24, r16
    142a:	cd d7       	rcall	.+3994   	; 0x23c6 <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:967
  _ss.write(NL_CHAR);
    142c:	6a e0       	ldi	r22, 0x0A	; 10
    142e:	c8 01       	movw	r24, r16
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:968
}
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:967
  _ss.write(NL_CHAR);
    143a:	ef 90       	pop	r14
    143c:	c4 c7       	rjmp	.+3976   	; 0x23c6 <SoftwareSerial::write(unsigned char)>

0000143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>:
_ZN7Gsm_Ard18_send_cmd_comp_rspEPKcS1_i():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:662
int Gsm_Ard::_send_cmd_comp_rsp(const char* cmd, const char* exp_rsp, int recv_wait_period){
    143e:	6f 92       	push	r6
    1440:	7f 92       	push	r7
    1442:	8f 92       	push	r8
    1444:	9f 92       	push	r9
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	00 d0       	rcall	.+0      	; 0x145c <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x1e>
    145c:	00 d0       	rcall	.+0      	; 0x145e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x20>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	6c 01       	movw	r12, r24
    1464:	8b 01       	movw	r16, r22
    1466:	3a 01       	movw	r6, r20
    1468:	49 01       	movw	r8, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:664
  int cmd_size=strlen(cmd);
    146a:	fb 01       	movw	r30, r22
    146c:	01 90       	ld	r0, Z+
    146e:	00 20       	and	r0, r0
    1470:	e9 f7       	brne	.-6      	; 0x146c <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x2e>
    1472:	31 97       	sbiw	r30, 0x01	; 1
    1474:	7f 01       	movw	r14, r30
    1476:	e6 1a       	sub	r14, r22
    1478:	f7 0a       	sbc	r15, r23
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:668
  while(_ss.available()) _ss.read();
    147a:	5c 01       	movw	r10, r24
    147c:	82 e7       	ldi	r24, 0x72	; 114
    147e:	a8 1a       	sub	r10, r24
    1480:	8e ef       	ldi	r24, 0xFE	; 254
    1482:	b8 0a       	sbc	r11, r24
    1484:	c5 01       	movw	r24, r10
    1486:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <SoftwareSerial::available()>
    148a:	89 2b       	or	r24, r25
    148c:	19 f0       	breq	.+6      	; 0x1494 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x56>
    148e:	c5 01       	movw	r24, r10
    1490:	79 d7       	rcall	.+3826   	; 0x2384 <SoftwareSerial::read()>
    1492:	f8 cf       	rjmp	.-16     	; 0x1484 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x46>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:671
  Serial.print("DB-SND: [");
    1494:	6e ed       	ldi	r22, 0xDE	; 222
    1496:	71 e0       	ldi	r23, 0x01	; 1
    1498:	89 ed       	ldi	r24, 0xD9	; 217
    149a:	94 e0       	ldi	r25, 0x04	; 4
    149c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
    14a0:	58 01       	movw	r10, r16
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:672
  for(int i=0;i<cmd_size;i++){
    14a2:	c5 01       	movw	r24, r10
    14a4:	80 1b       	sub	r24, r16
    14a6:	91 0b       	sbc	r25, r17
    14a8:	8e 15       	cp	r24, r14
    14aa:	9f 05       	cpc	r25, r15
    14ac:	84 f4       	brge	.+32     	; 0x14ce <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x90>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:673
    Serial.print((uint8_t) cmd[i]);
    14ae:	f5 01       	movw	r30, r10
    14b0:	61 91       	ld	r22, Z+
    14b2:	5f 01       	movw	r10, r30
    14b4:	4a e0       	ldi	r20, 0x0A	; 10
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	89 ed       	ldi	r24, 0xD9	; 217
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	0e 94 65 17 	call	0x2eca	; 0x2eca <Print::print(unsigned char, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:674
    Serial.print(" ");
    14c0:	6c e7       	ldi	r22, 0x7C	; 124
    14c2:	72 e0       	ldi	r23, 0x02	; 2
    14c4:	89 ed       	ldi	r24, 0xD9	; 217
    14c6:	94 e0       	ldi	r25, 0x04	; 4
    14c8:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:672
  for(int i=0;i<cmd_size;i++){
    14cc:	ea cf       	rjmp	.-44     	; 0x14a2 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x64>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:676
  Serial.println("]");
    14ce:	6b eb       	ldi	r22, 0xBB	; 187
    14d0:	71 e0       	ldi	r23, 0x01	; 1
    14d2:	89 ed       	ldi	r24, 0xD9	; 217
    14d4:	94 e0       	ldi	r25, 0x04	; 4
    14d6:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:678
  _write_cmd(cmd);
    14da:	b8 01       	movw	r22, r16
    14dc:	c6 01       	movw	r24, r12
    14de:	8a df       	rcall	.-236    	; 0x13f4 <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:679
  n=_recv_string(recv_wait_period);
    14e0:	43 e0       	ldi	r20, 0x03	; 3
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	b4 01       	movw	r22, r8
    14e6:	c6 01       	movw	r24, r12
    14e8:	fd dc       	rcall	.-1542   	; 0xee4 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:680
  if(!n){
    14ea:	89 2b       	or	r24, r25
    14ec:	b9 f5       	brne	.+110    	; 0x155c <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x11e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:681
    n=_fetch_rsp_from_recv(cmd, cmd_size, &rsp_len);
    14ee:	9e 01       	movw	r18, r28
    14f0:	2f 5f       	subi	r18, 0xFF	; 255
    14f2:	3f 4f       	sbci	r19, 0xFF	; 255
    14f4:	a7 01       	movw	r20, r14
    14f6:	b8 01       	movw	r22, r16
    14f8:	c6 01       	movw	r24, r12
    14fa:	c1 db       	rcall	.-2174   	; 0xc7e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:682
    if(!n){
    14fc:	89 2b       	or	r24, r25
    14fe:	89 f5       	brne	.+98     	; 0x1562 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x124>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:683
      rsp=new char[rsp_len];
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <operator new[](unsigned int)>
    1508:	9c 83       	std	Y+4, r25	; 0x04
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:684
      n=_get_rsp(&rsp);
    150a:	8b 83       	std	Y+3, r24	; 0x03
    150c:	be 01       	movw	r22, r28
    150e:	6d 5f       	subi	r22, 0xFD	; 253
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	c6 01       	movw	r24, r12
    1514:	a2 dc       	rcall	.-1724   	; 0xe5a <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:685
      if(n){
    1516:	89 2b       	or	r24, r25
    1518:	31 f5       	brne	.+76     	; 0x1566 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x128>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:688
      if(!strncmp(rsp, exp_rsp, rsp_len)) return 0;
    151a:	49 81       	ldd	r20, Y+1	; 0x01
    151c:	5a 81       	ldd	r21, Y+2	; 0x02
    151e:	b3 01       	movw	r22, r6
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	0e 94 45 1a 	call	0x348a	; 0x348a <strncmp>
    1528:	31 e0       	ldi	r19, 0x01	; 1
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	89 2b       	or	r24, r25
    152e:	09 f4       	brne	.+2      	; 0x1532 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0xf4>
    1530:	30 e0       	ldi	r19, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:686
        return 2;
    1532:	83 2f       	mov	r24, r19
    1534:	92 2f       	mov	r25, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:700
}
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	bf 90       	pop	r11
    1550:	af 90       	pop	r10
    1552:	9f 90       	pop	r9
    1554:	8f 90       	pop	r8
    1556:	7f 90       	pop	r7
    1558:	6f 90       	pop	r6
    155a:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:698
    return 4;
    155c:	84 e0       	ldi	r24, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:686
        return 2;
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	ea cf       	rjmp	.-44     	; 0x1536 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0xf8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:694
      return 3;
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	fc cf       	rjmp	.-8      	; 0x155e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x120>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:686
        return 2;
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	fa cf       	rjmp	.-12     	; 0x155e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x120>

0000156a <Gsm_Ard::attachGPRS()>:
_ZN7Gsm_Ard10attachGPRSEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:268
int Gsm_Ard::attachGPRS(){
    156a:	cf 92       	push	r12
    156c:	df 92       	push	r13
    156e:	ef 92       	push	r14
    1570:	ff 92       	push	r15
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	e3 97       	sbiw	r28, 0x33	; 51
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:271
  if(_gsm_state!=GSM_GPRS_STATE){
    158c:	6c 01       	movw	r12, r24
    158e:	8a e7       	ldi	r24, 0x7A	; 122
    1590:	c8 1a       	sub	r12, r24
    1592:	8e ef       	ldi	r24, 0xFE	; 254
    1594:	d8 0a       	sbc	r13, r24
    1596:	f6 01       	movw	r30, r12
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	03 97       	sbiw	r24, 0x03	; 3
    159e:	09 f0       	breq	.+2      	; 0x15a2 <Gsm_Ard::attachGPRS()+0x38>
    15a0:	c4 c0       	rjmp	.+392    	; 0x172a <Gsm_Ard::attachGPRS()+0x1c0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:278
    strcpy_P(at_cmd_buffer, AT_CIFSR);
    15a2:	6b ec       	ldi	r22, 0xCB	; 203
    15a4:	71 e0       	ldi	r23, 0x01	; 1
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:279
    strcpy_P(at_rsp_buffer, AT_ERROR);
    15ae:	6a e8       	ldi	r22, 0x8A	; 138
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	ce 01       	movw	r24, r28
    15b4:	86 96       	adiw	r24, 0x26	; 38
    15b6:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:280
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    15ba:	28 e8       	ldi	r18, 0x88	; 136
    15bc:	33 e1       	ldi	r19, 0x13	; 19
    15be:	ae 01       	movw	r20, r28
    15c0:	4a 5d       	subi	r20, 0xDA	; 218
    15c2:	5f 4f       	sbci	r21, 0xFF	; 255
    15c4:	be 01       	movw	r22, r28
    15c6:	6f 5f       	subi	r22, 0xFF	; 255
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	c7 01       	movw	r24, r14
    15cc:	38 df       	rcall	.-400    	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:282
  switch(n){
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	01 f1       	breq	.+64     	; 0x1612 <Gsm_Ard::attachGPRS()+0xa8>
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <Gsm_Ard::attachGPRS()+0x6e>
    15d6:	ac c0       	rjmp	.+344    	; 0x1730 <Gsm_Ard::attachGPRS()+0x1c6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:288
      Serial.println("DB: GSM_STATE=GSM_IP_STATE");
    15d8:	68 ee       	ldi	r22, 0xE8	; 232
    15da:	71 e0       	ldi	r23, 0x01	; 1
    15dc:	89 ed       	ldi	r24, 0xD9	; 217
    15de:	94 e0       	ldi	r25, 0x04	; 4
    15e0:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:290
      _gsm_state=GSM_IP_STATE;
    15e4:	84 e0       	ldi	r24, 0x04	; 4
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	f6 01       	movw	r30, r12
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:291
      return 0;
    15ee:	00 e0       	ldi	r16, 0x00	; 0
    15f0:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:363
}
    15f2:	c8 01       	movw	r24, r16
    15f4:	e3 96       	adiw	r28, 0x33	; 51
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:300
    strcpy_P(at_cmd_buffer, AT_CIPSERVER_R);
    1612:	63 e6       	ldi	r22, 0x63	; 99
    1614:	71 e0       	ldi	r23, 0x01	; 1
    1616:	ce 01       	movw	r24, r28
    1618:	86 96       	adiw	r24, 0x26	; 38
    161a:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:301
    strcpy_P(at_rsp_buffer, AT_CIPSERVER_RESP);
    161e:	65 e5       	ldi	r22, 0x55	; 85
    1620:	71 e0       	ldi	r23, 0x01	; 1
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:302
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    162a:	28 e8       	ldi	r18, 0x88	; 136
    162c:	33 e1       	ldi	r19, 0x13	; 19
    162e:	ae 01       	movw	r20, r28
    1630:	4f 5f       	subi	r20, 0xFF	; 255
    1632:	5f 4f       	sbci	r21, 0xFF	; 255
    1634:	be 01       	movw	r22, r28
    1636:	6a 5d       	subi	r22, 0xDA	; 218
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	c7 01       	movw	r24, r14
    163c:	00 df       	rcall	.-512    	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:304
  switch(n){
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	f1 f0       	breq	.+60     	; 0x167e <Gsm_Ard::attachGPRS()+0x114>
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	09 f0       	breq	.+2      	; 0x1648 <Gsm_Ard::attachGPRS()+0xde>
    1646:	77 c0       	rjmp	.+238    	; 0x1736 <Gsm_Ard::attachGPRS()+0x1cc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:312
        strcpy_P(at_cmd_buffer, AT_CIPSERVER_SET);
    1648:	66 e4       	ldi	r22, 0x46	; 70
    164a:	71 e0       	ldi	r23, 0x01	; 1
    164c:	ce 01       	movw	r24, r28
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:313
        strcpy_P(at_rsp_buffer, AT_OK);
    1654:	60 e9       	ldi	r22, 0x90	; 144
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	ce 01       	movw	r24, r28
    165a:	86 96       	adiw	r24, 0x26	; 38
    165c:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:314
        n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    1660:	28 e8       	ldi	r18, 0x88	; 136
    1662:	33 e1       	ldi	r19, 0x13	; 19
    1664:	ae 01       	movw	r20, r28
    1666:	4a 5d       	subi	r20, 0xDA	; 218
    1668:	5f 4f       	sbci	r21, 0xFF	; 255
    166a:	be 01       	movw	r22, r28
    166c:	6f 5f       	subi	r22, 0xFF	; 255
    166e:	7f 4f       	sbci	r23, 0xFF	; 255
    1670:	c7 01       	movw	r24, r14
    1672:	e5 de       	rcall	.-566    	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:315
        if(!n){
    1674:	89 2b       	or	r24, r25
    1676:	19 f4       	brne	.+6      	; 0x167e <Gsm_Ard::attachGPRS()+0x114>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:316
          return 4;
    1678:	04 e0       	ldi	r16, 0x04	; 4
    167a:	10 e0       	ldi	r17, 0x00	; 0
    167c:	ba cf       	rjmp	.-140    	; 0x15f2 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:327
    strcpy_P(at_cmd_buffer, AT_CSTT);
    167e:	6e e0       	ldi	r22, 0x0E	; 14
    1680:	71 e0       	ldi	r23, 0x01	; 1
    1682:	ce 01       	movw	r24, r28
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:328
    strcpy_P(at_rsp_buffer, AT_OK);
    168a:	60 e9       	ldi	r22, 0x90	; 144
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	ce 01       	movw	r24, r28
    1690:	86 96       	adiw	r24, 0x26	; 38
    1692:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:329
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    1696:	28 e8       	ldi	r18, 0x88	; 136
    1698:	33 e1       	ldi	r19, 0x13	; 19
    169a:	ae 01       	movw	r20, r28
    169c:	4a 5d       	subi	r20, 0xDA	; 218
    169e:	5f 4f       	sbci	r21, 0xFF	; 255
    16a0:	be 01       	movw	r22, r28
    16a2:	6f 5f       	subi	r22, 0xFF	; 255
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	c7 01       	movw	r24, r14
    16a8:	ca de       	rcall	.-620    	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:331
  if(n){
    16aa:	89 2b       	or	r24, r25
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <Gsm_Ard::attachGPRS()+0x146>
    16ae:	46 c0       	rjmp	.+140    	; 0x173c <Gsm_Ard::attachGPRS()+0x1d2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:338
    strcpy_P(at_cmd_buffer, AT_CIICR);
    16b0:	65 e0       	ldi	r22, 0x05	; 5
    16b2:	71 e0       	ldi	r23, 0x01	; 1
    16b4:	ce 01       	movw	r24, r28
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:339
    strcpy_P(at_rsp_buffer, AT_OK);
    16bc:	60 e9       	ldi	r22, 0x90	; 144
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	ce 01       	movw	r24, r28
    16c2:	86 96       	adiw	r24, 0x26	; 38
    16c4:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:340
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    16c8:	28 e8       	ldi	r18, 0x88	; 136
    16ca:	33 e1       	ldi	r19, 0x13	; 19
    16cc:	ae 01       	movw	r20, r28
    16ce:	4a 5d       	subi	r20, 0xDA	; 218
    16d0:	5f 4f       	sbci	r21, 0xFF	; 255
    16d2:	be 01       	movw	r22, r28
    16d4:	6f 5f       	subi	r22, 0xFF	; 255
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	c7 01       	movw	r24, r14
    16da:	b1 de       	rcall	.-670    	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
    16dc:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:342
  if(n){
    16de:	89 2b       	or	r24, r25
    16e0:	81 f5       	brne	.+96     	; 0x1742 <Gsm_Ard::attachGPRS()+0x1d8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:350
    strcpy_P(at_cmd_buffer, AT_CIFSR);
    16e2:	6b ec       	ldi	r22, 0xCB	; 203
    16e4:	71 e0       	ldi	r23, 0x01	; 1
    16e6:	ce 01       	movw	r24, r28
    16e8:	01 96       	adiw	r24, 0x01	; 1
    16ea:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:351
    strcpy_P(at_rsp_buffer, AT_ERROR);
    16ee:	6a e8       	ldi	r22, 0x8A	; 138
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	ce 01       	movw	r24, r28
    16f4:	86 96       	adiw	r24, 0x26	; 38
    16f6:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:352
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    16fa:	28 e8       	ldi	r18, 0x88	; 136
    16fc:	33 e1       	ldi	r19, 0x13	; 19
    16fe:	ae 01       	movw	r20, r28
    1700:	4a 5d       	subi	r20, 0xDA	; 218
    1702:	5f 4f       	sbci	r21, 0xFF	; 255
    1704:	be 01       	movw	r22, r28
    1706:	6f 5f       	subi	r22, 0xFF	; 255
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	c7 01       	movw	r24, r14
    170c:	98 de       	rcall	.-720    	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:354
  if(n!=1){
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	d9 f4       	brne	.+54     	; 0x1748 <Gsm_Ard::attachGPRS()+0x1de>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:359
  Serial.println("DB: GSM_STATE=GSM_IP_STATE");
    1712:	68 ee       	ldi	r22, 0xE8	; 232
    1714:	71 e0       	ldi	r23, 0x01	; 1
    1716:	89 ed       	ldi	r24, 0xD9	; 217
    1718:	94 e0       	ldi	r25, 0x04	; 4
    171a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:361
  _gsm_state=GSM_IP_STATE;
    171e:	84 e0       	ldi	r24, 0x04	; 4
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	f6 01       	movw	r30, r12
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:362
  return 0;
    1728:	64 cf       	rjmp	.-312    	; 0x15f2 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:272
    return 1;
    172a:	01 e0       	ldi	r16, 0x01	; 1
    172c:	10 e0       	ldi	r17, 0x00	; 0
    172e:	61 cf       	rjmp	.-318    	; 0x15f2 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:284
      return 2;
    1730:	02 e0       	ldi	r16, 0x02	; 2
    1732:	10 e0       	ldi	r17, 0x00	; 0
    1734:	5e cf       	rjmp	.-324    	; 0x15f2 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:306
      return 3;
    1736:	03 e0       	ldi	r16, 0x03	; 3
    1738:	10 e0       	ldi	r17, 0x00	; 0
    173a:	5b cf       	rjmp	.-330    	; 0x15f2 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:332
    return 6;
    173c:	06 e0       	ldi	r16, 0x06	; 6
    173e:	10 e0       	ldi	r17, 0x00	; 0
    1740:	58 cf       	rjmp	.-336    	; 0x15f2 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:343
    return 7;
    1742:	07 e0       	ldi	r16, 0x07	; 7
    1744:	10 e0       	ldi	r17, 0x00	; 0
    1746:	55 cf       	rjmp	.-342    	; 0x15f2 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:355
    return 8;
    1748:	08 e0       	ldi	r16, 0x08	; 8
    174a:	10 e0       	ldi	r17, 0x00	; 0
    174c:	52 cf       	rjmp	.-348    	; 0x15f2 <Gsm_Ard::attachGPRS()+0x88>

0000174e <Gsm_Ard::_disconnect_tcp_socket()>:
_ZN7Gsm_Ard22_disconnect_tcp_socketEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:503
int Gsm_Ard::_disconnect_tcp_socket(){
    174e:	cf 92       	push	r12
    1750:	df 92       	push	r13
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	a5 97       	sbiw	r28, 0x25	; 37
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	6c 01       	movw	r12, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:505
  if(_gsm_state!=GSM_TCP_STATE){
    1770:	7c 01       	movw	r14, r24
    1772:	8a e7       	ldi	r24, 0x7A	; 122
    1774:	e8 1a       	sub	r14, r24
    1776:	8e ef       	ldi	r24, 0xFE	; 254
    1778:	f8 0a       	sbc	r15, r24
    177a:	f7 01       	movw	r30, r14
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	05 97       	sbiw	r24, 0x05	; 5
    1782:	09 f0       	breq	.+2      	; 0x1786 <Gsm_Ard::_disconnect_tcp_socket()+0x38>
    1784:	8c c0       	rjmp	.+280    	; 0x189e <Gsm_Ard::_disconnect_tcp_socket()+0x150>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:512
    strcpy_P(at_cmd_buffer, AT_CIPSTATUS);
    1786:	68 e6       	ldi	r22, 0x68	; 104
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	ce 01       	movw	r24, r28
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:513
    strcpy_P(at_rsp_buffer, AT_OK);
    1792:	60 e9       	ldi	r22, 0x90	; 144
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	ce 01       	movw	r24, r28
    1798:	0e 96       	adiw	r24, 0x0e	; 14
    179a:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:514
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    179e:	28 e8       	ldi	r18, 0x88	; 136
    17a0:	33 e1       	ldi	r19, 0x13	; 19
    17a2:	ae 01       	movw	r20, r28
    17a4:	42 5f       	subi	r20, 0xF2	; 242
    17a6:	5f 4f       	sbci	r21, 0xFF	; 255
    17a8:	be 01       	movw	r22, r28
    17aa:	6f 5f       	subi	r22, 0xFF	; 255
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	c6 01       	movw	r24, r12
    17b0:	46 de       	rcall	.-884    	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:516
  if(n){
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	99 f0       	breq	.+38     	; 0x17dc <Gsm_Ard::_disconnect_tcp_socket()+0x8e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:517
    return 20+n;
    17b6:	8c 01       	movw	r16, r24
    17b8:	0c 5e       	subi	r16, 0xEC	; 236
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:560
}
    17bc:	c8 01       	movw	r24, r16
    17be:	a5 96       	adiw	r28, 0x25	; 37
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:520
  n=_recv_string(10000,2);
    17dc:	42 e0       	ldi	r20, 0x02	; 2
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	60 e1       	ldi	r22, 0x10	; 16
    17e2:	77 e2       	ldi	r23, 0x27	; 39
    17e4:	c6 01       	movw	r24, r12
    17e6:	7e db       	rcall	.-2308   	; 0xee4 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:521
  if(n){
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	21 f0       	breq	.+8      	; 0x17f4 <Gsm_Ard::_disconnect_tcp_socket()+0xa6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:522
    return 30+n;
    17ec:	8c 01       	movw	r16, r24
    17ee:	02 5e       	subi	r16, 0xE2	; 226
    17f0:	1f 4f       	sbci	r17, 0xFF	; 255
    17f2:	e4 cf       	rjmp	.-56     	; 0x17bc <Gsm_Ard::_disconnect_tcp_socket()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:528
    n=_fetch_rsp_wo_cmd(&rsp_len);
    17f4:	be 01       	movw	r22, r28
    17f6:	6c 5d       	subi	r22, 0xDC	; 220
    17f8:	7f 4f       	sbci	r23, 0xFF	; 255
    17fa:	c6 01       	movw	r24, r12
    17fc:	c8 da       	rcall	.-2672   	; 0xd8e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:529
    if(n){
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	21 f0       	breq	.+8      	; 0x180a <Gsm_Ard::_disconnect_tcp_socket()+0xbc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:530
      return 40+n;
    1802:	8c 01       	movw	r16, r24
    1804:	08 5d       	subi	r16, 0xD8	; 216
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	d9 cf       	rjmp	.-78     	; 0x17bc <Gsm_Ard::_disconnect_tcp_socket()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:533
    rsp=new char[rsp_len];
    180a:	8c a1       	ldd	r24, Y+36	; 0x24
    180c:	9d a1       	ldd	r25, Y+37	; 0x25
    180e:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <operator new[](unsigned int)>
    1812:	9b a3       	std	Y+35, r25	; 0x23
    1814:	8a a3       	std	Y+34, r24	; 0x22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:534
    n=_get_rsp(&rsp);
    1816:	be 01       	movw	r22, r28
    1818:	6e 5d       	subi	r22, 0xDE	; 222
    181a:	7f 4f       	sbci	r23, 0xFF	; 255
    181c:	c6 01       	movw	r24, r12
    181e:	1d db       	rcall	.-2502   	; 0xe5a <Gsm_Ard::_get_rsp(char**)>
    1820:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:535
    if(n){
    1822:	89 2b       	or	r24, r25
    1824:	19 f0       	breq	.+6      	; 0x182c <Gsm_Ard::_disconnect_tcp_socket()+0xde>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:536
      return 50+n;
    1826:	0e 5c       	subi	r16, 0xCE	; 206
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	c8 cf       	rjmp	.-112    	; 0x17bc <Gsm_Ard::_disconnect_tcp_socket()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:540
    strcpy_P(exp_rsp, AT_CONNECT_OK);
    182c:	68 ea       	ldi	r22, 0xA8	; 168
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	ce 01       	movw	r24, r28
    1832:	0e 96       	adiw	r24, 0x0e	; 14
    1834:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:541
    if(strncmp(rsp, exp_rsp, rsp_len)==0){
    1838:	4c a1       	ldd	r20, Y+36	; 0x24
    183a:	5d a1       	ldd	r21, Y+37	; 0x25
    183c:	be 01       	movw	r22, r28
    183e:	62 5f       	subi	r22, 0xF2	; 242
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	8a a1       	ldd	r24, Y+34	; 0x22
    1844:	9b a1       	ldd	r25, Y+35	; 0x23
    1846:	0e 94 45 1a 	call	0x348a	; 0x348a <strncmp>
    184a:	89 2b       	or	r24, r25
    184c:	e1 f4       	brne	.+56     	; 0x1886 <Gsm_Ard::_disconnect_tcp_socket()+0x138>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:545
        strcpy_P(at_cmd_buffer, AT_CIPCLOSE);
    184e:	6e e7       	ldi	r22, 0x7E	; 126
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:546
        strcpy_P(at_rsp_buffer, AT_CIPCLOSE_OK);
    185a:	65 e7       	ldi	r22, 0x75	; 117
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	ce 01       	movw	r24, r28
    1860:	49 96       	adiw	r24, 0x19	; 25
    1862:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:547
        n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    1866:	28 e8       	ldi	r18, 0x88	; 136
    1868:	33 e1       	ldi	r19, 0x13	; 19
    186a:	ae 01       	movw	r20, r28
    186c:	47 5e       	subi	r20, 0xE7	; 231
    186e:	5f 4f       	sbci	r21, 0xFF	; 255
    1870:	be 01       	movw	r22, r28
    1872:	6f 5f       	subi	r22, 0xFF	; 255
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
    1876:	c6 01       	movw	r24, r12
    1878:	e2 dd       	rcall	.-1084   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:549
      if(n){
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	21 f0       	breq	.+8      	; 0x1886 <Gsm_Ard::_disconnect_tcp_socket()+0x138>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:550
        return 60+n;
    187e:	8c 01       	movw	r16, r24
    1880:	04 5c       	subi	r16, 0xC4	; 196
    1882:	1f 4f       	sbci	r17, 0xFF	; 255
    1884:	9b cf       	rjmp	.-202    	; 0x17bc <Gsm_Ard::_disconnect_tcp_socket()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:555
  _gsm_state=GSM_IP_STATE;
    1886:	84 e0       	ldi	r24, 0x04	; 4
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	f7 01       	movw	r30, r14
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:557
  Serial.println("DB: GSM_STATE=GSM_IP_STATE");
    1890:	68 ee       	ldi	r22, 0xE8	; 232
    1892:	71 e0       	ldi	r23, 0x01	; 1
    1894:	89 ed       	ldi	r24, 0xD9	; 217
    1896:	94 e0       	ldi	r25, 0x04	; 4
    1898:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
    189c:	8f cf       	rjmp	.-226    	; 0x17bc <Gsm_Ard::_disconnect_tcp_socket()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:506
    return 10;
    189e:	0a e0       	ldi	r16, 0x0A	; 10
    18a0:	10 e0       	ldi	r17, 0x00	; 0
    18a2:	8c cf       	rjmp	.-232    	; 0x17bc <Gsm_Ard::_disconnect_tcp_socket()+0x6e>

000018a4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>:
_ZN7Gsm_Ard26_send_cmd_comp_several_rspEPKcPPcji():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:702
int Gsm_Ard::_send_cmd_comp_several_rsp(const char* cmd, char** exp_rsps, unsigned int exp_rsps_len, int recv_wait_period){
    18a4:	4f 92       	push	r4
    18a6:	5f 92       	push	r5
    18a8:	6f 92       	push	r6
    18aa:	7f 92       	push	r7
    18ac:	8f 92       	push	r8
    18ae:	9f 92       	push	r9
    18b0:	af 92       	push	r10
    18b2:	bf 92       	push	r11
    18b4:	cf 92       	push	r12
    18b6:	df 92       	push	r13
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x22>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x24>
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	5c 01       	movw	r10, r24
    18ce:	7b 01       	movw	r14, r22
    18d0:	54 2e       	mov	r5, r20
    18d2:	45 2e       	mov	r4, r21
    18d4:	39 01       	movw	r6, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:704
  int cmd_size=strlen(cmd);
    18d6:	fb 01       	movw	r30, r22
    18d8:	01 90       	ld	r0, Z+
    18da:	00 20       	and	r0, r0
    18dc:	e9 f7       	brne	.-6      	; 0x18d8 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x34>
    18de:	31 97       	sbiw	r30, 0x01	; 1
    18e0:	6f 01       	movw	r12, r30
    18e2:	c6 1a       	sub	r12, r22
    18e4:	d7 0a       	sbc	r13, r23
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:707
  while(_ss.available()) _ss.read();
    18e6:	4c 01       	movw	r8, r24
    18e8:	82 e7       	ldi	r24, 0x72	; 114
    18ea:	88 1a       	sub	r8, r24
    18ec:	8e ef       	ldi	r24, 0xFE	; 254
    18ee:	98 0a       	sbc	r9, r24
    18f0:	c4 01       	movw	r24, r8
    18f2:	e2 d5       	rcall	.+3012   	; 0x24b8 <SoftwareSerial::available()>
    18f4:	89 2b       	or	r24, r25
    18f6:	19 f0       	breq	.+6      	; 0x18fe <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x5a>
    18f8:	c4 01       	movw	r24, r8
    18fa:	44 d5       	rcall	.+2696   	; 0x2384 <SoftwareSerial::read()>
    18fc:	f9 cf       	rjmp	.-14     	; 0x18f0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x4c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:709
  Serial.print("DB-SND: [");
    18fe:	6e ed       	ldi	r22, 0xDE	; 222
    1900:	71 e0       	ldi	r23, 0x01	; 1
    1902:	89 ed       	ldi	r24, 0xD9	; 217
    1904:	94 e0       	ldi	r25, 0x04	; 4
    1906:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
    190a:	47 01       	movw	r8, r14
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:710
  for(int i=0;i<cmd_size;i++){
    190c:	c4 01       	movw	r24, r8
    190e:	8e 19       	sub	r24, r14
    1910:	9f 09       	sbc	r25, r15
    1912:	8c 15       	cp	r24, r12
    1914:	9d 05       	cpc	r25, r13
    1916:	84 f4       	brge	.+32     	; 0x1938 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x94>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:711
    Serial.print((uint8_t) cmd[i]);
    1918:	f4 01       	movw	r30, r8
    191a:	61 91       	ld	r22, Z+
    191c:	4f 01       	movw	r8, r30
    191e:	4a e0       	ldi	r20, 0x0A	; 10
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	89 ed       	ldi	r24, 0xD9	; 217
    1924:	94 e0       	ldi	r25, 0x04	; 4
    1926:	0e 94 65 17 	call	0x2eca	; 0x2eca <Print::print(unsigned char, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:712
    Serial.print(" ");
    192a:	6c e7       	ldi	r22, 0x7C	; 124
    192c:	72 e0       	ldi	r23, 0x02	; 2
    192e:	89 ed       	ldi	r24, 0xD9	; 217
    1930:	94 e0       	ldi	r25, 0x04	; 4
    1932:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:710
  for(int i=0;i<cmd_size;i++){
    1936:	ea cf       	rjmp	.-44     	; 0x190c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x68>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:714
  Serial.println("]");
    1938:	6b eb       	ldi	r22, 0xBB	; 187
    193a:	71 e0       	ldi	r23, 0x01	; 1
    193c:	89 ed       	ldi	r24, 0xD9	; 217
    193e:	94 e0       	ldi	r25, 0x04	; 4
    1940:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:716
  _write_cmd(cmd);
    1944:	b7 01       	movw	r22, r14
    1946:	c5 01       	movw	r24, r10
    1948:	55 dd       	rcall	.-1366   	; 0x13f4 <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:717
  n=_recv_string(recv_wait_period);
    194a:	43 e0       	ldi	r20, 0x03	; 3
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	b8 01       	movw	r22, r16
    1950:	c5 01       	movw	r24, r10
    1952:	c8 da       	rcall	.-2672   	; 0xee4 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:718
  if(!n){
    1954:	89 2b       	or	r24, r25
    1956:	09 f0       	breq	.+2      	; 0x195a <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0xb6>
    1958:	4a c0       	rjmp	.+148    	; 0x19ee <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x14a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:719
    n=_fetch_rsp_from_recv(cmd, cmd_size, &rsp_len);
    195a:	9e 01       	movw	r18, r28
    195c:	2f 5f       	subi	r18, 0xFF	; 255
    195e:	3f 4f       	sbci	r19, 0xFF	; 255
    1960:	a6 01       	movw	r20, r12
    1962:	b7 01       	movw	r22, r14
    1964:	c5 01       	movw	r24, r10
    1966:	8b d9       	rcall	.-3306   	; 0xc7e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:720
    if(!n){
    1968:	89 2b       	or	r24, r25
    196a:	09 f0       	breq	.+2      	; 0x196e <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0xca>
    196c:	43 c0       	rjmp	.+134    	; 0x19f4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x150>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:721
      rsp=new char[rsp_len];
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	9a 81       	ldd	r25, Y+2	; 0x02
    1972:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <operator new[](unsigned int)>
    1976:	9c 83       	std	Y+4, r25	; 0x04
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:722
      n=_get_rsp(&rsp);
    1978:	8b 83       	std	Y+3, r24	; 0x03
    197a:	be 01       	movw	r22, r28
    197c:	6d 5f       	subi	r22, 0xFD	; 253
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	c5 01       	movw	r24, r10
    1982:	6b da       	rcall	.-2858   	; 0xe5a <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:723
      if(n){
    1984:	89 2b       	or	r24, r25
    1986:	c1 f5       	brne	.+112    	; 0x19f8 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x154>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:727
        if(!strncmp(exp_rsps[j], rsp, strlen(exp_rsps[j]))) return j;
    1988:	cb 80       	ldd	r12, Y+3	; 0x03
    198a:	dc 80       	ldd	r13, Y+4	; 0x04
    198c:	e5 2c       	mov	r14, r5
    198e:	f4 2c       	mov	r15, r4
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:726
      for(unsigned int j=0;j<exp_rsps_len;j++){
    1994:	06 15       	cp	r16, r6
    1996:	17 05       	cpc	r17, r7
    1998:	51 f1       	breq	.+84     	; 0x19ee <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x14a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:727
        if(!strncmp(exp_rsps[j], rsp, strlen(exp_rsps[j]))) return j;
    199a:	f7 01       	movw	r30, r14
    199c:	81 91       	ld	r24, Z+
    199e:	91 91       	ld	r25, Z+
    19a0:	7f 01       	movw	r14, r30
    19a2:	fc 01       	movw	r30, r24
    19a4:	01 90       	ld	r0, Z+
    19a6:	00 20       	and	r0, r0
    19a8:	e9 f7       	brne	.-6      	; 0x19a4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x100>
    19aa:	31 97       	sbiw	r30, 0x01	; 1
    19ac:	af 01       	movw	r20, r30
    19ae:	48 1b       	sub	r20, r24
    19b0:	59 0b       	sbc	r21, r25
    19b2:	b6 01       	movw	r22, r12
    19b4:	0e 94 45 1a 	call	0x348a	; 0x348a <strncmp>
    19b8:	89 2b       	or	r24, r25
    19ba:	b1 f4       	brne	.+44     	; 0x19e8 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x144>
    19bc:	c8 01       	movw	r24, r16
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:735
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	ff 90       	pop	r15
    19d0:	ef 90       	pop	r14
    19d2:	df 90       	pop	r13
    19d4:	cf 90       	pop	r12
    19d6:	bf 90       	pop	r11
    19d8:	af 90       	pop	r10
    19da:	9f 90       	pop	r9
    19dc:	8f 90       	pop	r8
    19de:	7f 90       	pop	r7
    19e0:	6f 90       	pop	r6
    19e2:	5f 90       	pop	r5
    19e4:	4f 90       	pop	r4
    19e6:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:726
      for(unsigned int j=0;j<exp_rsps_len;j++){
    19e8:	0f 5f       	subi	r16, 0xFF	; 255
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	d3 cf       	rjmp	.-90     	; 0x1994 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0xf0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:734
  return -1;
    19ee:	8f ef       	ldi	r24, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:724
        return -2;
    19f0:	9f ef       	ldi	r25, 0xFF	; 255
    19f2:	e5 cf       	rjmp	.-54     	; 0x19be <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x11a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:731
      return -3;
    19f4:	8d ef       	ldi	r24, 0xFD	; 253
    19f6:	fc cf       	rjmp	.-8      	; 0x19f0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x14c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:724
        return -2;
    19f8:	8e ef       	ldi	r24, 0xFE	; 254
    19fa:	fa cf       	rjmp	.-12     	; 0x19f0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x14c>

000019fc <Gsm_Ard::init_gsm_module()>:
_ZN7Gsm_Ard15init_gsm_moduleEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:77
int Gsm_Ard::init_gsm_module(){
    19fc:	4f 92       	push	r4
    19fe:	5f 92       	push	r5
    1a00:	6f 92       	push	r6
    1a02:	7f 92       	push	r7
    1a04:	8f 92       	push	r8
    1a06:	9f 92       	push	r9
    1a08:	af 92       	push	r10
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	c6 54       	subi	r28, 0x46	; 70
    1a22:	d1 09       	sbc	r29, r1
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	5c 01       	movw	r10, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:79
  _gsm_state=GSM_OFF_STATE;
    1a30:	4c 01       	movw	r8, r24
    1a32:	8a e7       	ldi	r24, 0x7A	; 122
    1a34:	88 1a       	sub	r8, r24
    1a36:	8e ef       	ldi	r24, 0xFE	; 254
    1a38:	98 0a       	sbc	r9, r24
    1a3a:	f4 01       	movw	r30, r8
    1a3c:	11 82       	std	Z+1, r1	; 0x01
    1a3e:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:80
  _ss = SoftwareSerial(_GSM_RXPIN_, _GSM_TXPIN_);
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	48 e0       	ldi	r20, 0x08	; 8
    1a44:	67 e0       	ldi	r22, 0x07	; 7
    1a46:	ce 01       	movw	r24, r28
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	7c 01       	movw	r14, r24
    1a4c:	51 d6       	rcall	.+3234   	; 0x26f0 <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>
    1a4e:	85 01       	movw	r16, r10
    1a50:	02 57       	subi	r16, 0x72	; 114
    1a52:	1e 4f       	sbci	r17, 0xFE	; 254
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:34
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	f8 01       	movw	r30, r16
    1a5a:	93 83       	std	Z+3, r25	; 0x03
    1a5c:	82 83       	std	Z+2, r24	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:49
    1a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a60:	9e 81       	ldd	r25, Y+6	; 0x06
    1a62:	af 81       	ldd	r26, Y+7	; 0x07
    1a64:	b8 85       	ldd	r27, Y+8	; 0x08
    1a66:	84 83       	std	Z+4, r24	; 0x04
    1a68:	95 83       	std	Z+5, r25	; 0x05
    1a6a:	a6 83       	std	Z+6, r26	; 0x06
    1a6c:	b7 83       	std	Z+7, r27	; 0x07
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a74:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a76:	80 87       	std	Z+8, r24	; 0x08
    1a78:	91 87       	std	Z+9, r25	; 0x09
    1a7a:	a2 87       	std	Z+10, r26	; 0x0a
    1a7c:	b3 87       	std	Z+11, r27	; 0x0b
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:50
    1a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a80:	84 87       	std	Z+12, r24	; 0x0c
    1a82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a84:	85 87       	std	Z+13, r24	; 0x0d
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	98 89       	ldd	r25, Y+16	; 0x10
    1a8a:	97 87       	std	Z+15, r25	; 0x0f
    1a8c:	86 87       	std	Z+14, r24	; 0x0e
    1a8e:	89 89       	ldd	r24, Y+17	; 0x11
    1a90:	80 8b       	std	Z+16, r24	; 0x10
    1a92:	8a 89       	ldd	r24, Y+18	; 0x12
    1a94:	9b 89       	ldd	r25, Y+19	; 0x13
    1a96:	92 8b       	std	Z+18, r25	; 0x12
    1a98:	81 8b       	std	Z+17, r24	; 0x11
    1a9a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a9c:	9d 89       	ldd	r25, Y+21	; 0x15
    1a9e:	94 8b       	std	Z+20, r25	; 0x14
    1aa0:	83 8b       	std	Z+19, r24	; 0x13
    1aa2:	8e 89       	ldd	r24, Y+22	; 0x16
    1aa4:	85 8b       	std	Z+21, r24	; 0x15
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	97 8b       	std	Z+23, r25	; 0x17
    1aac:	86 8b       	std	Z+22, r24	; 0x16
    1aae:	89 8d       	ldd	r24, Y+25	; 0x19
    1ab0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ab2:	91 8f       	std	Z+25, r25	; 0x19
    1ab4:	80 8f       	std	Z+24, r24	; 0x18
    1ab6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aba:	93 8f       	std	Z+27, r25	; 0x1b
    1abc:	82 8f       	std	Z+26, r24	; 0x1a
    1abe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ac0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ac2:	95 8f       	std	Z+29, r25	; 0x1d
    1ac4:	84 8f       	std	Z+28, r24	; 0x1c
    1ac6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ac8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1aca:	90 fb       	bst	r25, 0
    1acc:	80 f9       	bld	r24, 0
    1ace:	96 95       	lsr	r25
    1ad0:	91 70       	andi	r25, 0x01	; 1
    1ad2:	90 fb       	bst	r25, 0
    1ad4:	81 f9       	bld	r24, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:80
  static SoftwareSerial *active_object;

  // private methods
  inline void recv() __attribute__((__always_inline__));
  uint8_t rx_pin_read();
  void setTX(uint8_t transmitPin);
    1ad6:	86 8f       	std	Z+30, r24	; 0x1e
    1ad8:	c7 01       	movw	r24, r14
    1ada:	b6 d5       	rcall	.+2924   	; 0x2648 <SoftwareSerial::~SoftwareSerial()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:82
  void setRX(uint8_t receivePin);
  inline void setRxIntMsk(bool enable) __attribute__((__always_inline__));
    1adc:	6f e9       	ldi	r22, 0x9F	; 159
    1ade:	71 e0       	ldi	r23, 0x01	; 1
    1ae0:	89 ed       	ldi	r24, 0xD9	; 217
    1ae2:	94 e0       	ldi	r25, 0x04	; 4
    1ae4:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:84

  // Return num - sub, or 1 if the result would be < 1
    1ae8:	40 e6       	ldi	r20, 0x60	; 96
    1aea:	59 e0       	ldi	r21, 0x09	; 9
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	c8 01       	movw	r24, r16
    1af2:	27 d6       	rcall	.+3150   	; 0x2742 <SoftwareSerial::begin(long)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:88
  static uint16_t subtract_cap(uint16_t num, uint16_t sub);

  // private static method for timing
  static inline void tunedDelay(uint16_t delay);
    1af4:	6e 01       	movw	r12, r28
    1af6:	fa e2       	ldi	r31, 0x2A	; 42
    1af8:	cf 0e       	add	r12, r31
    1afa:	d1 1c       	adc	r13, r1
    1afc:	63 e6       	ldi	r22, 0x63	; 99
    1afe:	72 e0       	ldi	r23, 0x02	; 2
    1b00:	c6 01       	movw	r24, r12
    1b02:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:89

    1b06:	60 e9       	ldi	r22, 0x90	; 144
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	c7 01       	movw	r24, r14
    1b0c:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:90
public:
    1b10:	28 e8       	ldi	r18, 0x88	; 136
    1b12:	33 e1       	ldi	r19, 0x13	; 19
    1b14:	a7 01       	movw	r20, r14
    1b16:	b6 01       	movw	r22, r12
    1b18:	c5 01       	movw	r24, r10
    1b1a:	91 dc       	rcall	.-1758   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:92
  // public methods
  SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic = false);
    1b1c:	89 2b       	or	r24, r25
    1b1e:	59 f4       	brne	.+22     	; 0x1b36 <Gsm_Ard::init_gsm_module()+0x13a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:93
  ~SoftwareSerial();
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	f4 01       	movw	r30, r8
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:95
  void begin(long speed);
  bool listen();
    1b2a:	63 e0       	ldi	r22, 0x03	; 3
    1b2c:	72 e0       	ldi	r23, 0x02	; 2
    1b2e:	89 ed       	ldi	r24, 0xD9	; 217
    1b30:	94 e0       	ldi	r25, 0x04	; 4
    1b32:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
    1b36:	8e e7       	ldi	r24, 0x7E	; 126
    1b38:	68 2e       	mov	r6, r24
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	78 2e       	mov	r7, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:108
  virtual int read();
  virtual int available();
  virtual void flush();
  operator bool() { return true; }
  
  using Print::write;
    1b3e:	44 24       	eor	r4, r4
    1b40:	43 94       	inc	r4
    1b42:	51 2c       	mov	r5, r1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:98
  bool stopListening();
    1b44:	f4 01       	movw	r30, r8
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	91 f5       	brne	.+100    	; 0x1bb2 <Gsm_Ard::init_gsm_module()+0x1b6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:115
  // public only for easy access by interrupt handlers
  static inline void handle_interrupt() __attribute__((__always_inline__));
};

// Arduino 0012 workaround
#undef int
    1b4e:	f4 01       	movw	r30, r8
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <Gsm_Ard::init_gsm_module()+0x15e>
    1b58:	62 c1       	rjmp	.+708    	; 0x1e1e <Gsm_Ard::init_gsm_module()+0x422>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:121
#undef char
#undef long
#undef byte
#undef float
#undef abs
#undef round
    1b5a:	6a e5       	ldi	r22, 0x5A	; 90
    1b5c:	72 e0       	ldi	r23, 0x02	; 2
    1b5e:	ce 01       	movw	r24, r28
    1b60:	c7 96       	adiw	r24, 0x37	; 55
    1b62:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:125

#endif
    1b66:	6d e4       	ldi	r22, 0x4D	; 77
    1b68:	72 e0       	ldi	r23, 0x02	; 2
    1b6a:	c6 01       	movw	r24, r12
    1b6c:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:126
    1b70:	6e e3       	ldi	r22, 0x3E	; 62
    1b72:	72 e0       	ldi	r23, 0x02	; 2
    1b74:	c7 01       	movw	r24, r14
    1b76:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:127
    1b7a:	25 96       	adiw	r28, 0x05	; 5
    1b7c:	df ae       	std	Y+63, r13	; 0x3f
    1b7e:	ce ae       	std	Y+62, r12	; 0x3e
    1b80:	25 97       	sbiw	r28, 0x05	; 5
    1b82:	27 96       	adiw	r28, 0x07	; 7
    1b84:	ff ae       	std	Y+63, r15	; 0x3f
    1b86:	ee ae       	std	Y+62, r14	; 0x3e
    1b88:	27 97       	sbiw	r28, 0x07	; 7
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:128
    1b8a:	08 e8       	ldi	r16, 0x88	; 136
    1b8c:	13 e1       	ldi	r17, 0x13	; 19
    1b8e:	22 e0       	ldi	r18, 0x02	; 2
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	ae 01       	movw	r20, r28
    1b94:	4d 5b       	subi	r20, 0xBD	; 189
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	be 01       	movw	r22, r28
    1b9a:	69 5c       	subi	r22, 0xC9	; 201
    1b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9e:	c5 01       	movw	r24, r10
    1ba0:	81 de       	rcall	.-766    	; 0x18a4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:130
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <Gsm_Ard::init_gsm_module()+0x1ac>
    1ba6:	42 c0       	rjmp	.+132    	; 0x1c2c <Gsm_Ard::init_gsm_module()+0x230>
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	69 f1       	breq	.+90     	; 0x1c06 <Gsm_Ard::init_gsm_module()+0x20a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:132
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	18 c1       	rjmp	.+560    	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:99
  bool overflow() { bool ret = _buffer_overflow; if (ret) _buffer_overflow = false; return ret; }
    1bb2:	f3 01       	movw	r30, r6
    1bb4:	41 91       	ld	r20, Z+
    1bb6:	51 91       	ld	r21, Z+
    1bb8:	61 91       	ld	r22, Z+
    1bba:	71 91       	ld	r23, Z+
    1bbc:	3f 01       	movw	r6, r30
    1bbe:	c8 01       	movw	r24, r16
    1bc0:	c0 d5       	rcall	.+2944   	; 0x2742 <SoftwareSerial::begin(long)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:103
  virtual int read();
    1bc2:	63 e6       	ldi	r22, 0x63	; 99
    1bc4:	72 e0       	ldi	r23, 0x02	; 2
    1bc6:	c6 01       	movw	r24, r12
    1bc8:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:104
  virtual int available();
    1bcc:	60 e9       	ldi	r22, 0x90	; 144
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	c7 01       	movw	r24, r14
    1bd2:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:105
  virtual void flush();
    1bd6:	28 e8       	ldi	r18, 0x88	; 136
    1bd8:	33 e1       	ldi	r19, 0x13	; 19
    1bda:	a7 01       	movw	r20, r14
    1bdc:	b6 01       	movw	r22, r12
    1bde:	c5 01       	movw	r24, r10
    1be0:	2e dc       	rcall	.-1956   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:107
  
    1be2:	89 2b       	or	r24, r25
    1be4:	49 f4       	brne	.+18     	; 0x1bf8 <Gsm_Ard::init_gsm_module()+0x1fc>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:108
  using Print::write;
    1be6:	f4 01       	movw	r30, r8
    1be8:	51 82       	std	Z+1, r5	; 0x01
    1bea:	40 82       	st	Z, r4
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:110
  // public only for easy access by interrupt handlers
    1bec:	63 e0       	ldi	r22, 0x03	; 3
    1bee:	72 e0       	ldi	r23, 0x02	; 2
    1bf0:	89 ed       	ldi	r24, 0xD9	; 217
    1bf2:	94 e0       	ldi	r25, 0x04	; 4
    1bf4:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:98
  bool stopListening();
    1bf8:	fe e9       	ldi	r31, 0x9E	; 158
    1bfa:	6f 16       	cp	r6, r31
    1bfc:	f2 e0       	ldi	r31, 0x02	; 2
    1bfe:	7f 06       	cpc	r7, r31
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <Gsm_Ard::init_gsm_module()+0x208>
    1c02:	a0 cf       	rjmp	.-192    	; 0x1b44 <Gsm_Ard::init_gsm_module()+0x148>
    1c04:	a4 cf       	rjmp	.-184    	; 0x1b4e <Gsm_Ard::init_gsm_module()+0x152>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:144
    1c06:	61 e3       	ldi	r22, 0x31	; 49
    1c08:	72 e0       	ldi	r23, 0x02	; 2
    1c0a:	c7 01       	movw	r24, r14
    1c0c:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:145
    1c10:	60 e9       	ldi	r22, 0x90	; 144
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	c6 01       	movw	r24, r12
    1c16:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:146
    1c1a:	28 e8       	ldi	r18, 0x88	; 136
    1c1c:	33 e1       	ldi	r19, 0x13	; 19
    1c1e:	a6 01       	movw	r20, r12
    1c20:	b7 01       	movw	r22, r14
    1c22:	c5 01       	movw	r24, r10
    1c24:	0c dc       	rcall	.-2024   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:148
    1c26:	89 2b       	or	r24, r25
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <Gsm_Ard::init_gsm_module()+0x230>
    1c2a:	fc c0       	rjmp	.+504    	; 0x1e24 <Gsm_Ard::init_gsm_module()+0x428>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:151
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	f4 01       	movw	r30, r8
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:153
    1c36:	6e e1       	ldi	r22, 0x1E	; 30
    1c38:	72 e0       	ldi	r23, 0x02	; 2
    1c3a:	89 ed       	ldi	r24, 0xD9	; 217
    1c3c:	94 e0       	ldi	r25, 0x04	; 4
    1c3e:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Print::println(char const*)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:160
    1c42:	67 e2       	ldi	r22, 0x27	; 39
    1c44:	72 e0       	ldi	r23, 0x02	; 2
    1c46:	ce 01       	movw	r24, r28
    1c48:	c7 96       	adiw	r24, 0x37	; 55
    1c4a:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:164
    1c4e:	6d e1       	ldi	r22, 0x1D	; 29
    1c50:	72 e0       	ldi	r23, 0x02	; 2
    1c52:	c6 01       	movw	r24, r12
    1c54:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:165
    1c58:	63 e1       	ldi	r22, 0x13	; 19
    1c5a:	72 e0       	ldi	r23, 0x02	; 2
    1c5c:	c7 01       	movw	r24, r14
    1c5e:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:166
    1c62:	25 96       	adiw	r28, 0x05	; 5
    1c64:	df ae       	std	Y+63, r13	; 0x3f
    1c66:	ce ae       	std	Y+62, r12	; 0x3e
    1c68:	25 97       	sbiw	r28, 0x05	; 5
    1c6a:	27 96       	adiw	r28, 0x07	; 7
    1c6c:	ff ae       	std	Y+63, r15	; 0x3f
    1c6e:	ee ae       	std	Y+62, r14	; 0x3e
    1c70:	27 97       	sbiw	r28, 0x07	; 7
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:167
    1c72:	08 e8       	ldi	r16, 0x88	; 136
    1c74:	13 e1       	ldi	r17, 0x13	; 19
    1c76:	22 e0       	ldi	r18, 0x02	; 2
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	ae 01       	movw	r20, r28
    1c7c:	4d 5b       	subi	r20, 0xBD	; 189
    1c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c80:	be 01       	movw	r22, r28
    1c82:	69 5c       	subi	r22, 0xC9	; 201
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	c5 01       	movw	r24, r10
    1c88:	0d de       	rcall	.-998    	; 0x18a4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:169
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	29 f0       	breq	.+10     	; 0x1c98 <Gsm_Ard::init_gsm_module()+0x29c>
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	b1 f0       	breq	.+44     	; 0x1cbe <Gsm_Ard::init_gsm_module()+0x2c2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:171
    1c92:	84 e0       	ldi	r24, 0x04	; 4
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a5 c0       	rjmp	.+330    	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:177
    1c98:	68 e0       	ldi	r22, 0x08	; 8
    1c9a:	72 e0       	ldi	r23, 0x02	; 2
    1c9c:	c7 01       	movw	r24, r14
    1c9e:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:178
    1ca2:	60 e9       	ldi	r22, 0x90	; 144
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	c6 01       	movw	r24, r12
    1ca8:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:179
    1cac:	28 e8       	ldi	r18, 0x88	; 136
    1cae:	33 e1       	ldi	r19, 0x13	; 19
    1cb0:	a6 01       	movw	r20, r12
    1cb2:	b7 01       	movw	r22, r14
    1cb4:	c5 01       	movw	r24, r10
    1cb6:	c3 db       	rcall	.-2170   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:181
    1cb8:	89 2b       	or	r24, r25
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <Gsm_Ard::init_gsm_module()+0x2c2>
    1cbc:	b6 c0       	rjmp	.+364    	; 0x1e2a <Gsm_Ard::init_gsm_module()+0x42e>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:191
    1cbe:	6e ef       	ldi	r22, 0xFE	; 254
    1cc0:	71 e0       	ldi	r23, 0x01	; 1
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	c7 96       	adiw	r24, 0x37	; 55
    1cc6:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:195
    1cca:	64 ef       	ldi	r22, 0xF4	; 244
    1ccc:	71 e0       	ldi	r23, 0x01	; 1
    1cce:	c6 01       	movw	r24, r12
    1cd0:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:196
    1cd4:	6a ee       	ldi	r22, 0xEA	; 234
    1cd6:	71 e0       	ldi	r23, 0x01	; 1
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:197
    1cde:	25 96       	adiw	r28, 0x05	; 5
    1ce0:	df ae       	std	Y+63, r13	; 0x3f
    1ce2:	ce ae       	std	Y+62, r12	; 0x3e
    1ce4:	25 97       	sbiw	r28, 0x05	; 5
    1ce6:	27 96       	adiw	r28, 0x07	; 7
    1ce8:	ff ae       	std	Y+63, r15	; 0x3f
    1cea:	ee ae       	std	Y+62, r14	; 0x3e
    1cec:	27 97       	sbiw	r28, 0x07	; 7
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:198
    1cee:	08 e8       	ldi	r16, 0x88	; 136
    1cf0:	13 e1       	ldi	r17, 0x13	; 19
    1cf2:	22 e0       	ldi	r18, 0x02	; 2
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	ae 01       	movw	r20, r28
    1cf8:	4d 5b       	subi	r20, 0xBD	; 189
    1cfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1cfc:	be 01       	movw	r22, r28
    1cfe:	69 5c       	subi	r22, 0xC9	; 201
    1d00:	7f 4f       	sbci	r23, 0xFF	; 255
    1d02:	c5 01       	movw	r24, r10
    1d04:	cf dd       	rcall	.-1122   	; 0x18a4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:200
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	31 f0       	breq	.+12     	; 0x1d16 <Gsm_Ard::init_gsm_module()+0x31a>
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <Gsm_Ard::init_gsm_module()+0x314>
    1d0e:	81 c0       	rjmp	.+258    	; 0x1e12 <Gsm_Ard::init_gsm_module()+0x416>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:202
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	66 c0       	rjmp	.+204    	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:208
    1d16:	6f ed       	ldi	r22, 0xDF	; 223
    1d18:	71 e0       	ldi	r23, 0x01	; 1
    1d1a:	c7 01       	movw	r24, r14
    1d1c:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:209
    1d20:	60 e9       	ldi	r22, 0x90	; 144
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	c6 01       	movw	r24, r12
    1d26:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:210
    1d2a:	20 e1       	ldi	r18, 0x10	; 16
    1d2c:	37 e2       	ldi	r19, 0x27	; 39
    1d2e:	a6 01       	movw	r20, r12
    1d30:	b7 01       	movw	r22, r14
    1d32:	c5 01       	movw	r24, r10
    1d34:	84 db       	rcall	.-2296   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:212
    1d36:	89 2b       	or	r24, r25
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <Gsm_Ard::init_gsm_module()+0x340>
    1d3a:	7a c0       	rjmp	.+244    	; 0x1e30 <Gsm_Ard::init_gsm_module()+0x434>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:225
    1d3c:	6f eb       	ldi	r22, 0xBF	; 191
    1d3e:	71 e0       	ldi	r23, 0x01	; 1
    1d40:	ce 01       	movw	r24, r28
    1d42:	c7 96       	adiw	r24, 0x37	; 55
    1d44:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:229
    1d48:	63 eb       	ldi	r22, 0xB3	; 179
    1d4a:	71 e0       	ldi	r23, 0x01	; 1
    1d4c:	c6 01       	movw	r24, r12
    1d4e:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:230
    1d52:	67 ea       	ldi	r22, 0xA7	; 167
    1d54:	71 e0       	ldi	r23, 0x01	; 1
    1d56:	c7 01       	movw	r24, r14
    1d58:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:231
    1d5c:	25 96       	adiw	r28, 0x05	; 5
    1d5e:	df ae       	std	Y+63, r13	; 0x3f
    1d60:	ce ae       	std	Y+62, r12	; 0x3e
    1d62:	25 97       	sbiw	r28, 0x05	; 5
    1d64:	27 96       	adiw	r28, 0x07	; 7
    1d66:	ff ae       	std	Y+63, r15	; 0x3f
    1d68:	ee ae       	std	Y+62, r14	; 0x3e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:232
    1d6a:	27 97       	sbiw	r28, 0x07	; 7
    1d6c:	08 e8       	ldi	r16, 0x88	; 136
    1d6e:	13 e1       	ldi	r17, 0x13	; 19
    1d70:	22 e0       	ldi	r18, 0x02	; 2
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	ae 01       	movw	r20, r28
    1d76:	4d 5b       	subi	r20, 0xBD	; 189
    1d78:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7a:	be 01       	movw	r22, r28
    1d7c:	69 5c       	subi	r22, 0xC9	; 201
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	c5 01       	movw	r24, r10
    1d82:	90 dd       	rcall	.-1248   	; 0x18a4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:234
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	b1 f0       	breq	.+44     	; 0x1db4 <Gsm_Ard::init_gsm_module()+0x3b8>
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <Gsm_Ard::init_gsm_module()+0x392>
    1d8c:	54 c0       	rjmp	.+168    	; 0x1e36 <Gsm_Ard::init_gsm_module()+0x43a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:244
    1d8e:	6a e9       	ldi	r22, 0x9A	; 154
    1d90:	71 e0       	ldi	r23, 0x01	; 1
    1d92:	c7 01       	movw	r24, r14
    1d94:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:245
    1d98:	60 e9       	ldi	r22, 0x90	; 144
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	c6 01       	movw	r24, r12
    1d9e:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:246
    1da2:	28 e8       	ldi	r18, 0x88	; 136
    1da4:	33 e1       	ldi	r19, 0x13	; 19
    1da6:	a6 01       	movw	r20, r12
    1da8:	b7 01       	movw	r22, r14
    1daa:	c5 01       	movw	r24, r10
    1dac:	48 db       	rcall	.-2416   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:248
    1dae:	89 2b       	or	r24, r25
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <Gsm_Ard::init_gsm_module()+0x3b8>
    1db2:	44 c0       	rjmp	.+136    	; 0x1e3c <Gsm_Ard::init_gsm_module()+0x440>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:257
    1db4:	61 e7       	ldi	r22, 0x71	; 113
    1db6:	71 e0       	ldi	r23, 0x01	; 1
    1db8:	c7 01       	movw	r24, r14
    1dba:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:258
    1dbe:	60 e9       	ldi	r22, 0x90	; 144
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	c6 01       	movw	r24, r12
    1dc4:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:259
    1dc8:	28 e8       	ldi	r18, 0x88	; 136
    1dca:	33 e1       	ldi	r19, 0x13	; 19
    1dcc:	a6 01       	movw	r20, r12
    1dce:	b7 01       	movw	r22, r14
    1dd0:	c5 01       	movw	r24, r10
    1dd2:	35 db       	rcall	.-2454   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:261
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	a9 f5       	brne	.+106    	; 0x1e42 <Gsm_Ard::init_gsm_module()+0x446>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:264
    1dd8:	23 e0       	ldi	r18, 0x03	; 3
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	f4 01       	movw	r30, r8
    1dde:	31 83       	std	Z+1, r19	; 0x01
    1de0:	20 83       	st	Z, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:266
    1de2:	ca 5b       	subi	r28, 0xBA	; 186
    1de4:	df 4f       	sbci	r29, 0xFF	; 255
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	cf 90       	pop	r12
    1e00:	bf 90       	pop	r11
    1e02:	af 90       	pop	r10
    1e04:	9f 90       	pop	r9
    1e06:	8f 90       	pop	r8
    1e08:	7f 90       	pop	r7
    1e0a:	6f 90       	pop	r6
    1e0c:	5f 90       	pop	r5
    1e0e:	4f 90       	pop	r4
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:218
    1e10:	08 95       	ret
    1e12:	6a e3       	ldi	r22, 0x3A	; 58
    1e14:	72 e0       	ldi	r23, 0x02	; 2
    1e16:	89 ed       	ldi	r24, 0xD9	; 217
    1e18:	94 e0       	ldi	r25, 0x04	; 4
    1e1a:	84 d7       	rcall	.+3848   	; 0x2d24 <Print::println(char const*)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:220
    1e1c:	8f cf       	rjmp	.-226    	; 0x1d3c <Gsm_Ard::init_gsm_module()+0x340>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:116
#undef char
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	df cf       	rjmp	.-66     	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:149
    1e24:	83 e0       	ldi	r24, 0x03	; 3
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	dc cf       	rjmp	.-72     	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:182
    1e2a:	85 e0       	ldi	r24, 0x05	; 5
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	d9 cf       	rjmp	.-78     	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:213
    1e30:	87 e0       	ldi	r24, 0x07	; 7
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	d6 cf       	rjmp	.-84     	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:236
    1e36:	88 e0       	ldi	r24, 0x08	; 8
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	d3 cf       	rjmp	.-90     	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:249
    1e3c:	89 e0       	ldi	r24, 0x09	; 9
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	d0 cf       	rjmp	.-96     	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:262
    1e42:	8a e0       	ldi	r24, 0x0A	; 10
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	cd cf       	rjmp	.-102    	; 0x1de2 <Gsm_Ard::init_gsm_module()+0x3e6>

00001e48 <Gsm_Ard::dettachGPRS()>:
_ZN7Gsm_Ard11dettachGPRSEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:365
int Gsm_Ard::dettachGPRS(){
    1e48:	6f 92       	push	r6
    1e4a:	7f 92       	push	r7
    1e4c:	8f 92       	push	r8
    1e4e:	9f 92       	push	r9
    1e50:	af 92       	push	r10
    1e52:	bf 92       	push	r11
    1e54:	cf 92       	push	r12
    1e56:	df 92       	push	r13
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	a3 97       	sbiw	r28, 0x23	; 35
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:367
  if(_gsm_state!=GSM_IP_STATE){
    1e76:	3c 01       	movw	r6, r24
    1e78:	8a e7       	ldi	r24, 0x7A	; 122
    1e7a:	68 1a       	sub	r6, r24
    1e7c:	8e ef       	ldi	r24, 0xFE	; 254
    1e7e:	78 0a       	sbc	r7, r24
    1e80:	f3 01       	movw	r30, r6
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	04 97       	sbiw	r24, 0x04	; 4
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <Gsm_Ard::dettachGPRS()+0x44>
    1e8a:	70 c0       	rjmp	.+224    	; 0x1f6c <Gsm_Ard::dettachGPRS()+0x124>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:374
    strcpy_P(at_cmd_buffer, AT_CIPSHUT);
    1e8c:	6b e3       	ldi	r22, 0x3B	; 59
    1e8e:	71 e0       	ldi	r23, 0x01	; 1
    1e90:	ce 01       	movw	r24, r28
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	6c 01       	movw	r12, r24
    1e96:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:375
    strcpy_P(at_rsp_buffer, AT_SHUT_OK);
    1e9a:	5e 01       	movw	r10, r28
    1e9c:	9c e0       	ldi	r25, 0x0C	; 12
    1e9e:	a9 0e       	add	r10, r25
    1ea0:	b1 1c       	adc	r11, r1
    1ea2:	63 e3       	ldi	r22, 0x33	; 51
    1ea4:	71 e0       	ldi	r23, 0x01	; 1
    1ea6:	c5 01       	movw	r24, r10
    1ea8:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:376
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,10000);
    1eac:	20 e1       	ldi	r18, 0x10	; 16
    1eae:	37 e2       	ldi	r19, 0x27	; 39
    1eb0:	a5 01       	movw	r20, r10
    1eb2:	b6 01       	movw	r22, r12
    1eb4:	c4 01       	movw	r24, r8
    1eb6:	c3 da       	rcall	.-2682   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
    1eb8:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:378
  if(n){
    1eba:	89 2b       	or	r24, r25
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <Gsm_Ard::dettachGPRS()+0x78>
    1ebe:	5a c0       	rjmp	.+180    	; 0x1f74 <Gsm_Ard::dettachGPRS()+0x12c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:384
    strcpy_P(at_cmd_buffer, AT_CGATT_R);
    1ec0:	6e ef       	ldi	r22, 0xFE	; 254
    1ec2:	71 e0       	ldi	r23, 0x01	; 1
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	46 96       	adiw	r24, 0x16	; 22
    1ec8:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:388
    strcpy_P(rsp1, AT_CGATT_0);
    1ecc:	64 ef       	ldi	r22, 0xF4	; 244
    1ece:	71 e0       	ldi	r23, 0x01	; 1
    1ed0:	c5 01       	movw	r24, r10
    1ed2:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:389
    strcpy_P(rsp2, AT_CGATT_1);
    1ed6:	6a ee       	ldi	r22, 0xEA	; 234
    1ed8:	71 e0       	ldi	r23, 0x01	; 1
    1eda:	c6 01       	movw	r24, r12
    1edc:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:390
    char* rsps[]={rsp1, rsp2};
    1ee0:	b9 a2       	std	Y+33, r11	; 0x21
    1ee2:	a8 a2       	std	Y+32, r10	; 0x20
    1ee4:	db a2       	std	Y+35, r13	; 0x23
    1ee6:	ca a2       	std	Y+34, r12	; 0x22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:391
    n=_send_cmd_comp_several_rsp(at_cmd_buffer, rsps,2,5000);
    1ee8:	08 e8       	ldi	r16, 0x88	; 136
    1eea:	13 e1       	ldi	r17, 0x13	; 19
    1eec:	22 e0       	ldi	r18, 0x02	; 2
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	40 5e       	subi	r20, 0xE0	; 224
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	be 01       	movw	r22, r28
    1ef8:	6a 5e       	subi	r22, 0xEA	; 234
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	c4 01       	movw	r24, r8
    1efe:	d2 dc       	rcall	.-1628   	; 0x18a4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:393
  switch(n){
    1f00:	00 97       	sbiw	r24, 0x00	; 0
    1f02:	a1 f0       	breq	.+40     	; 0x1f2c <Gsm_Ard::dettachGPRS()+0xe4>
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	d1 f5       	brne	.+116    	; 0x1f7c <Gsm_Ard::dettachGPRS()+0x134>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:403
        strcpy_P(at_cmd_buffer, AT_CGATT_SET_OFF);
    1f08:	64 ed       	ldi	r22, 0xD4	; 212
    1f0a:	71 e0       	ldi	r23, 0x01	; 1
    1f0c:	c6 01       	movw	r24, r12
    1f0e:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:404
        strcpy_P(at_rsp_buffer, AT_OK);
    1f12:	60 e9       	ldi	r22, 0x90	; 144
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	c5 01       	movw	r24, r10
    1f18:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:405
        n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,10000);
    1f1c:	20 e1       	ldi	r18, 0x10	; 16
    1f1e:	37 e2       	ldi	r19, 0x27	; 39
    1f20:	a5 01       	movw	r20, r10
    1f22:	b6 01       	movw	r22, r12
    1f24:	c4 01       	movw	r24, r8
    1f26:	8b da       	rcall	.-2794   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:407
      if(n){
    1f28:	89 2b       	or	r24, r25
    1f2a:	61 f5       	brne	.+88     	; 0x1f84 <Gsm_Ard::dettachGPRS()+0x13c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:412
  _gsm_state=GSM_PIN_STATE;
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	f3 01       	movw	r30, r6
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:414
  Serial.println("DB: GSM_STATE=GSM_PIN_STATE");
    1f36:	6e e1       	ldi	r22, 0x1E	; 30
    1f38:	72 e0       	ldi	r23, 0x02	; 2
    1f3a:	89 ed       	ldi	r24, 0xD9	; 217
    1f3c:	94 e0       	ldi	r25, 0x04	; 4
    1f3e:	f2 d6       	rcall	.+3556   	; 0x2d24 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:417
}
    1f40:	c7 01       	movw	r24, r14
    1f42:	a3 96       	adiw	r28, 0x23	; 35
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	df 90       	pop	r13
    1f5c:	cf 90       	pop	r12
    1f5e:	bf 90       	pop	r11
    1f60:	af 90       	pop	r10
    1f62:	9f 90       	pop	r9
    1f64:	8f 90       	pop	r8
    1f66:	7f 90       	pop	r7
    1f68:	6f 90       	pop	r6
    1f6a:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:368
    return 1;
    1f6c:	ee 24       	eor	r14, r14
    1f6e:	e3 94       	inc	r14
    1f70:	f1 2c       	mov	r15, r1
    1f72:	e6 cf       	rjmp	.-52     	; 0x1f40 <Gsm_Ard::dettachGPRS()+0xf8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:379
    return 2;
    1f74:	22 e0       	ldi	r18, 0x02	; 2
    1f76:	e2 2e       	mov	r14, r18
    1f78:	f1 2c       	mov	r15, r1
    1f7a:	e2 cf       	rjmp	.-60     	; 0x1f40 <Gsm_Ard::dettachGPRS()+0xf8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:395
      return 3;
    1f7c:	93 e0       	ldi	r25, 0x03	; 3
    1f7e:	e9 2e       	mov	r14, r25
    1f80:	f1 2c       	mov	r15, r1
    1f82:	de cf       	rjmp	.-68     	; 0x1f40 <Gsm_Ard::dettachGPRS()+0xf8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:408
        return 4;
    1f84:	84 e0       	ldi	r24, 0x04	; 4
    1f86:	e8 2e       	mov	r14, r24
    1f88:	f1 2c       	mov	r15, r1
    1f8a:	da cf       	rjmp	.-76     	; 0x1f40 <Gsm_Ard::dettachGPRS()+0xf8>

00001f8c <Gsm_Ard::_connect_tcp_socket()>:
_ZN7Gsm_Ard19_connect_tcp_socketEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:419
int Gsm_Ard::_connect_tcp_socket(){
    1f8c:	8f 92       	push	r8
    1f8e:	9f 92       	push	r9
    1f90:	af 92       	push	r10
    1f92:	bf 92       	push	r11
    1f94:	cf 92       	push	r12
    1f96:	df 92       	push	r13
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	ef 97       	sbiw	r28, 0x3f	; 63
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	5c 01       	movw	r10, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:421
  if(_gsm_state!=GSM_IP_STATE){
    1fb6:	6c 01       	movw	r12, r24
    1fb8:	8a e7       	ldi	r24, 0x7A	; 122
    1fba:	c8 1a       	sub	r12, r24
    1fbc:	8e ef       	ldi	r24, 0xFE	; 254
    1fbe:	d8 0a       	sbc	r13, r24
    1fc0:	f6 01       	movw	r30, r12
    1fc2:	80 81       	ld	r24, Z
    1fc4:	91 81       	ldd	r25, Z+1	; 0x01
    1fc6:	04 97       	sbiw	r24, 0x04	; 4
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <Gsm_Ard::_connect_tcp_socket()+0x40>
    1fca:	b4 c0       	rjmp	.+360    	; 0x2134 <Gsm_Ard::_connect_tcp_socket()+0x1a8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:427
    strcpy_P(at_cmd_buffer, AT_CIPMUX_R);
    1fcc:	6a ef       	ldi	r22, 0xFA	; 250
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	c1 96       	adiw	r24, 0x31	; 49
    1fd4:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:431
    strcpy_P(rsp1, AT_CIPMUX_0);
    1fd8:	4e 01       	movw	r8, r28
    1fda:	f6 e2       	ldi	r31, 0x26	; 38
    1fdc:	8f 0e       	add	r8, r31
    1fde:	91 1c       	adc	r9, r1
    1fe0:	6f ee       	ldi	r22, 0xEF	; 239
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	c4 01       	movw	r24, r8
    1fe6:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:432
    strcpy_P(rsp2, AT_CIPMUX_1);
    1fea:	64 ee       	ldi	r22, 0xE4	; 228
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	ce 01       	movw	r24, r28
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	7c 01       	movw	r14, r24
    1ff4:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:433
    char* rsps[]={rsp1, rsp2};
    1ff8:	9d ae       	std	Y+61, r9	; 0x3d
    1ffa:	8c ae       	std	Y+60, r8	; 0x3c
    1ffc:	ff ae       	std	Y+63, r15	; 0x3f
    1ffe:	ee ae       	std	Y+62, r14	; 0x3e
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:434
    n=_send_cmd_comp_several_rsp(at_cmd_buffer, rsps,2,5000);
    2000:	08 e8       	ldi	r16, 0x88	; 136
    2002:	13 e1       	ldi	r17, 0x13	; 19
    2004:	22 e0       	ldi	r18, 0x02	; 2
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	ae 01       	movw	r20, r28
    200a:	44 5c       	subi	r20, 0xC4	; 196
    200c:	5f 4f       	sbci	r21, 0xFF	; 255
    200e:	be 01       	movw	r22, r28
    2010:	6f 5c       	subi	r22, 0xCF	; 207
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	c5 01       	movw	r24, r10
    2016:	46 dc       	rcall	.-1908   	; 0x18a4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:436
  switch(n){
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	61 f1       	breq	.+88     	; 0x2074 <Gsm_Ard::_connect_tcp_socket()+0xe8>
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	09 f0       	breq	.+2      	; 0x2022 <Gsm_Ard::_connect_tcp_socket()+0x96>
    2020:	8c c0       	rjmp	.+280    	; 0x213a <Gsm_Ard::_connect_tcp_socket()+0x1ae>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:446
        strcpy_P(at_cmd_buffer, AT_CIPMUX_SET);
    2022:	68 ed       	ldi	r22, 0xD8	; 216
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	c7 01       	movw	r24, r14
    2028:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:447
        strcpy_P(at_rsp_buffer, AT_OK);
    202c:	60 e9       	ldi	r22, 0x90	; 144
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	c4 01       	movw	r24, r8
    2032:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:448
        n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    2036:	28 e8       	ldi	r18, 0x88	; 136
    2038:	33 e1       	ldi	r19, 0x13	; 19
    203a:	a4 01       	movw	r20, r8
    203c:	b7 01       	movw	r22, r14
    203e:	c5 01       	movw	r24, r10
    2040:	fe d9       	rcall	.-3076   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:450
      if(n){
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	b9 f0       	breq	.+46     	; 0x2074 <Gsm_Ard::_connect_tcp_socket()+0xe8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:451
        return 30+n;
    2046:	8c 01       	movw	r16, r24
    2048:	02 5e       	subi	r16, 0xE2	; 226
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:501
}
    204c:	c8 01       	movw	r24, r16
    204e:	ef 96       	adiw	r28, 0x3f	; 63
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	df 90       	pop	r13
    2068:	cf 90       	pop	r12
    206a:	bf 90       	pop	r11
    206c:	af 90       	pop	r10
    206e:	9f 90       	pop	r9
    2070:	8f 90       	pop	r8
    2072:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:459
    strcpy_P(at_cmd_buffer, AT_CIPSTART_SET);
    2074:	63 eb       	ldi	r22, 0xB3	; 179
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	c7 01       	movw	r24, r14
    207a:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:460
    strcpy_P(at_rsp_buffer, AT_OK);
    207e:	60 e9       	ldi	r22, 0x90	; 144
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	c4 01       	movw	r24, r8
    2084:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:461
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    2088:	28 e8       	ldi	r18, 0x88	; 136
    208a:	33 e1       	ldi	r19, 0x13	; 19
    208c:	a4 01       	movw	r20, r8
    208e:	b7 01       	movw	r22, r14
    2090:	c5 01       	movw	r24, r10
    2092:	d5 d9       	rcall	.-3158   	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:463
  if(n){
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	21 f0       	breq	.+8      	; 0x20a0 <Gsm_Ard::_connect_tcp_socket()+0x114>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:464
    return 40+n;
    2098:	8c 01       	movw	r16, r24
    209a:	08 5d       	subi	r16, 0xD8	; 216
    209c:	1f 4f       	sbci	r17, 0xFF	; 255
    209e:	d6 cf       	rjmp	.-84     	; 0x204c <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:467
  n=_recv_string(10000,2);
    20a0:	42 e0       	ldi	r20, 0x02	; 2
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	60 e1       	ldi	r22, 0x10	; 16
    20a6:	77 e2       	ldi	r23, 0x27	; 39
    20a8:	c5 01       	movw	r24, r10
    20aa:	0e 94 72 07 	call	0xee4	; 0xee4 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:468
  if(n){
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	21 f0       	breq	.+8      	; 0x20ba <Gsm_Ard::_connect_tcp_socket()+0x12e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:469
    return 50+n;
    20b2:	8c 01       	movw	r16, r24
    20b4:	0e 5c       	subi	r16, 0xCE	; 206
    20b6:	1f 4f       	sbci	r17, 0xFF	; 255
    20b8:	c9 cf       	rjmp	.-110    	; 0x204c <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:475
    n=_fetch_rsp_wo_cmd(&rsp_len);
    20ba:	be 01       	movw	r22, r28
    20bc:	6f 5c       	subi	r22, 0xCF	; 207
    20be:	7f 4f       	sbci	r23, 0xFF	; 255
    20c0:	c5 01       	movw	r24, r10
    20c2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:476
    if(n){
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	21 f0       	breq	.+8      	; 0x20d2 <Gsm_Ard::_connect_tcp_socket()+0x146>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:477
      return 60+n;
    20ca:	8c 01       	movw	r16, r24
    20cc:	04 5c       	subi	r16, 0xC4	; 196
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	bd cf       	rjmp	.-134    	; 0x204c <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:479
    if(!rsp_len){
    20d2:	89 a9       	ldd	r24, Y+49	; 0x31
    20d4:	9a a9       	ldd	r25, Y+50	; 0x32
    20d6:	00 97       	sbiw	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:483
    rsp=new char[rsp_len];
    20d8:	39 f1       	breq	.+78     	; 0x2128 <Gsm_Ard::_connect_tcp_socket()+0x19c>
    20da:	0d d7       	rcall	.+3610   	; 0x2ef6 <operator new[](unsigned int)>
    20dc:	9f a3       	std	Y+39, r25	; 0x27
    20de:	8e a3       	std	Y+38, r24	; 0x26
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:484
    n=_get_rsp(&rsp);
    20e0:	b4 01       	movw	r22, r8
    20e2:	c5 01       	movw	r24, r10
    20e4:	0e 94 2d 07 	call	0xe5a	; 0xe5a <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:485
    if(n){
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	21 f0       	breq	.+8      	; 0x20f4 <Gsm_Ard::_connect_tcp_socket()+0x168>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:486
      return 80+n;
    20ec:	8c 01       	movw	r16, r24
    20ee:	00 5b       	subi	r16, 0xB0	; 176
    20f0:	1f 4f       	sbci	r17, 0xFF	; 255
    20f2:	ac cf       	rjmp	.-168    	; 0x204c <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:490
    strcpy_P(exp_rsp, AT_CONNECT_OK);
    20f4:	68 ea       	ldi	r22, 0xA8	; 168
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	c7 01       	movw	r24, r14
    20fa:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:491
    if(strncmp(rsp, exp_rsp, rsp_len)!=0){
    20fe:	49 a9       	ldd	r20, Y+49	; 0x31
    2100:	5a a9       	ldd	r21, Y+50	; 0x32
    2102:	b7 01       	movw	r22, r14
    2104:	8e a1       	ldd	r24, Y+38	; 0x26
    2106:	9f a1       	ldd	r25, Y+39	; 0x27
    2108:	0e 94 45 1a 	call	0x348a	; 0x348a <strncmp>
    210c:	8c 01       	movw	r16, r24
    210e:	89 2b       	or	r24, r25
    2110:	71 f4       	brne	.+28     	; 0x212e <Gsm_Ard::_connect_tcp_socket()+0x1a2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:494
    _gsm_state=GSM_TCP_STATE;
    2112:	85 e0       	ldi	r24, 0x05	; 5
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	f6 01       	movw	r30, r12
    2118:	91 83       	std	Z+1, r25	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:496
    Serial.println("DB: GSM_STATE=GSM_TCP_STATE");
    211a:	80 83       	st	Z, r24
    211c:	67 e5       	ldi	r22, 0x57	; 87
    211e:	72 e0       	ldi	r23, 0x02	; 2
    2120:	89 ed       	ldi	r24, 0xD9	; 217
    2122:	94 e0       	ldi	r25, 0x04	; 4
    2124:	ff d5       	rcall	.+3070   	; 0x2d24 <Print::println(char const*)>
    2126:	92 cf       	rjmp	.-220    	; 0x204c <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:480
      return 70;
    2128:	06 e4       	ldi	r16, 0x46	; 70
    212a:	10 e0       	ldi	r17, 0x00	; 0
    212c:	8f cf       	rjmp	.-226    	; 0x204c <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:492
      return 90;
    212e:	0a e5       	ldi	r16, 0x5A	; 90
    2130:	10 e0       	ldi	r17, 0x00	; 0
    2132:	8c cf       	rjmp	.-232    	; 0x204c <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:422
    return 10;
    2134:	0a e0       	ldi	r16, 0x0A	; 10
    2136:	10 e0       	ldi	r17, 0x00	; 0
    2138:	89 cf       	rjmp	.-238    	; 0x204c <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:438
      return 20;
    213a:	04 e1       	ldi	r16, 0x14	; 20
    213c:	10 e0       	ldi	r17, 0x00	; 0
    213e:	86 cf       	rjmp	.-244    	; 0x204c <Gsm_Ard::_connect_tcp_socket()+0xc0>

00002140 <Gsm_Ard::_send_tcp_data(char*, unsigned int)>:
_ZN7Gsm_Ard14_send_tcp_dataEPcj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:562
int Gsm_Ard::_send_tcp_data(char* data, unsigned int data_len){
    2140:	8f 92       	push	r8
    2142:	9f 92       	push	r9
    2144:	af 92       	push	r10
    2146:	bf 92       	push	r11
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	69 97       	sbiw	r28, 0x19	; 25
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	7c 01       	movw	r14, r24
    216a:	4b 01       	movw	r8, r22
    216c:	5a 01       	movw	r10, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:564
  if(_gsm_state!=GSM_TCP_STATE){
    216e:	fc 01       	movw	r30, r24
    2170:	ea 57       	subi	r30, 0x7A	; 122
    2172:	fe 4f       	sbci	r31, 0xFE	; 254
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	05 97       	sbiw	r24, 0x05	; 5
    217a:	09 f0       	breq	.+2      	; 0x217e <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x3e>
    217c:	a1 c0       	rjmp	.+322    	; 0x22c0 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x180>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:574
    strcpy_P(cmd, AT_CIPSEND);
    217e:	6d e9       	ldi	r22, 0x9D	; 157
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	ce 01       	movw	r24, r28
    2184:	01 96       	adiw	r24, 0x01	; 1
    2186:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:575
    strcpy_P(rsp, AT_CIPSEND_PROMPT);
    218a:	6b e9       	ldi	r22, 0x9B	; 155
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	ce 01       	movw	r24, r28
    2190:	48 96       	adiw	r24, 0x18	; 24
    2192:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:576
    _write_cmd(cmd);
    2196:	be 01       	movw	r22, r28
    2198:	6f 5f       	subi	r22, 0xFF	; 255
    219a:	7f 4f       	sbci	r23, 0xFF	; 255
    219c:	c7 01       	movw	r24, r14
    219e:	2a d9       	rcall	.-3500   	; 0x13f4 <Gsm_Ard::_write_cmd(char const*)>
    21a0:	04 e6       	ldi	r16, 0x64	; 100
    21a2:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:580
      if(!_ss.available()){
    21a4:	67 01       	movw	r12, r14
    21a6:	82 e7       	ldi	r24, 0x72	; 114
    21a8:	c8 1a       	sub	r12, r24
    21aa:	8e ef       	ldi	r24, 0xFE	; 254
    21ac:	d8 0a       	sbc	r13, r24
    21ae:	c6 01       	movw	r24, r12
    21b0:	83 d1       	rcall	.+774    	; 0x24b8 <SoftwareSerial::available()>
    21b2:	89 2b       	or	r24, r25
    21b4:	31 f5       	brne	.+76     	; 0x2202 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xc2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:581
        delay(500);
    21b6:	64 ef       	ldi	r22, 0xF4	; 244
    21b8:	71 e0       	ldi	r23, 0x01	; 1
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	d7 d3       	rcall	.+1966   	; 0x296e <delay>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:585
        if(temp==rsp[0]){
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	25 c0       	rjmp	.+74     	; 0x220e <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xce>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:579
    for(int i=0;i<100 && !prompt_received;i++){
    21c4:	99 23       	and	r25, r25
    21c6:	99 f3       	breq	.-26     	; 0x21ae <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:596
  Serial.print("SOCK_SND: ");
    21c8:	63 e7       	ldi	r22, 0x73	; 115
    21ca:	72 e0       	ldi	r23, 0x02	; 2
    21cc:	89 ed       	ldi	r24, 0xD9	; 217
    21ce:	94 e0       	ldi	r25, 0x04	; 4
    21d0:	9e d5       	rcall	.+2876   	; 0x2d0e <Print::print(char const*)>
    21d2:	84 01       	movw	r16, r8
    21d4:	a8 0c       	add	r10, r8
    21d6:	b9 1c       	adc	r11, r9
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:598
  for(unsigned int i=0;i<data_len;i++){
    21d8:	a0 16       	cp	r10, r16
    21da:	b1 06       	cpc	r11, r17
    21dc:	91 f1       	breq	.+100    	; 0x2242 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x102>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:599
    _ss.write(data[i]);
    21de:	48 01       	movw	r8, r16
    21e0:	f8 01       	movw	r30, r16
    21e2:	61 91       	ld	r22, Z+
    21e4:	8f 01       	movw	r16, r30
    21e6:	c6 01       	movw	r24, r12
    21e8:	ee d0       	rcall	.+476    	; 0x23c6 <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:601
    Serial.print((uint8_t)data[i]);
    21ea:	4a e0       	ldi	r20, 0x0A	; 10
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	f4 01       	movw	r30, r8
    21f0:	60 81       	ld	r22, Z
    21f2:	89 ed       	ldi	r24, 0xD9	; 217
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:602
    Serial.print(' ');
    21f4:	94 e0       	ldi	r25, 0x04	; 4
    21f6:	69 d6       	rcall	.+3282   	; 0x2eca <Print::print(unsigned char, int)>
    21f8:	60 e2       	ldi	r22, 0x20	; 32
    21fa:	89 ed       	ldi	r24, 0xD9	; 217
    21fc:	94 e0       	ldi	r25, 0x04	; 4
    21fe:	88 d5       	rcall	.+2832   	; 0x2d10 <Print::print(char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:584
        temp=_ss.read();
    2200:	eb cf       	rjmp	.-42     	; 0x21d8 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x98>
    2202:	c6 01       	movw	r24, r12
    2204:	bf d0       	rcall	.+382    	; 0x2384 <SoftwareSerial::read()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:585
        if(temp==rsp[0]){
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	28 8d       	ldd	r18, Y+24	; 0x18
    220a:	28 13       	cpse	r18, r24
    220c:	d9 cf       	rjmp	.-78     	; 0x21c0 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x80>
    220e:	01 50       	subi	r16, 0x01	; 1
    2210:	11 09       	sbc	r17, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:579
    for(int i=0;i<100 && !prompt_received;i++){
    2212:	c1 f6       	brne	.-80     	; 0x21c4 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x84>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:590
    if(!prompt_received){
    2214:	91 11       	cpse	r25, r1
    2216:	d8 cf       	rjmp	.-80     	; 0x21c8 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:591
      return 20;
    2218:	84 e1       	ldi	r24, 0x14	; 20
    221a:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:636
}
    221c:	69 96       	adiw	r28, 0x19	; 25
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	ff 90       	pop	r15
    2232:	ef 90       	pop	r14
    2234:	df 90       	pop	r13
    2236:	cf 90       	pop	r12
    2238:	bf 90       	pop	r11
    223a:	af 90       	pop	r10
    223c:	9f 90       	pop	r9
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:606
  Serial.println();
    223e:	8f 90       	pop	r8
    2240:	08 95       	ret
    2242:	89 ed       	ldi	r24, 0xD9	; 217
    2244:	94 e0       	ldi	r25, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:608
  _ss.write(SUB_CHAR);
    2246:	6b d5       	rcall	.+2774   	; 0x2d1e <Print::println()>
    2248:	6a e1       	ldi	r22, 0x1A	; 26
    224a:	c6 01       	movw	r24, r12
    224c:	bc d0       	rcall	.+376    	; 0x23c6 <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:610
  n=_recv_string(10000,2);
    224e:	42 e0       	ldi	r20, 0x02	; 2
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	60 e1       	ldi	r22, 0x10	; 16
    2254:	77 e2       	ldi	r23, 0x27	; 39
    2256:	c7 01       	movw	r24, r14
    2258:	0e 94 72 07 	call	0xee4	; 0xee4 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:611
  if(n){
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	11 f0       	breq	.+4      	; 0x2264 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x124>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:612
    return 30+n;
    2260:	4e 96       	adiw	r24, 0x1e	; 30
    2262:	dc cf       	rjmp	.-72     	; 0x221c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xdc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:618
    n=_fetch_rsp_wo_cmd(&rsp_len);
    2264:	be 01       	movw	r22, r28
    2266:	6a 5e       	subi	r22, 0xEA	; 234
    2268:	7f 4f       	sbci	r23, 0xFF	; 255
    226a:	c7 01       	movw	r24, r14
    226c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:619
    if(n){
    2270:	00 97       	sbiw	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:620
      return 40+n;
    2272:	11 f0       	breq	.+4      	; 0x2278 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x138>
    2274:	88 96       	adiw	r24, 0x28	; 40
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:623
    rsp=new char[rsp_len];
    2276:	d2 cf       	rjmp	.-92     	; 0x221c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xdc>
    2278:	8e 89       	ldd	r24, Y+22	; 0x16
    227a:	9f 89       	ldd	r25, Y+23	; 0x17
    227c:	3c d6       	rcall	.+3192   	; 0x2ef6 <operator new[](unsigned int)>
    227e:	9d 8b       	std	Y+21, r25	; 0x15
    2280:	8c 8b       	std	Y+20, r24	; 0x14
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:624
    n=_get_rsp(&rsp);
    2282:	be 01       	movw	r22, r28
    2284:	6c 5e       	subi	r22, 0xEC	; 236
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	c7 01       	movw	r24, r14
    228a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:625
    if(n){
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	11 f0       	breq	.+4      	; 0x2296 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x156>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:626
      return 50+n;
    2292:	c2 96       	adiw	r24, 0x32	; 50
    2294:	c3 cf       	rjmp	.-122    	; 0x221c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xdc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:630
    strcpy_P(exp_rsp, AT_CIPSEND_OK);
    2296:	63 e9       	ldi	r22, 0x93	; 147
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	ce 01       	movw	r24, r28
    229c:	0c 96       	adiw	r24, 0x0c	; 12
    229e:	0e 94 3e 1a 	call	0x347c	; 0x347c <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:631
    if(strncmp(rsp, exp_rsp, rsp_len)!=0){
    22a2:	4e 89       	ldd	r20, Y+22	; 0x16
    22a4:	5f 89       	ldd	r21, Y+23	; 0x17
    22a6:	be 01       	movw	r22, r28
    22a8:	64 5f       	subi	r22, 0xF4	; 244
    22aa:	7f 4f       	sbci	r23, 0xFF	; 255
    22ac:	8c 89       	ldd	r24, Y+20	; 0x14
    22ae:	9d 89       	ldd	r25, Y+21	; 0x15
    22b0:	0e 94 45 1a 	call	0x348a	; 0x348a <strncmp>
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	09 f4       	brne	.+2      	; 0x22ba <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x17a>
    22b8:	b1 cf       	rjmp	.-158    	; 0x221c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xdc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:632
      return 6;
    22ba:	86 e0       	ldi	r24, 0x06	; 6
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	ae cf       	rjmp	.-164    	; 0x221c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xdc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:565
    return 10;
    22c0:	8a e0       	ldi	r24, 0x0A	; 10
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	ab cf       	rjmp	.-170    	; 0x221c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xdc>

000022c6 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)>:
_ZN7Gsm_Ard15send_socket_msgEPcjPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:974
int Gsm_Ard::send_socket_msg(char* data, unsigned int data_len, unsigned int* rsp_len){
    22c6:	cf 92       	push	r12
    22c8:	df 92       	push	r13
    22ca:	ef 92       	push	r14
    22cc:	ff 92       	push	r15
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	8c 01       	movw	r16, r24
    22d8:	7b 01       	movw	r14, r22
    22da:	6a 01       	movw	r12, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:976
  n=_connect_tcp_socket();
    22dc:	e9 01       	movw	r28, r18
    22de:	56 de       	rcall	.-852    	; 0x1f8c <Gsm_Ard::_connect_tcp_socket()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:977
  if(n){
    22e0:	00 97       	sbiw	r24, 0x00	; 0
    22e2:	59 f0       	breq	.+22     	; 0x22fa <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x34>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:978
    return 100+n;
    22e4:	8c 59       	subi	r24, 0x9C	; 156
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:998
}
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	cf 90       	pop	r12
    22f8:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:981
  n=_send_tcp_data(data, data_len);
    22fa:	a6 01       	movw	r20, r12
    22fc:	b7 01       	movw	r22, r14
    22fe:	c8 01       	movw	r24, r16
    2300:	1f df       	rcall	.-450    	; 0x2140 <Gsm_Ard::_send_tcp_data(char*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:982
  if(n){
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	19 f0       	breq	.+6      	; 0x230c <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x46>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:983
    return 200+n;
    2306:	88 53       	subi	r24, 0x38	; 56
    2308:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:986
  n=_recv_tcp_data(rsp_len);
    230a:	ee cf       	rjmp	.-36     	; 0x22e8 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x22>
    230c:	be 01       	movw	r22, r28
    230e:	c8 01       	movw	r24, r16
    2310:	1d d8       	rcall	.-4038   	; 0x134c <Gsm_Ard::_recv_tcp_data(unsigned int*)>
    2312:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:987
  if(n){
    2314:	c8 01       	movw	r24, r16
    2316:	20 97       	sbiw	r28, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:988
    _disconnect_tcp_socket();
    2318:	29 f0       	breq	.+10     	; 0x2324 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x5e>
    231a:	19 da       	rcall	.-3022   	; 0x174e <Gsm_Ard::_disconnect_tcp_socket()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:989
    return 300+n;
    231c:	ce 01       	movw	r24, r28
    231e:	84 5d       	subi	r24, 0xD4	; 212
    2320:	9e 4f       	sbci	r25, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:992
  n=_disconnect_tcp_socket();
    2322:	e2 cf       	rjmp	.-60     	; 0x22e8 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x22>
    2324:	14 da       	rcall	.-3032   	; 0x174e <Gsm_Ard::_disconnect_tcp_socket()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:993
  if(n){
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	f9 f2       	breq	.-66     	; 0x22e8 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x22>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:994
    return 400+n;
    232a:	80 57       	subi	r24, 0x70	; 112
    232c:	9e 4f       	sbci	r25, 0xFE	; 254
    232e:	dc cf       	rjmp	.-72     	; 0x22e8 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x22>

00002330 <get_time_request_msg(char**)>:
_Z20get_time_request_msgPPc():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:3
#include "socket_bbd.h"

int get_time_request_msg(char** msg){
    2330:	fc 01       	movw	r30, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:6
  uint8_t msg_len=0;
  uint16_t temp_16=htons(SOCKET_HEADER);
  memcpy(*msg, &temp_16, SH_SIZE);
    2332:	a0 81       	ld	r26, Z
    2334:	b1 81       	ldd	r27, Z+1	; 0x01
    2336:	84 e9       	ldi	r24, 0x94	; 148
    2338:	91 e8       	ldi	r25, 0x81	; 129
    233a:	8d 93       	st	X+, r24
    233c:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:7
  memcpy(*msg+SH_SIZE,&ARDUINO_ID, ID_SIZE);
    233e:	a0 81       	ld	r26, Z
    2340:	b1 81       	ldd	r27, Z+1	; 0x01
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	12 96       	adiw	r26, 0x02	; 2
    2346:	8c 93       	st	X, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:8
  memcpy(*msg+SH_SIZE+ID_SIZE, &SYNC_TIME_MSG, TYPE_SIZE);
    2348:	a0 81       	ld	r26, Z
    234a:	b1 81       	ldd	r27, Z+1	; 0x01
    234c:	13 96       	adiw	r26, 0x03	; 3
    234e:	8c 93       	st	X, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:9
  memcpy(*msg+SH_SIZE+ID_SIZE+TYPE_SIZE, &msg_len, T_SIZE_SIZE);
    2350:	01 90       	ld	r0, Z+
    2352:	f0 81       	ld	r31, Z
    2354:	e0 2d       	mov	r30, r0
    2356:	14 82       	std	Z+4, r1	; 0x04
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:11
  return 0;
}
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	08 95       	ret

0000235e <decode_time_rsp_msg(char*, unsigned char, unsigned long*)>:
_Z19decode_time_rsp_msgPchPm():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:14

int decode_time_rsp_msg(char* msg, uint8_t msg_len, time_t* res){
  if(msg_len!=4){
    235e:	64 30       	cpi	r22, 0x04	; 4
    2360:	71 f4       	brne	.+28     	; 0x237e <decode_time_rsp_msg(char*, unsigned char, unsigned long*)+0x20>
    2362:	fc 01       	movw	r30, r24
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	45 d7       	rcall	.+3722   	; 0x31f8 <__bswapsi2>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:21
  }

  uint32_t curr_time;
  memcpy(&curr_time, msg, msg_len);

  *res=ntohl(curr_time);
    236e:	fa 01       	movw	r30, r20
    2370:	60 83       	st	Z, r22
    2372:	71 83       	std	Z+1, r23	; 0x01
    2374:	82 83       	std	Z+2, r24	; 0x02
    2376:	93 83       	std	Z+3, r25	; 0x03
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:23

  return 0;
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:15
    return 1;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:24
}
    2382:	08 95       	ret

00002384 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:394


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    2384:	20 91 ce 04 	lds	r18, 0x04CE	; 0x8004ce <SoftwareSerial::active_object>
    2388:	30 91 cf 04 	lds	r19, 0x04CF	; 0x8004cf <SoftwareSerial::active_object+0x1>
    238c:	28 17       	cp	r18, r24
    238e:	39 07       	cpc	r19, r25
    2390:	b9 f4       	brne	.+46     	; 0x23c0 <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:398
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    2392:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <SoftwareSerial::_receive_buffer_head>
    2396:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SoftwareSerial::_receive_buffer_tail>
    239a:	98 17       	cp	r25, r24
    239c:	89 f0       	breq	.+34     	; 0x23c0 <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:402
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    239e:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <SoftwareSerial::_receive_buffer_head>
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	e2 57       	subi	r30, 0x72	; 114
    23a6:	fb 4f       	sbci	r31, 0xFB	; 251
    23a8:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:403
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    23aa:	20 91 8c 04 	lds	r18, 0x048C	; 0x80048c <SoftwareSerial::_receive_buffer_head>
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	2f 5f       	subi	r18, 0xFF	; 255
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	2f 73       	andi	r18, 0x3F	; 63
    23b6:	33 27       	eor	r19, r19
    23b8:	20 93 8c 04 	sts	0x048C, r18	; 0x80048c <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:404
  return d;
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:395
    return -1;
    23c0:	8f ef       	ldi	r24, 0xFF	; 255
    23c2:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:405
}
    23c4:	08 95       	ret

000023c6 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:416

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	dc 01       	movw	r26, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:417
  if (_tx_delay == 0) {
    23d2:	5c 96       	adiw	r26, 0x1c	; 28
    23d4:	4d 91       	ld	r20, X+
    23d6:	5c 91       	ld	r21, X
    23d8:	5d 97       	sbiw	r26, 0x1d	; 29
    23da:	41 15       	cp	r20, r1
    23dc:	51 05       	cpc	r21, r1
    23de:	71 f4       	brne	.+28     	; 0x23fc <SoftwareSerial::write(unsigned char)+0x36>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:41
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	13 96       	adiw	r26, 0x03	; 3
    23e6:	9c 93       	st	X, r25
    23e8:	8e 93       	st	-X, r24
    23ea:	12 97       	sbiw	r26, 0x02	; 2
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:419
    setWriteError();
    return 0;
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:468

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:426
  volatile uint8_t *reg = _transmitPortRegister;
    23fc:	51 96       	adiw	r26, 0x11	; 17
    23fe:	ed 91       	ld	r30, X+
    2400:	fc 91       	ld	r31, X
    2402:	52 97       	sbiw	r26, 0x12	; 18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:427
  uint8_t reg_mask = _transmitBitMask;
    2404:	50 96       	adiw	r26, 0x10	; 16
    2406:	8c 91       	ld	r24, X
    2408:	50 97       	sbiw	r26, 0x10	; 16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:428
  uint8_t inv_mask = ~_transmitBitMask;
    240a:	98 2f       	mov	r25, r24
    240c:	90 95       	com	r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:429
  uint8_t oldSREG = SREG;
    240e:	1f b7       	in	r17, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:430
  bool inv = _inverse_logic;
    2410:	5e 96       	adiw	r26, 0x1e	; 30
    2412:	2c 91       	ld	r18, X
    2414:	5e 97       	sbiw	r26, 0x1e	; 30
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:433
  if (inv)
    2416:	02 2f       	mov	r16, r18
    2418:	02 70       	andi	r16, 0x02	; 2
    241a:	21 fd       	sbrc	r18, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:434
    b = ~b;
    241c:	60 95       	com	r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:436
  cli();  // turn off interrupts for a clean txmit
    241e:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
    2420:	20 81       	ld	r18, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:439
  if (inv)
    2422:	00 23       	and	r16, r16
    2424:	c1 f0       	breq	.+48     	; 0x2456 <SoftwareSerial::write(unsigned char)+0x90>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
    2426:	28 2b       	or	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
    2428:	20 83       	st	Z, r18
/usr/avr/include/util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    242a:	ea 01       	movw	r28, r20
    242c:	21 97       	sbiw	r28, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <SoftwareSerial::write(unsigned char)+0x66>
    2430:	39 e0       	ldi	r19, 0x09	; 9
    2432:	f3 2e       	mov	r15, r19
    2434:	fa 94       	dec	r15
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:447
  for (uint8_t i = 8; i > 0; --i)
    2436:	ff 20       	and	r15, r15
    2438:	99 f0       	breq	.+38     	; 0x2460 <SoftwareSerial::write(unsigned char)+0x9a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:449
    if (b & 1) // choose bit
    243a:	26 2f       	mov	r18, r22
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	60 ff       	sbrs	r22, 0
    2440:	0c c0       	rjmp	.+24     	; 0x245a <SoftwareSerial::write(unsigned char)+0x94>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:450
      *reg |= reg_mask; // send 1
    2442:	60 81       	ld	r22, Z
    2444:	68 2b       	or	r22, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
    2446:	60 83       	st	Z, r22
/usr/avr/include/util/delay_basic.h:110
    2448:	ea 01       	movw	r28, r20
    244a:	21 97       	sbiw	r28, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <SoftwareSerial::write(unsigned char)+0x84>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:455
    b >>= 1;
    244e:	b9 01       	movw	r22, r18
    2450:	75 95       	asr	r23
    2452:	67 95       	ror	r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:447
  for (uint8_t i = 8; i > 0; --i)
    2454:	ef cf       	rjmp	.-34     	; 0x2434 <SoftwareSerial::write(unsigned char)+0x6e>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
    2456:	29 23       	and	r18, r25
    2458:	e7 cf       	rjmp	.-50     	; 0x2428 <SoftwareSerial::write(unsigned char)+0x62>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
    245a:	60 81       	ld	r22, Z
    245c:	69 23       	and	r22, r25
    245e:	f3 cf       	rjmp	.-26     	; 0x2446 <SoftwareSerial::write(unsigned char)+0x80>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:459
  if (inv)
    2460:	00 23       	and	r16, r16
    2462:	69 f0       	breq	.+26     	; 0x247e <SoftwareSerial::write(unsigned char)+0xb8>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:460
    *reg &= inv_mask;
    2464:	80 81       	ld	r24, Z
    2466:	98 23       	and	r25, r24
    2468:	90 83       	st	Z, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:464
  SREG = oldSREG; // turn interrupts back on
    246a:	1f bf       	out	0x3f, r17	; 63
/usr/avr/include/util/delay_basic.h:110
    246c:	5c 96       	adiw	r26, 0x1c	; 28
    246e:	8d 91       	ld	r24, X+
    2470:	9c 91       	ld	r25, X
    2472:	5d 97       	sbiw	r26, 0x1d	; 29
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <SoftwareSerial::write(unsigned char)+0xae>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:467
  return 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	b9 cf       	rjmp	.-142    	; 0x23f0 <SoftwareSerial::write(unsigned char)+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:462
    *reg |= reg_mask;
    247e:	90 81       	ld	r25, Z
    2480:	89 2b       	or	r24, r25
    2482:	80 83       	st	Z, r24
    2484:	f2 cf       	rjmp	.-28     	; 0x246a <SoftwareSerial::write(unsigned char)+0xa4>

00002486 <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:471

void SoftwareSerial::flush()
{
    2486:	08 95       	ret

00002488 <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:477
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
    2488:	20 91 ce 04 	lds	r18, 0x04CE	; 0x8004ce <SoftwareSerial::active_object>
    248c:	30 91 cf 04 	lds	r19, 0x04CF	; 0x8004cf <SoftwareSerial::active_object+0x1>
    2490:	28 17       	cp	r18, r24
    2492:	39 07       	cpc	r19, r25
    2494:	71 f4       	brne	.+28     	; 0x24b2 <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:481
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    2496:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <SoftwareSerial::_receive_buffer_head>
    249a:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SoftwareSerial::_receive_buffer_tail>
    249e:	98 17       	cp	r25, r24
    24a0:	41 f0       	breq	.+16     	; 0x24b2 <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:485
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    24a2:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <SoftwareSerial::_receive_buffer_head>
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	e2 57       	subi	r30, 0x72	; 114
    24aa:	fb 4f       	sbci	r31, 0xFB	; 251
    24ac:	80 81       	ld	r24, Z
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:478
    return -1;
    24b2:	8f ef       	ldi	r24, 0xFF	; 255
    24b4:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:486
}
    24b6:	08 95       	ret

000024b8 <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:409
  if (!isListening())
    24b8:	20 91 ce 04 	lds	r18, 0x04CE	; 0x8004ce <SoftwareSerial::active_object>
    24bc:	30 91 cf 04 	lds	r19, 0x04CF	; 0x8004cf <SoftwareSerial::active_object+0x1>
    24c0:	28 17       	cp	r18, r24
    24c2:	39 07       	cpc	r19, r25
    24c4:	61 f4       	brne	.+24     	; 0x24de <SoftwareSerial::available()+0x26>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:412
  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    24c6:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SoftwareSerial::_receive_buffer_tail>
    24ca:	20 91 8c 04 	lds	r18, 0x048C	; 0x80048c <SoftwareSerial::_receive_buffer_head>
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	80 5c       	subi	r24, 0xC0	; 192
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	82 1b       	sub	r24, r18
    24d6:	91 09       	sbc	r25, r1
    24d8:	60 e4       	ldi	r22, 0x40	; 64
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	3c c6       	rjmp	.+3192   	; 0x3156 <__divmodhi4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:410
    return 0;
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:413
}
    24e2:	08 95       	ret

000024e4 <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:111
  if (active_object == this)
    24e4:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <SoftwareSerial::active_object>
    24e8:	f0 91 cf 04 	lds	r31, 0x04CF	; 0x8004cf <SoftwareSerial::active_object+0x1>
    24ec:	e8 17       	cp	r30, r24
    24ee:	f9 07       	cpc	r31, r25
    24f0:	69 f4       	brne	.+26     	; 0x250c <SoftwareSerial::stopListening()+0x28>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
    24f2:	a3 89       	ldd	r26, Z+19	; 0x13
    24f4:	b4 89       	ldd	r27, Z+20	; 0x14
    24f6:	9c 91       	ld	r25, X
    24f8:	85 89       	ldd	r24, Z+21	; 0x15
    24fa:	80 95       	com	r24
    24fc:	89 23       	and	r24, r25
    24fe:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:114
    active_object = NULL;
    2500:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <SoftwareSerial::active_object+0x1>
    2504:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <SoftwareSerial::active_object>
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:117
  return false;
    250c:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:118
}
    250e:	08 95       	ret

00002510 <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:88
{
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:89
  if (!_rx_delay_stopbit)
    2516:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2518:	9b 8d       	ldd	r25, Y+27	; 0x1b
    251a:	89 2b       	or	r24, r25
    251c:	f9 f0       	breq	.+62     	; 0x255c <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:92
  if (active_object != this)
    251e:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <SoftwareSerial::active_object>
    2522:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <SoftwareSerial::active_object+0x1>
    2526:	c8 17       	cp	r28, r24
    2528:	d9 07       	cpc	r29, r25
    252a:	c1 f0       	breq	.+48     	; 0x255c <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:94
    if (active_object)
    252c:	00 97       	sbiw	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:95
      active_object->stopListening();
    252e:	09 f0       	breq	.+2      	; 0x2532 <SoftwareSerial::listen()+0x22>
    2530:	d9 df       	rcall	.-78     	; 0x24e4 <SoftwareSerial::stopListening()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:97
    _buffer_overflow = false;
    2532:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2534:	8e 7f       	andi	r24, 0xFE	; 254
    2536:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:98
    _receive_buffer_head = _receive_buffer_tail = 0;
    2538:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <SoftwareSerial::_receive_buffer_tail>
    253c:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:99
    active_object = this;
    2540:	d0 93 cf 04 	sts	0x04CF, r29	; 0x8004cf <SoftwareSerial::active_object+0x1>
    2544:	c0 93 ce 04 	sts	0x04CE, r28	; 0x8004ce <SoftwareSerial::active_object>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
    2548:	eb 89       	ldd	r30, Y+19	; 0x13
    254a:	fc 89       	ldd	r31, Y+20	; 0x14
    254c:	80 81       	ld	r24, Z
    254e:	9d 89       	ldd	r25, Y+21	; 0x15
    2550:	89 2b       	or	r24, r25
    2552:	80 83       	st	Z, r24
    2554:	81 e0       	ldi	r24, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:106
}
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:90
    return false;
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	fb cf       	rjmp	.-10     	; 0x2556 <SoftwareSerial::listen()+0x46>

00002560 <__vector_3>:
__vector_3():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:229
{
    2560:	1f 92       	push	r1
    2562:	0f 92       	push	r0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	0f 92       	push	r0
    2568:	11 24       	eor	r1, r1
    256a:	2f 93       	push	r18
    256c:	3f 93       	push	r19
    256e:	4f 93       	push	r20
    2570:	5f 93       	push	r21
    2572:	8f 93       	push	r24
    2574:	9f 93       	push	r25
    2576:	af 93       	push	r26
    2578:	bf 93       	push	r27
    257a:	ef 93       	push	r30
    257c:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:221
  if (active_object)
    257e:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <SoftwareSerial::active_object>
    2582:	f0 91 cf 04 	lds	r31, 0x04CF	; 0x8004cf <SoftwareSerial::active_object+0x1>
    2586:	30 97       	sbiw	r30, 0x00	; 0
    2588:	49 f0       	breq	.+18     	; 0x259c <__vector_3+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    258a:	86 8d       	ldd	r24, Z+30	; 0x1e
    258c:	a6 85       	ldd	r26, Z+14	; 0x0e
    258e:	b7 85       	ldd	r27, Z+15	; 0x0f
    2590:	95 85       	ldd	r25, Z+13	; 0x0d
    2592:	81 ff       	sbrs	r24, 1
    2594:	12 c0       	rjmp	.+36     	; 0x25ba <__vector_3+0x5a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    2596:	8c 91       	ld	r24, X
    2598:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    259a:	91 f4       	brne	.+36     	; 0x25c0 <__vector_3+0x60>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
    259c:	ff 91       	pop	r31
    259e:	ef 91       	pop	r30
    25a0:	bf 91       	pop	r27
    25a2:	af 91       	pop	r26
    25a4:	9f 91       	pop	r25
    25a6:	8f 91       	pop	r24
    25a8:	5f 91       	pop	r21
    25aa:	4f 91       	pop	r20
    25ac:	3f 91       	pop	r19
    25ae:	2f 91       	pop	r18
    25b0:	0f 90       	pop	r0
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	0f 90       	pop	r0
    25b6:	1f 90       	pop	r1
    25b8:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    25ba:	8c 91       	ld	r24, X
    25bc:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    25be:	71 f7       	brne	.-36     	; 0x259c <__vector_3+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
    25c0:	a3 89       	ldd	r26, Z+19	; 0x13
    25c2:	b4 89       	ldd	r27, Z+20	; 0x14
    25c4:	9c 91       	ld	r25, X
    25c6:	85 89       	ldd	r24, Z+21	; 0x15
    25c8:	80 95       	com	r24
    25ca:	89 23       	and	r24, r25
    25cc:	8c 93       	st	X, r24
/usr/avr/include/util/delay_basic.h:110
    25ce:	86 89       	ldd	r24, Z+22	; 0x16
    25d0:	97 89       	ldd	r25, Z+23	; 0x17
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <__vector_3+0x72>
    25d6:	39 e0       	ldi	r19, 0x09	; 9
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:142
  uint8_t d = 0;
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	31 50       	subi	r19, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:158
    for (uint8_t i=8; i > 0; --i)
    25dc:	89 f0       	breq	.+34     	; 0x2600 <__vector_3+0xa0>
/usr/avr/include/util/delay_basic.h:110
    25de:	80 8d       	ldd	r24, Z+24	; 0x18
    25e0:	91 8d       	ldd	r25, Z+25	; 0x19
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <__vector_3+0x82>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:161
      d >>= 1;
    25e6:	82 2f       	mov	r24, r18
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	95 95       	asr	r25
    25ec:	87 95       	ror	r24
    25ee:	28 2f       	mov	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    25f0:	a6 85       	ldd	r26, Z+14	; 0x0e
    25f2:	b7 85       	ldd	r27, Z+15	; 0x0f
    25f4:	4c 91       	ld	r20, X
    25f6:	55 85       	ldd	r21, Z+13	; 0x0d
    25f8:	45 23       	and	r20, r21
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:163
      if (rx_pin_read())
    25fa:	79 f3       	breq	.-34     	; 0x25da <__vector_3+0x7a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:164
        d |= 0x80;
    25fc:	20 68       	ori	r18, 0x80	; 128
    25fe:	ed cf       	rjmp	.-38     	; 0x25da <__vector_3+0x7a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:167
    if (_inverse_logic)
    2600:	86 8d       	ldd	r24, Z+30	; 0x1e
    2602:	81 fd       	sbrc	r24, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:168
      d = ~d;
    2604:	20 95       	com	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:171
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    2606:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <SoftwareSerial::_receive_buffer_tail>
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	8f 73       	andi	r24, 0x3F	; 63
    2610:	99 27       	eor	r25, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:172
    if (next != _receive_buffer_head)
    2612:	30 91 8c 04 	lds	r19, 0x048C	; 0x80048c <SoftwareSerial::_receive_buffer_head>
    2616:	38 17       	cp	r19, r24
    2618:	99 f0       	breq	.+38     	; 0x2640 <__vector_3+0xe0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:175
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    261a:	a0 91 8d 04 	lds	r26, 0x048D	; 0x80048d <SoftwareSerial::_receive_buffer_tail>
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	a2 57       	subi	r26, 0x72	; 114
    2622:	bb 4f       	sbci	r27, 0xFB	; 251
    2624:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:176
      _receive_buffer_tail = next;
    2626:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <SoftwareSerial::_receive_buffer_tail>
/usr/avr/include/util/delay_basic.h:110
    262a:	82 8d       	ldd	r24, Z+26	; 0x1a
    262c:	93 8d       	ldd	r25, Z+27	; 0x1b
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <__vector_3+0xce>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
    2632:	a3 89       	ldd	r26, Z+19	; 0x13
    2634:	b4 89       	ldd	r27, Z+20	; 0x14
    2636:	8c 91       	ld	r24, X
    2638:	95 89       	ldd	r25, Z+21	; 0x15
    263a:	89 2b       	or	r24, r25
    263c:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
    263e:	ae cf       	rjmp	.-164    	; 0x259c <__vector_3+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:181
      _buffer_overflow = true;
    2640:	86 8d       	ldd	r24, Z+30	; 0x1e
    2642:	81 60       	ori	r24, 0x01	; 1
    2644:	86 8f       	std	Z+30, r24	; 0x1e
    2646:	f1 cf       	rjmp	.-30     	; 0x262a <__vector_3+0xca>

00002648 <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:264
SoftwareSerial::~SoftwareSerial()
    2648:	22 ea       	ldi	r18, 0xA2	; 162
    264a:	32 e0       	ldi	r19, 0x02	; 2
    264c:	fc 01       	movw	r30, r24
    264e:	31 83       	std	Z+1, r19	; 0x01
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:387
  stopListening();
    2650:	20 83       	st	Z, r18
    2652:	48 cf       	rjmp	.-368    	; 0x24e4 <SoftwareSerial::stopListening()>

00002654 <SoftwareSerial::setTX(unsigned char)>:
_ZN14SoftwareSerial5setTXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:270
{
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	ec 01       	movw	r28, r24
    265c:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:275
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    265e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2660:	66 95       	lsr	r22
    2662:	61 70       	andi	r22, 0x01	; 1
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	68 27       	eor	r22, r24
    2668:	81 2f       	mov	r24, r17
    266a:	58 d2       	rcall	.+1200   	; 0x2b1c <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:276
  pinMode(tx, OUTPUT);
    266c:	61 e0       	ldi	r22, 0x01	; 1
    266e:	81 2f       	mov	r24, r17
    2670:	19 d2       	rcall	.+1074   	; 0x2aa4 <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:277
  _transmitBitMask = digitalPinToBitMask(tx);
    2672:	81 2f       	mov	r24, r17
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	fc 01       	movw	r30, r24
    2678:	e6 58       	subi	r30, 0x86	; 134
    267a:	fd 4f       	sbci	r31, 0xFD	; 253
    267c:	e4 91       	lpm	r30, Z
    267e:	e8 8b       	std	Y+16, r30	; 0x10
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:278
  uint8_t port = digitalPinToPort(tx);
    2680:	fc 01       	movw	r30, r24
    2682:	e2 57       	subi	r30, 0x72	; 114
    2684:	fd 4f       	sbci	r31, 0xFD	; 253
    2686:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:279
  _transmitPortRegister = portOutputRegister(port);
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	ee 0f       	add	r30, r30
    268c:	ff 1f       	adc	r31, r31
    268e:	e4 55       	subi	r30, 0x54	; 84
    2690:	fd 4f       	sbci	r31, 0xFD	; 253
    2692:	85 91       	lpm	r24, Z+
    2694:	94 91       	lpm	r25, Z
    2696:	9a 8b       	std	Y+18, r25	; 0x12
    2698:	89 8b       	std	Y+17, r24	; 0x11
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:280
}
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	08 95       	ret

000026a2 <SoftwareSerial::setRX(unsigned char)>:
_ZN14SoftwareSerial5setRXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:283
{
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	ec 01       	movw	r28, r24
    26aa:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:284
  pinMode(rx, INPUT);
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	81 2f       	mov	r24, r17
    26b0:	f9 d1       	rcall	.+1010   	; 0x2aa4 <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:285
  if (!_inverse_logic)
    26b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b4:	81 fd       	sbrc	r24, 1
    26b6:	03 c0       	rjmp	.+6      	; 0x26be <SoftwareSerial::setRX(unsigned char)+0x1c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:286
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	81 2f       	mov	r24, r17
    26bc:	2f d2       	rcall	.+1118   	; 0x2b1c <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:287
  _receivePin = rx;
    26be:	1c 87       	std	Y+12, r17	; 0x0c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:288
  _receiveBitMask = digitalPinToBitMask(rx);
    26c0:	81 2f       	mov	r24, r17
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	fc 01       	movw	r30, r24
    26c6:	e6 58       	subi	r30, 0x86	; 134
    26c8:	fd 4f       	sbci	r31, 0xFD	; 253
    26ca:	e4 91       	lpm	r30, Z
    26cc:	ed 87       	std	Y+13, r30	; 0x0d
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:289
  uint8_t port = digitalPinToPort(rx);
    26ce:	fc 01       	movw	r30, r24
    26d0:	e2 57       	subi	r30, 0x72	; 114
    26d2:	fd 4f       	sbci	r31, 0xFD	; 253
    26d4:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:290
  _receivePortRegister = portInputRegister(port);
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	ee 0f       	add	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	ee 55       	subi	r30, 0x5E	; 94
    26de:	fd 4f       	sbci	r31, 0xFD	; 253
    26e0:	85 91       	lpm	r24, Z+
    26e2:	94 91       	lpm	r25, Z
    26e4:	9f 87       	std	Y+15, r25	; 0x0f
    26e6:	8e 87       	std	Y+14, r24	; 0x0e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:291
}
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	1f 91       	pop	r17
    26ee:	08 95       	ret

000026f0 <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>:
_ZN14SoftwareSerialC2Ehhb():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:249
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	ec 01       	movw	r28, r24
    26f8:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:43
  public:
    Print() : write_error(0) {}
    26fa:	1b 82       	std	Y+3, r1	; 0x03
    26fc:	1a 82       	std	Y+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    26fe:	88 ee       	ldi	r24, 0xE8	; 232
    2700:	93 e0       	ldi	r25, 0x03	; 3
    2702:	a0 e0       	ldi	r26, 0x00	; 0
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	8c 83       	std	Y+4, r24	; 0x04
    2708:	9d 83       	std	Y+5, r25	; 0x05
    270a:	ae 83       	std	Y+6, r26	; 0x06
    270c:	bf 83       	std	Y+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:255
  _inverse_logic(inverse_logic)
    270e:	82 ea       	ldi	r24, 0xA2	; 162
    2710:	92 e0       	ldi	r25, 0x02	; 2
    2712:	99 83       	std	Y+1, r25	; 0x01
    2714:	88 83       	st	Y, r24
    2716:	1f 8a       	std	Y+23, r1	; 0x17
    2718:	1e 8a       	std	Y+22, r1	; 0x16
    271a:	19 8e       	std	Y+25, r1	; 0x19
    271c:	18 8e       	std	Y+24, r1	; 0x18
    271e:	1b 8e       	std	Y+27, r1	; 0x1b
    2720:	1a 8e       	std	Y+26, r1	; 0x1a
    2722:	1d 8e       	std	Y+29, r1	; 0x1d
    2724:	1c 8e       	std	Y+28, r1	; 0x1c
    2726:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2728:	8e 7f       	andi	r24, 0xFE	; 254
    272a:	20 fb       	bst	r18, 0
    272c:	81 f9       	bld	r24, 1
    272e:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:257
  setTX(transmitPin);
    2730:	64 2f       	mov	r22, r20
    2732:	ce 01       	movw	r24, r28
    2734:	8f df       	rcall	.-226    	; 0x2654 <SoftwareSerial::setTX(unsigned char)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
    2736:	61 2f       	mov	r22, r17
    2738:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:259
}
    273a:	df 91       	pop	r29
    273c:	cf 91       	pop	r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
    273e:	1f 91       	pop	r17
    2740:	b0 cf       	rjmp	.-160    	; 0x26a2 <SoftwareSerial::setRX(unsigned char)>

00002742 <SoftwareSerial::begin(long)>:
_ZN14SoftwareSerial5beginEl():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:305
{
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	ec 01       	movw	r28, r24
    2748:	9a 01       	movw	r18, r20
    274a:	ab 01       	movw	r20, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:306
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    274c:	1b 8e       	std	Y+27, r1	; 0x1b
    274e:	1a 8e       	std	Y+26, r1	; 0x1a
    2750:	19 8e       	std	Y+25, r1	; 0x19
    2752:	18 8e       	std	Y+24, r1	; 0x18
    2754:	1f 8a       	std	Y+23, r1	; 0x17
    2756:	1e 8a       	std	Y+22, r1	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:309
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	79 e0       	ldi	r23, 0x09	; 9
    275c:	8d e3       	ldi	r24, 0x3D	; 61
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	2f d5       	rcall	.+2654   	; 0x31c0 <__divmodsi4>
    2762:	f9 01       	movw	r30, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2764:	24 30       	cpi	r18, 0x04	; 4
    2766:	31 05       	cpc	r19, r1
    2768:	08 f4       	brcc	.+2      	; 0x276c <SoftwareSerial::begin(long)+0x2a>
    276a:	60 c0       	rjmp	.+192    	; 0x282c <SoftwareSerial::begin(long)+0xea>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    276c:	c9 01       	movw	r24, r18
    276e:	03 97       	sbiw	r24, 0x03	; 3
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:316
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2770:	9d 8f       	std	Y+29, r25	; 0x1d
    2772:	8c 8f       	std	Y+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:319
  if (digitalPinToPCICR(_receivePin)) {
    2774:	6c 85       	ldd	r22, Y+12	; 0x0c
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	66 31       	cpi	r22, 0x16	; 22
    277a:	71 05       	cpc	r23, r1
    277c:	0c f0       	brlt	.+2      	; 0x2780 <SoftwareSerial::begin(long)+0x3e>
    277e:	52 c0       	rjmp	.+164    	; 0x2824 <SoftwareSerial::begin(long)+0xe2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2780:	c9 01       	movw	r24, r18
    2782:	96 95       	lsr	r25
    2784:	87 95       	ror	r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2786:	84 31       	cpi	r24, 0x14	; 20
    2788:	91 05       	cpc	r25, r1
    278a:	08 f4       	brcc	.+2      	; 0x278e <SoftwareSerial::begin(long)+0x4c>
    278c:	52 c0       	rjmp	.+164    	; 0x2832 <SoftwareSerial::begin(long)+0xf0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    278e:	43 97       	sbiw	r24, 0x13	; 19
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2790:	9f 8b       	std	Y+23, r25	; 0x17
    2792:	8e 8b       	std	Y+22, r24	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2794:	36 97       	sbiw	r30, 0x06	; 6
    2796:	08 f4       	brcc	.+2      	; 0x279a <SoftwareSerial::begin(long)+0x58>
    2798:	4f c0       	rjmp	.+158    	; 0x2838 <SoftwareSerial::begin(long)+0xf6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    279a:	c9 01       	movw	r24, r18
    279c:	05 97       	sbiw	r24, 0x05	; 5
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:337
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    279e:	99 8f       	std	Y+25, r25	; 0x19
    27a0:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    27a2:	c9 01       	movw	r24, r18
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	28 0f       	add	r18, r24
    27aa:	39 1f       	adc	r19, r25
    27ac:	36 95       	lsr	r19
    27ae:	27 95       	ror	r18
    27b0:	36 95       	lsr	r19
    27b2:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    27b4:	2d 30       	cpi	r18, 0x0D	; 13
    27b6:	31 05       	cpc	r19, r1
    27b8:	08 f4       	brcc	.+2      	; 0x27bc <SoftwareSerial::begin(long)+0x7a>
    27ba:	41 c0       	rjmp	.+130    	; 0x283e <SoftwareSerial::begin(long)+0xfc>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    27bc:	2c 50       	subi	r18, 0x0C	; 12
    27be:	31 09       	sbc	r19, r1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    27c0:	3b 8f       	std	Y+27, r19	; 0x1b
    27c2:	2a 8f       	std	Y+26, r18	; 0x1a
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:360
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    27c4:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    27c8:	68 30       	cpi	r22, 0x08	; 8
    27ca:	71 05       	cpc	r23, r1
    27cc:	dc f1       	brlt	.+118    	; 0x2844 <SoftwareSerial::begin(long)+0x102>
    27ce:	31 e0       	ldi	r19, 0x01	; 1
    27d0:	6e 30       	cpi	r22, 0x0E	; 14
    27d2:	71 05       	cpc	r23, r1
    27d4:	0c f4       	brge	.+2      	; 0x27d8 <SoftwareSerial::begin(long)+0x96>
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	01 c0       	rjmp	.+2      	; 0x27e0 <SoftwareSerial::begin(long)+0x9e>
    27de:	88 0f       	add	r24, r24
    27e0:	3a 95       	dec	r19
    27e2:	ea f7       	brpl	.-6      	; 0x27de <SoftwareSerial::begin(long)+0x9c>
    27e4:	82 2b       	or	r24, r18
    27e6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:363
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    27ea:	4c 85       	ldd	r20, Y+12	; 0x0c
    27ec:	84 2f       	mov	r24, r20
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	88 30       	cpi	r24, 0x08	; 8
    27f2:	91 05       	cpc	r25, r1
    27f4:	54 f1       	brlt	.+84     	; 0x284a <SoftwareSerial::begin(long)+0x108>
    27f6:	8e 30       	cpi	r24, 0x0E	; 14
    27f8:	91 05       	cpc	r25, r1
    27fa:	54 f1       	brlt	.+84     	; 0x2850 <SoftwareSerial::begin(long)+0x10e>
    27fc:	86 31       	cpi	r24, 0x16	; 22
    27fe:	91 05       	cpc	r25, r1
    2800:	54 f1       	brlt	.+84     	; 0x2856 <SoftwareSerial::begin(long)+0x114>
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	3c 8b       	std	Y+20, r19	; 0x14
    2808:	2b 8b       	std	Y+19, r18	; 0x13
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    280a:	88 30       	cpi	r24, 0x08	; 8
    280c:	91 05       	cpc	r25, r1
    280e:	34 f5       	brge	.+76     	; 0x285c <SoftwareSerial::begin(long)+0x11a>
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	01 c0       	rjmp	.+2      	; 0x2816 <SoftwareSerial::begin(long)+0xd4>
    2814:	88 0f       	add	r24, r24
    2816:	4a 95       	dec	r20
    2818:	ea f7       	brpl	.-6      	; 0x2814 <SoftwareSerial::begin(long)+0xd2>
    281a:	8d 8b       	std	Y+21, r24	; 0x15
/usr/avr/include/util/delay_basic.h:110
    281c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    281e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <SoftwareSerial::begin(long)+0xde>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    2824:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:375
}
    2826:	df 91       	pop	r29
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    2828:	cf 91       	pop	r28
    282a:	72 ce       	rjmp	.-796    	; 0x2510 <SoftwareSerial::listen()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:297
    return 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	9f cf       	rjmp	.-194    	; 0x2770 <SoftwareSerial::begin(long)+0x2e>
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	ac cf       	rjmp	.-168    	; 0x2790 <SoftwareSerial::begin(long)+0x4e>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	b0 cf       	rjmp	.-160    	; 0x279e <SoftwareSerial::begin(long)+0x5c>
    283e:	21 e0       	ldi	r18, 0x01	; 1
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	be cf       	rjmp	.-132    	; 0x27c0 <SoftwareSerial::begin(long)+0x7e>
    2844:	84 e0       	ldi	r24, 0x04	; 4
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	cd cf       	rjmp	.-102    	; 0x27e4 <SoftwareSerial::begin(long)+0xa2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:363
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    284a:	2d e6       	ldi	r18, 0x6D	; 109
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	db cf       	rjmp	.-74     	; 0x2806 <SoftwareSerial::begin(long)+0xc4>
    2850:	2b e6       	ldi	r18, 0x6B	; 107
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	d8 cf       	rjmp	.-80     	; 0x2806 <SoftwareSerial::begin(long)+0xc4>
    2856:	2c e6       	ldi	r18, 0x6C	; 108
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	d5 cf       	rjmp	.-86     	; 0x2806 <SoftwareSerial::begin(long)+0xc4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    285c:	9c 01       	movw	r18, r24
    285e:	0e 97       	sbiw	r24, 0x0e	; 14
    2860:	44 f4       	brge	.+16     	; 0x2872 <SoftwareSerial::begin(long)+0x130>
    2862:	28 50       	subi	r18, 0x08	; 8
    2864:	31 09       	sbc	r19, r1
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	01 c0       	rjmp	.+2      	; 0x286c <SoftwareSerial::begin(long)+0x12a>
    286a:	88 0f       	add	r24, r24
    286c:	2a 95       	dec	r18
    286e:	ea f7       	brpl	.-6      	; 0x286a <SoftwareSerial::begin(long)+0x128>
    2870:	d4 cf       	rjmp	.-88     	; 0x281a <SoftwareSerial::begin(long)+0xd8>
    2872:	2e 50       	subi	r18, 0x0E	; 14
    2874:	31 09       	sbc	r19, r1
    2876:	f7 cf       	rjmp	.-18     	; 0x2866 <SoftwareSerial::begin(long)+0x124>

00002878 <__vector_16>:
__vector_16():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:47
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2878:	1f 92       	push	r1
    287a:	0f 92       	push	r0
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	0f 92       	push	r0
    2880:	11 24       	eor	r1, r1
    2882:	2f 93       	push	r18
    2884:	3f 93       	push	r19
    2886:	8f 93       	push	r24
    2888:	9f 93       	push	r25
    288a:	af 93       	push	r26
    288c:	bf 93       	push	r27
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:50
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    288e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <timer0_millis>
    2892:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <timer0_millis+0x1>
    2896:	a0 91 d3 04 	lds	r26, 0x04D3	; 0x8004d3 <timer0_millis+0x2>
    289a:	b0 91 d4 04 	lds	r27, 0x04D4	; 0x8004d4 <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:51
	unsigned char f = timer0_fract;
    289e:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:54

	m += MILLIS_INC;
	f += FRACT_INC;
    28a2:	23 e0       	ldi	r18, 0x03	; 3
    28a4:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:55
	if (f >= FRACT_MAX) {
    28a6:	2d 37       	cpi	r18, 0x7D	; 125
    28a8:	58 f5       	brcc	.+86     	; 0x2900 <__vector_16+0x88>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:53
	m += MILLIS_INC;
    28aa:	01 96       	adiw	r24, 0x01	; 1
    28ac:	a1 1d       	adc	r26, r1
    28ae:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:60
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
    28b0:	20 93 d0 04 	sts	0x04D0, r18	; 0x8004d0 <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:61
	timer0_millis = m;
    28b4:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <timer0_millis>
    28b8:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <timer0_millis+0x1>
    28bc:	a0 93 d3 04 	sts	0x04D3, r26	; 0x8004d3 <timer0_millis+0x2>
    28c0:	b0 93 d4 04 	sts	0x04D4, r27	; 0x8004d4 <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:62
	timer0_overflow_count++;
    28c4:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <timer0_overflow_count>
    28c8:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <timer0_overflow_count+0x1>
    28cc:	a0 91 d7 04 	lds	r26, 0x04D7	; 0x8004d7 <timer0_overflow_count+0x2>
    28d0:	b0 91 d8 04 	lds	r27, 0x04D8	; 0x8004d8 <timer0_overflow_count+0x3>
    28d4:	01 96       	adiw	r24, 0x01	; 1
    28d6:	a1 1d       	adc	r26, r1
    28d8:	b1 1d       	adc	r27, r1
    28da:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <timer0_overflow_count>
    28de:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <timer0_overflow_count+0x1>
    28e2:	a0 93 d7 04 	sts	0x04D7, r26	; 0x8004d7 <timer0_overflow_count+0x2>
    28e6:	b0 93 d8 04 	sts	0x04D8, r27	; 0x8004d8 <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:63
}
    28ea:	bf 91       	pop	r27
    28ec:	af 91       	pop	r26
    28ee:	9f 91       	pop	r25
    28f0:	8f 91       	pop	r24
    28f2:	3f 91       	pop	r19
    28f4:	2f 91       	pop	r18
    28f6:	0f 90       	pop	r0
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	0f 90       	pop	r0
    28fc:	1f 90       	pop	r1
    28fe:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:56
		f -= FRACT_MAX;
    2900:	26 e8       	ldi	r18, 0x86	; 134
    2902:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:57
		m += 1;
    2904:	02 96       	adiw	r24, 0x02	; 2
    2906:	a1 1d       	adc	r26, r1
    2908:	b1 1d       	adc	r27, r1
    290a:	d2 cf       	rjmp	.-92     	; 0x28b0 <__vector_16+0x38>

0000290c <millis>:
millis():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:68

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    290c:	2f b7       	in	r18, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    290e:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:73
	m = timer0_millis;
    2910:	60 91 d1 04 	lds	r22, 0x04D1	; 0x8004d1 <timer0_millis>
    2914:	70 91 d2 04 	lds	r23, 0x04D2	; 0x8004d2 <timer0_millis+0x1>
    2918:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <timer0_millis+0x2>
    291c:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:74
	SREG = oldSREG;
    2920:	2f bf       	out	0x3f, r18	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:77

	return m;
}
    2922:	08 95       	ret

00002924 <micros>:
micros():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:81

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2924:	3f b7       	in	r19, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:83
	
	cli();
    2926:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:84
	m = timer0_overflow_count;
    2928:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <timer0_overflow_count>
    292c:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <timer0_overflow_count+0x1>
    2930:	a0 91 d7 04 	lds	r26, 0x04D7	; 0x8004d7 <timer0_overflow_count+0x2>
    2934:	b0 91 d8 04 	lds	r27, 0x04D8	; 0x8004d8 <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:86
#if defined(TCNT0)
	t = TCNT0;
    2938:	26 b5       	in	r18, 0x26	; 38
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:94
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    293a:	a8 9b       	sbis	0x15, 0	; 21
    293c:	05 c0       	rjmp	.+10     	; 0x2948 <micros+0x24>
    293e:	2f 3f       	cpi	r18, 0xFF	; 255
    2940:	19 f0       	breq	.+6      	; 0x2948 <micros+0x24>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:95
		m++;
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	a1 1d       	adc	r26, r1
    2946:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:101
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2948:	3f bf       	out	0x3f, r19	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:103
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    294a:	ba 2f       	mov	r27, r26
    294c:	a9 2f       	mov	r26, r25
    294e:	98 2f       	mov	r25, r24
    2950:	88 27       	eor	r24, r24
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	62 0f       	add	r22, r18
    2958:	71 1d       	adc	r23, r1
    295a:	81 1d       	adc	r24, r1
    295c:	91 1d       	adc	r25, r1
    295e:	42 e0       	ldi	r20, 0x02	; 2
    2960:	66 0f       	add	r22, r22
    2962:	77 1f       	adc	r23, r23
    2964:	88 1f       	adc	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	4a 95       	dec	r20
    296a:	d1 f7       	brne	.-12     	; 0x2960 <micros+0x3c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:104
}
    296c:	08 95       	ret

0000296e <delay>:
delay():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:107

void delay(unsigned long ms)
{
    296e:	8f 92       	push	r8
    2970:	9f 92       	push	r9
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	6b 01       	movw	r12, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:108
	uint32_t start = micros();
    2980:	7c 01       	movw	r14, r24
    2982:	d0 df       	rcall	.-96     	; 0x2924 <micros>
    2984:	4b 01       	movw	r8, r22
    2986:	5c 01       	movw	r10, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:110

	while (ms > 0) {
    2988:	c1 14       	cp	r12, r1
    298a:	d1 04       	cpc	r13, r1
    298c:	e1 04       	cpc	r14, r1
    298e:	f1 04       	cpc	r15, r1
    2990:	49 f4       	brne	.+18     	; 0x29a4 <delay+0x36>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:117
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2992:	ff 90       	pop	r15
    2994:	ef 90       	pop	r14
    2996:	df 90       	pop	r13
    2998:	cf 90       	pop	r12
    299a:	bf 90       	pop	r11
    299c:	af 90       	pop	r10
    299e:	9f 90       	pop	r9
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:111
		yield();
    29a0:	8f 90       	pop	r8
    29a2:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    29a4:	e8 d0       	rcall	.+464    	; 0x2b76 <yield>
    29a6:	be df       	rcall	.-132    	; 0x2924 <micros>
    29a8:	68 19       	sub	r22, r8
    29aa:	79 09       	sbc	r23, r9
    29ac:	8a 09       	sbc	r24, r10
    29ae:	9b 09       	sbc	r25, r11
    29b0:	68 3e       	cpi	r22, 0xE8	; 232
    29b2:	73 40       	sbci	r23, 0x03	; 3
    29b4:	81 05       	cpc	r24, r1
    29b6:	91 05       	cpc	r25, r1
    29b8:	38 f3       	brcs	.-50     	; 0x2988 <delay+0x1a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:113
			ms--;
    29ba:	21 e0       	ldi	r18, 0x01	; 1
    29bc:	c2 1a       	sub	r12, r18
    29be:	d1 08       	sbc	r13, r1
    29c0:	e1 08       	sbc	r14, r1
    29c2:	f1 08       	sbc	r15, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:114
			start += 1000;
    29c4:	88 ee       	ldi	r24, 0xE8	; 232
    29c6:	88 0e       	add	r8, r24
    29c8:	83 e0       	ldi	r24, 0x03	; 3
    29ca:	98 1e       	adc	r9, r24
    29cc:	a1 1c       	adc	r10, r1
    29ce:	b1 1c       	adc	r11, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    29d0:	c1 14       	cp	r12, r1
    29d2:	d1 04       	cpc	r13, r1
    29d4:	e1 04       	cpc	r14, r1
    29d6:	f1 04       	cpc	r15, r1
    29d8:	31 f7       	brne	.-52     	; 0x29a6 <delay+0x38>
    29da:	d6 cf       	rjmp	.-84     	; 0x2988 <delay+0x1a>

000029dc <init>:
init():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:245

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    29dc:	78 94       	sei
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:251
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    29de:	84 b5       	in	r24, 0x24	; 36
    29e0:	82 60       	ori	r24, 0x02	; 2
    29e2:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:252
	sbi(TCCR0A, WGM00);
    29e4:	84 b5       	in	r24, 0x24	; 36
    29e6:	81 60       	ori	r24, 0x01	; 1
    29e8:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:265
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    29ea:	85 b5       	in	r24, 0x25	; 37
    29ec:	82 60       	ori	r24, 0x02	; 2
    29ee:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:266
	sbi(TCCR0B, CS00);
    29f0:	85 b5       	in	r24, 0x25	; 37
    29f2:	81 60       	ori	r24, 0x01	; 1
    29f4:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:279

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    29f6:	ee e6       	ldi	r30, 0x6E	; 110
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	81 60       	ori	r24, 0x01	; 1
    29fe:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:290
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2a00:	e1 e8       	ldi	r30, 0x81	; 129
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:293

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2a06:	80 81       	ld	r24, Z
    2a08:	82 60       	ori	r24, 0x02	; 2
    2a0a:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:295
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2a0c:	80 81       	ld	r24, Z
    2a0e:	81 60       	ori	r24, 0x01	; 1
    2a10:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:305
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2a12:	e0 e8       	ldi	r30, 0x80	; 128
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	81 60       	ori	r24, 0x01	; 1
    2a1a:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:312

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2a1c:	e1 eb       	ldi	r30, 0xB1	; 177
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	84 60       	ori	r24, 0x04	; 4
    2a24:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:321

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2a26:	e0 eb       	ldi	r30, 0xB0	; 176
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	81 60       	ori	r24, 0x01	; 1
    2a2e:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:356
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2a30:	ea e7       	ldi	r30, 0x7A	; 122
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	84 60       	ori	r24, 0x04	; 4
    2a38:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:357
		sbi(ADCSRA, ADPS1);
    2a3a:	80 81       	ld	r24, Z
    2a3c:	82 60       	ori	r24, 0x02	; 2
    2a3e:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:358
		sbi(ADCSRA, ADPS0);
    2a40:	80 81       	ld	r24, Z
    2a42:	81 60       	ori	r24, 0x01	; 1
    2a44:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:381
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2a46:	80 81       	ld	r24, Z
    2a48:	80 68       	ori	r24, 0x80	; 128
    2a4a:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:390
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2a4c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2a50:	08 95       	ret

00002a52 <turnOffPWM>:
turnOffPWM():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2a52:	83 30       	cpi	r24, 0x03	; 3
    2a54:	81 f0       	breq	.+32     	; 0x2a76 <turnOffPWM+0x24>
    2a56:	28 f4       	brcc	.+10     	; 0x2a62 <turnOffPWM+0x10>
    2a58:	81 30       	cpi	r24, 0x01	; 1
    2a5a:	99 f0       	breq	.+38     	; 0x2a82 <turnOffPWM+0x30>
    2a5c:	82 30       	cpi	r24, 0x02	; 2
    2a5e:	a9 f0       	breq	.+42     	; 0x2a8a <turnOffPWM+0x38>
    2a60:	08 95       	ret
    2a62:	87 30       	cpi	r24, 0x07	; 7
    2a64:	a9 f0       	breq	.+42     	; 0x2a90 <turnOffPWM+0x3e>
    2a66:	88 30       	cpi	r24, 0x08	; 8
    2a68:	c9 f0       	breq	.+50     	; 0x2a9c <turnOffPWM+0x4a>
    2a6a:	84 30       	cpi	r24, 0x04	; 4
    2a6c:	b1 f4       	brne	.+44     	; 0x2a9a <turnOffPWM+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2a6e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2a72:	8f 7d       	andi	r24, 0xDF	; 223
    2a74:	03 c0       	rjmp	.+6      	; 0x2a7c <turnOffPWM+0x2a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:80
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2a76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2a7a:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2a7c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2a80:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:94
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2a82:	84 b5       	in	r24, 0x24	; 36
    2a84:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:98
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2a86:	84 bd       	out	0x24, r24	; 36
    2a88:	08 95       	ret
    2a8a:	84 b5       	in	r24, 0x24	; 36
    2a8c:	8f 7d       	andi	r24, 0xDF	; 223
    2a8e:	fb cf       	rjmp	.-10     	; 0x2a86 <turnOffPWM+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:101
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2a90:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2a94:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2a96:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2a9a:	08 95       	ret
    2a9c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2aa0:	8f 7d       	andi	r24, 0xDF	; 223
    2aa2:	f9 cf       	rjmp	.-14     	; 0x2a96 <turnOffPWM+0x44>

00002aa4 <pinMode>:
pinMode():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:30
{
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:31
	uint8_t bit = digitalPinToBitMask(pin);
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	fc 01       	movw	r30, r24
    2aac:	e6 58       	subi	r30, 0x86	; 134
    2aae:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab0:	24 91       	lpm	r18, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:32
	uint8_t port = digitalPinToPort(pin);
    2ab2:	82 57       	subi	r24, 0x72	; 114
    2ab4:	9d 4f       	sbci	r25, 0xFD	; 253
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:35
	if (port == NOT_A_PIN) return;
    2aba:	88 23       	and	r24, r24
    2abc:	c9 f0       	breq	.+50     	; 0x2af0 <pinMode+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:38
	reg = portModeRegister(port);
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	ea 54       	subi	r30, 0x4A	; 74
    2ac8:	fd 4f       	sbci	r31, 0xFD	; 253
    2aca:	a5 91       	lpm	r26, Z+
    2acc:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:39
	out = portOutputRegister(port);
    2ace:	fc 01       	movw	r30, r24
    2ad0:	e4 55       	subi	r30, 0x54	; 84
    2ad2:	fd 4f       	sbci	r31, 0xFD	; 253
    2ad4:	c5 91       	lpm	r28, Z+
    2ad6:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:41
	if (mode == INPUT) { 
    2ad8:	61 11       	cpse	r22, r1
    2ada:	0d c0       	rjmp	.+26     	; 0x2af6 <pinMode+0x52>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:42
		uint8_t oldSREG = SREG;
    2adc:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:43
                cli();
    2ade:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:44
		*reg &= ~bit;
    2ae0:	8c 91       	ld	r24, X
    2ae2:	20 95       	com	r18
    2ae4:	82 23       	and	r24, r18
    2ae6:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:45
		*out &= ~bit;
    2ae8:	88 81       	ld	r24, Y
    2aea:	28 23       	and	r18, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    2aec:	28 83       	st	Y, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:52
		SREG = oldSREG;
    2aee:	9f bf       	out	0x3f, r25	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:59
}
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:47
	} else if (mode == INPUT_PULLUP) {
    2af6:	62 30       	cpi	r22, 0x02	; 2
    2af8:	51 f4       	brne	.+20     	; 0x2b0e <pinMode+0x6a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:48
		uint8_t oldSREG = SREG;
    2afa:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:49
                cli();
    2afc:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:50
		*reg &= ~bit;
    2afe:	3c 91       	ld	r19, X
    2b00:	82 2f       	mov	r24, r18
    2b02:	80 95       	com	r24
    2b04:	83 23       	and	r24, r19
    2b06:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    2b08:	e8 81       	ld	r30, Y
    2b0a:	2e 2b       	or	r18, r30
    2b0c:	ef cf       	rjmp	.-34     	; 0x2aec <pinMode+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:54
		uint8_t oldSREG = SREG;
    2b0e:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:55
                cli();
    2b10:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:56
		*reg |= bit;
    2b12:	ec 91       	ld	r30, X
    2b14:	2e 2b       	or	r18, r30
    2b16:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:57
		SREG = oldSREG;
    2b18:	8f bf       	out	0x3f, r24	; 63
    2b1a:	ea cf       	rjmp	.-44     	; 0x2af0 <pinMode+0x4c>

00002b1c <digitalWrite>:
digitalWrite():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:139
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:140
	uint8_t timer = digitalPinToTimer(pin);
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	f9 01       	movw	r30, r18
    2b2a:	ea 59       	subi	r30, 0x9A	; 154
    2b2c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b2e:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
    2b30:	f9 01       	movw	r30, r18
    2b32:	e6 58       	subi	r30, 0x86	; 134
    2b34:	fd 4f       	sbci	r31, 0xFD	; 253
    2b36:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
    2b38:	f9 01       	movw	r30, r18
    2b3a:	e2 57       	subi	r30, 0x72	; 114
    2b3c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b3e:	c4 91       	lpm	r28, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:145
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2b40:	cc 23       	and	r28, r28
    2b42:	99 f0       	breq	.+38     	; 0x2b6a <digitalWrite+0x4e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:149

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2b44:	81 11       	cpse	r24, r1
    2b46:	85 df       	rcall	.-246    	; 0x2a52 <turnOffPWM>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:151

	out = portOutputRegister(port);
    2b48:	ec 2f       	mov	r30, r28
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	ee 0f       	add	r30, r30
    2b4e:	ff 1f       	adc	r31, r31
    2b50:	e4 55       	subi	r30, 0x54	; 84
    2b52:	fd 4f       	sbci	r31, 0xFD	; 253
    2b54:	a5 91       	lpm	r26, Z+
    2b56:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:153

	uint8_t oldSREG = SREG;
    2b58:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:154
	cli();
    2b5a:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157

	if (val == LOW) {
		*out &= ~bit;
    2b5c:	ec 91       	ld	r30, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:156
	if (val == LOW) {
    2b5e:	11 11       	cpse	r17, r1
    2b60:	08 c0       	rjmp	.+16     	; 0x2b72 <digitalWrite+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157
		*out &= ~bit;
    2b62:	d0 95       	com	r29
    2b64:	de 23       	and	r29, r30
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
	} else {
		*out |= bit;
    2b66:	dc 93       	st	X, r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:162
	}

	SREG = oldSREG;
    2b68:	8f bf       	out	0x3f, r24	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:163
}
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
		*out |= bit;
    2b72:	de 2b       	or	r29, r30
    2b74:	f8 cf       	rjmp	.-16     	; 0x2b66 <digitalWrite+0x4a>

00002b76 <yield>:
__empty():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/hooks.c:28
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2b76:	08 95       	ret

00002b78 <__vector_18>:
__vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2b78:	1f 92       	push	r1
    2b7a:	0f 92       	push	r0
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	0f 92       	push	r0
    2b80:	11 24       	eor	r1, r1
    2b82:	2f 93       	push	r18
    2b84:	8f 93       	push	r24
    2b86:	9f 93       	push	r25
    2b88:	ef 93       	push	r30
    2b8a:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2b8c:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <Serial+0x10>
    2b90:	f0 91 ea 04 	lds	r31, 0x04EA	; 0x8004ea <Serial+0x11>
    2b94:	80 81       	ld	r24, Z
    2b96:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <Serial+0x16>
    2b9a:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <Serial+0x17>
    2b9e:	82 fd       	sbrc	r24, 2
    2ba0:	1b c0       	rjmp	.+54     	; 0x2bd8 <__vector_18+0x60>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2ba2:	90 81       	ld	r25, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2ba4:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <Serial+0x19>
    2ba8:	8f 5f       	subi	r24, 0xFF	; 255
    2baa:	8f 73       	andi	r24, 0x3F	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2bac:	20 91 f3 04 	lds	r18, 0x04F3	; 0x8004f3 <Serial+0x1a>
    2bb0:	82 17       	cp	r24, r18
    2bb2:	41 f0       	breq	.+16     	; 0x2bc4 <__vector_18+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    2bb4:	e0 91 f2 04 	lds	r30, 0x04F2	; 0x8004f2 <Serial+0x19>
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	e7 52       	subi	r30, 0x27	; 39
    2bbc:	fb 4f       	sbci	r31, 0xFB	; 251
    2bbe:	95 8f       	std	Z+29, r25	; 0x1d
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    2bc0:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <Serial+0x19>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
    2bc4:	ff 91       	pop	r31
    2bc6:	ef 91       	pop	r30
    2bc8:	9f 91       	pop	r25
    2bca:	8f 91       	pop	r24
    2bcc:	2f 91       	pop	r18
    2bce:	0f 90       	pop	r0
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	0f 90       	pop	r0
    2bd4:	1f 90       	pop	r1
    2bd6:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2bd8:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    2bda:	f4 cf       	rjmp	.-24     	; 0x2bc4 <__vector_18+0x4c>

00002bdc <__vector_19>:
__vector_19():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2bdc:	1f 92       	push	r1
    2bde:	0f 92       	push	r0
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	0f 92       	push	r0
    2be4:	11 24       	eor	r1, r1
    2be6:	2f 93       	push	r18
    2be8:	3f 93       	push	r19
    2bea:	4f 93       	push	r20
    2bec:	5f 93       	push	r21
    2bee:	6f 93       	push	r22
    2bf0:	7f 93       	push	r23
    2bf2:	8f 93       	push	r24
    2bf4:	9f 93       	push	r25
    2bf6:	af 93       	push	r26
    2bf8:	bf 93       	push	r27
    2bfa:	ef 93       	push	r30
    2bfc:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2bfe:	89 ed       	ldi	r24, 0xD9	; 217
    2c00:	94 e0       	ldi	r25, 0x04	; 4
    2c02:	c2 d1       	rcall	.+900    	; 0x2f88 <HardwareSerial::_tx_udr_empty_irq()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:65
}
    2c04:	ff 91       	pop	r31
    2c06:	ef 91       	pop	r30
    2c08:	bf 91       	pop	r27
    2c0a:	af 91       	pop	r26
    2c0c:	9f 91       	pop	r25
    2c0e:	8f 91       	pop	r24
    2c10:	7f 91       	pop	r23
    2c12:	6f 91       	pop	r22
    2c14:	5f 91       	pop	r21
    2c16:	4f 91       	pop	r20
    2c18:	3f 91       	pop	r19
    2c1a:	2f 91       	pop	r18
    2c1c:	0f 90       	pop	r0
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	0f 90       	pop	r0
    2c22:	1f 90       	pop	r1
    2c24:	18 95       	reti

00002c26 <Serial0_available()>:
_Z17Serial0_availablev():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2c26:	89 ed       	ldi	r24, 0xD9	; 217
    2c28:	94 e0       	ldi	r25, 0x04	; 4
    2c2a:	73 d1       	rcall	.+742    	; 0x2f12 <HardwareSerial::available()>
    2c2c:	21 e0       	ldi	r18, 0x01	; 1
    2c2e:	89 2b       	or	r24, r25
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <Serial0_available()+0xe>
    2c32:	20 e0       	ldi	r18, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:77
}
    2c34:	82 2f       	mov	r24, r18
    2c36:	08 95       	ret

00002c38 <_GLOBAL__sub_I___vector_18>:
_GLOBAL__sub_I___vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:43
    2c38:	e9 ed       	ldi	r30, 0xD9	; 217
    2c3a:	f4 e0       	ldi	r31, 0x04	; 4
    2c3c:	13 82       	std	Z+3, r1	; 0x03
    2c3e:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:64
    2c40:	88 ee       	ldi	r24, 0xE8	; 232
    2c42:	93 e0       	ldi	r25, 0x03	; 3
    2c44:	a0 e0       	ldi	r26, 0x00	; 0
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	84 83       	std	Z+4, r24	; 0x04
    2c4a:	95 83       	std	Z+5, r25	; 0x05
    2c4c:	a6 83       	std	Z+6, r26	; 0x06
    2c4e:	b7 83       	std	Z+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:95
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2c50:	85 eb       	ldi	r24, 0xB5	; 181
    2c52:	92 e0       	ldi	r25, 0x02	; 2
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
    2c58:	85 ec       	ldi	r24, 0xC5	; 197
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	95 87       	std	Z+13, r25	; 0x0d
    2c5e:	84 87       	std	Z+12, r24	; 0x0c
    2c60:	84 ec       	ldi	r24, 0xC4	; 196
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	97 87       	std	Z+15, r25	; 0x0f
    2c66:	86 87       	std	Z+14, r24	; 0x0e
    2c68:	80 ec       	ldi	r24, 0xC0	; 192
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	91 8b       	std	Z+17, r25	; 0x11
    2c6e:	80 8b       	std	Z+16, r24	; 0x10
    2c70:	81 ec       	ldi	r24, 0xC1	; 193
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	93 8b       	std	Z+19, r25	; 0x13
    2c76:	82 8b       	std	Z+18, r24	; 0x12
    2c78:	82 ec       	ldi	r24, 0xC2	; 194
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	95 8b       	std	Z+21, r25	; 0x15
    2c7e:	84 8b       	std	Z+20, r24	; 0x14
    2c80:	86 ec       	ldi	r24, 0xC6	; 198
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	97 8b       	std	Z+23, r25	; 0x17
    2c86:	86 8b       	std	Z+22, r24	; 0x16
    2c88:	11 8e       	std	Z+25, r1	; 0x19
    2c8a:	12 8e       	std	Z+26, r1	; 0x1a
    2c8c:	13 8e       	std	Z+27, r1	; 0x1b
    2c8e:	14 8e       	std	Z+28, r1	; 0x1c
    2c90:	08 95       	ret

00002c92 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2c92:	cf 92       	push	r12
    2c94:	df 92       	push	r13
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	7c 01       	movw	r14, r24
    2ca4:	6a 01       	movw	r12, r20
    2ca6:	8b 01       	movw	r16, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:36
  size_t n = 0;
    2ca8:	c0 e0       	ldi	r28, 0x00	; 0
    2caa:	d0 e0       	ldi	r29, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:37
  while (size--) {
    2cac:	cc 15       	cp	r28, r12
    2cae:	dd 05       	cpc	r29, r13
    2cb0:	79 f0       	breq	.+30     	; 0x2cd0 <Print::write(unsigned char const*, unsigned int)+0x3e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:38
    if (write(*buffer++)) n++;
    2cb2:	d8 01       	movw	r26, r16
    2cb4:	6d 91       	ld	r22, X+
    2cb6:	8d 01       	movw	r16, r26
    2cb8:	d7 01       	movw	r26, r14
    2cba:	ed 91       	ld	r30, X+
    2cbc:	fc 91       	ld	r31, X
    2cbe:	01 90       	ld	r0, Z+
    2cc0:	f0 81       	ld	r31, Z
    2cc2:	e0 2d       	mov	r30, r0
    2cc4:	c7 01       	movw	r24, r14
    2cc6:	09 95       	icall
    2cc8:	89 2b       	or	r24, r25
    2cca:	11 f0       	breq	.+4      	; 0x2cd0 <Print::write(unsigned char const*, unsigned int)+0x3e>
    2ccc:	21 96       	adiw	r28, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:37
  while (size--) {
    2cce:	ee cf       	rjmp	.-36     	; 0x2cac <Print::write(unsigned char const*, unsigned int)+0x1a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:42
    else break;
  }
  return n;
}
    2cd0:	ce 01       	movw	r24, r28
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
    2ce2:	08 95       	ret

00002ce4 <Print::write(char const*)>:
_ZN5Print5writeEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:50
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2ce4:	61 15       	cp	r22, r1
    2ce6:	71 05       	cpc	r23, r1
    2ce8:	79 f0       	breq	.+30     	; 0x2d08 <Print::write(char const*)+0x24>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:51
      return write((const uint8_t *)str, strlen(str));
    2cea:	fb 01       	movw	r30, r22
    2cec:	01 90       	ld	r0, Z+
    2cee:	00 20       	and	r0, r0
    2cf0:	e9 f7       	brne	.-6      	; 0x2cec <Print::write(char const*)+0x8>
    2cf2:	31 97       	sbiw	r30, 0x01	; 1
    2cf4:	af 01       	movw	r20, r30
    2cf6:	46 1b       	sub	r20, r22
    2cf8:	57 0b       	sbc	r21, r23
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	ed 91       	ld	r30, X+
    2cfe:	fc 91       	ld	r31, X
    2d00:	02 80       	ldd	r0, Z+2	; 0x02
    2d02:	f3 81       	ldd	r31, Z+3	; 0x03
    2d04:	e0 2d       	mov	r30, r0
    2d06:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:52
    }
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	08 95       	ret

00002d0e <Print::print(char const*)>:
_ZN5Print5printEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:63
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    2d0e:	ea cf       	rjmp	.-44     	; 0x2ce4 <Print::write(char const*)>

00002d10 <Print::print(char)>:
_ZN5Print5printEc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    2d10:	dc 01       	movw	r26, r24
    2d12:	ed 91       	ld	r30, X+
    2d14:	fc 91       	ld	r31, X
    2d16:	01 90       	ld	r0, Z+
    2d18:	f0 81       	ld	r31, Z
    2d1a:	e0 2d       	mov	r30, r0
    2d1c:	09 94       	ijmp

00002d1e <Print::println()>:
_ZN5Print7printlnEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:128
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    2d1e:	6e ea       	ldi	r22, 0xAE	; 174
    2d20:	72 e0       	ldi	r23, 0x02	; 2
    2d22:	e0 cf       	rjmp	.-64     	; 0x2ce4 <Print::write(char const*)>

00002d24 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:139
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:64
  return write(str);
    2d2c:	ec 01       	movw	r28, r24
    2d2e:	da df       	rcall	.-76     	; 0x2ce4 <Print::write(char const*)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:141
  size_t n = print(c);
  n += println();
    2d30:	8c 01       	movw	r16, r24
    2d32:	ce 01       	movw	r24, r28
    2d34:	f4 df       	rcall	.-24     	; 0x2d1e <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:143
  return n;
}
    2d36:	80 0f       	add	r24, r16
    2d38:	91 1f       	adc	r25, r17
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	1f 91       	pop	r17
    2d40:	0f 91       	pop	r16
    2d42:	08 95       	ret

00002d44 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:204
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    2d44:	8f 92       	push	r8
    2d46:	9f 92       	push	r9
    2d48:	af 92       	push	r10
    2d4a:	bf 92       	push	r11
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	a1 97       	sbiw	r28, 0x21	; 33
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	7c 01       	movw	r14, r24
    2d6a:	fa 01       	movw	r30, r20
    2d6c:	cb 01       	movw	r24, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:208
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2d6e:	19 a2       	std	Y+33, r1	; 0x21
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:211

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2d70:	42 2f       	mov	r20, r18
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	42 30       	cpi	r20, 0x02	; 2
    2d76:	51 05       	cpc	r21, r1
    2d78:	0c f4       	brge	.+2      	; 0x2d7c <Print::printNumber(unsigned long, unsigned char)+0x38>
    2d7a:	2a e0       	ldi	r18, 0x0A	; 10
    2d7c:	8e 01       	movw	r16, r28
    2d7e:	0f 5d       	subi	r16, 0xDF	; 223
    2d80:	1f 4f       	sbci	r17, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:214

  do {
    char c = n % base;
    2d82:	82 2e       	mov	r8, r18
    2d84:	91 2c       	mov	r9, r1
    2d86:	a1 2c       	mov	r10, r1
    2d88:	b1 2c       	mov	r11, r1
    2d8a:	bf 01       	movw	r22, r30
    2d8c:	a5 01       	movw	r20, r10
    2d8e:	94 01       	movw	r18, r8
    2d90:	f5 d1       	rcall	.+1002   	; 0x317c <__udivmodsi4>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:215
    n /= base;
    2d92:	f9 01       	movw	r30, r18
    2d94:	ca 01       	movw	r24, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2d96:	01 50       	subi	r16, 0x01	; 1
    2d98:	11 09       	sbc	r17, r1
    2d9a:	6a 30       	cpi	r22, 0x0A	; 10
    2d9c:	dc f4       	brge	.+54     	; 0x2dd4 <Print::printNumber(unsigned long, unsigned char)+0x90>
    2d9e:	60 5d       	subi	r22, 0xD0	; 208
    2da0:	d8 01       	movw	r26, r16
    2da2:	6c 93       	st	X, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:218
  } while(n);
    2da4:	23 2b       	or	r18, r19
    2da6:	24 2b       	or	r18, r20
    2da8:	25 2b       	or	r18, r21
    2daa:	79 f7       	brne	.-34     	; 0x2d8a <Print::printNumber(unsigned long, unsigned char)+0x46>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:220

  return write(str);
    2dac:	b8 01       	movw	r22, r16
    2dae:	c7 01       	movw	r24, r14
    2db0:	99 df       	rcall	.-206    	; 0x2ce4 <Print::write(char const*)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:221
}
    2db2:	a1 96       	adiw	r28, 0x21	; 33
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	ff 90       	pop	r15
    2dc8:	ef 90       	pop	r14
    2dca:	bf 90       	pop	r11
    2dcc:	af 90       	pop	r10
    2dce:	9f 90       	pop	r9
    2dd0:	8f 90       	pop	r8
    2dd2:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2dd4:	69 5c       	subi	r22, 0xC9	; 201
    2dd6:	e4 cf       	rjmp	.-56     	; 0x2da0 <Print::printNumber(unsigned long, unsigned char)+0x5c>

00002dd8 <Print::print(long, int)>:
_ZN5Print5printEli():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:88
{
    2dd8:	cf 92       	push	r12
    2dda:	df 92       	push	r13
    2ddc:	ef 92       	push	r14
    2dde:	ff 92       	push	r15
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	ec 01       	movw	r28, r24
    2dea:	6a 01       	movw	r12, r20
    2dec:	7b 01       	movw	r14, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:89
  if (base == 0) {
    2dee:	21 15       	cp	r18, r1
    2df0:	31 05       	cpc	r19, r1
    2df2:	79 f4       	brne	.+30     	; 0x2e12 <Print::print(long, int)+0x3a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    2df4:	e8 81       	ld	r30, Y
    2df6:	f9 81       	ldd	r31, Y+1	; 0x01
    2df8:	01 90       	ld	r0, Z+
    2dfa:	f0 81       	ld	r31, Z
    2dfc:	e0 2d       	mov	r30, r0
    2dfe:	64 2f       	mov	r22, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	ff 90       	pop	r15
    2e0a:	ef 90       	pop	r14
    2e0c:	df 90       	pop	r13
    2e0e:	cf 90       	pop	r12
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    2e10:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:91
  } else if (base == 10) {
    2e12:	2a 30       	cpi	r18, 0x0A	; 10
    2e14:	31 05       	cpc	r19, r1
    2e16:	d9 f4       	brne	.+54     	; 0x2e4e <Print::print(long, int)+0x76>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:92
    if (n < 0) {
    2e18:	77 ff       	sbrs	r23, 7
    2e1a:	18 c0       	rjmp	.+48     	; 0x2e4c <Print::print(long, int)+0x74>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:93
      int t = print('-');
    2e1c:	6d e2       	ldi	r22, 0x2D	; 45
    2e1e:	78 df       	rcall	.-272    	; 0x2d10 <Print::print(char)>
    2e20:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:94
      n = -n;
    2e22:	44 27       	eor	r20, r20
    2e24:	55 27       	eor	r21, r21
    2e26:	ba 01       	movw	r22, r20
    2e28:	4c 19       	sub	r20, r12
    2e2a:	5d 09       	sbc	r21, r13
    2e2c:	6e 09       	sbc	r22, r14
    2e2e:	7f 09       	sbc	r23, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:95
      return printNumber(n, 10) + t;
    2e30:	2a e0       	ldi	r18, 0x0A	; 10
    2e32:	ce 01       	movw	r24, r28
    2e34:	87 df       	rcall	.-242    	; 0x2d44 <Print::printNumber(unsigned long, unsigned char)>
    2e36:	80 0f       	add	r24, r16
    2e38:	91 1f       	adc	r25, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	ff 90       	pop	r15
    2e44:	ef 90       	pop	r14
    2e46:	df 90       	pop	r13
    2e48:	cf 90       	pop	r12
    2e4a:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:97
    return printNumber(n, 10);
    2e4c:	2a e0       	ldi	r18, 0x0A	; 10
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    2e4e:	b7 01       	movw	r22, r14
    2e50:	a6 01       	movw	r20, r12
    2e52:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	1f 91       	pop	r17
    2e5a:	0f 91       	pop	r16
    2e5c:	ff 90       	pop	r15
    2e5e:	ef 90       	pop	r14
    2e60:	df 90       	pop	r13
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    2e62:	cf 90       	pop	r12
    2e64:	6f cf       	rjmp	.-290    	; 0x2d44 <Print::printNumber(unsigned long, unsigned char)>

00002e66 <Print::print(int, int)>:
_ZN5Print5printEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:78
{
    2e66:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:79
  return print((long) n, base);
    2e68:	ab 01       	movw	r20, r22
    2e6a:	77 0f       	add	r23, r23
    2e6c:	66 0b       	sbc	r22, r22
    2e6e:	77 0b       	sbc	r23, r23
    2e70:	b3 cf       	rjmp	.-154    	; 0x2dd8 <Print::print(long, int)>

00002e72 <Print::println(int, int)>:
_ZN5Print7printlnEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:160
{
    2e72:	0f 93       	push	r16
    2e74:	1f 93       	push	r17
    2e76:	cf 93       	push	r28
    2e78:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:161
  size_t n = print(num, base);
    2e7a:	ec 01       	movw	r28, r24
    2e7c:	f4 df       	rcall	.-24     	; 0x2e66 <Print::print(int, int)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:162
  n += println();
    2e7e:	8c 01       	movw	r16, r24
    2e80:	ce 01       	movw	r24, r28
    2e82:	4d df       	rcall	.-358    	; 0x2d1e <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:164
}
    2e84:	80 0f       	add	r24, r16
    2e86:	91 1f       	adc	r25, r17
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	08 95       	ret

00002e92 <Print::println(long, int)>:
_ZN5Print7printlnEli():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:174
{
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:175
  size_t n = print(num, base);
    2e9a:	ec 01       	movw	r28, r24
    2e9c:	9d df       	rcall	.-198    	; 0x2dd8 <Print::print(long, int)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:176
  n += println();
    2e9e:	8c 01       	movw	r16, r24
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	3d df       	rcall	.-390    	; 0x2d1e <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:178
}
    2ea4:	80 0f       	add	r24, r16
    2ea6:	91 1f       	adc	r25, r17
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	1f 91       	pop	r17
    2eae:	0f 91       	pop	r16
    2eb0:	08 95       	ret

00002eb2 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:105
  if (base == 0) return write(n);
    2eb2:	21 15       	cp	r18, r1
    2eb4:	31 05       	cpc	r19, r1
    2eb6:	41 f4       	brne	.+16     	; 0x2ec8 <Print::print(unsigned long, int)+0x16>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	ed 91       	ld	r30, X+
    2ebc:	fc 91       	ld	r31, X
    2ebe:	01 90       	ld	r0, Z+
    2ec0:	f0 81       	ld	r31, Z
    2ec2:	e0 2d       	mov	r30, r0
    2ec4:	64 2f       	mov	r22, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:106
  else return printNumber(n, base);
    2ec6:	09 94       	ijmp
    2ec8:	3d cf       	rjmp	.-390    	; 0x2d44 <Print::printNumber(unsigned long, unsigned char)>

00002eca <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:73
{
    2eca:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:74
  return print((unsigned long) b, base);
    2ecc:	46 2f       	mov	r20, r22
    2ece:	50 e0       	ldi	r21, 0x00	; 0
    2ed0:	60 e0       	ldi	r22, 0x00	; 0
    2ed2:	70 e0       	ldi	r23, 0x00	; 0
    2ed4:	ee cf       	rjmp	.-36     	; 0x2eb2 <Print::print(unsigned long, int)>

00002ed6 <Print::println(unsigned char, int)>:
_ZN5Print7printlnEhi():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:153
{
    2ed6:	0f 93       	push	r16
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:154
  size_t n = print(b, base);
    2ede:	ec 01       	movw	r28, r24
    2ee0:	f4 df       	rcall	.-24     	; 0x2eca <Print::print(unsigned char, int)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:155
  n += println();
    2ee2:	8c 01       	movw	r16, r24
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	1b df       	rcall	.-458    	; 0x2d1e <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:157
}
    2ee8:	80 0f       	add	r24, r16
    2eea:	91 1f       	adc	r25, r17
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	08 95       	ret

00002ef6 <operator new[](unsigned int)>:
_Znaj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/new.cpp:25

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
    2ef6:	a1 c1       	rjmp	.+834    	; 0x323a <malloc>

00002ef8 <initVariant>:
    2ef8:	08 95       	ret

00002efa <main>:
main():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:37

int main(void)
{
	init();

	initVariant();
    2efa:	70 dd       	rcall	.-1312   	; 0x29dc <init>
    2efc:	fd df       	rcall	.-6      	; 0x2ef8 <initVariant>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:43

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2efe:	0e 94 62 02 	call	0x4c4	; 0x4c4 <setup>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2f02:	c7 eb       	ldi	r28, 0xB7	; 183
    2f04:	d7 e1       	ldi	r29, 0x17	; 23
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:46
		loop();
    2f06:	0e 94 8c 01 	call	0x318	; 0x318 <loop>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
		if (serialEventRun) serialEventRun();
    2f0a:	20 97       	sbiw	r28, 0x00	; 0
    2f0c:	e1 f3       	breq	.-8      	; 0x2f06 <main+0xc>
    2f0e:	2f d0       	rcall	.+94     	; 0x2f6e <serialEventRun()>
    2f10:	fa cf       	rjmp	.-12     	; 0x2f06 <main+0xc>

00002f12 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:153
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2f12:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:154
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2f14:	91 8d       	ldd	r25, Z+25	; 0x19
    2f16:	22 8d       	ldd	r18, Z+26	; 0x1a
    2f18:	89 2f       	mov	r24, r25
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	80 5c       	subi	r24, 0xC0	; 192
    2f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f20:	82 1b       	sub	r24, r18
    2f22:	91 09       	sbc	r25, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:155
}
    2f24:	8f 73       	andi	r24, 0x3F	; 63
    2f26:	99 27       	eor	r25, r25
    2f28:	08 95       	ret

00002f2a <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:158

int HardwareSerial::peek(void)
{
    2f2a:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:159
  if (_rx_buffer_head == _rx_buffer_tail) {
    2f2c:	91 8d       	ldd	r25, Z+25	; 0x19
    2f2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f30:	98 17       	cp	r25, r24
    2f32:	31 f0       	breq	.+12     	; 0x2f40 <HardwareSerial::peek()+0x16>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:162
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2f34:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f36:	e8 0f       	add	r30, r24
    2f38:	f1 1d       	adc	r31, r1
    2f3a:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:160
    return -1;
    2f40:	8f ef       	ldi	r24, 0xFF	; 255
    2f42:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:164
  }
}
    2f44:	08 95       	ret

00002f46 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
    2f46:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:169
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2f48:	91 8d       	ldd	r25, Z+25	; 0x19
    2f4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f4c:	98 17       	cp	r25, r24
    2f4e:	61 f0       	breq	.+24     	; 0x2f68 <HardwareSerial::read()+0x22>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:172
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2f50:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f52:	df 01       	movw	r26, r30
    2f54:	a8 0f       	add	r26, r24
    2f56:	b1 1d       	adc	r27, r1
    2f58:	5d 96       	adiw	r26, 0x1d	; 29
    2f5a:	8c 91       	ld	r24, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:173
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2f5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f5e:	9f 5f       	subi	r25, 0xFF	; 255
    2f60:	9f 73       	andi	r25, 0x3F	; 63
    2f62:	92 8f       	std	Z+26, r25	; 0x1a
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:174
    return c;
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:170
    return -1;
    2f68:	8f ef       	ldi	r24, 0xFF	; 255
    2f6a:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:176
  }
}
    2f6c:	08 95       	ret

00002f6e <serialEventRun()>:
_Z14serialEventRunv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:66
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2f6e:	83 e1       	ldi	r24, 0x13	; 19
    2f70:	96 e1       	ldi	r25, 0x16	; 22
    2f72:	89 2b       	or	r24, r25
    2f74:	41 f0       	breq	.+16     	; 0x2f86 <serialEventRun()+0x18>
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	89 2b       	or	r24, r25
    2f7c:	21 f0       	breq	.+8      	; 0x2f86 <serialEventRun()+0x18>
    2f7e:	53 de       	rcall	.-858    	; 0x2c26 <Serial0_available()>
    2f80:	81 11       	cpse	r24, r1
    2f82:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2f86:	08 95       	ret

00002f88 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:82
{
    2f88:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:85
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2f8a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f8c:	df 01       	movw	r26, r30
    2f8e:	a8 0f       	add	r26, r24
    2f90:	b1 1d       	adc	r27, r1
    2f92:	a3 5a       	subi	r26, 0xA3	; 163
    2f94:	bf 4f       	sbci	r27, 0xFF	; 255
    2f96:	2c 91       	ld	r18, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2f98:	84 8d       	ldd	r24, Z+28	; 0x1c
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	01 96       	adiw	r24, 0x01	; 1
    2f9e:	8f 73       	andi	r24, 0x3F	; 63
    2fa0:	99 27       	eor	r25, r25
    2fa2:	84 8f       	std	Z+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:88
  *_udr = c;
    2fa4:	a6 89       	ldd	r26, Z+22	; 0x16
    2fa6:	b7 89       	ldd	r27, Z+23	; 0x17
    2fa8:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:93
  sbi(*_ucsra, TXC0);
    2faa:	a0 89       	ldd	r26, Z+16	; 0x10
    2fac:	b1 89       	ldd	r27, Z+17	; 0x11
    2fae:	8c 91       	ld	r24, X
    2fb0:	80 64       	ori	r24, 0x40	; 64
    2fb2:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:95
  if (_tx_buffer_head == _tx_buffer_tail) {
    2fb4:	93 8d       	ldd	r25, Z+27	; 0x1b
    2fb6:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fb8:	98 13       	cpse	r25, r24
    2fba:	06 c0       	rjmp	.+12     	; 0x2fc8 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:97
    cbi(*_ucsrb, UDRIE0);
    2fbc:	02 88       	ldd	r0, Z+18	; 0x12
    2fbe:	f3 89       	ldd	r31, Z+19	; 0x13
    2fc0:	e0 2d       	mov	r30, r0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	8f 7d       	andi	r24, 0xDF	; 223
    2fc6:	80 83       	st	Z, r24
    2fc8:	08 95       	ret

00002fca <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:194
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:198
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2fd0:	88 8d       	ldd	r24, Y+24	; 0x18
    2fd2:	88 23       	and	r24, r24
    2fd4:	51 f0       	breq	.+20     	; 0x2fea <HardwareSerial::flush()+0x20>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:201
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2fd6:	ea 89       	ldd	r30, Y+18	; 0x12
    2fd8:	fb 89       	ldd	r31, Y+19	; 0x13
    2fda:	80 81       	ld	r24, Z
    2fdc:	85 fd       	sbrc	r24, 5
    2fde:	08 c0       	rjmp	.+16     	; 0x2ff0 <HardwareSerial::flush()+0x26>
    2fe0:	a8 89       	ldd	r26, Y+16	; 0x10
    2fe2:	b9 89       	ldd	r27, Y+17	; 0x11
    2fe4:	8c 91       	ld	r24, X
    2fe6:	86 ff       	sbrs	r24, 6
    2fe8:	03 c0       	rjmp	.+6      	; 0x2ff0 <HardwareSerial::flush()+0x26>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:211
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:202
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	07 fc       	sbrc	r0, 7
    2ff4:	f2 cf       	rjmp	.-28     	; 0x2fda <HardwareSerial::flush()+0x10>
    2ff6:	80 81       	ld	r24, Z
    2ff8:	85 ff       	sbrs	r24, 5
    2ffa:	ef cf       	rjmp	.-34     	; 0x2fda <HardwareSerial::flush()+0x10>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:206
	if (bit_is_set(*_ucsra, UDRE0))
    2ffc:	e8 89       	ldd	r30, Y+16	; 0x10
    2ffe:	f9 89       	ldd	r31, Y+17	; 0x11
    3000:	80 81       	ld	r24, Z
    3002:	85 ff       	sbrs	r24, 5
    3004:	e8 cf       	rjmp	.-48     	; 0x2fd6 <HardwareSerial::flush()+0xc>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:207
	  _tx_udr_empty_irq();
    3006:	ce 01       	movw	r24, r28
    3008:	bf df       	rcall	.-130    	; 0x2f88 <HardwareSerial::_tx_udr_empty_irq()>
    300a:	e5 cf       	rjmp	.-54     	; 0x2fd6 <HardwareSerial::flush()+0xc>

0000300c <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:214

size_t HardwareSerial::write(uint8_t c)
{
    300c:	ef 92       	push	r14
    300e:	ff 92       	push	r15
    3010:	0f 93       	push	r16
    3012:	1f 93       	push	r17
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
    3018:	ec 01       	movw	r28, r24
    301a:	f6 2e       	mov	r15, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:215
  _written = true;
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:220
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3020:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3022:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3024:	98 13       	cpse	r25, r24
    3026:	05 c0       	rjmp	.+10     	; 0x3032 <HardwareSerial::write(unsigned char)+0x26>
    3028:	e8 89       	ldd	r30, Y+16	; 0x10
    302a:	f9 89       	ldd	r31, Y+17	; 0x11
    302c:	80 81       	ld	r24, Z
    302e:	85 fd       	sbrc	r24, 5
    3030:	2b c0       	rjmp	.+86     	; 0x3088 <HardwareSerial::write(unsigned char)+0x7c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:225
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3032:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3034:	10 e0       	ldi	r17, 0x00	; 0
    3036:	0f 5f       	subi	r16, 0xFF	; 255
    3038:	1f 4f       	sbci	r17, 0xFF	; 255
    303a:	0f 73       	andi	r16, 0x3F	; 63
    303c:	11 27       	eor	r17, r17
    303e:	e0 2e       	mov	r14, r16
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:229
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3040:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3042:	e8 12       	cpse	r14, r24
    3044:	0b c0       	rjmp	.+22     	; 0x305c <HardwareSerial::write(unsigned char)+0x50>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:230
    if (bit_is_clear(SREG, SREG_I)) {
    3046:	0f b6       	in	r0, 0x3f	; 63
    3048:	07 fc       	sbrc	r0, 7
    304a:	fa cf       	rjmp	.-12     	; 0x3040 <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:235
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    304c:	e8 89       	ldd	r30, Y+16	; 0x10
    304e:	f9 89       	ldd	r31, Y+17	; 0x11
    3050:	80 81       	ld	r24, Z
    3052:	85 ff       	sbrs	r24, 5
    3054:	f5 cf       	rjmp	.-22     	; 0x3040 <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:236
	_tx_udr_empty_irq();
    3056:	ce 01       	movw	r24, r28
    3058:	97 df       	rcall	.-210    	; 0x2f88 <HardwareSerial::_tx_udr_empty_irq()>
    305a:	f2 cf       	rjmp	.-28     	; 0x3040 <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:242
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    305c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    305e:	fe 01       	movw	r30, r28
    3060:	e8 0f       	add	r30, r24
    3062:	f1 1d       	adc	r31, r1
    3064:	e3 5a       	subi	r30, 0xA3	; 163
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	f0 82       	st	Z, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:243
  _tx_buffer_head = i;
    306a:	0b 8f       	std	Y+27, r16	; 0x1b
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:245
	
  sbi(*_ucsrb, UDRIE0);
    306c:	ea 89       	ldd	r30, Y+18	; 0x12
    306e:	fb 89       	ldd	r31, Y+19	; 0x13
    3070:	80 81       	ld	r24, Z
    3072:	80 62       	ori	r24, 0x20	; 32
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
    3074:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:248
  
  return 1;
}
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	1f 91       	pop	r17
    3080:	0f 91       	pop	r16
    3082:	ff 90       	pop	r15
    3084:	ef 90       	pop	r14
    3086:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:221
    *_udr = c;
    3088:	ee 89       	ldd	r30, Y+22	; 0x16
    308a:	ff 89       	ldd	r31, Y+23	; 0x17
    308c:	60 83       	st	Z, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
    308e:	e8 89       	ldd	r30, Y+16	; 0x10
    3090:	f9 89       	ldd	r31, Y+17	; 0x11
    3092:	80 81       	ld	r24, Z
    3094:	80 64       	ori	r24, 0x40	; 64
    3096:	ee cf       	rjmp	.-36     	; 0x3074 <HardwareSerial::write(unsigned char)+0x68>

00003098 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:104
{
    3098:	cf 92       	push	r12
    309a:	df 92       	push	r13
    309c:	ef 92       	push	r14
    309e:	ff 92       	push	r15
    30a0:	1f 93       	push	r17
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	ec 01       	movw	r28, r24
    30a8:	6a 01       	movw	r12, r20
    30aa:	7b 01       	movw	r14, r22
    30ac:	12 2f       	mov	r17, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:107
  *_ucsra = 1 << U2X0;
    30ae:	e8 89       	ldd	r30, Y+16	; 0x10
    30b0:	f9 89       	ldd	r31, Y+17	; 0x11
    30b2:	82 e0       	ldi	r24, 0x02	; 2
    30b4:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    30b6:	41 15       	cp	r20, r1
    30b8:	51 4e       	sbci	r21, 0xE1	; 225
    30ba:	61 05       	cpc	r22, r1
    30bc:	71 05       	cpc	r23, r1
    30be:	99 f0       	breq	.+38     	; 0x30e6 <HardwareSerial::begin(unsigned long, unsigned char)+0x4e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:106
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    30c0:	60 e0       	ldi	r22, 0x00	; 0
    30c2:	79 e0       	ldi	r23, 0x09	; 9
    30c4:	8d e3       	ldi	r24, 0x3D	; 61
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	a7 01       	movw	r20, r14
    30ca:	96 01       	movw	r18, r12
    30cc:	57 d0       	rcall	.+174    	; 0x317c <__udivmodsi4>
    30ce:	21 50       	subi	r18, 0x01	; 1
    30d0:	31 09       	sbc	r19, r1
    30d2:	41 09       	sbc	r20, r1
    30d4:	51 09       	sbc	r21, r1
    30d6:	56 95       	lsr	r21
    30d8:	47 95       	ror	r20
    30da:	37 95       	ror	r19
    30dc:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    30de:	21 15       	cp	r18, r1
    30e0:	80 e1       	ldi	r24, 0x10	; 16
    30e2:	38 07       	cpc	r19, r24
    30e4:	90 f0       	brcs	.+36     	; 0x310a <HardwareSerial::begin(unsigned long, unsigned char)+0x72>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:116
    *_ucsra = 0;
    30e6:	e8 89       	ldd	r30, Y+16	; 0x10
    30e8:	f9 89       	ldd	r31, Y+17	; 0x11
    30ea:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    30ec:	60 e8       	ldi	r22, 0x80	; 128
    30ee:	74 e8       	ldi	r23, 0x84	; 132
    30f0:	8e e1       	ldi	r24, 0x1E	; 30
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	a7 01       	movw	r20, r14
    30f6:	96 01       	movw	r18, r12
    30f8:	41 d0       	rcall	.+130    	; 0x317c <__udivmodsi4>
    30fa:	21 50       	subi	r18, 0x01	; 1
    30fc:	31 09       	sbc	r19, r1
    30fe:	41 09       	sbc	r20, r1
    3100:	51 09       	sbc	r21, r1
    3102:	56 95       	lsr	r21
    3104:	47 95       	ror	r20
    3106:	37 95       	ror	r19
    3108:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:121
  *_ubrrh = baud_setting >> 8;
    310a:	ec 85       	ldd	r30, Y+12	; 0x0c
    310c:	fd 85       	ldd	r31, Y+13	; 0x0d
    310e:	30 83       	st	Z, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    3110:	ee 85       	ldd	r30, Y+14	; 0x0e
    3112:	ff 85       	ldd	r31, Y+15	; 0x0f
    3114:	20 83       	st	Z, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:124
  _written = false;
    3116:	18 8e       	std	Y+24, r1	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:130
  *_ucsrc = config;
    3118:	ec 89       	ldd	r30, Y+20	; 0x14
    311a:	fd 89       	ldd	r31, Y+21	; 0x15
    311c:	10 83       	st	Z, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:132
  sbi(*_ucsrb, RXEN0);
    311e:	ea 89       	ldd	r30, Y+18	; 0x12
    3120:	fb 89       	ldd	r31, Y+19	; 0x13
    3122:	80 81       	ld	r24, Z
    3124:	80 61       	ori	r24, 0x10	; 16
    3126:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:133
  sbi(*_ucsrb, TXEN0);
    3128:	ea 89       	ldd	r30, Y+18	; 0x12
    312a:	fb 89       	ldd	r31, Y+19	; 0x13
    312c:	80 81       	ld	r24, Z
    312e:	88 60       	ori	r24, 0x08	; 8
    3130:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:134
  sbi(*_ucsrb, RXCIE0);
    3132:	ea 89       	ldd	r30, Y+18	; 0x12
    3134:	fb 89       	ldd	r31, Y+19	; 0x13
    3136:	80 81       	ld	r24, Z
    3138:	80 68       	ori	r24, 0x80	; 128
    313a:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:135
  cbi(*_ucsrb, UDRIE0);
    313c:	ea 89       	ldd	r30, Y+18	; 0x12
    313e:	fb 89       	ldd	r31, Y+19	; 0x13
    3140:	80 81       	ld	r24, Z
    3142:	8f 7d       	andi	r24, 0xDF	; 223
    3144:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:136
}
    3146:	df 91       	pop	r29
    3148:	cf 91       	pop	r28
    314a:	1f 91       	pop	r17
    314c:	ff 90       	pop	r15
    314e:	ef 90       	pop	r14
    3150:	df 90       	pop	r13
    3152:	cf 90       	pop	r12
    3154:	08 95       	ret

00003156 <__divmodhi4>:
    3156:	97 fb       	bst	r25, 7
    3158:	07 2e       	mov	r0, r23
    315a:	16 f4       	brtc	.+4      	; 0x3160 <__divmodhi4+0xa>
    315c:	00 94       	com	r0
    315e:	06 d0       	rcall	.+12     	; 0x316c <__divmodhi4_neg1>
    3160:	77 fd       	sbrc	r23, 7
    3162:	08 d0       	rcall	.+16     	; 0x3174 <__divmodhi4_neg2>
    3164:	50 d0       	rcall	.+160    	; 0x3206 <__udivmodhi4>
    3166:	07 fc       	sbrc	r0, 7
    3168:	05 d0       	rcall	.+10     	; 0x3174 <__divmodhi4_neg2>
    316a:	3e f4       	brtc	.+14     	; 0x317a <__divmodhi4_exit>

0000316c <__divmodhi4_neg1>:
    316c:	90 95       	com	r25
    316e:	81 95       	neg	r24
    3170:	9f 4f       	sbci	r25, 0xFF	; 255
    3172:	08 95       	ret

00003174 <__divmodhi4_neg2>:
    3174:	70 95       	com	r23
    3176:	61 95       	neg	r22
    3178:	7f 4f       	sbci	r23, 0xFF	; 255

0000317a <__divmodhi4_exit>:
    317a:	08 95       	ret

0000317c <__udivmodsi4>:
    317c:	a1 e2       	ldi	r26, 0x21	; 33
    317e:	1a 2e       	mov	r1, r26
    3180:	aa 1b       	sub	r26, r26
    3182:	bb 1b       	sub	r27, r27
    3184:	fd 01       	movw	r30, r26
    3186:	0d c0       	rjmp	.+26     	; 0x31a2 <__udivmodsi4_ep>

00003188 <__udivmodsi4_loop>:
    3188:	aa 1f       	adc	r26, r26
    318a:	bb 1f       	adc	r27, r27
    318c:	ee 1f       	adc	r30, r30
    318e:	ff 1f       	adc	r31, r31
    3190:	a2 17       	cp	r26, r18
    3192:	b3 07       	cpc	r27, r19
    3194:	e4 07       	cpc	r30, r20
    3196:	f5 07       	cpc	r31, r21
    3198:	20 f0       	brcs	.+8      	; 0x31a2 <__udivmodsi4_ep>
    319a:	a2 1b       	sub	r26, r18
    319c:	b3 0b       	sbc	r27, r19
    319e:	e4 0b       	sbc	r30, r20
    31a0:	f5 0b       	sbc	r31, r21

000031a2 <__udivmodsi4_ep>:
    31a2:	66 1f       	adc	r22, r22
    31a4:	77 1f       	adc	r23, r23
    31a6:	88 1f       	adc	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	1a 94       	dec	r1
    31ac:	69 f7       	brne	.-38     	; 0x3188 <__udivmodsi4_loop>
    31ae:	60 95       	com	r22
    31b0:	70 95       	com	r23
    31b2:	80 95       	com	r24
    31b4:	90 95       	com	r25
    31b6:	9b 01       	movw	r18, r22
    31b8:	ac 01       	movw	r20, r24
    31ba:	bd 01       	movw	r22, r26
    31bc:	cf 01       	movw	r24, r30
    31be:	08 95       	ret

000031c0 <__divmodsi4>:
    31c0:	05 2e       	mov	r0, r21
    31c2:	97 fb       	bst	r25, 7
    31c4:	16 f4       	brtc	.+4      	; 0x31ca <__divmodsi4+0xa>
    31c6:	00 94       	com	r0
    31c8:	0f d0       	rcall	.+30     	; 0x31e8 <__negsi2>
    31ca:	57 fd       	sbrc	r21, 7
    31cc:	05 d0       	rcall	.+10     	; 0x31d8 <__divmodsi4_neg2>
    31ce:	d6 df       	rcall	.-84     	; 0x317c <__udivmodsi4>
    31d0:	07 fc       	sbrc	r0, 7
    31d2:	02 d0       	rcall	.+4      	; 0x31d8 <__divmodsi4_neg2>
    31d4:	46 f4       	brtc	.+16     	; 0x31e6 <__divmodsi4_exit>
    31d6:	08 c0       	rjmp	.+16     	; 0x31e8 <__negsi2>

000031d8 <__divmodsi4_neg2>:
    31d8:	50 95       	com	r21
    31da:	40 95       	com	r20
    31dc:	30 95       	com	r19
    31de:	21 95       	neg	r18
    31e0:	3f 4f       	sbci	r19, 0xFF	; 255
    31e2:	4f 4f       	sbci	r20, 0xFF	; 255
    31e4:	5f 4f       	sbci	r21, 0xFF	; 255

000031e6 <__divmodsi4_exit>:
    31e6:	08 95       	ret

000031e8 <__negsi2>:
    31e8:	90 95       	com	r25
    31ea:	80 95       	com	r24
    31ec:	70 95       	com	r23
    31ee:	61 95       	neg	r22
    31f0:	7f 4f       	sbci	r23, 0xFF	; 255
    31f2:	8f 4f       	sbci	r24, 0xFF	; 255
    31f4:	9f 4f       	sbci	r25, 0xFF	; 255
    31f6:	08 95       	ret

000031f8 <__bswapsi2>:
    31f8:	69 27       	eor	r22, r25
    31fa:	96 27       	eor	r25, r22
    31fc:	69 27       	eor	r22, r25
    31fe:	78 27       	eor	r23, r24
    3200:	87 27       	eor	r24, r23
    3202:	78 27       	eor	r23, r24
    3204:	08 95       	ret

00003206 <__udivmodhi4>:
    3206:	aa 1b       	sub	r26, r26
    3208:	bb 1b       	sub	r27, r27
    320a:	51 e1       	ldi	r21, 0x11	; 17
    320c:	07 c0       	rjmp	.+14     	; 0x321c <__udivmodhi4_ep>

0000320e <__udivmodhi4_loop>:
    320e:	aa 1f       	adc	r26, r26
    3210:	bb 1f       	adc	r27, r27
    3212:	a6 17       	cp	r26, r22
    3214:	b7 07       	cpc	r27, r23
    3216:	10 f0       	brcs	.+4      	; 0x321c <__udivmodhi4_ep>
    3218:	a6 1b       	sub	r26, r22
    321a:	b7 0b       	sbc	r27, r23

0000321c <__udivmodhi4_ep>:
    321c:	88 1f       	adc	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	5a 95       	dec	r21
    3222:	a9 f7       	brne	.-22     	; 0x320e <__udivmodhi4_loop>
    3224:	80 95       	com	r24
    3226:	90 95       	com	r25
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	08 95       	ret

0000322e <__tablejump2__>:
    322e:	ee 0f       	add	r30, r30
    3230:	ff 1f       	adc	r31, r31
    3232:	05 90       	lpm	r0, Z+
    3234:	f4 91       	lpm	r31, Z
    3236:	e0 2d       	mov	r30, r0
    3238:	09 94       	ijmp

0000323a <malloc>:
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
    3242:	82 30       	cpi	r24, 0x02	; 2
    3244:	91 05       	cpc	r25, r1
    3246:	10 f4       	brcc	.+4      	; 0x324c <malloc+0x12>
    3248:	82 e0       	ldi	r24, 0x02	; 2
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <__flp>
    3250:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <__flp+0x1>
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	a0 e0       	ldi	r26, 0x00	; 0
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	30 97       	sbiw	r30, 0x00	; 0
    325e:	19 f1       	breq	.+70     	; 0x32a6 <malloc+0x6c>
    3260:	40 81       	ld	r20, Z
    3262:	51 81       	ldd	r21, Z+1	; 0x01
    3264:	02 81       	ldd	r16, Z+2	; 0x02
    3266:	13 81       	ldd	r17, Z+3	; 0x03
    3268:	48 17       	cp	r20, r24
    326a:	59 07       	cpc	r21, r25
    326c:	c8 f0       	brcs	.+50     	; 0x32a0 <malloc+0x66>
    326e:	84 17       	cp	r24, r20
    3270:	95 07       	cpc	r25, r21
    3272:	69 f4       	brne	.+26     	; 0x328e <malloc+0x54>
    3274:	10 97       	sbiw	r26, 0x00	; 0
    3276:	31 f0       	breq	.+12     	; 0x3284 <malloc+0x4a>
    3278:	12 96       	adiw	r26, 0x02	; 2
    327a:	0c 93       	st	X, r16
    327c:	12 97       	sbiw	r26, 0x02	; 2
    327e:	13 96       	adiw	r26, 0x03	; 3
    3280:	1c 93       	st	X, r17
    3282:	27 c0       	rjmp	.+78     	; 0x32d2 <malloc+0x98>
    3284:	00 93 78 05 	sts	0x0578, r16	; 0x800578 <__flp>
    3288:	10 93 79 05 	sts	0x0579, r17	; 0x800579 <__flp+0x1>
    328c:	22 c0       	rjmp	.+68     	; 0x32d2 <malloc+0x98>
    328e:	21 15       	cp	r18, r1
    3290:	31 05       	cpc	r19, r1
    3292:	19 f0       	breq	.+6      	; 0x329a <malloc+0x60>
    3294:	42 17       	cp	r20, r18
    3296:	53 07       	cpc	r21, r19
    3298:	18 f4       	brcc	.+6      	; 0x32a0 <malloc+0x66>
    329a:	9a 01       	movw	r18, r20
    329c:	bd 01       	movw	r22, r26
    329e:	ef 01       	movw	r28, r30
    32a0:	df 01       	movw	r26, r30
    32a2:	f8 01       	movw	r30, r16
    32a4:	db cf       	rjmp	.-74     	; 0x325c <malloc+0x22>
    32a6:	21 15       	cp	r18, r1
    32a8:	31 05       	cpc	r19, r1
    32aa:	f9 f0       	breq	.+62     	; 0x32ea <malloc+0xb0>
    32ac:	28 1b       	sub	r18, r24
    32ae:	39 0b       	sbc	r19, r25
    32b0:	24 30       	cpi	r18, 0x04	; 4
    32b2:	31 05       	cpc	r19, r1
    32b4:	80 f4       	brcc	.+32     	; 0x32d6 <malloc+0x9c>
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ba:	61 15       	cp	r22, r1
    32bc:	71 05       	cpc	r23, r1
    32be:	21 f0       	breq	.+8      	; 0x32c8 <malloc+0x8e>
    32c0:	fb 01       	movw	r30, r22
    32c2:	93 83       	std	Z+3, r25	; 0x03
    32c4:	82 83       	std	Z+2, r24	; 0x02
    32c6:	04 c0       	rjmp	.+8      	; 0x32d0 <malloc+0x96>
    32c8:	90 93 79 05 	sts	0x0579, r25	; 0x800579 <__flp+0x1>
    32cc:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <__flp>
    32d0:	fe 01       	movw	r30, r28
    32d2:	32 96       	adiw	r30, 0x02	; 2
    32d4:	44 c0       	rjmp	.+136    	; 0x335e <malloc+0x124>
    32d6:	fe 01       	movw	r30, r28
    32d8:	e2 0f       	add	r30, r18
    32da:	f3 1f       	adc	r31, r19
    32dc:	81 93       	st	Z+, r24
    32de:	91 93       	st	Z+, r25
    32e0:	22 50       	subi	r18, 0x02	; 2
    32e2:	31 09       	sbc	r19, r1
    32e4:	39 83       	std	Y+1, r19	; 0x01
    32e6:	28 83       	st	Y, r18
    32e8:	3a c0       	rjmp	.+116    	; 0x335e <malloc+0x124>
    32ea:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <__brkval>
    32ee:	30 91 77 05 	lds	r19, 0x0577	; 0x800577 <__brkval+0x1>
    32f2:	23 2b       	or	r18, r19
    32f4:	41 f4       	brne	.+16     	; 0x3306 <malloc+0xcc>
    32f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    32fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    32fe:	30 93 77 05 	sts	0x0577, r19	; 0x800577 <__brkval+0x1>
    3302:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <__brkval>
    3306:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__malloc_heap_end>
    330a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__malloc_heap_end+0x1>
    330e:	21 15       	cp	r18, r1
    3310:	31 05       	cpc	r19, r1
    3312:	41 f4       	brne	.+16     	; 0x3324 <malloc+0xea>
    3314:	2d b7       	in	r18, 0x3d	; 61
    3316:	3e b7       	in	r19, 0x3e	; 62
    3318:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    331c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3320:	24 1b       	sub	r18, r20
    3322:	35 0b       	sbc	r19, r21
    3324:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <__brkval>
    3328:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <__brkval+0x1>
    332c:	e2 17       	cp	r30, r18
    332e:	f3 07       	cpc	r31, r19
    3330:	a0 f4       	brcc	.+40     	; 0x335a <malloc+0x120>
    3332:	2e 1b       	sub	r18, r30
    3334:	3f 0b       	sbc	r19, r31
    3336:	28 17       	cp	r18, r24
    3338:	39 07       	cpc	r19, r25
    333a:	78 f0       	brcs	.+30     	; 0x335a <malloc+0x120>
    333c:	ac 01       	movw	r20, r24
    333e:	4e 5f       	subi	r20, 0xFE	; 254
    3340:	5f 4f       	sbci	r21, 0xFF	; 255
    3342:	24 17       	cp	r18, r20
    3344:	35 07       	cpc	r19, r21
    3346:	48 f0       	brcs	.+18     	; 0x335a <malloc+0x120>
    3348:	4e 0f       	add	r20, r30
    334a:	5f 1f       	adc	r21, r31
    334c:	50 93 77 05 	sts	0x0577, r21	; 0x800577 <__brkval+0x1>
    3350:	40 93 76 05 	sts	0x0576, r20	; 0x800576 <__brkval>
    3354:	81 93       	st	Z+, r24
    3356:	91 93       	st	Z+, r25
    3358:	02 c0       	rjmp	.+4      	; 0x335e <malloc+0x124>
    335a:	e0 e0       	ldi	r30, 0x00	; 0
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	cf 01       	movw	r24, r30
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
    3368:	08 95       	ret

0000336a <free>:
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	09 f4       	brne	.+2      	; 0x3374 <free+0xa>
    3372:	81 c0       	rjmp	.+258    	; 0x3476 <free+0x10c>
    3374:	fc 01       	movw	r30, r24
    3376:	32 97       	sbiw	r30, 0x02	; 2
    3378:	13 82       	std	Z+3, r1	; 0x03
    337a:	12 82       	std	Z+2, r1	; 0x02
    337c:	a0 91 78 05 	lds	r26, 0x0578	; 0x800578 <__flp>
    3380:	b0 91 79 05 	lds	r27, 0x0579	; 0x800579 <__flp+0x1>
    3384:	10 97       	sbiw	r26, 0x00	; 0
    3386:	81 f4       	brne	.+32     	; 0x33a8 <free+0x3e>
    3388:	20 81       	ld	r18, Z
    338a:	31 81       	ldd	r19, Z+1	; 0x01
    338c:	82 0f       	add	r24, r18
    338e:	93 1f       	adc	r25, r19
    3390:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <__brkval>
    3394:	30 91 77 05 	lds	r19, 0x0577	; 0x800577 <__brkval+0x1>
    3398:	28 17       	cp	r18, r24
    339a:	39 07       	cpc	r19, r25
    339c:	51 f5       	brne	.+84     	; 0x33f2 <free+0x88>
    339e:	f0 93 77 05 	sts	0x0577, r31	; 0x800577 <__brkval+0x1>
    33a2:	e0 93 76 05 	sts	0x0576, r30	; 0x800576 <__brkval>
    33a6:	67 c0       	rjmp	.+206    	; 0x3476 <free+0x10c>
    33a8:	ed 01       	movw	r28, r26
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	ce 17       	cp	r28, r30
    33b0:	df 07       	cpc	r29, r31
    33b2:	40 f4       	brcc	.+16     	; 0x33c4 <free+0x5a>
    33b4:	4a 81       	ldd	r20, Y+2	; 0x02
    33b6:	5b 81       	ldd	r21, Y+3	; 0x03
    33b8:	9e 01       	movw	r18, r28
    33ba:	41 15       	cp	r20, r1
    33bc:	51 05       	cpc	r21, r1
    33be:	f1 f0       	breq	.+60     	; 0x33fc <free+0x92>
    33c0:	ea 01       	movw	r28, r20
    33c2:	f5 cf       	rjmp	.-22     	; 0x33ae <free+0x44>
    33c4:	d3 83       	std	Z+3, r29	; 0x03
    33c6:	c2 83       	std	Z+2, r28	; 0x02
    33c8:	40 81       	ld	r20, Z
    33ca:	51 81       	ldd	r21, Z+1	; 0x01
    33cc:	84 0f       	add	r24, r20
    33ce:	95 1f       	adc	r25, r21
    33d0:	c8 17       	cp	r28, r24
    33d2:	d9 07       	cpc	r29, r25
    33d4:	59 f4       	brne	.+22     	; 0x33ec <free+0x82>
    33d6:	88 81       	ld	r24, Y
    33d8:	99 81       	ldd	r25, Y+1	; 0x01
    33da:	84 0f       	add	r24, r20
    33dc:	95 1f       	adc	r25, r21
    33de:	02 96       	adiw	r24, 0x02	; 2
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	80 83       	st	Z, r24
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	9b 81       	ldd	r25, Y+3	; 0x03
    33e8:	93 83       	std	Z+3, r25	; 0x03
    33ea:	82 83       	std	Z+2, r24	; 0x02
    33ec:	21 15       	cp	r18, r1
    33ee:	31 05       	cpc	r19, r1
    33f0:	29 f4       	brne	.+10     	; 0x33fc <free+0x92>
    33f2:	f0 93 79 05 	sts	0x0579, r31	; 0x800579 <__flp+0x1>
    33f6:	e0 93 78 05 	sts	0x0578, r30	; 0x800578 <__flp>
    33fa:	3d c0       	rjmp	.+122    	; 0x3476 <free+0x10c>
    33fc:	e9 01       	movw	r28, r18
    33fe:	fb 83       	std	Y+3, r31	; 0x03
    3400:	ea 83       	std	Y+2, r30	; 0x02
    3402:	49 91       	ld	r20, Y+
    3404:	59 91       	ld	r21, Y+
    3406:	c4 0f       	add	r28, r20
    3408:	d5 1f       	adc	r29, r21
    340a:	ec 17       	cp	r30, r28
    340c:	fd 07       	cpc	r31, r29
    340e:	61 f4       	brne	.+24     	; 0x3428 <free+0xbe>
    3410:	80 81       	ld	r24, Z
    3412:	91 81       	ldd	r25, Z+1	; 0x01
    3414:	84 0f       	add	r24, r20
    3416:	95 1f       	adc	r25, r21
    3418:	02 96       	adiw	r24, 0x02	; 2
    341a:	e9 01       	movw	r28, r18
    341c:	99 83       	std	Y+1, r25	; 0x01
    341e:	88 83       	st	Y, r24
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	9b 83       	std	Y+3, r25	; 0x03
    3426:	8a 83       	std	Y+2, r24	; 0x02
    3428:	e0 e0       	ldi	r30, 0x00	; 0
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	12 96       	adiw	r26, 0x02	; 2
    342e:	8d 91       	ld	r24, X+
    3430:	9c 91       	ld	r25, X
    3432:	13 97       	sbiw	r26, 0x03	; 3
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	19 f0       	breq	.+6      	; 0x343e <free+0xd4>
    3438:	fd 01       	movw	r30, r26
    343a:	dc 01       	movw	r26, r24
    343c:	f7 cf       	rjmp	.-18     	; 0x342c <free+0xc2>
    343e:	8d 91       	ld	r24, X+
    3440:	9c 91       	ld	r25, X
    3442:	11 97       	sbiw	r26, 0x01	; 1
    3444:	9d 01       	movw	r18, r26
    3446:	2e 5f       	subi	r18, 0xFE	; 254
    3448:	3f 4f       	sbci	r19, 0xFF	; 255
    344a:	82 0f       	add	r24, r18
    344c:	93 1f       	adc	r25, r19
    344e:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <__brkval>
    3452:	30 91 77 05 	lds	r19, 0x0577	; 0x800577 <__brkval+0x1>
    3456:	28 17       	cp	r18, r24
    3458:	39 07       	cpc	r19, r25
    345a:	69 f4       	brne	.+26     	; 0x3476 <free+0x10c>
    345c:	30 97       	sbiw	r30, 0x00	; 0
    345e:	29 f4       	brne	.+10     	; 0x346a <free+0x100>
    3460:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <__flp+0x1>
    3464:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <__flp>
    3468:	02 c0       	rjmp	.+4      	; 0x346e <free+0x104>
    346a:	13 82       	std	Z+3, r1	; 0x03
    346c:	12 82       	std	Z+2, r1	; 0x02
    346e:	b0 93 77 05 	sts	0x0577, r27	; 0x800577 <__brkval+0x1>
    3472:	a0 93 76 05 	sts	0x0576, r26	; 0x800576 <__brkval>
    3476:	df 91       	pop	r29
    3478:	cf 91       	pop	r28
    347a:	08 95       	ret

0000347c <strcpy_P>:
    347c:	fb 01       	movw	r30, r22
    347e:	dc 01       	movw	r26, r24
    3480:	05 90       	lpm	r0, Z+
    3482:	0d 92       	st	X+, r0
    3484:	00 20       	and	r0, r0
    3486:	e1 f7       	brne	.-8      	; 0x3480 <strcpy_P+0x4>
    3488:	08 95       	ret

0000348a <strncmp>:
    348a:	fb 01       	movw	r30, r22
    348c:	dc 01       	movw	r26, r24
    348e:	41 50       	subi	r20, 0x01	; 1
    3490:	50 40       	sbci	r21, 0x00	; 0
    3492:	30 f0       	brcs	.+12     	; 0x34a0 <strncmp+0x16>
    3494:	8d 91       	ld	r24, X+
    3496:	01 90       	ld	r0, Z+
    3498:	80 19       	sub	r24, r0
    349a:	19 f4       	brne	.+6      	; 0x34a2 <strncmp+0x18>
    349c:	00 20       	and	r0, r0
    349e:	b9 f7       	brne	.-18     	; 0x348e <strncmp+0x4>
    34a0:	88 1b       	sub	r24, r24
    34a2:	99 0b       	sbc	r25, r25
    34a4:	08 95       	ret

000034a6 <strncpy>:
    34a6:	fb 01       	movw	r30, r22
    34a8:	dc 01       	movw	r26, r24
    34aa:	41 50       	subi	r20, 0x01	; 1
    34ac:	50 40       	sbci	r21, 0x00	; 0
    34ae:	48 f0       	brcs	.+18     	; 0x34c2 <strncpy+0x1c>
    34b0:	01 90       	ld	r0, Z+
    34b2:	0d 92       	st	X+, r0
    34b4:	00 20       	and	r0, r0
    34b6:	c9 f7       	brne	.-14     	; 0x34aa <strncpy+0x4>
    34b8:	01 c0       	rjmp	.+2      	; 0x34bc <strncpy+0x16>
    34ba:	1d 92       	st	X+, r1
    34bc:	41 50       	subi	r20, 0x01	; 1
    34be:	50 40       	sbci	r21, 0x00	; 0
    34c0:	e0 f7       	brcc	.-8      	; 0x34ba <strncpy+0x14>
    34c2:	08 95       	ret

000034c4 <__do_global_dtors>:
    34c4:	11 e0       	ldi	r17, 0x01	; 1
    34c6:	c2 e6       	ldi	r28, 0x62	; 98
    34c8:	d1 e0       	ldi	r29, 0x01	; 1
    34ca:	03 c0       	rjmp	.+6      	; 0x34d2 <__do_global_dtors+0xe>
    34cc:	fe 01       	movw	r30, r28
    34ce:	af de       	rcall	.-674    	; 0x322e <__tablejump2__>
    34d0:	21 96       	adiw	r28, 0x01	; 1
    34d2:	c3 36       	cpi	r28, 0x63	; 99
    34d4:	d1 07       	cpc	r29, r17
    34d6:	d1 f7       	brne	.-12     	; 0x34cc <__do_global_dtors+0x8>
    34d8:	f8 94       	cli

000034da <__stop_program>:
    34da:	ff cf       	rjmp	.-2      	; 0x34da <__stop_program>
