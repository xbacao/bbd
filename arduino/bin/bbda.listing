
bin/bbda.elf:     file format elf32-avr

Sections:
Idx Name                     Size      VMA       LMA       File off  Algn  Flags
  0 .data                    00000284  00800100  0000381a  000038ae  2**0  CONTENTS, ALLOC, LOAD, DATA
  1 .text                    0000381a  00000000  00000000  00000094  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss                     000002b6  00800384  00800384  00003b32  2**0  ALLOC
  3 .stab                    0000b958  00000000  00000000  00003b34  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr                 000087ae  00000000  00000000  0000f48c  2**0  CONTENTS, READONLY, DEBUGGING
  5 .comment                 00000022  00000000  00000000  00017c3a  2**0  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00017c5c  2**2  CONTENTS, READONLY
  7 .debug_info              000005f4  00000000  00000000  00017c9c  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev            000005a2  00000000  00000000  00018290  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_line              0000001d  00000000  00000000  00018832  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_str               00000208  00000000  00000000  0001884f  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00800384 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Time.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800548 l     O .bss	00000004 sysTime
00800106 l     O .data	00000004 syncInterval
00800540 l     O .bss	00000004 nextSyncTime
0080053e l     O .bss	00000002 Status
00800544 l     O .bss	00000004 prevMillis
00000000 l    df *ABS*	00000000 bbda.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000836 l     F .text	00000006 _GLOBAL__sub_I_gsm
0000083c l     F .text	00000008 _GLOBAL__sub_D_gsm
00000000 l    df *ABS*	00000000 gsm_ard.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008002c7 l     O .data	0000000f Gsm_Ard::get_socket_rsp(char**)::__func__
008002e3 l     O .data	0000000d Gsm_Ard::_recv_string(int, int)::__func__
008002d6 l     O .data	0000000d Gsm_Ard::_recv_socket(int)::__func__
0080030b l     O .data	00000013 Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)::__func__
00000090 l     O .text	00000003 AT_OK
00000068 l     O .text	0000000d AT_CIPSTATUS
000000a6 l     O .text	0000000b AT_CONNECT_OK
00000075 l     O .text	00000009 AT_CIPCLOSE_OK
0000007e l     O .text	0000000c AT_CIPCLOSE
008002f0 l     O .data	0000001b Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)::__func__
00000261 l     O .text	00000003 AT
0080032d l     O .data	00000020 _POSSIBLE_BRS
0000023c l     O .text	0000000f AT_CPIN_SIM_PIN
0000024b l     O .text	0000000d AT_CPIN_READY
00000258 l     O .text	00000009 AT_CPIN_R
0000022f l     O .text	0000000d AT_CPIN_SET
00000211 l     O .text	0000000a AT_CIURC_1
0000021b l     O .text	0000000a AT_CIURC_0
00000225 l     O .text	0000000a AT_CIURC_R
00000206 l     O .text	0000000b AT_CIURC_SET
000001e8 l     O .text	0000000a AT_CGATT_1
000001f2 l     O .text	0000000a AT_CGATT_0
000001fc l     O .text	0000000a AT_CGATT_R
000001dd l     O .text	0000000b AT_CGATT_SET_ON
000001a5 l     O .text	0000000c AT_CIPMODE_1
000001b1 l     O .text	0000000c AT_CIPMODE_0
000001bd l     O .text	0000000c AT_CIPMODE_R
00000198 l     O .text	0000000d AT_CIPMODE
0000016f l     O .text	00000029 AT_CGDCONT
0000008a l     O .text	00000006 AT_ERROR
000001c9 l     O .text	00000009 AT_CIFSR
00000153 l     O .text	0000000e AT_CIPSERVER_RESP
00000161 l     O .text	0000000e AT_CIPSERVER_R
00000144 l     O .text	0000000f AT_CIPSERVER_SET
0000010c l     O .text	00000025 AT_CSTT
00000103 l     O .text	00000009 AT_CIICR
00000131 l     O .text	00000008 AT_SHUT_OK
00000139 l     O .text	0000000b AT_CIPSHUT
000001d2 l     O .text	0000000b AT_CGATT_SET_OFF
000000e2 l     O .text	0000000b AT_CIPMUX_1
000000ed l     O .text	0000000b AT_CIPMUX_0
000000f8 l     O .text	0000000b AT_CIPMUX_R
000000d6 l     O .text	0000000c AT_CIPMUX_SET
000000b1 l     O .text	00000025 AT_CIPSTART_SET
0000009b l     O .text	0000000b AT_CIPSEND
0080031e l     O .data	0000000f Gsm_Ard::_send_tcp_data(char*, unsigned int)::__func__
00000093 l     O .text	00000008 AT_CIPSEND_OK
00000000 l    df *ABS*	00000000 dbg.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 SoftwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Print.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002fea l     F .text	0000001e Print::write(char const*) [clone .part.2]
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring_digital.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002d4c l     F .text	00000052 turnOffPWM
00000000 l    df *ABS*	00000000 scheduler.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800536 l     O .bss	00000001 _started
00800537 l     O .bss	00000005 _arduino_schedules
000008a0 l     F .text	0000000c _GLOBAL__sub_I__Z14init_scheduler16ArduinoSchedules
000008ac l     F .text	00000008 _GLOBAL__sub_D__Z14init_scheduler16ArduinoSchedules
00000000 l    df *ABS*	00000000 HardwareSerial0.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002f36 l     F .text	0000005a _GLOBAL__sub_I___vector_18
00000000 l    df *ABS*	00000000 _clear_bss.o
000002f4 l       .text	00000000 .do_clear_bss_start
000002f2 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 MemoryFree.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 socket_bbd.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 schedule.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800590 l     O .bss	00000001 timer0_fract
00000000 l    df *ABS*	00000000 hooks.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002e70 l     F .text	00000002 __empty
00000000 l    df *ABS*	00000000 new.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 main.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _divmodhi4.o
00003480 l       .text	00000000 __divmodhi4_neg1
00003488 l       .text	00000000 __divmodhi4_neg2
0000348e l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
000034b6 l       .text	00000000 __udivmodsi4_ep
0000349c l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
000034ec l       .text	00000000 __divmodsi4_neg2
000034fa l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 _udivmodhi4.o
00003522 l       .text	00000000 __udivmodhi4_ep
00003514 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _exit.o
00003818 l       .text	00000000 __stop_program
0000216c g     F .text	0000000a ArduinoSchedules::ArduinoSchedules(unsigned int)
00000318  w      .text	00000000 __vector_22
00800595 g     O .bss	00000004 timer0_overflow_count
00001082 g     F .text	000001f8 Gsm_Ard::_recv_socket(int)
000021ce g     F .text	000000f2 ArduinoSchedules::add_schedule(ValveSchedule)
00002e72 g     F .text	00000002 operator new[](unsigned int)
00002a66 g     F .text	0000010e SoftwareSerial::begin(long)
00002e70  w    F .text	00000002 yield
000031d0 g     F .text	00000020 Print::println(unsigned int, int)
000002b4 g     O .text	0000000a port_to_mode_PGM
00000318  w      .text	00000000 __vector_1
00003024 g     F .text	00000006 Print::println()
00003182 g     F .text	00000020 Print::println(int, int)
00001fa0 g     F .text	00000098 Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)
00003800 g       .text	00000000 __ctype_istrue
00000af6 g     F .text	0000003a Gsm_Ard::Gsm_Ard()
0000237c g     F .text	0000013c ArduinoSchedules::decode_message(char*, unsigned int)
0000282c g     F .text	00000050 SoftwareSerial::listen()
00000af6 g     F .text	0000003a Gsm_Ard::Gsm_Ard()
0000ffa0 g       *ABS*	00000000 __DATA_REGION_LENGTH__
00800591 g     O .bss	00000004 timer0_millis
00003222 g     F .text	0000001c HardwareSerial::peek()
00003054 g     F .text	00000094 Print::printNumber(unsigned long, unsigned char)
0000350c g       .text	00000028 .hidden __udivmodhi4
00002f90 g     F .text	0000005a Print::write(unsigned char const*, unsigned int)
00000b30 g     F .text	00000152 Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)
0080058e g     O .bss	00000002 SoftwareSerial::active_object
00001d62 g     F .text	0000014e Gsm_Ard::_connect_tcp_socket()
00000068 g       .text	00000000 __trampolines_start
0000381a g       .text	00000000 _etext
000037fc g       .text	00000000 __ctype_isfalse
0000320a g     F .text	00000018 HardwareSerial::available()
00000318  w      .text	00000000 __vector_24
0000031a g     F .text	00000002 loop
0000329e g     F .text	00000042 HardwareSerial::_tx_udr_empty_irq()
00000318  w      .text	00000000 __vector_12
000031f0  w    F .text	00000002 initVariant
0000331e g     F .text	0000008c HardwareSerial::write(unsigned char)
0000137e g     F .text	0000017a Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)
00000318 g       .text	00000000 __bad_interrupt
000037a2 g     F .text	00000012 memcpy
000020ec g     F .text	0000000e ValveSchedule::~ValveSchedule()
00002a14 g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
00003a9e g       *ABS*	00000000 __data_load_end
00003788 g       .text	00000000 islower
00000318  w      .text	00000000 __vector_6
00003540 g     F .text	00000130 malloc
0000127a g     F .text	000000b4 Gsm_Ard::_recv_tcp_data(unsigned int*)
00800102 g     O .data	00000002 __malloc_heap_start
00000068 g       .text	00000000 __trampolines_end
0000287c g     F .text	000000f0 __vector_3
00002e16 g     F .text	0000005a digitalWrite
00002176 g     F .text	00000058 ArduinoSchedules::~ArduinoSchedules()
00002d9e g     F .text	00000078 pinMode
0000028c g     O .text	00000014 digital_pin_to_port_PGM
00000318  w      .text	00000000 __vector_23
0000381a g       *ABS*	00000000 __data_load_start
000002c8 g       .text	00000000 __dtors_end
0080063a g       .bss	00000000 __bss_end
00002978 g     F .text	0000004e SoftwareSerial::setTX(unsigned char)
000026a8 g     F .text	00000042 SoftwareSerial::read()
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0000175a g     F .text	000002ac Gsm_Ard::init_gsm_module()
0000216c g     F .text	0000000a ArduinoSchedules::ArduinoSchedules(unsigned int)
00000f9e g     F .text	000000e4 Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)
00000318  w      .text	00000000 __vector_25
00800636 g     O .bss	00000002 __brkval
00000d4c g     F .text	00000040 Gsm_Ard::_get_rsp(char**)
00003176 g     F .text	0000000c Print::print(int, int)
00000ad2 g     F .text	00000024 Gsm_Ard::_clear_sock_buff()
000008b4 g     F .text	00000066 setTime(unsigned long)
00000318  w      .text	00000000 __vector_11
00003266 g     F .text	0000001e HardwareSerial::availableForWrite()
00800388 g     O .bss	00000001 started
000015b0 g     F .text	000001aa Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)
000002c8  w      .text	00000000 __init
000031ba g     F .text	0000000c Print::print(unsigned char, int)
000027a4 g     F .text	00000030 SoftwareSerial::peek()
00000e26 g     F .text	00000178 Gsm_Ard::_recv_string(int, int)
00003284  w    F .text	0000001a serialEventRun()
000032e0 g     F .text	0000003e HardwareSerial::flush()
00000318  w      .text	00000000 __vector_13
00000318  w      .text	00000000 __vector_17
00002eda g     F .text	0000004a __vector_19
000022c0 g     F .text	000000bc ArduinoSchedules::update_schedule(ValveSchedule)
0000302a g     F .text	0000002a Print::println(char const*)
00000318  w      .text	00000000 __vector_7
00000a3c g     F .text	00000052 Gsm_Ard::_change_gsm_state(GSM_STATE)
00003802 g       .text	00000014 .hidden __do_global_dtors
00800599 g     O .bss	0000009d Serial
00800371  w    O .data	00000012 vtable for HardwareSerial
000002ea g       .text	00000010 .hidden __do_clear_bss
00003016 g     F .text	0000000e Print::print(char)
00002038 g     F .text	00000038 freeMemory
00002f24 g     F .text	00000012 Serial0_available()
00810000 g       .stab	00000000 __eeprom_end
000026ea g     F .text	000000b8 SoftwareSerial::write(unsigned char)
00000278 g     O .text	00000014 digital_pin_to_bit_mask_PGM
000033aa g     F .text	000000c0 HardwareSerial::begin(unsigned long, unsigned char)
0080054c g     O .bss	00000001 SoftwareSerial::_receive_buffer_head
00800100 g     O .data	00000002 __malloc_heap_end
0000296c g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
00000d8c g     F .text	0000000c Gsm_Ard::get_gsm_state()
00000000 g       .text	00000000 __vectors
00003782 g       .text	00000000 isupper
000037c2 g     F .text	0000001c strncmp
00800384 g       .data	00000000 __data_end
000037de g     F .text	0000001e strncpy
00000000  w      .text	00000000 __vector_default
0000346a g       .text	00000026 .hidden __divmodhi4
0000287c g     F .text	000000f0 __vector_5
00002070 g     F .text	00000030 get_last_sche_msg(char**)
000027d4 g     F .text	0000002c SoftwareSerial::available()
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00003534 g       .text	0000000c .hidden __tablejump2__
00002cd6 g     F .text	00000076 init
00003786 g       .text	00000000 isalpha
0080054e g     O .bss	00000040 SoftwareSerial::_receive_buffer
000002be g       .text	00000000 __ctors_start
0000132e g     F .text	00000050 Gsm_Ard::_write_cmd(char const*)
0080054d g     O .bss	00000001 SoftwareSerial::_receive_buffer_tail
000002d4 g       .text	00000016 .hidden __do_copy_data
0080053c g     O .bss	00000002 getTimePtr
000020a0 g     F .text	0000004c ValveSchedule::ValveSchedule(ValveSchedule const&)
00800384 g       .bss	00000000 __bss_start
000037b4 g     F .text	0000000e memset
000031f2 g     F .text	00000018 main
00001c68 g     F .text	000000fa Gsm_Ard::dettachGPRS()
0000091a g     F .text	00000122 now()
0000287c g     F .text	000000f0 __vector_4
00002e74 g     F .text	00000002 operator delete[](void*)
00002176 g     F .text	00000058 ArduinoSchedules::~ArduinoSchedules()
000031c6 g     F .text	0000000a Print::print(unsigned int, int)
00003008 g     F .text	0000000e Print::print(char const*)
00002c20 g     F .text	0000004a micros
000034fc g       .text	00000010 .hidden __negsi2
000014f8 g     F .text	000000b8 Gsm_Ard::_disconnect_tcp_socket()
00002800 g     F .text	0000002c SoftwareSerial::stopListening()
00800389 g     O .bss	000001ad gsm
00000000  w      *ABS*	00000000 __heap_end
00000844 g     F .text	0000005c init_scheduler(ArduinoSchedules)
00000318  w      .text	00000000 __vector_9
000020ec g     F .text	0000000e ValveSchedule::~ValveSchedule()
00001a06 g     F .text	00000262 Gsm_Ard::attachGPRS()
00002c6a g     F .text	0000006c delay
000025c0 g     F .text	000000e2 dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)
00000318  w      .text	00000000 __vector_2
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
00000aae g     F .text	00000024 Gsm_Ard::_clear_rsp_buff()
000020fa g     F .text	00000072 ValveSchedule::add_cicle(schedule_entry)
00000a8e g     F .text	00000020 Gsm_Ard::_clear_recv_buff()
00000318  w      .text	00000000 __vector_21
0080035c  w    O .data	00000012 vtable for SoftwareSerial
00000318  w      .text	00000000 __vector_15
000002aa g     O .text	0000000a port_to_output_PGM
000031a2 g     F .text	00000018 Print::print(unsigned long, int)
000004f0 g     F .text	00000346 setup
0080063a g       .stab	00000000 __heap_start
000002c4 g       .text	00000000 __dtors_start
000002c4 g       .text	00000000 __ctors_end
000034d4 g       .text	00000028 .hidden __divmodsi4
000008ff  w      *ABS*	00000000 __stack
000002a0 g     O .text	0000000a port_to_input_PGM
00000d98 g     F .text	0000008e Gsm_Ard::get_socket_rsp(char**)
00800384 g       .data	00000000 _edata
0000296c g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
0080063a g       .stab	00000000 _end
00000318  w      .text	00000000 __vector_8
000020a0 g     F .text	0000004c ValveSchedule::ValveSchedule(ValveSchedule const&)
00000264 g     O .text	00000014 digital_pin_to_timer_PGM
00003794 g     F .text	0000000e strcpy_P
00000c82 g     F .text	000000ca Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)
00003802  w      .text	00000000 .hidden exit
000030e8 g     F .text	0000008e Print::print(long, int)
0000346a g       .text	00000000 .hidden _div
0000323e g     F .text	00000028 HardwareSerial::read()
00800638 g     O .bss	00000002 __flp
00003490 g       .text	00000044 .hidden __udivmodsi4
00001eb0 g     F .text	000000f0 Gsm_Ard::_send_tcp_data(char*, unsigned int)
000029c6 g     F .text	0000004e SoftwareSerial::setRX(unsigned char)
000024b8 g     F .text	00000108 ArduinoSchedules::process_new_schedules(ArduinoSchedules)
000027a2 g     F .text	00000002 SoftwareSerial::flush()
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
00003802 g       .text	00000000 .hidden _exit
00000318  w      .text	00000000 __vector_14
00000318  w      .text	00000000 __vector_10
00002b74 g     F .text	00000094 __vector_16
00800100 g       .data	00000000 __data_start
00002a14 g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
00002e76 g     F .text	00000064 __vector_18
00000400 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00800104 g     O .data	00000002 __malloc_margin
00000318  w      .text	00000000 __vector_20
00002c08 g     F .text	00000018 millis
00800384 g     O .bss	00000004 last_ci
000026a2  w    F .text	00000006 Print::availableForWrite()
0000031c g     F .text	000001d4 get_last_schedule()
00003670 g     F .text	00000112 free
000002fa g       .text	00000016 .hidden __do_global_ctors



Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	63 c1       	rjmp	.+710    	; 0x2c8 <__dtors_end>
       2:	00 00       	nop
       4:	89 c1       	rjmp	.+786    	; 0x318 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c1       	rjmp	.+782    	; 0x318 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_3>
      10:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_3>
      14:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__vector_3>
      18:	7f c1       	rjmp	.+766    	; 0x318 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7d c1       	rjmp	.+762    	; 0x318 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7b c1       	rjmp	.+758    	; 0x318 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c1       	rjmp	.+754    	; 0x318 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c1       	rjmp	.+750    	; 0x318 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	75 c1       	rjmp	.+746    	; 0x318 <__bad_interrupt>
      2e:	00 00       	nop
      30:	73 c1       	rjmp	.+742    	; 0x318 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c1       	rjmp	.+738    	; 0x318 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c1       	rjmp	.+734    	; 0x318 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c1       	rjmp	.+730    	; 0x318 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__vector_16>
      44:	69 c1       	rjmp	.+722    	; 0x318 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__vector_18>
      4c:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__vector_19>
      50:	63 c1       	rjmp	.+710    	; 0x318 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c1       	rjmp	.+706    	; 0x318 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c1       	rjmp	.+702    	; 0x318 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5d c1       	rjmp	.+698    	; 0x318 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5b c1       	rjmp	.+694    	; 0x318 <__bad_interrupt>
      62:	00 00       	nop
      64:	59 c1       	rjmp	.+690    	; 0x318 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
__trampolines_start():
      68:	41 54       	subi	r20, 0x41	; 65
      6a:	2b 43       	sbci	r18, 0x3B	; 59
      6c:	49 50       	subi	r20, 0x09	; 9
      6e:	53 54       	subi	r21, 0x43	; 67
      70:	41 54       	subi	r20, 0x41	; 65
      72:	55 53       	subi	r21, 0x35	; 53
	...

00000075 <AT_CIPCLOSE_OK>:
      75:	43 4c 4f 53 45 20 4f 4b 00                          CLOSE OK.

0000007e <AT_CIPCLOSE>:
      7e:	41 54 2b 43 49 50 43 4c 4f 53 45 00                 AT+CIPCLOSE.

0000008a <AT_ERROR>:
      8a:	45 52 52 4f 52 00                                   ERROR.

00000090 <AT_OK>:
      90:	4f 4b 00                                            OK.

00000093 <AT_CIPSEND_OK>:
      93:	53 45 4e 44 20 4f 4b 00                             SEND OK.

0000009b <AT_CIPSEND>:
      9b:	41 54 2b 43 49 50 53 45 4e 44 00                    AT+CIPSEND.

000000a6 <AT_CONNECT_OK>:
      a6:	43 4f 4e 4e 45 43 54 20 4f 4b 00                    CONNECT OK.

000000b1 <AT_CIPSTART_SET>:
      b1:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 54 43 50     AT+CIPSTART="TCP
      c1:	22 2c 22 31 37 38 2e 36 32 2e 36 2e 34 34 22 2c     ","178.62.6.44",
      d1:	37 37 37 37 00                                      7777.

000000d6 <AT_CIPMUX_SET>:
      d6:	41 54 2b 43 49 50 4d 55 58 3d 30 00                 AT+CIPMUX=0.

000000e2 <AT_CIPMUX_1>:
      e2:	2b 43 49 50 4d 55 58 3a 20 31 00                    +CIPMUX: 1.

000000ed <AT_CIPMUX_0>:
      ed:	2b 43 49 50 4d 55 58 3a 20 30 00                    +CIPMUX: 0.

000000f8 <AT_CIPMUX_R>:
      f8:	41 54 2b 43 49 50 4d 55 58 3f 00                    AT+CIPMUX?.

00000103 <AT_CIICR>:
     103:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

0000010c <AT_CSTT>:
     10c:	41 54 2b 43 53 54 54 3d 22 69 6e 74 65 72 6e 65     AT+CSTT="interne
     11c:	74 2e 76 6f 64 61 66 6f 6e 65 2e 70 74 22 2c 22     t.vodafone.pt","
     12c:	22 2c 22 22 00                                      ","".

00000131 <AT_SHUT_OK>:
     131:	53 48 55 54 20 4f 4b 00                             SHUT OK.

00000139 <AT_CIPSHUT>:
     139:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000144 <AT_CIPSERVER_SET>:
     144:	41 54 2b 43 49 50 53 45 52 56 45 52 3d 30 00        AT+CIPSERVER=0.

00000153 <AT_CIPSERVER_RESP>:
     153:	2b 43 49 50 53 45 52 56 45 52 3a 20 30 00           +CIPSERVER: 0.

00000161 <AT_CIPSERVER_R>:
     161:	41 54 2b 43 49 50 53 45 52 56 45 52 3f 00           AT+CIPSERVER?.

0000016f <AT_CGDCONT>:
     16f:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     17f:	22 2c 22 69 6e 74 65 72 6e 65 74 2e 76 6f 64 61     ","internet.voda
     18f:	66 6f 6e 65 2e 70 74 22 00                          fone.pt".

00000198 <AT_CIPMODE>:
     198:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 00              AT+CIPMODE=0.

000001a5 <AT_CIPMODE_1>:
     1a5:	2b 43 49 50 4d 4f 44 45 3a 20 31 00                 +CIPMODE: 1.

000001b1 <AT_CIPMODE_0>:
     1b1:	2b 43 49 50 4d 4f 44 45 3a 20 30 00                 +CIPMODE: 0.

000001bd <AT_CIPMODE_R>:
     1bd:	41 54 2b 43 49 50 4d 4f 44 45 3f 00                 AT+CIPMODE?.

000001c9 <AT_CIFSR>:
     1c9:	41 54 2b 43 49 46 53 52 00                          AT+CIFSR.

000001d2 <AT_CGATT_SET_OFF>:
     1d2:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000001dd <AT_CGATT_SET_ON>:
     1dd:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000001e8 <AT_CGATT_1>:
     1e8:	2b 43 47 41 54 54 3a 20 31 00                       +CGATT: 1.

000001f2 <AT_CGATT_0>:
     1f2:	2b 43 47 41 54 54 3a 20 30 00                       +CGATT: 0.

000001fc <AT_CGATT_R>:
     1fc:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

00000206 <AT_CIURC_SET>:
     206:	41 54 2b 43 49 55 52 43 3d 30 00                    AT+CIURC=0.

00000211 <AT_CIURC_1>:
     211:	2b 43 49 55 52 43 3a 20 30 00                       +CIURC: 0.

0000021b <AT_CIURC_0>:
     21b:	2b 43 49 55 52 43 3a 20 31 00                       +CIURC: 1.

00000225 <AT_CIURC_R>:
     225:	41 54 2b 43 49 55 52 43 3f 00                       AT+CIURC?.

0000022f <AT_CPIN_SET>:
     22f:	41 54 2b 43 50 49 4e 3d 30 30 34 38 00              AT+CPIN=0048.

0000023c <AT_CPIN_SIM_PIN>:
     23c:	2b 43 50 49 4e 3a 20 53 49 4d 20 50 49 4e 00        +CPIN: SIM PIN.

0000024b <AT_CPIN_READY>:
     24b:	2b 43 50 49 4e 3a 20 52 45 41 44 59 00              +CPIN: READY.

00000258 <AT_CPIN_R>:
     258:	41 54 2b 43 50 49 4e 3f 00                          AT+CPIN?.

00000261 <AT>:
     261:	41 54 00                                            AT.

00000264 <digital_pin_to_timer_PGM>:
     264:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     274:	00 00 00 00                                         ....

00000278 <digital_pin_to_bit_mask_PGM>:
     278:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     288:	04 08 10 20                                         ... 

0000028c <digital_pin_to_port_PGM>:
     28c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     29c:	03 03 03 03                                         ....

000002a0 <port_to_input_PGM>:
     2a0:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002aa <port_to_output_PGM>:
     2aa:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002b4 <port_to_mode_PGM>:
     2b4:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002be <__ctors_start>:
__ctors_start():
     2be:	1b 04       	cpc	r1, r11
     2c0:	50 04       	cpc	r5, r0
     2c2:	9b 17       	cp	r25, r27

000002c4 <__ctors_end>:
__dtors_start():
     2c4:	1e 04       	cpc	r1, r14
     2c6:	56 04       	cpc	r5, r6

000002c8 <__dtors_end>:
__dtors_end():
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d8 e0       	ldi	r29, 0x08	; 8
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
__do_copy_data():
     2d4:	13 e0       	ldi	r17, 0x03	; 3
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	ea e1       	ldi	r30, 0x1A	; 26
     2dc:	f8 e3       	ldi	r31, 0x38	; 56
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <__do_copy_data+0x10>
     2e0:	05 90       	lpm	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	a4 38       	cpi	r26, 0x84	; 132
     2e6:	b1 07       	cpc	r27, r17
     2e8:	d9 f7       	brne	.-10     	; 0x2e0 <__do_copy_data+0xc>

000002ea <__do_clear_bss>:
__do_clear_bss():
     2ea:	26 e0       	ldi	r18, 0x06	; 6
     2ec:	a4 e8       	ldi	r26, 0x84	; 132
     2ee:	b3 e0       	ldi	r27, 0x03	; 3
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <.do_clear_bss_start>

000002f2 <.do_clear_bss_loop>:
     2f2:	1d 92       	st	X+, r1

000002f4 <.do_clear_bss_start>:
     2f4:	aa 33       	cpi	r26, 0x3A	; 58
     2f6:	b2 07       	cpc	r27, r18
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <.do_clear_bss_loop>

000002fa <__do_global_ctors>:
__do_global_ctors():
     2fa:	11 e0       	ldi	r17, 0x01	; 1
     2fc:	c2 e6       	ldi	r28, 0x62	; 98
     2fe:	d1 e0       	ldi	r29, 0x01	; 1
     300:	04 c0       	rjmp	.+8      	; 0x30a <__do_global_ctors+0x10>
     302:	21 97       	sbiw	r28, 0x01	; 1
     304:	fe 01       	movw	r30, r28
     306:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__tablejump2__>
     30a:	cf 35       	cpi	r28, 0x5F	; 95
     30c:	d1 07       	cpc	r29, r17
     30e:	c9 f7       	brne	.-14     	; 0x302 <__do_global_ctors+0x8>
     310:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <main>
     314:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <__do_global_dtors>

00000318 <__bad_interrupt>:
__vector_22():
     318:	73 ce       	rjmp	.-794    	; 0x0 <__vectors>

0000031a <loop>:
loop():
bin/bbda.cpp:140
//       goto scheduler_ops;
//     }
//   }
// scheduler_ops:
//   scheduler_action();
}
     31a:	08 95       	ret

0000031c <get_last_schedule()>:
_Z17get_last_schedulev():
bin/bbda.cpp:192
  delete[] msg;
  delete[] rsp;
  return err;
}

int get_last_schedule(){
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	60 97       	sbiw	r28, 0x10	; 16
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
bin/bbda.cpp:197
  int n,err=0;
  unsigned int rsp_len;
  char* msg;
  char* rsp;
  Serial.print("MEMORY1=");
     334:	6a e0       	ldi	r22, 0x0A	; 10
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	89 e9       	ldi	r24, 0x99	; 153
     33a:	95 e0       	ldi	r25, 0x05	; 5
     33c:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
bin/bbda.cpp:198
  Serial.println(freeMemory());
     340:	0e 94 1c 10 	call	0x2038	; 0x2038 <freeMemory>
     344:	4a e0       	ldi	r20, 0x0A	; 10
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	bc 01       	movw	r22, r24
     34a:	89 e9       	ldi	r24, 0x99	; 153
     34c:	95 e0       	ldi	r25, 0x05	; 5
     34e:	0e 94 c1 18 	call	0x3182	; 0x3182 <Print::println(int, int)>
bin/bbda.cpp:199
  ArduinoSchedules a_s(ARDUINO_ID);
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	ce 01       	movw	r24, r28
     358:	06 96       	adiw	r24, 0x06	; 6
     35a:	0e 94 b6 10 	call	0x216c	; 0x216c <ArduinoSchedules::ArduinoSchedules(unsigned int)>
bin/bbda.cpp:200
  Serial.print("MEMORY2=");
     35e:	63 e1       	ldi	r22, 0x13	; 19
     360:	71 e0       	ldi	r23, 0x01	; 1
     362:	89 e9       	ldi	r24, 0x99	; 153
     364:	95 e0       	ldi	r25, 0x05	; 5
     366:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
bin/bbda.cpp:201
  Serial.println(freeMemory());
     36a:	0e 94 1c 10 	call	0x2038	; 0x2038 <freeMemory>
     36e:	4a e0       	ldi	r20, 0x0A	; 10
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	bc 01       	movw	r22, r24
     374:	89 e9       	ldi	r24, 0x99	; 153
     376:	95 e0       	ldi	r25, 0x05	; 5
     378:	0e 94 c1 18 	call	0x3182	; 0x3182 <Print::println(int, int)>
bin/bbda.cpp:203

  if(gsm.get_gsm_state()!=GSM_IP_STATE){
     37c:	89 e8       	ldi	r24, 0x89	; 137
     37e:	93 e0       	ldi	r25, 0x03	; 3
     380:	05 d5       	rcall	.+2570   	; 0xd8c <Gsm_Ard::get_gsm_state()>
bin/bbda.cpp:204
    return 1;
     382:	01 e0       	ldi	r16, 0x01	; 1
     384:	10 e0       	ldi	r17, 0x00	; 0
bin/bbda.cpp:203
  if(gsm.get_gsm_state()!=GSM_IP_STATE){
     386:	03 97       	sbiw	r24, 0x03	; 3
     388:	09 f0       	breq	.+2      	; 0x38c <get_last_schedule()+0x70>
     38a:	67 c0       	rjmp	.+206    	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
bin/bbda.cpp:207
  }

  msg=new char[GET_LAST_SCHE_MSG_SIZE];
     38c:	85 e0       	ldi	r24, 0x05	; 5
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
     394:	9e 87       	std	Y+14, r25	; 0x0e
     396:	8d 87       	std	Y+13, r24	; 0x0d
bin/bbda.cpp:208
  n=get_last_sche_msg(&msg);
     398:	ce 01       	movw	r24, r28
     39a:	0d 96       	adiw	r24, 0x0d	; 13
     39c:	0e 94 38 10 	call	0x2070	; 0x2070 <get_last_sche_msg(char**)>
bin/bbda.cpp:214
  if(n){
    err=2+10*n;
    // goto exit_clean_l;
  }

  n=gsm.send_socket_msg(msg, GET_LAST_SCHE_MSG_SIZE, &rsp_len);
     3a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     3a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     3a4:	9e 01       	movw	r18, r28
     3a6:	21 5f       	subi	r18, 0xF1	; 241
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	45 e0       	ldi	r20, 0x05	; 5
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	89 e8       	ldi	r24, 0x89	; 137
     3b0:	93 e0       	ldi	r25, 0x03	; 3
     3b2:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)>
bin/bbda.cpp:221
    err=3+10*n;
    // goto exit_clean_l;
  }


  Serial.print("MEMORY=");
     3b6:	6c e1       	ldi	r22, 0x1C	; 28
     3b8:	71 e0       	ldi	r23, 0x01	; 1
     3ba:	89 e9       	ldi	r24, 0x99	; 153
     3bc:	95 e0       	ldi	r25, 0x05	; 5
     3be:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
bin/bbda.cpp:222
  Serial.println(freeMemory());
     3c2:	0e 94 1c 10 	call	0x2038	; 0x2038 <freeMemory>
     3c6:	4a e0       	ldi	r20, 0x0A	; 10
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	bc 01       	movw	r22, r24
     3cc:	89 e9       	ldi	r24, 0x99	; 153
     3ce:	95 e0       	ldi	r25, 0x05	; 5
     3d0:	0e 94 c1 18 	call	0x3182	; 0x3182 <Print::println(int, int)>
bin/bbda.cpp:224

  Serial.print("RSP LEN ");
     3d4:	64 e2       	ldi	r22, 0x24	; 36
     3d6:	71 e0       	ldi	r23, 0x01	; 1
     3d8:	89 e9       	ldi	r24, 0x99	; 153
     3da:	95 e0       	ldi	r25, 0x05	; 5
     3dc:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
bin/bbda.cpp:225
  Serial.println((unsigned int)rsp_len);
     3e0:	6f 85       	ldd	r22, Y+15	; 0x0f
     3e2:	78 89       	ldd	r23, Y+16	; 0x10
     3e4:	4a e0       	ldi	r20, 0x0A	; 10
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	89 e9       	ldi	r24, 0x99	; 153
     3ea:	95 e0       	ldi	r25, 0x05	; 5
     3ec:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <Print::println(unsigned int, int)>
bin/bbda.cpp:226
  rsp = new char[rsp_len];
     3f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     3f2:	98 89       	ldd	r25, Y+16	; 0x10
     3f4:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
     3f8:	9c 87       	std	Y+12, r25	; 0x0c
     3fa:	8b 87       	std	Y+11, r24	; 0x0b
bin/bbda.cpp:227
  memset(rsp, 0, rsp_len);  
     3fc:	4f 85       	ldd	r20, Y+15	; 0x0f
     3fe:	58 89       	ldd	r21, Y+16	; 0x10
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <memset>
bin/bbda.cpp:228
  n=gsm.get_socket_rsp(&rsp);
     408:	be 01       	movw	r22, r28
     40a:	65 5f       	subi	r22, 0xF5	; 245
     40c:	7f 4f       	sbci	r23, 0xFF	; 255
     40e:	89 e8       	ldi	r24, 0x89	; 137
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	c2 d4       	rcall	.+2436   	; 0xd98 <Gsm_Ard::get_socket_rsp(char**)>
bin/bbda.cpp:229
  if(n){
     414:	00 97       	sbiw	r24, 0x00	; 0
     416:	89 f1       	breq	.+98     	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
bin/bbda.cpp:230
    err=4+10*n;
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	28 9f       	mul	r18, r24
     41c:	80 01       	movw	r16, r0
     41e:	29 9f       	mul	r18, r25
     420:	10 0d       	add	r17, r0
     422:	11 24       	eor	r1, r1
     424:	0c 5f       	subi	r16, 0xFC	; 252
     426:	1f 4f       	sbci	r17, 0xFF	; 255
bin/bbda.cpp:254

  err=0;
  // goto exit_clean_l;

exit_clean_l:
  delete[] msg;
     428:	8d 85       	ldd	r24, Y+13	; 0x0d
     42a:	9e 85       	ldd	r25, Y+14	; 0x0e
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	11 f0       	breq	.+4      	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
     430:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
bin/bbda.cpp:255
  delete[] rsp;
     434:	8b 85       	ldd	r24, Y+11	; 0x0b
     436:	9c 85       	ldd	r25, Y+12	; 0x0c
     438:	00 97       	sbiw	r24, 0x00	; 0
     43a:	11 f0       	breq	.+4      	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     43c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
bin/bbda.cpp:256
  Serial.println("HERE");
     440:	6d e2       	ldi	r22, 0x2D	; 45
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	89 e9       	ldi	r24, 0x99	; 153
     446:	95 e0       	ldi	r25, 0x05	; 5
     448:	0e 94 15 18 	call	0x302a	; 0x302a <Print::println(char const*)>
bin/bbda.cpp:257
  Serial.println(err);
     44c:	4a e0       	ldi	r20, 0x0A	; 10
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	b8 01       	movw	r22, r16
     452:	89 e9       	ldi	r24, 0x99	; 153
     454:	95 e0       	ldi	r25, 0x05	; 5
     456:	0e 94 c1 18 	call	0x3182	; 0x3182 <Print::println(int, int)>
bin/bbda.cpp:199
  ArduinoSchedules a_s(ARDUINO_ID);
     45a:	ce 01       	movw	r24, r28
     45c:	06 96       	adiw	r24, 0x06	; 6
     45e:	0e 94 bb 10 	call	0x2176	; 0x2176 <ArduinoSchedules::~ArduinoSchedules()>
bin/bbda.cpp:259
  return err;
}
     462:	c8 01       	movw	r24, r16
     464:	60 96       	adiw	r28, 0x10	; 16
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	08 95       	ret
bin/bbda.cpp:236
  n=a_s.decode_message(rsp, rsp_len);
     47a:	4f 85       	ldd	r20, Y+15	; 0x0f
     47c:	58 89       	ldd	r21, Y+16	; 0x10
     47e:	6b 85       	ldd	r22, Y+11	; 0x0b
     480:	7c 85       	ldd	r23, Y+12	; 0x0c
     482:	ce 01       	movw	r24, r28
     484:	06 96       	adiw	r24, 0x06	; 6
     486:	0e 94 be 11 	call	0x237c	; 0x237c <ArduinoSchedules::decode_message(char*, unsigned int)>
bin/bbda.cpp:237
  if(n){
     48a:	00 97       	sbiw	r24, 0x00	; 0
     48c:	49 f0       	breq	.+18     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
bin/bbda.cpp:238
    err=5+10*n;
     48e:	2a e0       	ldi	r18, 0x0A	; 10
     490:	28 9f       	mul	r18, r24
     492:	80 01       	movw	r16, r0
     494:	29 9f       	mul	r18, r25
     496:	10 0d       	add	r17, r0
     498:	11 24       	eor	r1, r1
     49a:	0b 5f       	subi	r16, 0xFB	; 251
     49c:	1f 4f       	sbci	r17, 0xFF	; 255
bin/bbda.cpp:239
    goto exit_clean_l;
     49e:	c4 cf       	rjmp	.-120    	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
bin/bbda.cpp:242
  n=init_scheduler(a_s);
     4a0:	85 e0       	ldi	r24, 0x05	; 5
     4a2:	fe 01       	movw	r30, r28
     4a4:	36 96       	adiw	r30, 0x06	; 6
     4a6:	de 01       	movw	r26, r28
     4a8:	11 96       	adiw	r26, 0x01	; 1
     4aa:	01 90       	ld	r0, Z+
     4ac:	0d 92       	st	X+, r0
     4ae:	8a 95       	dec	r24
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     4b2:	ce 01       	movw	r24, r28
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	c6 d1       	rcall	.+908    	; 0x844 <init_scheduler(ArduinoSchedules)>
     4b8:	8c 01       	movw	r16, r24
     4ba:	ce 01       	movw	r24, r28
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	0e 94 bb 10 	call	0x2176	; 0x2176 <ArduinoSchedules::~ArduinoSchedules()>
bin/bbda.cpp:243
  if(n){
     4c2:	01 15       	cp	r16, r1
     4c4:	11 05       	cpc	r17, r1
     4c6:	51 f0       	breq	.+20     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
bin/bbda.cpp:244
    err=6+10*n;
     4c8:	2a e0       	ldi	r18, 0x0A	; 10
     4ca:	20 9f       	mul	r18, r16
     4cc:	c0 01       	movw	r24, r0
     4ce:	21 9f       	mul	r18, r17
     4d0:	90 0d       	add	r25, r0
     4d2:	11 24       	eor	r1, r1
     4d4:	8c 01       	movw	r16, r24
     4d6:	0a 5f       	subi	r16, 0xFA	; 250
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
bin/bbda.cpp:245
    goto exit_clean_l;
     4da:	a6 cf       	rjmp	.-180    	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
bin/bbda.cpp:248
  last_ci=now();
     4dc:	1e d2       	rcall	.+1084   	; 0x91a <now()>
     4de:	60 93 84 03 	sts	0x0384, r22	; 0x800384 <__data_end>
     4e2:	70 93 85 03 	sts	0x0385, r23	; 0x800385 <__data_end+0x1>
     4e6:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <__data_end+0x2>
     4ea:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <__data_end+0x3>
     4ee:	9c cf       	rjmp	.-200    	; 0x428 <__FUSE_REGION_LENGTH__+0x28>

000004f0 <setup>:
setup():
bin/bbda.cpp:22
{
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	cd 5a       	subi	r28, 0xAD	; 173
     4fe:	d1 40       	sbci	r29, 0x01	; 1
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     50a:	26 e0       	ldi	r18, 0x06	; 6
     50c:	40 e8       	ldi	r20, 0x80	; 128
     50e:	55 e2       	ldi	r21, 0x25	; 37
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	89 e9       	ldi	r24, 0x99	; 153
     516:	95 e0       	ldi	r25, 0x05	; 5
     518:	0e 94 d5 19 	call	0x33aa	; 0x33aa <HardwareSerial::begin(unsigned long, unsigned char)>
bin/bbda.cpp:31
  gsm=Gsm_Ard();
     51c:	ce 01       	movw	r24, r28
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	ea d2       	rcall	.+1492   	; 0xaf6 <Gsm_Ard::Gsm_Ard()>
     522:	fe 01       	movw	r30, r28
     524:	31 96       	adiw	r30, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:28
#define DEBUG_STATES

enum GSM_STATE{GSM_OFF_STATE, GSM_ON_STATE, GSM_PIN_STATE, GSM_IP_STATE, GSM_TCP_STATE};
enum BUFF_STATE{BUFF_READY, BUFF_USED};

class Gsm_Ard{
     526:	a9 e8       	ldi	r26, 0x89	; 137
     528:	b3 e0       	ldi	r27, 0x03	; 3
     52a:	81 91       	ld	r24, Z+
     52c:	8d 93       	st	X+, r24
     52e:	84 e0       	ldi	r24, 0x04	; 4
     530:	a9 30       	cpi	r26, 0x09	; 9
     532:	b8 07       	cpc	r27, r24
     534:	d1 f7       	brne	.-12     	; 0x52a <setup+0x3a>
     536:	de 01       	movw	r26, r28
     538:	af 57       	subi	r26, 0x7F	; 127
     53a:	bf 4f       	sbci	r27, 0xFF	; 255
     53c:	e9 e0       	ldi	r30, 0x09	; 9
     53e:	f4 e0       	ldi	r31, 0x04	; 4
     540:	8d 91       	ld	r24, X+
     542:	81 93       	st	Z+, r24
     544:	84 e0       	ldi	r24, 0x04	; 4
     546:	e9 38       	cpi	r30, 0x89	; 137
     548:	f8 07       	cpc	r31, r24
     54a:	d1 f7       	brne	.-12     	; 0x540 <setup+0x50>
     54c:	de 01       	movw	r26, r28
     54e:	af 5f       	subi	r26, 0xFF	; 255
     550:	be 4f       	sbci	r27, 0xFE	; 254
     552:	e9 e8       	ldi	r30, 0x89	; 137
     554:	f4 e0       	ldi	r31, 0x04	; 4
     556:	8d 91       	ld	r24, X+
     558:	81 93       	st	Z+, r24
     55a:	85 e0       	ldi	r24, 0x05	; 5
     55c:	e9 30       	cpi	r30, 0x09	; 9
     55e:	f8 07       	cpc	r31, r24
     560:	d1 f7       	brne	.-12     	; 0x556 <setup+0x66>
     562:	cf 57       	subi	r28, 0x7F	; 127
     564:	de 4f       	sbci	r29, 0xFE	; 254
     566:	88 81       	ld	r24, Y
     568:	99 81       	ldd	r25, Y+1	; 0x01
     56a:	c1 58       	subi	r28, 0x81	; 129
     56c:	d1 40       	sbci	r29, 0x01	; 1
     56e:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <gsm+0x181>
     572:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <gsm+0x180>
     576:	cd 57       	subi	r28, 0x7D	; 125
     578:	de 4f       	sbci	r29, 0xFE	; 254
     57a:	88 81       	ld	r24, Y
     57c:	99 81       	ldd	r25, Y+1	; 0x01
     57e:	c3 58       	subi	r28, 0x83	; 131
     580:	d1 40       	sbci	r29, 0x01	; 1
     582:	90 93 0c 05 	sts	0x050C, r25	; 0x80050c <gsm+0x183>
     586:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <gsm+0x182>
     58a:	cb 57       	subi	r28, 0x7B	; 123
     58c:	de 4f       	sbci	r29, 0xFE	; 254
     58e:	88 81       	ld	r24, Y
     590:	99 81       	ldd	r25, Y+1	; 0x01
     592:	c5 58       	subi	r28, 0x85	; 133
     594:	d1 40       	sbci	r29, 0x01	; 1
     596:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <gsm+0x185>
     59a:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <gsm+0x184>
     59e:	c9 57       	subi	r28, 0x79	; 121
     5a0:	de 4f       	sbci	r29, 0xFE	; 254
     5a2:	88 81       	ld	r24, Y
     5a4:	99 81       	ldd	r25, Y+1	; 0x01
     5a6:	c7 58       	subi	r28, 0x87	; 135
     5a8:	d1 40       	sbci	r29, 0x01	; 1
     5aa:	90 93 10 05 	sts	0x0510, r25	; 0x800510 <gsm+0x187>
     5ae:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <gsm+0x186>
     5b2:	c7 57       	subi	r28, 0x77	; 119
     5b4:	de 4f       	sbci	r29, 0xFE	; 254
     5b6:	88 81       	ld	r24, Y
     5b8:	99 81       	ldd	r25, Y+1	; 0x01
     5ba:	c9 58       	subi	r28, 0x89	; 137
     5bc:	d1 40       	sbci	r29, 0x01	; 1
     5be:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <gsm+0x189>
     5c2:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <gsm+0x188>
     5c6:	c5 57       	subi	r28, 0x75	; 117
     5c8:	de 4f       	sbci	r29, 0xFE	; 254
     5ca:	88 81       	ld	r24, Y
     5cc:	99 81       	ldd	r25, Y+1	; 0x01
     5ce:	cb 58       	subi	r28, 0x8B	; 139
     5d0:	d1 40       	sbci	r29, 0x01	; 1
     5d2:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <gsm+0x18b>
     5d6:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <gsm+0x18a>
     5da:	c3 57       	subi	r28, 0x73	; 115
     5dc:	de 4f       	sbci	r29, 0xFE	; 254
     5de:	88 81       	ld	r24, Y
     5e0:	99 81       	ldd	r25, Y+1	; 0x01
     5e2:	cd 58       	subi	r28, 0x8D	; 141
     5e4:	d1 40       	sbci	r29, 0x01	; 1
     5e6:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <gsm+0x18d>
     5ea:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <gsm+0x18c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:37
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     5ee:	cf 56       	subi	r28, 0x6F	; 111
     5f0:	de 4f       	sbci	r29, 0xFE	; 254
     5f2:	88 81       	ld	r24, Y
     5f4:	99 81       	ldd	r25, Y+1	; 0x01
     5f6:	c1 59       	subi	r28, 0x91	; 145
     5f8:	d1 40       	sbci	r29, 0x01	; 1
     5fa:	90 93 1a 05 	sts	0x051A, r25	; 0x80051a <gsm+0x191>
     5fe:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <gsm+0x190>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     602:	cd 56       	subi	r28, 0x6D	; 109
     604:	de 4f       	sbci	r29, 0xFE	; 254
     606:	88 81       	ld	r24, Y
     608:	99 81       	ldd	r25, Y+1	; 0x01
     60a:	aa 81       	ldd	r26, Y+2	; 0x02
     60c:	bb 81       	ldd	r27, Y+3	; 0x03
     60e:	c3 59       	subi	r28, 0x93	; 147
     610:	d1 40       	sbci	r29, 0x01	; 1
     612:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <gsm+0x192>
     616:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <gsm+0x193>
     61a:	a0 93 1d 05 	sts	0x051D, r26	; 0x80051d <gsm+0x194>
     61e:	b0 93 1e 05 	sts	0x051E, r27	; 0x80051e <gsm+0x195>
     622:	c9 56       	subi	r28, 0x69	; 105
     624:	de 4f       	sbci	r29, 0xFE	; 254
     626:	88 81       	ld	r24, Y
     628:	99 81       	ldd	r25, Y+1	; 0x01
     62a:	aa 81       	ldd	r26, Y+2	; 0x02
     62c:	bb 81       	ldd	r27, Y+3	; 0x03
     62e:	c7 59       	subi	r28, 0x97	; 151
     630:	d1 40       	sbci	r29, 0x01	; 1
     632:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <gsm+0x196>
     636:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <gsm+0x197>
     63a:	a0 93 21 05 	sts	0x0521, r26	; 0x800521 <gsm+0x198>
     63e:	b0 93 22 05 	sts	0x0522, r27	; 0x800522 <gsm+0x199>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:50

#ifndef GCC_VERSION
#define GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
#endif

class SoftwareSerial : public Stream
     642:	c5 56       	subi	r28, 0x65	; 101
     644:	de 4f       	sbci	r29, 0xFE	; 254
     646:	88 81       	ld	r24, Y
     648:	cb 59       	subi	r28, 0x9B	; 155
     64a:	d1 40       	sbci	r29, 0x01	; 1
     64c:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <gsm+0x19a>
     650:	c4 56       	subi	r28, 0x64	; 100
     652:	de 4f       	sbci	r29, 0xFE	; 254
     654:	88 81       	ld	r24, Y
     656:	cc 59       	subi	r28, 0x9C	; 156
     658:	d1 40       	sbci	r29, 0x01	; 1
     65a:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <gsm+0x19b>
     65e:	c3 56       	subi	r28, 0x63	; 99
     660:	de 4f       	sbci	r29, 0xFE	; 254
     662:	88 81       	ld	r24, Y
     664:	99 81       	ldd	r25, Y+1	; 0x01
     666:	cd 59       	subi	r28, 0x9D	; 157
     668:	d1 40       	sbci	r29, 0x01	; 1
     66a:	90 93 26 05 	sts	0x0526, r25	; 0x800526 <gsm+0x19d>
     66e:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <gsm+0x19c>
     672:	c1 56       	subi	r28, 0x61	; 97
     674:	de 4f       	sbci	r29, 0xFE	; 254
     676:	88 81       	ld	r24, Y
     678:	cf 59       	subi	r28, 0x9F	; 159
     67a:	d1 40       	sbci	r29, 0x01	; 1
     67c:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <gsm+0x19e>
     680:	c0 56       	subi	r28, 0x60	; 96
     682:	de 4f       	sbci	r29, 0xFE	; 254
     684:	88 81       	ld	r24, Y
     686:	99 81       	ldd	r25, Y+1	; 0x01
     688:	c0 5a       	subi	r28, 0xA0	; 160
     68a:	d1 40       	sbci	r29, 0x01	; 1
     68c:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <gsm+0x1a0>
     690:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <gsm+0x19f>
     694:	ce 55       	subi	r28, 0x5E	; 94
     696:	de 4f       	sbci	r29, 0xFE	; 254
     698:	88 81       	ld	r24, Y
     69a:	99 81       	ldd	r25, Y+1	; 0x01
     69c:	c2 5a       	subi	r28, 0xA2	; 162
     69e:	d1 40       	sbci	r29, 0x01	; 1
     6a0:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <gsm+0x1a2>
     6a4:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <gsm+0x1a1>
     6a8:	cc 55       	subi	r28, 0x5C	; 92
     6aa:	de 4f       	sbci	r29, 0xFE	; 254
     6ac:	88 81       	ld	r24, Y
     6ae:	c4 5a       	subi	r28, 0xA4	; 164
     6b0:	d1 40       	sbci	r29, 0x01	; 1
     6b2:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <gsm+0x1a3>
     6b6:	cb 55       	subi	r28, 0x5B	; 91
     6b8:	de 4f       	sbci	r29, 0xFE	; 254
     6ba:	88 81       	ld	r24, Y
     6bc:	99 81       	ldd	r25, Y+1	; 0x01
     6be:	c5 5a       	subi	r28, 0xA5	; 165
     6c0:	d1 40       	sbci	r29, 0x01	; 1
     6c2:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <gsm+0x1a5>
     6c6:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <gsm+0x1a4>
     6ca:	c9 55       	subi	r28, 0x59	; 89
     6cc:	de 4f       	sbci	r29, 0xFE	; 254
     6ce:	88 81       	ld	r24, Y
     6d0:	99 81       	ldd	r25, Y+1	; 0x01
     6d2:	c7 5a       	subi	r28, 0xA7	; 167
     6d4:	d1 40       	sbci	r29, 0x01	; 1
     6d6:	90 93 30 05 	sts	0x0530, r25	; 0x800530 <gsm+0x1a7>
     6da:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <gsm+0x1a6>
     6de:	c7 55       	subi	r28, 0x57	; 87
     6e0:	de 4f       	sbci	r29, 0xFE	; 254
     6e2:	88 81       	ld	r24, Y
     6e4:	99 81       	ldd	r25, Y+1	; 0x01
     6e6:	c9 5a       	subi	r28, 0xA9	; 169
     6e8:	d1 40       	sbci	r29, 0x01	; 1
     6ea:	90 93 32 05 	sts	0x0532, r25	; 0x800532 <gsm+0x1a9>
     6ee:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <gsm+0x1a8>
     6f2:	c5 55       	subi	r28, 0x55	; 85
     6f4:	de 4f       	sbci	r29, 0xFE	; 254
     6f6:	88 81       	ld	r24, Y
     6f8:	99 81       	ldd	r25, Y+1	; 0x01
     6fa:	cb 5a       	subi	r28, 0xAB	; 171
     6fc:	d1 40       	sbci	r29, 0x01	; 1
     6fe:	90 93 34 05 	sts	0x0534, r25	; 0x800534 <gsm+0x1ab>
     702:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <gsm+0x1aa>
     706:	c3 55       	subi	r28, 0x53	; 83
     708:	de 4f       	sbci	r29, 0xFE	; 254
     70a:	98 81       	ld	r25, Y
     70c:	cd 5a       	subi	r28, 0xAD	; 173
     70e:	d1 40       	sbci	r29, 0x01	; 1
     710:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <gsm+0x1ac>
     714:	90 fb       	bst	r25, 0
     716:	80 f9       	bld	r24, 0
     718:	91 fb       	bst	r25, 1
     71a:	81 f9       	bld	r24, 1
     71c:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <gsm+0x1ac>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:28
     720:	ce 01       	movw	r24, r28
     722:	81 57       	subi	r24, 0x71	; 113
     724:	9e 4f       	sbci	r25, 0xFE	; 254
     726:	0e 94 b6 14 	call	0x296c	; 0x296c <SoftwareSerial::~SoftwareSerial()>
bin/bbda.cpp:34
  Serial.println("GSM Shield init");
     72a:	62 e3       	ldi	r22, 0x32	; 50
     72c:	71 e0       	ldi	r23, 0x01	; 1
     72e:	89 e9       	ldi	r24, 0x99	; 153
     730:	95 e0       	ldi	r25, 0x05	; 5
     732:	0e 94 15 18 	call	0x302a	; 0x302a <Print::println(char const*)>
bin/bbda.cpp:37
    n=gsm.init_gsm_module();
     736:	89 e8       	ldi	r24, 0x89	; 137
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	0e 94 ad 0b 	call	0x175a	; 0x175a <Gsm_Ard::init_gsm_module()>
     73e:	8c 01       	movw	r16, r24
bin/bbda.cpp:38
    if(n){
     740:	89 2b       	or	r24, r25
     742:	a1 f0       	breq	.+40     	; 0x76c <setup+0x27c>
bin/bbda.cpp:39
      Serial.print("ERROR: COULD NOT INITIALIZE GSM MODULE ");
     744:	62 e4       	ldi	r22, 0x42	; 66
     746:	71 e0       	ldi	r23, 0x01	; 1
     748:	89 e9       	ldi	r24, 0x99	; 153
     74a:	95 e0       	ldi	r25, 0x05	; 5
     74c:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
bin/bbda.cpp:40
      Serial.println(n);
     750:	4a e0       	ldi	r20, 0x0A	; 10
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	b8 01       	movw	r22, r16
     756:	89 e9       	ldi	r24, 0x99	; 153
     758:	95 e0       	ldi	r25, 0x05	; 5
     75a:	0e 94 c1 18 	call	0x3182	; 0x3182 <Print::println(int, int)>
bin/bbda.cpp:41
      delay(10000);
     75e:	60 e1       	ldi	r22, 0x10	; 16
     760:	77 e2       	ldi	r23, 0x27	; 39
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <delay>
     76a:	e5 cf       	rjmp	.-54     	; 0x736 <setup+0x246>
bin/bbda.cpp:48
    Serial.print("MEMORY=");
     76c:	6c e1       	ldi	r22, 0x1C	; 28
     76e:	71 e0       	ldi	r23, 0x01	; 1
     770:	89 e9       	ldi	r24, 0x99	; 153
     772:	95 e0       	ldi	r25, 0x05	; 5
     774:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
bin/bbda.cpp:49
    Serial.println(freeMemory());
     778:	0e 94 1c 10 	call	0x2038	; 0x2038 <freeMemory>
     77c:	4a e0       	ldi	r20, 0x0A	; 10
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	bc 01       	movw	r22, r24
     782:	89 e9       	ldi	r24, 0x99	; 153
     784:	95 e0       	ldi	r25, 0x05	; 5
     786:	0e 94 c1 18 	call	0x3182	; 0x3182 <Print::println(int, int)>
bin/bbda.cpp:51
    n=gsm.attachGPRS();
     78a:	89 e8       	ldi	r24, 0x89	; 137
     78c:	93 e0       	ldi	r25, 0x03	; 3
     78e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <Gsm_Ard::attachGPRS()>
     792:	8c 01       	movw	r16, r24
bin/bbda.cpp:52
    if(n){
     794:	89 2b       	or	r24, r25
     796:	89 f1       	breq	.+98     	; 0x7fa <setup+0x30a>
bin/bbda.cpp:53
      Serial.print("ERROR: COULD NOT ATTACH GPRS ");
     798:	6a e6       	ldi	r22, 0x6A	; 106
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	89 e9       	ldi	r24, 0x99	; 153
     79e:	95 e0       	ldi	r25, 0x05	; 5
     7a0:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
bin/bbda.cpp:54
      Serial.println(n);
     7a4:	4a e0       	ldi	r20, 0x0A	; 10
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	b8 01       	movw	r22, r16
     7aa:	89 e9       	ldi	r24, 0x99	; 153
     7ac:	95 e0       	ldi	r25, 0x05	; 5
     7ae:	0e 94 c1 18 	call	0x3182	; 0x3182 <Print::println(int, int)>
bin/bbda.cpp:90
    n=gsm.dettachGPRS();
     7b2:	89 e8       	ldi	r24, 0x89	; 137
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <Gsm_Ard::dettachGPRS()>
     7ba:	8c 01       	movw	r16, r24
bin/bbda.cpp:91
    if(n){
     7bc:	89 2b       	or	r24, r25
     7be:	69 f0       	breq	.+26     	; 0x7da <setup+0x2ea>
bin/bbda.cpp:92
      Serial.print("ERROR: DETTACH GPRS ");
     7c0:	68 ea       	ldi	r22, 0xA8	; 168
     7c2:	71 e0       	ldi	r23, 0x01	; 1
     7c4:	89 e9       	ldi	r24, 0x99	; 153
     7c6:	95 e0       	ldi	r25, 0x05	; 5
     7c8:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
bin/bbda.cpp:93
      Serial.println(n);
     7cc:	4a e0       	ldi	r20, 0x0A	; 10
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	b8 01       	movw	r22, r16
     7d2:	89 e9       	ldi	r24, 0x99	; 153
     7d4:	95 e0       	ldi	r25, 0x05	; 5
     7d6:	0e 94 c1 18 	call	0x3182	; 0x3182 <Print::println(int, int)>
bin/bbda.cpp:95
  } while(!started);
     7da:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <started>
     7de:	88 23       	and	r24, r24
     7e0:	29 f2       	breq	.-118    	; 0x76c <setup+0x27c>
bin/bbda.cpp:97
}
     7e2:	c3 55       	subi	r28, 0x53	; 83
     7e4:	de 4f       	sbci	r29, 0xFE	; 254
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	08 95       	ret
bin/bbda.cpp:79
      n=get_last_schedule();
     7fa:	90 dd       	rcall	.-1248   	; 0x31c <get_last_schedule()>
     7fc:	8c 01       	movw	r16, r24
bin/bbda.cpp:80
      if(n){
     7fe:	89 2b       	or	r24, r25
     800:	69 f0       	breq	.+26     	; 0x81c <setup+0x32c>
bin/bbda.cpp:81
        Serial.print("ERROR: GET LAST SCHE ");
     802:	68 e8       	ldi	r22, 0x88	; 136
     804:	71 e0       	ldi	r23, 0x01	; 1
     806:	89 e9       	ldi	r24, 0x99	; 153
     808:	95 e0       	ldi	r25, 0x05	; 5
     80a:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
bin/bbda.cpp:82
        Serial.println(n);
     80e:	4a e0       	ldi	r20, 0x0A	; 10
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	b8 01       	movw	r22, r16
     814:	89 e9       	ldi	r24, 0x99	; 153
     816:	95 e0       	ldi	r25, 0x05	; 5
     818:	0e 94 c1 18 	call	0x3182	; 0x3182 <Print::println(int, int)>
bin/bbda.cpp:87
      Serial.println("WHATSasdf");
     81c:	6e e9       	ldi	r22, 0x9E	; 158
     81e:	71 e0       	ldi	r23, 0x01	; 1
     820:	89 e9       	ldi	r24, 0x99	; 153
     822:	95 e0       	ldi	r25, 0x05	; 5
     824:	0e 94 15 18 	call	0x302a	; 0x302a <Print::println(char const*)>
bin/bbda.cpp:88
      delay(100);
     828:	64 e6       	ldi	r22, 0x64	; 100
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <delay>
     834:	be cf       	rjmp	.-132    	; 0x7b2 <setup+0x2c2>

00000836 <_GLOBAL__sub_I_gsm>:
_GLOBAL__sub_I_gsm():
bin/bbda.cpp:13
Gsm_Ard gsm;
     836:	89 e8       	ldi	r24, 0x89	; 137
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	5d c1       	rjmp	.+698    	; 0xaf6 <Gsm_Ard::Gsm_Ard()>

0000083c <_GLOBAL__sub_D_gsm>:
_GLOBAL__sub_D_gsm():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:28
     83c:	87 e1       	ldi	r24, 0x17	; 23
     83e:	95 e0       	ldi	r25, 0x05	; 5
     840:	0c 94 b6 14 	jmp	0x296c	; 0x296c <SoftwareSerial::~SoftwareSerial()>

00000844 <init_scheduler(ArduinoSchedules)>:
_Z14init_scheduler16ArduinoSchedules():
scheduler.cpp:7
#include "arduino_cfg.h"

static ArduinoSchedules _arduino_schedules(ARDUINO_ID);
static bool _started = false;

int init_scheduler(ArduinoSchedules a_s){
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	00 d0       	rcall	.+0      	; 0x84a <init_scheduler(ArduinoSchedules)+0x6>
     84a:	00 d0       	rcall	.+0      	; 0x84c <init_scheduler(ArduinoSchedules)+0x8>
     84c:	1f 92       	push	r1
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	fc 01       	movw	r30, r24
scheduler.cpp:8
  if(_started){
     854:	80 91 36 05 	lds	r24, 0x0536	; 0x800536 <_started>
     858:	81 11       	cpse	r24, r1
     85a:	1f c0       	rjmp	.+62     	; 0x89a <init_scheduler(ArduinoSchedules)+0x56>
scheduler.cpp:11
    return 1;
  }
  _arduino_schedules.process_new_schedules(a_s);
     85c:	95 e0       	ldi	r25, 0x05	; 5
     85e:	de 01       	movw	r26, r28
     860:	11 96       	adiw	r26, 0x01	; 1
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	9a 95       	dec	r25
     868:	e1 f7       	brne	.-8      	; 0x862 <init_scheduler(ArduinoSchedules)+0x1e>
     86a:	be 01       	movw	r22, r28
     86c:	6f 5f       	subi	r22, 0xFF	; 255
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	87 e3       	ldi	r24, 0x37	; 55
     872:	95 e0       	ldi	r25, 0x05	; 5
     874:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)>
     878:	ce 01       	movw	r24, r28
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	0e 94 bb 10 	call	0x2176	; 0x2176 <ArduinoSchedules::~ArduinoSchedules()>
scheduler.cpp:12
  _started=true;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <_started>
scheduler.cpp:13
  return 0;
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
scheduler.cpp:14
}
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret
scheduler.cpp:9
    return 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	f5 cf       	rjmp	.-22     	; 0x88a <init_scheduler(ArduinoSchedules)+0x46>

000008a0 <_GLOBAL__sub_I__Z14init_scheduler16ArduinoSchedules>:
_GLOBAL__sub_I__Z14init_scheduler16ArduinoSchedules():
scheduler.cpp:4
static ArduinoSchedules _arduino_schedules(ARDUINO_ID);
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	87 e3       	ldi	r24, 0x37	; 55
     8a6:	95 e0       	ldi	r25, 0x05	; 5
     8a8:	0c 94 b6 10 	jmp	0x216c	; 0x216c <ArduinoSchedules::ArduinoSchedules(unsigned int)>

000008ac <_GLOBAL__sub_D__Z14init_scheduler16ArduinoSchedules>:
_GLOBAL__sub_D__Z14init_scheduler16ArduinoSchedules():
     8ac:	87 e3       	ldi	r24, 0x37	; 55
     8ae:	95 e0       	ldi	r25, 0x05	; 5
     8b0:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <ArduinoSchedules::~ArduinoSchedules()>

000008b4 <setTime(unsigned long)>:
_Z7setTimem():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:274
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:280
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
     8b8:	60 93 48 05 	sts	0x0548, r22	; 0x800548 <sysTime>
     8bc:	70 93 49 05 	sts	0x0549, r23	; 0x800549 <sysTime+0x1>
     8c0:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <sysTime+0x2>
     8c4:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:281
  nextSyncTime = (uint32_t)t + syncInterval;
     8c8:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <syncInterval>
     8cc:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <syncInterval+0x1>
     8d0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <syncInterval+0x2>
     8d4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <syncInterval+0x3>
     8d8:	dc 01       	movw	r26, r24
     8da:	cb 01       	movw	r24, r22
     8dc:	80 0f       	add	r24, r16
     8de:	91 1f       	adc	r25, r17
     8e0:	a2 1f       	adc	r26, r18
     8e2:	b3 1f       	adc	r27, r19
     8e4:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <nextSyncTime>
     8e8:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <nextSyncTime+0x1>
     8ec:	a0 93 42 05 	sts	0x0542, r26	; 0x800542 <nextSyncTime+0x2>
     8f0:	b0 93 43 05 	sts	0x0543, r27	; 0x800543 <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:282
  Status = timeSet;
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <Status+0x1>
     8fc:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <Status>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:283
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     900:	0e 94 04 16 	call	0x2c08	; 0x2c08 <millis>
     904:	60 93 44 05 	sts	0x0544, r22	; 0x800544 <prevMillis>
     908:	70 93 45 05 	sts	0x0545, r23	; 0x800545 <prevMillis+0x1>
     90c:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <prevMillis+0x2>
     910:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:284
} 
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <now()>:
_Z3nowv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:250
time_t now() {
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     926:	0e 94 04 16 	call	0x2c08	; 0x2c08 <millis>
     92a:	c0 90 44 05 	lds	r12, 0x0544	; 0x800544 <prevMillis>
     92e:	d0 90 45 05 	lds	r13, 0x0545	; 0x800545 <prevMillis+0x1>
     932:	e0 90 46 05 	lds	r14, 0x0546	; 0x800546 <prevMillis+0x2>
     936:	f0 90 47 05 	lds	r15, 0x0547	; 0x800547 <prevMillis+0x3>
     93a:	8b 01       	movw	r16, r22
     93c:	9c 01       	movw	r18, r24
     93e:	0c 19       	sub	r16, r12
     940:	1d 09       	sbc	r17, r13
     942:	2e 09       	sbc	r18, r14
     944:	3f 09       	sbc	r19, r15
     946:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <sysTime>
     94a:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <sysTime+0x1>
     94e:	a0 91 4a 05 	lds	r26, 0x054A	; 0x80054a <sysTime+0x2>
     952:	b0 91 4b 05 	lds	r27, 0x054B	; 0x80054b <sysTime+0x3>
     956:	08 3e       	cpi	r16, 0xE8	; 232
     958:	13 40       	sbci	r17, 0x03	; 3
     95a:	21 05       	cpc	r18, r1
     95c:	31 05       	cpc	r19, r1
     95e:	d0 f0       	brcs	.+52     	; 0x994 <now()+0x7a>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:254
    sysTime++;
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	a1 1d       	adc	r26, r1
     964:	b1 1d       	adc	r27, r1
     966:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <sysTime>
     96a:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <sysTime+0x1>
     96e:	a0 93 4a 05 	sts	0x054A, r26	; 0x80054a <sysTime+0x2>
     972:	b0 93 4b 05 	sts	0x054B, r27	; 0x80054b <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:255
    prevMillis += 1000;	
     976:	b7 01       	movw	r22, r14
     978:	a6 01       	movw	r20, r12
     97a:	48 51       	subi	r20, 0x18	; 24
     97c:	5c 4f       	sbci	r21, 0xFC	; 252
     97e:	6f 4f       	sbci	r22, 0xFF	; 255
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	40 93 44 05 	sts	0x0544, r20	; 0x800544 <prevMillis>
     986:	50 93 45 05 	sts	0x0545, r21	; 0x800545 <prevMillis+0x1>
     98a:	60 93 46 05 	sts	0x0546, r22	; 0x800546 <prevMillis+0x2>
     98e:	70 93 47 05 	sts	0x0547, r23	; 0x800547 <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     992:	c9 cf       	rjmp	.-110    	; 0x926 <now()+0xc>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:260
  if (nextSyncTime <= sysTime) {
     994:	40 91 40 05 	lds	r20, 0x0540	; 0x800540 <nextSyncTime>
     998:	50 91 41 05 	lds	r21, 0x0541	; 0x800541 <nextSyncTime+0x1>
     99c:	60 91 42 05 	lds	r22, 0x0542	; 0x800542 <nextSyncTime+0x2>
     9a0:	70 91 43 05 	lds	r23, 0x0543	; 0x800543 <nextSyncTime+0x3>
     9a4:	84 17       	cp	r24, r20
     9a6:	95 07       	cpc	r25, r21
     9a8:	a6 07       	cpc	r26, r22
     9aa:	b7 07       	cpc	r27, r23
     9ac:	68 f0       	brcs	.+26     	; 0x9c8 <now()+0xae>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:261
    if (getTimePtr != 0) {
     9ae:	e0 91 3c 05 	lds	r30, 0x053C	; 0x80053c <getTimePtr>
     9b2:	f0 91 3d 05 	lds	r31, 0x053D	; 0x80053d <getTimePtr+0x1>
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	39 f0       	breq	.+14     	; 0x9c8 <now()+0xae>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:262
      time_t t = getTimePtr();
     9ba:	09 95       	icall
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:263
      if (t != 0) {
     9bc:	61 15       	cp	r22, r1
     9be:	71 05       	cpc	r23, r1
     9c0:	81 05       	cpc	r24, r1
     9c2:	91 05       	cpc	r25, r1
     9c4:	81 f0       	breq	.+32     	; 0x9e6 <now()+0xcc>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:264
        setTime(t);
     9c6:	76 df       	rcall	.-276    	; 0x8b4 <setTime(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:271
  return (time_t)sysTime;
     9c8:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <sysTime>
     9cc:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <sysTime+0x1>
     9d0:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <sysTime+0x2>
     9d4:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:272
}
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:266
        nextSyncTime = sysTime + syncInterval;
     9e6:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <sysTime>
     9ea:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <sysTime+0x1>
     9ee:	a0 91 4a 05 	lds	r26, 0x054A	; 0x80054a <sysTime+0x2>
     9f2:	b0 91 4b 05 	lds	r27, 0x054B	; 0x80054b <sysTime+0x3>
     9f6:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <syncInterval>
     9fa:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <syncInterval+0x1>
     9fe:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <syncInterval+0x2>
     a02:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <syncInterval+0x3>
     a06:	84 0f       	add	r24, r20
     a08:	95 1f       	adc	r25, r21
     a0a:	a6 1f       	adc	r26, r22
     a0c:	b7 1f       	adc	r27, r23
     a0e:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <nextSyncTime>
     a12:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <nextSyncTime+0x1>
     a16:	a0 93 42 05 	sts	0x0542, r26	; 0x800542 <nextSyncTime+0x2>
     a1a:	b0 93 43 05 	sts	0x0543, r27	; 0x800543 <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:267
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <Status>
     a26:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <Status+0x1>
     a2a:	23 2b       	or	r18, r19
     a2c:	11 f4       	brne	.+4      	; 0xa32 <now()+0x118>
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <Status+0x1>
     a36:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <Status>
     a3a:	c6 cf       	rjmp	.-116    	; 0x9c8 <now()+0xae>

00000a3c <Gsm_Ard::_change_gsm_state(GSM_STATE)>:
_ZN7Gsm_Ard17_change_gsm_stateE9GSM_STATE():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:23
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
  #endif
}

void Gsm_Ard::_change_gsm_state(GSM_STATE new_state){
  _gsm_state=new_state;
     a3c:	8a 57       	subi	r24, 0x7A	; 122
     a3e:	9e 4f       	sbci	r25, 0xFE	; 254
     a40:	fc 01       	movw	r30, r24
     a42:	71 83       	std	Z+1, r23	; 0x01
     a44:	60 83       	st	Z, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:25
  #ifdef DEBUG_STATES
  switch(_gsm_state){
     a46:	62 30       	cpi	r22, 0x02	; 2
     a48:	71 05       	cpc	r23, r1
     a4a:	c1 f0       	breq	.+48     	; 0xa7c <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x40>
     a4c:	38 f4       	brcc	.+14     	; 0xa5c <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x20>
     a4e:	61 15       	cp	r22, r1
     a50:	71 05       	cpc	r23, r1
     a52:	59 f0       	breq	.+22     	; 0xa6a <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x2e>
     a54:	61 30       	cpi	r22, 0x01	; 1
     a56:	71 05       	cpc	r23, r1
     a58:	71 f0       	breq	.+28     	; 0xa76 <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x3a>
     a5a:	08 95       	ret
     a5c:	63 30       	cpi	r22, 0x03	; 3
     a5e:	71 05       	cpc	r23, r1
     a60:	81 f0       	breq	.+32     	; 0xa82 <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x46>
     a62:	64 30       	cpi	r22, 0x04	; 4
     a64:	71 05       	cpc	r23, r1
     a66:	81 f0       	breq	.+32     	; 0xa88 <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x4c>
     a68:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:29
    default:
      break;
    case GSM_OFF_STATE:
      Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     a6a:	6d eb       	ldi	r22, 0xBD	; 189
     a6c:	71 e0       	ldi	r23, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:41
      break;
    case GSM_IP_STATE:
      Serial.println("DB: GSM_STATE=GSM_IP_STATE");
      break;
    case GSM_TCP_STATE:
      Serial.println("DB: GSM_STATE=GSM_TCP_STATE");
     a6e:	89 e9       	ldi	r24, 0x99	; 153
     a70:	95 e0       	ldi	r25, 0x05	; 5
     a72:	0c 94 15 18 	jmp	0x302a	; 0x302a <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:32
      Serial.println("DB: GSM_STATE=GSM_ON_STATE");
     a76:	69 ed       	ldi	r22, 0xD9	; 217
     a78:	71 e0       	ldi	r23, 0x01	; 1
     a7a:	f9 cf       	rjmp	.-14     	; 0xa6e <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:35
      Serial.println("DB: GSM_STATE=GSM_PIN_STATE");
     a7c:	64 ef       	ldi	r22, 0xF4	; 244
     a7e:	71 e0       	ldi	r23, 0x01	; 1
     a80:	f6 cf       	rjmp	.-20     	; 0xa6e <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:38
      Serial.println("DB: GSM_STATE=GSM_IP_STATE");
     a82:	60 e1       	ldi	r22, 0x10	; 16
     a84:	72 e0       	ldi	r23, 0x02	; 2
     a86:	f3 cf       	rjmp	.-26     	; 0xa6e <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:41
      Serial.println("DB: GSM_STATE=GSM_TCP_STATE");
     a88:	6b e2       	ldi	r22, 0x2B	; 43
     a8a:	72 e0       	ldi	r23, 0x02	; 2
     a8c:	f0 cf       	rjmp	.-32     	; 0xa6e <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x32>

00000a8e <Gsm_Ard::_clear_recv_buff()>:
_ZN7Gsm_Ard16_clear_recv_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:669
  _recv_buff_state=BUFF_USED;
  return 0;
}

void Gsm_Ard::_clear_recv_buff(){
  _recv_buff_idx=0;
     a8e:	fc 01       	movw	r30, r24
     a90:	e0 58       	subi	r30, 0x80	; 128
     a92:	fe 4f       	sbci	r31, 0xFE	; 254
     a94:	11 82       	std	Z+1, r1	; 0x01
     a96:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:670
  memset(_recv_buff, 0, RECV_BUFF_LEN);
     a98:	20 e8       	ldi	r18, 0x80	; 128
     a9a:	fc 01       	movw	r30, r24
     a9c:	11 92       	st	Z+, r1
     a9e:	2a 95       	dec	r18
     aa0:	e9 f7       	brne	.-6      	; 0xa9c <Gsm_Ard::_clear_recv_buff()+0xe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:671
  _recv_buff_state=BUFF_READY;
     aa2:	88 57       	subi	r24, 0x78	; 120
     aa4:	9e 4f       	sbci	r25, 0xFE	; 254
     aa6:	fc 01       	movw	r30, r24
     aa8:	11 82       	std	Z+1, r1	; 0x01
     aaa:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:672
}
     aac:	08 95       	ret

00000aae <Gsm_Ard::_clear_rsp_buff()>:
_ZN7Gsm_Ard15_clear_rsp_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:675

void Gsm_Ard::_clear_rsp_buff(){
  _rsp_buff_idx=0;
     aae:	fc 01       	movw	r30, r24
     ab0:	ee 57       	subi	r30, 0x7E	; 126
     ab2:	fe 4f       	sbci	r31, 0xFE	; 254
     ab4:	11 82       	std	Z+1, r1	; 0x01
     ab6:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:676
  memset(_rsp_buff, 0, RSP_BUFF_LEN);
     ab8:	e2 50       	subi	r30, 0x02	; 2
     aba:	f1 40       	sbci	r31, 0x01	; 1
     abc:	20 e8       	ldi	r18, 0x80	; 128
     abe:	df 01       	movw	r26, r30
     ac0:	1d 92       	st	X+, r1
     ac2:	2a 95       	dec	r18
     ac4:	e9 f7       	brne	.-6      	; 0xac0 <Gsm_Ard::_clear_rsp_buff()+0x12>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:677
  _rsp_buff_state=BUFF_READY;
     ac6:	86 57       	subi	r24, 0x76	; 118
     ac8:	9e 4f       	sbci	r25, 0xFE	; 254
     aca:	fc 01       	movw	r30, r24
     acc:	11 82       	std	Z+1, r1	; 0x01
     ace:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:678
}
     ad0:	08 95       	ret

00000ad2 <Gsm_Ard::_clear_sock_buff()>:
_ZN7Gsm_Ard16_clear_sock_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:681

void Gsm_Ard::_clear_sock_buff(){
  _sock_buff_idx=0;
     ad2:	fc 01       	movw	r30, r24
     ad4:	ec 57       	subi	r30, 0x7C	; 124
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	11 82       	std	Z+1, r1	; 0x01
     ada:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:682
  memset(_sock_buff, 0, SOCK_BUFF_LEN);
     adc:	e4 58       	subi	r30, 0x84	; 132
     ade:	f1 09       	sbc	r31, r1
     ae0:	20 e8       	ldi	r18, 0x80	; 128
     ae2:	df 01       	movw	r26, r30
     ae4:	1d 92       	st	X+, r1
     ae6:	2a 95       	dec	r18
     ae8:	e9 f7       	brne	.-6      	; 0xae4 <Gsm_Ard::_clear_sock_buff()+0x12>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:683
  _sock_buff_state=BUFF_READY;
     aea:	84 57       	subi	r24, 0x74	; 116
     aec:	9e 4f       	sbci	r25, 0xFE	; 254
     aee:	fc 01       	movw	r30, r24
     af0:	11 82       	std	Z+1, r1	; 0x01
     af2:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:684
}
     af4:	08 95       	ret

00000af6 <Gsm_Ard::Gsm_Ard()>:
_ZN7Gsm_ArdC2Ev():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:12
Gsm_Ard::Gsm_Ard(){
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	48 e0       	ldi	r20, 0x08	; 8
     b00:	67 e0       	ldi	r22, 0x07	; 7
     b02:	82 57       	subi	r24, 0x72	; 114
     b04:	9e 4f       	sbci	r25, 0xFE	; 254
     b06:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:13
  _gsm_state=GSM_OFF_STATE;
     b0a:	fe 01       	movw	r30, r28
     b0c:	ea 57       	subi	r30, 0x7A	; 122
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	11 82       	std	Z+1, r1	; 0x01
     b12:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:14
  _clear_recv_buff();
     b14:	ce 01       	movw	r24, r28
     b16:	bb df       	rcall	.-138    	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:15
  _clear_rsp_buff();
     b18:	ce 01       	movw	r24, r28
     b1a:	c9 df       	rcall	.-110    	; 0xaae <Gsm_Ard::_clear_rsp_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:16
  _clear_sock_buff();
     b1c:	ce 01       	movw	r24, r28
     b1e:	d9 df       	rcall	.-78     	; 0xad2 <Gsm_Ard::_clear_sock_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:18
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     b20:	6d eb       	ldi	r22, 0xBD	; 189
     b22:	71 e0       	ldi	r23, 0x01	; 1
     b24:	89 e9       	ldi	r24, 0x99	; 153
     b26:	95 e0       	ldi	r25, 0x05	; 5
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:20
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:18
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     b2c:	0c 94 15 18 	jmp	0x302a	; 0x302a <Print::println(char const*)>

00000b30 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>:
_ZN7Gsm_Ard20_fetch_rsp_from_recvEPKcjPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:686

int Gsm_Ard::_fetch_rsp_from_recv(const char* cmd, unsigned int cmd_size, unsigned int* rsp_len){
     b30:	cf 92       	push	r12
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ec 01       	movw	r28, r24
     b42:	89 01       	movw	r16, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:688
  unsigned int i, start_idx;
  if(_rsp_buff_state!=BUFF_READY || _recv_buff_state!=BUFF_USED){
     b44:	7c 01       	movw	r14, r24
     b46:	26 e7       	ldi	r18, 0x76	; 118
     b48:	e2 1a       	sub	r14, r18
     b4a:	2e ef       	ldi	r18, 0xFE	; 254
     b4c:	f2 0a       	sbc	r15, r18
     b4e:	f7 01       	movw	r30, r14
     b50:	80 81       	ld	r24, Z
     b52:	91 81       	ldd	r25, Z+1	; 0x01
     b54:	9e 01       	movw	r18, r28
     b56:	28 57       	subi	r18, 0x78	; 120
     b58:	3e 4f       	sbci	r19, 0xFE	; 254
     b5a:	69 01       	movw	r12, r18
     b5c:	89 2b       	or	r24, r25
     b5e:	09 f0       	breq	.+2      	; 0xb62 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x32>
     b60:	71 c0       	rjmp	.+226    	; 0xc44 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x114>
     b62:	f9 01       	movw	r30, r18
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	09 f0       	breq	.+2      	; 0xb6e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x3e>
     b6c:	6b c0       	rjmp	.+214    	; 0xc44 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x114>
     b6e:	fb 01       	movw	r30, r22
     b70:	de 01       	movw	r26, r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:701
    // Serial.print(_rsp_buff_state);
    // Serial.println(_recv_buff_state);

    return 1;
  }
  for(i=0;i<cmd_size;i++){
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	2d 91       	ld	r18, X+
     b78:	48 17       	cp	r20, r24
     b7a:	59 07       	cpc	r21, r25
     b7c:	91 f0       	breq	.+36     	; 0xba2 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x72>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:702
    if(cmd[i]!=_recv_buff[i]){
     b7e:	31 91       	ld	r19, Z+
     b80:	32 17       	cp	r19, r18
     b82:	69 f0       	breq	.+26     	; 0xb9e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:703
      _clear_recv_buff();
     b84:	ce 01       	movw	r24, r28
     b86:	83 df       	rcall	.-250    	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:704
      return 2;
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:734

  _clear_recv_buff();

  *rsp_len=_rsp_buff_idx;
  return 0;
}
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:701
  for(i=0;i<cmd_size;i++){
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	ea cf       	rjmp	.-44     	; 0xb76 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x46>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:708
  if(_recv_buff[i]!=CR_CHAR || _recv_buff[i+1]!=NL_CHAR || _recv_buff[i+2]!=CR_CHAR || _recv_buff[i+3]!=NL_CHAR){
     ba2:	2d 30       	cpi	r18, 0x0D	; 13
     ba4:	61 f4       	brne	.+24     	; 0xbbe <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x8e>
     ba6:	fe 01       	movw	r30, r28
     ba8:	e4 0f       	add	r30, r20
     baa:	f5 1f       	adc	r31, r21
     bac:	81 81       	ldd	r24, Z+1	; 0x01
     bae:	8a 30       	cpi	r24, 0x0A	; 10
     bb0:	31 f4       	brne	.+12     	; 0xbbe <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x8e>
     bb2:	82 81       	ldd	r24, Z+2	; 0x02
     bb4:	8d 30       	cpi	r24, 0x0D	; 13
     bb6:	19 f4       	brne	.+6      	; 0xbbe <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x8e>
     bb8:	83 81       	ldd	r24, Z+3	; 0x03
     bba:	8a 30       	cpi	r24, 0x0A	; 10
     bbc:	29 f0       	breq	.+10     	; 0xbc8 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x98>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:709
    _clear_recv_buff();
     bbe:	ce 01       	movw	r24, r28
     bc0:	66 df       	rcall	.-308    	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:710
    return 3;
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	e2 cf       	rjmp	.-60     	; 0xb8c <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x5c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:713
  i+=4;
     bc8:	4c 5f       	subi	r20, 0xFC	; 252
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
     bcc:	fe 01       	movw	r30, r28
     bce:	e4 0f       	add	r30, r20
     bd0:	f5 1f       	adc	r31, r21
     bd2:	bf 01       	movw	r22, r30
     bd4:	9f 01       	movw	r18, r30
     bd6:	2c 1b       	sub	r18, r28
     bd8:	3d 0b       	sbc	r19, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:716
  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     bda:	81 91       	ld	r24, Z+
     bdc:	8d 30       	cpi	r24, 0x0D	; 13
     bde:	19 f0       	breq	.+6      	; 0xbe6 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xb6>
     be0:	80 81       	ld	r24, Z
     be2:	8a 30       	cpi	r24, 0x0A	; 10
     be4:	b9 f7       	brne	.-18     	; 0xbd4 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xa4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:720
  if(i!=_recv_buff_idx-2){
     be6:	fe 01       	movw	r30, r28
     be8:	e0 58       	subi	r30, 0x80	; 128
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	02 97       	sbiw	r24, 0x02	; 2
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	29 f0       	breq	.+10     	; 0xc02 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xd2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:721
    _clear_recv_buff();
     bf8:	ce 01       	movw	r24, r28
     bfa:	49 df       	rcall	.-366    	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:722
    return 4;
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	c5 cf       	rjmp	.-118    	; 0xb8c <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x5c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:725
  _rsp_buff_idx=i-start_idx;
     c02:	c9 01       	movw	r24, r18
     c04:	84 1b       	sub	r24, r20
     c06:	95 0b       	sbc	r25, r21
     c08:	ac 01       	movw	r20, r24
     c0a:	6e 01       	movw	r12, r28
     c0c:	9e e7       	ldi	r25, 0x7E	; 126
     c0e:	c9 1a       	sub	r12, r25
     c10:	9e ef       	ldi	r25, 0xFE	; 254
     c12:	d9 0a       	sbc	r13, r25
     c14:	f6 01       	movw	r30, r12
     c16:	51 83       	std	Z+1, r21	; 0x01
     c18:	40 83       	st	Z, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:726
  _rsp_buff_state=BUFF_USED;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	f7 01       	movw	r30, r14
     c20:	91 83       	std	Z+1, r25	; 0x01
     c22:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:728
  strncpy(_rsp_buff, _recv_buff+start_idx, _rsp_buff_idx);
     c24:	ce 01       	movw	r24, r28
     c26:	80 58       	subi	r24, 0x80	; 128
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	0e 94 ef 1b 	call	0x37de	; 0x37de <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:730
  _clear_recv_buff();
     c2e:	ce 01       	movw	r24, r28
     c30:	2e df       	rcall	.-420    	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:732
  *rsp_len=_rsp_buff_idx;
     c32:	f6 01       	movw	r30, r12
     c34:	80 81       	ld	r24, Z
     c36:	91 81       	ldd	r25, Z+1	; 0x01
     c38:	f8 01       	movw	r30, r16
     c3a:	91 83       	std	Z+1, r25	; 0x01
     c3c:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:733
  return 0;
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	a4 cf       	rjmp	.-184    	; 0xb8c <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x5c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:689
    Serial.print("THIS ");
     c44:	67 e4       	ldi	r22, 0x47	; 71
     c46:	72 e0       	ldi	r23, 0x02	; 2
     c48:	89 e9       	ldi	r24, 0x99	; 153
     c4a:	95 e0       	ldi	r25, 0x05	; 5
     c4c:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:690
    if(_rsp_buff_state!=BUFF_READY){
     c50:	f7 01       	movw	r30, r14
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	89 2b       	or	r24, r25
     c58:	31 f0       	breq	.+12     	; 0xc66 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x136>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:691
      Serial.print("1");
     c5a:	6d e4       	ldi	r22, 0x4D	; 77
     c5c:	72 e0       	ldi	r23, 0x02	; 2
     c5e:	89 e9       	ldi	r24, 0x99	; 153
     c60:	95 e0       	ldi	r25, 0x05	; 5
     c62:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:693
    if(_recv_buff_state!=BUFF_USED){
     c66:	f6 01       	movw	r30, r12
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	31 f0       	breq	.+12     	; 0xc7c <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x14c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:694
      Serial.print("2");
     c70:	6f e4       	ldi	r22, 0x4F	; 79
     c72:	72 e0       	ldi	r23, 0x02	; 2
     c74:	89 e9       	ldi	r24, 0x99	; 153
     c76:	95 e0       	ldi	r25, 0x05	; 5
     c78:	0e 94 04 18 	call	0x3008	; 0x3008 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:699
    return 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	85 cf       	rjmp	.-246    	; 0xb8c <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x5c>

00000c82 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>:
_ZN7Gsm_Ard17_fetch_rsp_wo_cmdEPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:736

int Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int* rsp_len){
     c82:	ef 92       	push	r14
     c84:	ff 92       	push	r15
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	ec 01       	movw	r28, r24
     c90:	8b 01       	movw	r16, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:738
  unsigned int i, start_idx;
  if(_rsp_buff_state!=BUFF_READY || _recv_buff_state!=BUFF_USED){
     c92:	dc 01       	movw	r26, r24
     c94:	a6 57       	subi	r26, 0x76	; 118
     c96:	be 4f       	sbci	r27, 0xFE	; 254
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	11 97       	sbiw	r26, 0x01	; 1
     c9e:	89 2b       	or	r24, r25
     ca0:	09 f0       	breq	.+2      	; 0xca4 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x22>
     ca2:	4e c0       	rjmp	.+156    	; 0xd40 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xbe>
     ca4:	fe 01       	movw	r30, r28
     ca6:	e8 57       	subi	r30, 0x78	; 120
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	80 81       	ld	r24, Z
     cac:	91 81       	ldd	r25, Z+1	; 0x01
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x32>
     cb2:	46 c0       	rjmp	.+140    	; 0xd40 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xbe>
     cb4:	fe 01       	movw	r30, r28
     cb6:	cf 01       	movw	r24, r30
     cb8:	8c 1b       	sub	r24, r28
     cba:	9d 0b       	sbc	r25, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:742
    return 1;
  }
  start_idx=0;
  while(_recv_buff[start_idx]!=CR_CHAR || _recv_buff[start_idx+1]!=NL_CHAR){
     cbc:	21 91       	ld	r18, Z+
     cbe:	2d 30       	cpi	r18, 0x0D	; 13
     cc0:	d1 f7       	brne	.-12     	; 0xcb6 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x34>
     cc2:	20 81       	ld	r18, Z
     cc4:	2a 30       	cpi	r18, 0x0A	; 10
     cc6:	b9 f7       	brne	.-18     	; 0xcb6 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x34>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:746
    start_idx++;
  }

  start_idx+=2;
     cc8:	02 96       	adiw	r24, 0x02	; 2
     cca:	fe 01       	movw	r30, r28
     ccc:	e8 0f       	add	r30, r24
     cce:	f9 1f       	adc	r31, r25
     cd0:	bf 01       	movw	r22, r30
     cd2:	af 01       	movw	r20, r30
     cd4:	4c 1b       	sub	r20, r28
     cd6:	5d 0b       	sbc	r21, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:749
  i=start_idx;

  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     cd8:	21 91       	ld	r18, Z+
     cda:	2d 30       	cpi	r18, 0x0D	; 13
     cdc:	19 f0       	breq	.+6      	; 0xce4 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x62>
     cde:	20 81       	ld	r18, Z
     ce0:	2a 30       	cpi	r18, 0x0A	; 10
     ce2:	b9 f7       	brne	.-18     	; 0xcd2 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x50>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:753
    i++;
  }

  if(i!=_recv_buff_idx-2){
     ce4:	fe 01       	movw	r30, r28
     ce6:	e0 58       	subi	r30, 0x80	; 128
     ce8:	fe 4f       	sbci	r31, 0xFE	; 254
     cea:	20 81       	ld	r18, Z
     cec:	31 81       	ldd	r19, Z+1	; 0x01
     cee:	22 50       	subi	r18, 0x02	; 2
     cf0:	31 09       	sbc	r19, r1
     cf2:	24 17       	cp	r18, r20
     cf4:	35 07       	cpc	r19, r21
     cf6:	39 f5       	brne	.+78     	; 0xd46 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xc4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:757
    return 3;
  }

  _rsp_buff_idx=i-start_idx;
     cf8:	48 1b       	sub	r20, r24
     cfa:	59 0b       	sbc	r21, r25
     cfc:	7e 01       	movw	r14, r28
     cfe:	8e e7       	ldi	r24, 0x7E	; 126
     d00:	e8 1a       	sub	r14, r24
     d02:	8e ef       	ldi	r24, 0xFE	; 254
     d04:	f8 0a       	sbc	r15, r24
     d06:	f7 01       	movw	r30, r14
     d08:	51 83       	std	Z+1, r21	; 0x01
     d0a:	40 83       	st	Z, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:758
  _rsp_buff_state=BUFF_USED;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	8d 93       	st	X+, r24
     d12:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:760

  strncpy(_rsp_buff, _recv_buff+start_idx, _rsp_buff_idx);
     d14:	ce 01       	movw	r24, r28
     d16:	80 58       	subi	r24, 0x80	; 128
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	0e 94 ef 1b 	call	0x37de	; 0x37de <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:762

  _clear_recv_buff();
     d1e:	ce 01       	movw	r24, r28
     d20:	b6 de       	rcall	.-660    	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:764

  *rsp_len=_rsp_buff_idx;
     d22:	f7 01       	movw	r30, r14
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	f8 01       	movw	r30, r16
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:765
  return 0;
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	80 e0       	ldi	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:766
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:739
    return 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	f6 cf       	rjmp	.-20     	; 0xd32 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xb0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:754
    return 3;
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	f3 cf       	rjmp	.-26     	; 0xd32 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xb0>

00000d4c <Gsm_Ard::_get_rsp(char**)>:
_ZN7Gsm_Ard8_get_rspEPPc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:769


int Gsm_Ard::_get_rsp(char** rsp){
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ec 01       	movw	r28, r24
     d52:	fb 01       	movw	r30, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:770
  if(_rsp_buff_state!=BUFF_USED){
     d54:	dc 01       	movw	r26, r24
     d56:	a6 57       	subi	r26, 0x76	; 118
     d58:	be 4f       	sbci	r27, 0xFE	; 254
     d5a:	8d 91       	ld	r24, X+
     d5c:	9c 91       	ld	r25, X
     d5e:	11 97       	sbiw	r26, 0x01	; 1
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	89 f4       	brne	.+34     	; 0xd86 <Gsm_Ard::_get_rsp(char**)+0x3a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:773
    return 1;
  }
  strncpy(*rsp, _rsp_buff, _rsp_buff_idx);
     d64:	18 97       	sbiw	r26, 0x08	; 8
     d66:	4d 91       	ld	r20, X+
     d68:	5c 91       	ld	r21, X
     d6a:	be 01       	movw	r22, r28
     d6c:	60 58       	subi	r22, 0x80	; 128
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	0e 94 ef 1b 	call	0x37de	; 0x37de <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:774
  _clear_rsp_buff();
     d78:	ce 01       	movw	r24, r28
     d7a:	99 de       	rcall	.-718    	; 0xaae <Gsm_Ard::_clear_rsp_buff()>
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	80 e0       	ldi	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:776
  return 0;
}
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:771
    return 1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	fa cf       	rjmp	.-12     	; 0xd80 <Gsm_Ard::_get_rsp(char**)+0x34>

00000d8c <Gsm_Ard::get_gsm_state()>:
_ZN7Gsm_Ard13get_gsm_stateEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:788
  _ss.write(CR_CHAR);
  _ss.write(NL_CHAR);
}

GSM_STATE Gsm_Ard::get_gsm_state(){
  return _gsm_state;
     d8c:	8a 57       	subi	r24, 0x7A	; 122
     d8e:	9e 4f       	sbci	r25, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:789
}
     d90:	fc 01       	movw	r30, r24
     d92:	80 81       	ld	r24, Z
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	08 95       	ret

00000d98 <Gsm_Ard::get_socket_rsp(char**)>:
_ZN7Gsm_Ard14get_socket_rspEPPc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:817
  }

  return 0;
}

int Gsm_Ard::get_socket_rsp(char** data){
     d98:	8f 92       	push	r8
     d9a:	9f 92       	push	r9
     d9c:	af 92       	push	r10
     d9e:	bf 92       	push	r11
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	ec 01       	movw	r28, r24
     db2:	4b 01       	movw	r8, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:818
  if(_sock_buff_state!=BUFF_USED){
     db4:	fc 01       	movw	r30, r24
     db6:	e4 57       	subi	r30, 0x74	; 116
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	80 81       	ld	r24, Z
     dbc:	91 81       	ldd	r25, Z+1	; 0x01
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	79 f5       	brne	.+94     	; 0xe20 <Gsm_Ard::get_socket_rsp(char**)+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:829
  //   Serial.print((uint8_t) _sock_buff[i]);
  //   Serial.print('-');
  //   Serial.println((char)_sock_buff[i]);
  // }
  // Serial.println();
  dbg_print_buffer(__FILE__, __LINE__, __func__, "SOCKET BUFFER", _sock_buff,
     dc2:	6e 01       	movw	r12, r28
     dc4:	d3 94       	inc	r13
     dc6:	5e 01       	movw	r10, r28
     dc8:	ec e7       	ldi	r30, 0x7C	; 124
     dca:	ae 1a       	sub	r10, r30
     dcc:	ee ef       	ldi	r30, 0xFE	; 254
     dce:	be 0a       	sbc	r11, r30
     dd0:	f5 01       	movw	r30, r10
     dd2:	e0 80       	ld	r14, Z
     dd4:	f1 80       	ldd	r15, Z+1	; 0x01
     dd6:	86 01       	movw	r16, r12
     dd8:	21 e5       	ldi	r18, 0x51	; 81
     dda:	32 e0       	ldi	r19, 0x02	; 2
     ddc:	47 ec       	ldi	r20, 0xC7	; 199
     dde:	52 e0       	ldi	r21, 0x02	; 2
     de0:	6d e3       	ldi	r22, 0x3D	; 61
     de2:	73 e0       	ldi	r23, 0x03	; 3
     de4:	8f e5       	ldi	r24, 0x5F	; 95
     de6:	92 e0       	ldi	r25, 0x02	; 2
     de8:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:832
    _sock_buff_idx);

  memcpy(*data, _sock_buff, _sock_buff_idx);
     dec:	f5 01       	movw	r30, r10
     dee:	40 81       	ld	r20, Z
     df0:	51 81       	ldd	r21, Z+1	; 0x01
     df2:	b6 01       	movw	r22, r12
     df4:	f4 01       	movw	r30, r8
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <memcpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:833
  _clear_sock_buff();
     dfe:	ce 01       	movw	r24, r28
     e00:	68 de       	rcall	.-816    	; 0xad2 <Gsm_Ard::_clear_sock_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:835

  return 0;
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	80 e0       	ldi	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:836
}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	df 90       	pop	r13
     e14:	cf 90       	pop	r12
     e16:	bf 90       	pop	r11
     e18:	af 90       	pop	r10
     e1a:	9f 90       	pop	r9
     e1c:	8f 90       	pop	r8
     e1e:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:819
    return 1;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	f0 cf       	rjmp	.-32     	; 0xe06 <Gsm_Ard::get_socket_rsp(char**)+0x6e>

00000e26 <Gsm_Ard::_recv_string(int, int)>:
_ZN7Gsm_Ard12_recv_stringEii():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:535
int Gsm_Ard::_recv_string(int wait_period, int max_nl){
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	ec 01       	movw	r28, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	5a 01       	movw	r10, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:536
  if(_recv_buff_state!=BUFF_READY){
     e50:	1e 01       	movw	r2, r28
     e52:	28 e7       	ldi	r18, 0x78	; 120
     e54:	22 1a       	sub	r2, r18
     e56:	2e ef       	ldi	r18, 0xFE	; 254
     e58:	32 0a       	sbc	r3, r18
     e5a:	d1 01       	movw	r26, r2
     e5c:	2d 91       	ld	r18, X+
     e5e:	3c 91       	ld	r19, X
     e60:	23 2b       	or	r18, r19
     e62:	09 f0       	breq	.+2      	; 0xe66 <Gsm_Ard::_recv_string(int, int)+0x40>
     e64:	99 c0       	rjmp	.+306    	; 0xf98 <Gsm_Ard::_recv_string(int, int)+0x172>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:543
      delay(wait_period/10);
     e66:	6a e0       	ldi	r22, 0x0A	; 10
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	0e 94 35 1a 	call	0x346a	; 0x346a <__divmodhi4>
     e6e:	2b 01       	movw	r4, r22
     e70:	77 0f       	add	r23, r23
     e72:	66 08       	sbc	r6, r6
     e74:	77 08       	sbc	r7, r7
     e76:	8a e0       	ldi	r24, 0x0A	; 10
     e78:	88 2e       	mov	r8, r24
     e7a:	91 2c       	mov	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:539
  int nl_counter=0;
     e7c:	d1 2c       	mov	r13, r1
     e7e:	c1 2c       	mov	r12, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:542
    if(!_ss.available()){
     e80:	8e 01       	movw	r16, r28
     e82:	02 57       	subi	r16, 0x72	; 114
     e84:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:546
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && nl_counter<max_nl){
     e86:	7e 01       	movw	r14, r28
     e88:	b0 e8       	ldi	r27, 0x80	; 128
     e8a:	eb 1a       	sub	r14, r27
     e8c:	be ef       	ldi	r27, 0xFE	; 254
     e8e:	fb 0a       	sbc	r15, r27
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:541
  for(int i=0;i<10 && nl_counter<max_nl;i++){
     e90:	ca 14       	cp	r12, r10
     e92:	db 04       	cpc	r13, r11
     e94:	6c f4       	brge	.+26     	; 0xeb0 <Gsm_Ard::_recv_string(int, int)+0x8a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:542
    if(!_ss.available()){
     e96:	c8 01       	movw	r24, r16
     e98:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <SoftwareSerial::available()>
     e9c:	89 2b       	or	r24, r25
     e9e:	c9 f5       	brne	.+114    	; 0xf12 <Gsm_Ard::_recv_string(int, int)+0xec>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:543
      delay(wait_period/10);
     ea0:	c3 01       	movw	r24, r6
     ea2:	b2 01       	movw	r22, r4
     ea4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <delay>
     ea8:	e1 e0       	ldi	r30, 0x01	; 1
     eaa:	8e 1a       	sub	r8, r30
     eac:	91 08       	sbc	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:541
  for(int i=0;i<10 && nl_counter<max_nl;i++){
     eae:	81 f7       	brne	.-32     	; 0xe90 <Gsm_Ard::_recv_string(int, int)+0x6a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:564
  dbg_print_buffer(__FILE__, __LINE__, __func__, "RECV_BUFFER", _recv_buff,
     eb0:	4e 01       	movw	r8, r28
     eb2:	f0 e8       	ldi	r31, 0x80	; 128
     eb4:	8f 1a       	sub	r8, r31
     eb6:	fe ef       	ldi	r31, 0xFE	; 254
     eb8:	9f 0a       	sbc	r9, r31
     eba:	d4 01       	movw	r26, r8
     ebc:	ed 90       	ld	r14, X+
     ebe:	fc 90       	ld	r15, X
     ec0:	8e 01       	movw	r16, r28
     ec2:	26 e9       	ldi	r18, 0x96	; 150
     ec4:	32 e0       	ldi	r19, 0x02	; 2
     ec6:	43 ee       	ldi	r20, 0xE3	; 227
     ec8:	52 e0       	ldi	r21, 0x02	; 2
     eca:	64 e3       	ldi	r22, 0x34	; 52
     ecc:	72 e0       	ldi	r23, 0x02	; 2
     ece:	8f e5       	ldi	r24, 0x5F	; 95
     ed0:	92 e0       	ldi	r25, 0x02	; 2
     ed2:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:568
  if(_recv_buff_idx==RECV_BUFF_LEN){
     ed6:	f4 01       	movw	r30, r8
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	80 38       	cpi	r24, 0x80	; 128
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f0       	breq	.+2      	; 0xee4 <Gsm_Ard::_recv_string(int, int)+0xbe>
     ee2:	43 c0       	rjmp	.+134    	; 0xf6a <Gsm_Ard::_recv_string(int, int)+0x144>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:569
    _clear_recv_buff();
     ee4:	ce 01       	movw	r24, r28
     ee6:	d3 dd       	rcall	.-1114   	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:570
    return 2;
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:582
}
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	7f 90       	pop	r7
     f06:	6f 90       	pop	r6
     f08:	5f 90       	pop	r5
     f0a:	4f 90       	pop	r4
     f0c:	3f 90       	pop	r3
     f0e:	2f 90       	pop	r2
     f10:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:546
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && nl_counter<max_nl){
     f12:	c8 01       	movw	r24, r16
     f14:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <SoftwareSerial::available()>
     f18:	89 2b       	or	r24, r25
     f1a:	31 f2       	breq	.-116    	; 0xea8 <Gsm_Ard::_recv_string(int, int)+0x82>
     f1c:	f7 01       	movw	r30, r14
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	80 38       	cpi	r24, 0x80	; 128
     f24:	91 05       	cpc	r25, r1
     f26:	08 f0       	brcs	.+2      	; 0xf2a <Gsm_Ard::_recv_string(int, int)+0x104>
     f28:	bf cf       	rjmp	.-130    	; 0xea8 <Gsm_Ard::_recv_string(int, int)+0x82>
     f2a:	ca 14       	cp	r12, r10
     f2c:	db 04       	cpc	r13, r11
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <Gsm_Ard::_recv_string(int, int)+0x10c>
     f30:	bb cf       	rjmp	.-138    	; 0xea8 <Gsm_Ard::_recv_string(int, int)+0x82>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:547
        _recv_buff[_recv_buff_idx++]=_ss.read();
     f32:	c8 01       	movw	r24, r16
     f34:	0e 94 54 13 	call	0x26a8	; 0x26a8 <SoftwareSerial::read()>
     f38:	d7 01       	movw	r26, r14
     f3a:	ed 91       	ld	r30, X+
     f3c:	fc 91       	ld	r31, X
     f3e:	11 97       	sbiw	r26, 0x01	; 1
     f40:	9f 01       	movw	r18, r30
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	2d 93       	st	X+, r18
     f48:	3c 93       	st	X, r19
     f4a:	ec 0f       	add	r30, r28
     f4c:	fd 1f       	adc	r31, r29
     f4e:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:548
        if(_recv_buff_idx>1 && _recv_buff[_recv_buff_idx-1]==NL_CHAR && _recv_buff[_recv_buff_idx-2]==CR_CHAR){
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	f0 f2       	brcs	.-68     	; 0xf12 <Gsm_Ard::_recv_string(int, int)+0xec>
     f56:	8a 30       	cpi	r24, 0x0A	; 10
     f58:	e1 f6       	brne	.-72     	; 0xf12 <Gsm_Ard::_recv_string(int, int)+0xec>
     f5a:	31 97       	sbiw	r30, 0x01	; 1
     f5c:	80 81       	ld	r24, Z
     f5e:	8d 30       	cpi	r24, 0x0D	; 13
     f60:	c1 f6       	brne	.-80     	; 0xf12 <Gsm_Ard::_recv_string(int, int)+0xec>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:549
          nl_counter++;
     f62:	bf ef       	ldi	r27, 0xFF	; 255
     f64:	cb 1a       	sub	r12, r27
     f66:	db 0a       	sbc	r13, r27
     f68:	d4 cf       	rjmp	.-88     	; 0xf12 <Gsm_Ard::_recv_string(int, int)+0xec>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:572
  else if(!_recv_buff_idx){
     f6a:	89 2b       	or	r24, r25
     f6c:	29 f4       	brne	.+10     	; 0xf78 <Gsm_Ard::_recv_string(int, int)+0x152>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:573
    _clear_recv_buff();
     f6e:	ce 01       	movw	r24, r28
     f70:	8e dd       	rcall	.-1252   	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:574
    return 3;
     f72:	83 e0       	ldi	r24, 0x03	; 3
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	ba cf       	rjmp	.-140    	; 0xeec <Gsm_Ard::_recv_string(int, int)+0xc6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:576
  else if(nl_counter!=max_nl){
     f78:	ac 14       	cp	r10, r12
     f7a:	bd 04       	cpc	r11, r13
     f7c:	29 f0       	breq	.+10     	; 0xf88 <Gsm_Ard::_recv_string(int, int)+0x162>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:577
    _clear_recv_buff();
     f7e:	ce 01       	movw	r24, r28
     f80:	86 dd       	rcall	.-1268   	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:578
    return 4;
     f82:	84 e0       	ldi	r24, 0x04	; 4
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	b2 cf       	rjmp	.-156    	; 0xeec <Gsm_Ard::_recv_string(int, int)+0xc6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:580
  _recv_buff_state=BUFF_USED;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	d1 01       	movw	r26, r2
     f8e:	8d 93       	st	X+, r24
     f90:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:581
  return 0;
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	aa cf       	rjmp	.-172    	; 0xeec <Gsm_Ard::_recv_string(int, int)+0xc6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:537
    return 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a7 cf       	rjmp	.-178    	; 0xeec <Gsm_Ard::_recv_string(int, int)+0xc6>

00000f9e <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)>:
_ZN7Gsm_Ard16_no_cmd_comp_rspEPKcji():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:497
int Gsm_Ard::_no_cmd_comp_rsp(const char* exp_rsp, const uint16_t exp_rsp_size, int recv_wait_period){
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x12>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x14>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	8c 01       	movw	r16, r24
     fb8:	6b 01       	movw	r12, r22
     fba:	7a 01       	movw	r14, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:501
  n=_recv_string(recv_wait_period,2);
     fbc:	42 e0       	ldi	r20, 0x02	; 2
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	b9 01       	movw	r22, r18
     fc2:	31 df       	rcall	.-414    	; 0xe26 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:502
  if(n){
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	b1 f0       	breq	.+44     	; 0xff4 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x56>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:503
    return 1+n*10;
     fc8:	2a e0       	ldi	r18, 0x0A	; 10
     fca:	28 9f       	mul	r18, r24
     fcc:	80 01       	movw	r16, r0
     fce:	29 9f       	mul	r18, r25
     fd0:	10 0d       	add	r17, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	0f 5f       	subi	r16, 0xFF	; 255
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:527
}
     fd8:	c8 01       	movw	r24, r16
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	df 90       	pop	r13
     ff0:	cf 90       	pop	r12
     ff2:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:507
  n=_fetch_rsp_wo_cmd(&rsp_len);
     ff4:	be 01       	movw	r22, r28
     ff6:	6d 5f       	subi	r22, 0xFD	; 253
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	c8 01       	movw	r24, r16
     ffc:	42 de       	rcall	.-892    	; 0xc82 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:508
  if(n){
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	49 f0       	breq	.+18     	; 0x1014 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x76>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:509
    return 2+n*10;
    1002:	2a e0       	ldi	r18, 0x0A	; 10
    1004:	28 9f       	mul	r18, r24
    1006:	80 01       	movw	r16, r0
    1008:	29 9f       	mul	r18, r25
    100a:	10 0d       	add	r17, r0
    100c:	11 24       	eor	r1, r1
    100e:	0e 5f       	subi	r16, 0xFE	; 254
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	e2 cf       	rjmp	.-60     	; 0xfd8 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x3a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:512
  rsp=new char[rsp_len];
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:513
  n=_get_rsp(&rsp);
    1020:	be 01       	movw	r22, r28
    1022:	6f 5f       	subi	r22, 0xFF	; 255
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	c8 01       	movw	r24, r16
    1028:	91 de       	rcall	.-734    	; 0xd4c <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:514
  if(n){
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	49 f0       	breq	.+18     	; 0x1040 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0xa2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:515
    return 3+n*10;
    102e:	2a e0       	ldi	r18, 0x0A	; 10
    1030:	28 9f       	mul	r18, r24
    1032:	80 01       	movw	r16, r0
    1034:	29 9f       	mul	r18, r25
    1036:	10 0d       	add	r17, r0
    1038:	11 24       	eor	r1, r1
    103a:	0d 5f       	subi	r16, 0xFD	; 253
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
    103e:	cc cf       	rjmp	.-104    	; 0xfd8 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x3a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:518
  char* exp_rsp_buffer = new char[exp_rsp_size];
    1040:	c7 01       	movw	r24, r14
    1042:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
    1046:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:519
  strcpy_P(exp_rsp_buffer, exp_rsp);
    1048:	b6 01       	movw	r22, r12
    104a:	0e 94 ca 1b 	call	0x3794	; 0x3794 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:521
  if(!strncmp(rsp, exp_rsp_buffer, rsp_len)) ret=0;
    104e:	4b 81       	ldd	r20, Y+3	; 0x03
    1050:	5c 81       	ldd	r21, Y+4	; 0x04
    1052:	b7 01       	movw	r22, r14
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	9a 81       	ldd	r25, Y+2	; 0x02
    1058:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <strncmp>
    105c:	8c 01       	movw	r16, r24
    105e:	89 2b       	or	r24, r25
    1060:	11 f0       	breq	.+4      	; 0x1066 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0xc8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:522
  else ret=4;
    1062:	04 e0       	ldi	r16, 0x04	; 4
    1064:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:524
  delete[] exp_rsp_buffer;
    1066:	e1 14       	cp	r14, r1
    1068:	f1 04       	cpc	r15, r1
    106a:	19 f0       	breq	.+6      	; 0x1072 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0xd4>
    106c:	c7 01       	movw	r24, r14
    106e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:525
  delete[] rsp;
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	09 f4       	brne	.+2      	; 0x107c <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0xde>
    107a:	ae cf       	rjmp	.-164    	; 0xfd8 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x3a>
    107c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
    1080:	ab cf       	rjmp	.-170    	; 0xfd8 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x3a>

00001082 <Gsm_Ard::_recv_socket(int)>:
_ZN7Gsm_Ard12_recv_socketEi():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:584
int Gsm_Ard::_recv_socket(int wait_period){
    1082:	2f 92       	push	r2
    1084:	3f 92       	push	r3
    1086:	4f 92       	push	r4
    1088:	5f 92       	push	r5
    108a:	6f 92       	push	r6
    108c:	7f 92       	push	r7
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <Gsm_Ard::_recv_socket(int)+0x26>
    10a8:	1f 92       	push	r1
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	cb 01       	movw	r24, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:585
  if(_recv_buff_state!=BUFF_READY){
    10b4:	6a 80       	ldd	r6, Y+2	; 0x02
    10b6:	7b 80       	ldd	r7, Y+3	; 0x03
    10b8:	28 e7       	ldi	r18, 0x78	; 120
    10ba:	62 1a       	sub	r6, r18
    10bc:	2e ef       	ldi	r18, 0xFE	; 254
    10be:	72 0a       	sbc	r7, r18
    10c0:	f3 01       	movw	r30, r6
    10c2:	20 81       	ld	r18, Z
    10c4:	31 81       	ldd	r19, Z+1	; 0x01
    10c6:	23 2b       	or	r18, r19
    10c8:	09 f0       	breq	.+2      	; 0x10cc <Gsm_Ard::_recv_socket(int)+0x4a>
    10ca:	d1 c0       	rjmp	.+418    	; 0x126e <Gsm_Ard::_recv_socket(int)+0x1ec>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:588
  if(_gsm_state!=GSM_TCP_STATE){
    10cc:	ea 81       	ldd	r30, Y+2	; 0x02
    10ce:	fb 81       	ldd	r31, Y+3	; 0x03
    10d0:	ea 57       	subi	r30, 0x7A	; 122
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	20 81       	ld	r18, Z
    10d6:	31 81       	ldd	r19, Z+1	; 0x01
    10d8:	24 30       	cpi	r18, 0x04	; 4
    10da:	31 05       	cpc	r19, r1
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <Gsm_Ard::_recv_socket(int)+0x5e>
    10de:	ca c0       	rjmp	.+404    	; 0x1274 <Gsm_Ard::_recv_socket(int)+0x1f2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:599
      delay(wait_period/10);
    10e0:	6a e0       	ldi	r22, 0x0A	; 10
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	0e 94 35 1a 	call	0x346a	; 0x346a <__divmodhi4>
    10e8:	4b 01       	movw	r8, r22
    10ea:	77 0f       	add	r23, r23
    10ec:	aa 08       	sbc	r10, r10
    10ee:	bb 08       	sbc	r11, r11
    10f0:	8a e0       	ldi	r24, 0x0A	; 10
    10f2:	e8 2e       	mov	r14, r24
    10f4:	f1 2c       	mov	r15, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:595
  uint8_t data_read=0;
    10f6:	41 2c       	mov	r4, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:594
  uint8_t trans_size=0;
    10f8:	31 2c       	mov	r3, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:591
  bool size_set=false;
    10fa:	19 82       	std	Y+1, r1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:592
  bool ready_for_confirm=false;
    10fc:	51 2c       	mov	r5, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:598
    if(!_ss.available()){
    10fe:	0a 81       	ldd	r16, Y+2	; 0x02
    1100:	1b 81       	ldd	r17, Y+3	; 0x03
    1102:	02 57       	subi	r16, 0x72	; 114
    1104:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:628
        while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && data_read<trans_size){
    1106:	ca 80       	ldd	r12, Y+2	; 0x02
    1108:	db 80       	ldd	r13, Y+3	; 0x03
    110a:	f0 e8       	ldi	r31, 0x80	; 128
    110c:	cf 1a       	sub	r12, r31
    110e:	fe ef       	ldi	r31, 0xFE	; 254
    1110:	df 0a       	sbc	r13, r31
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:598
    if(!_ss.available()){
    1112:	c8 01       	movw	r24, r16
    1114:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <SoftwareSerial::available()>
    1118:	89 2b       	or	r24, r25
    111a:	69 f5       	brne	.+90     	; 0x1176 <Gsm_Ard::_recv_socket(int)+0xf4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:599
      delay(wait_period/10);
    111c:	c5 01       	movw	r24, r10
    111e:	b4 01       	movw	r22, r8
    1120:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <delay>
    1124:	21 2c       	mov	r2, r1
    1126:	21 e0       	ldi	r18, 0x01	; 1
    1128:	e2 1a       	sub	r14, r18
    112a:	f1 08       	sbc	r15, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:597
  for(int i=0;i<10 && !done;i++){
    112c:	11 f0       	breq	.+4      	; 0x1132 <Gsm_Ard::_recv_socket(int)+0xb0>
    112e:	22 20       	and	r2, r2
    1130:	81 f3       	breq	.-32     	; 0x1112 <Gsm_Ard::_recv_socket(int)+0x90>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:648
  dbg_print_buffer(__FILE__, __LINE__, __func__, "RECV_BUFF", _recv_buff,
    1132:	ca 80       	ldd	r12, Y+2	; 0x02
    1134:	db 80       	ldd	r13, Y+3	; 0x03
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	c4 1a       	sub	r12, r20
    113a:	4e ef       	ldi	r20, 0xFE	; 254
    113c:	d4 0a       	sbc	r13, r20
    113e:	f6 01       	movw	r30, r12
    1140:	e0 80       	ld	r14, Z
    1142:	f1 80       	ldd	r15, Z+1	; 0x01
    1144:	0a 81       	ldd	r16, Y+2	; 0x02
    1146:	1b 81       	ldd	r17, Y+3	; 0x03
    1148:	22 ea       	ldi	r18, 0xA2	; 162
    114a:	32 e0       	ldi	r19, 0x02	; 2
    114c:	46 ed       	ldi	r20, 0xD6	; 214
    114e:	52 e0       	ldi	r21, 0x02	; 2
    1150:	68 e8       	ldi	r22, 0x88	; 136
    1152:	72 e0       	ldi	r23, 0x02	; 2
    1154:	8f e5       	ldi	r24, 0x5F	; 95
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:652
  if(_recv_buff_idx==RECV_BUFF_LEN){
    115c:	f6 01       	movw	r30, r12
    115e:	80 81       	ld	r24, Z
    1160:	91 81       	ldd	r25, Z+1	; 0x01
    1162:	80 38       	cpi	r24, 0x80	; 128
    1164:	91 05       	cpc	r25, r1
    1166:	09 f0       	breq	.+2      	; 0x116a <Gsm_Ard::_recv_socket(int)+0xe8>
    1168:	6a c0       	rjmp	.+212    	; 0x123e <Gsm_Ard::_recv_socket(int)+0x1bc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:653
    _clear_recv_buff();
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	9b 81       	ldd	r25, Y+3	; 0x03
    116e:	8f dc       	rcall	.-1762   	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:654
    return 4;
    1170:	84 e0       	ldi	r24, 0x04	; 4
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	1d c0       	rjmp	.+58     	; 0x11b0 <Gsm_Ard::_recv_socket(int)+0x12e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:602
      if(ready_for_confirm){
    1176:	55 20       	and	r5, r5
    1178:	89 f1       	breq	.+98     	; 0x11dc <Gsm_Ard::_recv_socket(int)+0x15a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:603
        if(_ss.read()!=0xff){
    117a:	c8 01       	movw	r24, r16
    117c:	0e 94 54 13 	call	0x26a8	; 0x26a8 <SoftwareSerial::read()>
    1180:	8f 3f       	cpi	r24, 0xFF	; 255
    1182:	91 05       	cpc	r25, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <Gsm_Ard::_recv_socket(int)+0x106>
    1186:	59 c0       	rjmp	.+178    	; 0x123a <Gsm_Ard::_recv_socket(int)+0x1b8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:614
          dbg_print_buffer(__FILE__, __LINE__, __func__, "RECV_BUFFER", _recv_buff,
    1188:	ea 81       	ldd	r30, Y+2	; 0x02
    118a:	fb 81       	ldd	r31, Y+3	; 0x03
    118c:	e0 58       	subi	r30, 0x80	; 128
    118e:	fe 4f       	sbci	r31, 0xFE	; 254
    1190:	e0 80       	ld	r14, Z
    1192:	f1 80       	ldd	r15, Z+1	; 0x01
    1194:	0a 81       	ldd	r16, Y+2	; 0x02
    1196:	1b 81       	ldd	r17, Y+3	; 0x03
    1198:	26 e9       	ldi	r18, 0x96	; 150
    119a:	32 e0       	ldi	r19, 0x02	; 2
    119c:	46 ed       	ldi	r20, 0xD6	; 214
    119e:	52 e0       	ldi	r21, 0x02	; 2
    11a0:	66 e6       	ldi	r22, 0x66	; 102
    11a2:	72 e0       	ldi	r23, 0x02	; 2
    11a4:	8f e5       	ldi	r24, 0x5F	; 95
    11a6:	92 e0       	ldi	r25, 0x02	; 2
    11a8:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:617
          return 3;
    11ac:	83 e0       	ldi	r24, 0x03	; 3
    11ae:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:666
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	bf 90       	pop	r11
    11c8:	af 90       	pop	r10
    11ca:	9f 90       	pop	r9
    11cc:	8f 90       	pop	r8
    11ce:	7f 90       	pop	r7
    11d0:	6f 90       	pop	r6
    11d2:	5f 90       	pop	r5
    11d4:	4f 90       	pop	r4
    11d6:	3f 90       	pop	r3
    11d8:	2f 90       	pop	r2
    11da:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:624
        if(!size_set){
    11dc:	29 81       	ldd	r18, Y+1	; 0x01
    11de:	21 11       	cpse	r18, r1
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <Gsm_Ard::_recv_socket(int)+0x168>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:625
          trans_size=(uint8_t) _ss.read();
    11e2:	c8 01       	movw	r24, r16
    11e4:	0e 94 54 13 	call	0x26a8	; 0x26a8 <SoftwareSerial::read()>
    11e8:	38 2e       	mov	r3, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:628
        while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && data_read<trans_size){
    11ea:	c8 01       	movw	r24, r16
    11ec:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <SoftwareSerial::available()>
    11f0:	89 2b       	or	r24, r25
    11f2:	d9 f0       	breq	.+54     	; 0x122a <Gsm_Ard::_recv_socket(int)+0x1a8>
    11f4:	f6 01       	movw	r30, r12
    11f6:	80 81       	ld	r24, Z
    11f8:	91 81       	ldd	r25, Z+1	; 0x01
    11fa:	80 38       	cpi	r24, 0x80	; 128
    11fc:	91 05       	cpc	r25, r1
    11fe:	a8 f4       	brcc	.+42     	; 0x122a <Gsm_Ard::_recv_socket(int)+0x1a8>
    1200:	43 14       	cp	r4, r3
    1202:	98 f4       	brcc	.+38     	; 0x122a <Gsm_Ard::_recv_socket(int)+0x1a8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:629
          _recv_buff[_recv_buff_idx++]=_ss.read();
    1204:	c8 01       	movw	r24, r16
    1206:	0e 94 54 13 	call	0x26a8	; 0x26a8 <SoftwareSerial::read()>
    120a:	f6 01       	movw	r30, r12
    120c:	20 81       	ld	r18, Z
    120e:	31 81       	ldd	r19, Z+1	; 0x01
    1210:	a9 01       	movw	r20, r18
    1212:	4f 5f       	subi	r20, 0xFF	; 255
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	51 83       	std	Z+1, r21	; 0x01
    1218:	40 83       	st	Z, r20
    121a:	4a 81       	ldd	r20, Y+2	; 0x02
    121c:	5b 81       	ldd	r21, Y+3	; 0x03
    121e:	24 0f       	add	r18, r20
    1220:	35 1f       	adc	r19, r21
    1222:	f9 01       	movw	r30, r18
    1224:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:630
          data_read++;
    1226:	43 94       	inc	r4
    1228:	e0 cf       	rjmp	.-64     	; 0x11ea <Gsm_Ard::_recv_socket(int)+0x168>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:632
        if(data_read==trans_size){
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	43 10       	cpse	r4, r3
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	21 2c       	mov	r2, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:633
          ready_for_confirm=true;
    1232:	58 2e       	mov	r5, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:632
        if(data_read==trans_size){
    1234:	f1 e0       	ldi	r31, 0x01	; 1
    1236:	f9 83       	std	Y+1, r31	; 0x01
    1238:	76 cf       	rjmp	.-276    	; 0x1126 <Gsm_Ard::_recv_socket(int)+0xa4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:620
          done=true;
    123a:	25 2c       	mov	r2, r5
    123c:	74 cf       	rjmp	.-280    	; 0x1126 <Gsm_Ard::_recv_socket(int)+0xa4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:656
  else if(!_recv_buff_idx){
    123e:	89 2b       	or	r24, r25
    1240:	31 f4       	brne	.+12     	; 0x124e <Gsm_Ard::_recv_socket(int)+0x1cc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:657
    _clear_recv_buff();
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	9b 81       	ldd	r25, Y+3	; 0x03
    1246:	23 dc       	rcall	.-1978   	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:658
    return 5;
    1248:	85 e0       	ldi	r24, 0x05	; 5
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	b1 cf       	rjmp	.-158    	; 0x11b0 <Gsm_Ard::_recv_socket(int)+0x12e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:660
  else if(!done){
    124e:	21 10       	cpse	r2, r1
    1250:	06 c0       	rjmp	.+12     	; 0x125e <Gsm_Ard::_recv_socket(int)+0x1dc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:661
    _clear_recv_buff();
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	9b 81       	ldd	r25, Y+3	; 0x03
    1256:	1b dc       	rcall	.-1994   	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:662
    return 6;
    1258:	86 e0       	ldi	r24, 0x06	; 6
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a9 cf       	rjmp	.-174    	; 0x11b0 <Gsm_Ard::_recv_socket(int)+0x12e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:664
  _recv_buff_state=BUFF_USED;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	f3 01       	movw	r30, r6
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:665
  return 0;
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	a1 cf       	rjmp	.-190    	; 0x11b0 <Gsm_Ard::_recv_socket(int)+0x12e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:586
    return 1;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9e cf       	rjmp	.-196    	; 0x11b0 <Gsm_Ard::_recv_socket(int)+0x12e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:589
    return 2;
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9b cf       	rjmp	.-202    	; 0x11b0 <Gsm_Ard::_recv_socket(int)+0x12e>

0000127a <Gsm_Ard::_recv_tcp_data(unsigned int*)>:
_ZN7Gsm_Ard14_recv_tcp_dataEPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:350
int Gsm_Ard::_recv_tcp_data(unsigned int* data_len){
    127a:	af 92       	push	r10
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	ec 01       	movw	r28, r24
    1290:	5b 01       	movw	r10, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:352
  if(_sock_buff_state==BUFF_USED){
    1292:	7c 01       	movw	r14, r24
    1294:	84 e7       	ldi	r24, 0x74	; 116
    1296:	e8 1a       	sub	r14, r24
    1298:	8e ef       	ldi	r24, 0xFE	; 254
    129a:	f8 0a       	sbc	r15, r24
    129c:	f7 01       	movw	r30, r14
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:353
    return 1;
    12a2:	01 e0       	ldi	r16, 0x01	; 1
    12a4:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:352
  if(_sock_buff_state==BUFF_USED){
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	81 f0       	breq	.+32     	; 0x12ca <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x50>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:356
  n=_recv_socket(10000);
    12aa:	60 e1       	ldi	r22, 0x10	; 16
    12ac:	77 e2       	ldi	r23, 0x27	; 39
    12ae:	ce 01       	movw	r24, r28
    12b0:	e8 de       	rcall	.-560    	; 0x1082 <Gsm_Ard::_recv_socket(int)>
    12b2:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:357
  if(n){
    12b4:	89 2b       	or	r24, r25
    12b6:	a9 f0       	breq	.+42     	; 0x12e2 <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x68>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:358
    return 2+10*n;
    12b8:	2a e0       	ldi	r18, 0x0A	; 10
    12ba:	20 9f       	mul	r18, r16
    12bc:	c0 01       	movw	r24, r0
    12be:	21 9f       	mul	r18, r17
    12c0:	90 0d       	add	r25, r0
    12c2:	11 24       	eor	r1, r1
    12c4:	8c 01       	movw	r16, r24
    12c6:	0e 5f       	subi	r16, 0xFE	; 254
    12c8:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:368
}
    12ca:	c8 01       	movw	r24, r16
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	df 90       	pop	r13
    12da:	cf 90       	pop	r12
    12dc:	bf 90       	pop	r11
    12de:	af 90       	pop	r10
    12e0:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:361
  _sock_buff_state=BUFF_USED;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	f7 01       	movw	r30, r14
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:362
  memcpy(_sock_buff, _recv_buff, _recv_buff_idx);
    12ec:	6e 01       	movw	r12, r28
    12ee:	f0 e8       	ldi	r31, 0x80	; 128
    12f0:	cf 1a       	sub	r12, r31
    12f2:	fe ef       	ldi	r31, 0xFE	; 254
    12f4:	df 0a       	sbc	r13, r31
    12f6:	f6 01       	movw	r30, r12
    12f8:	40 81       	ld	r20, Z
    12fa:	51 81       	ldd	r21, Z+1	; 0x01
    12fc:	be 01       	movw	r22, r28
    12fe:	ce 01       	movw	r24, r28
    1300:	93 95       	inc	r25
    1302:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <memcpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:363
  _sock_buff_idx=_recv_buff_idx;
    1306:	7e 01       	movw	r14, r28
    1308:	fc e7       	ldi	r31, 0x7C	; 124
    130a:	ef 1a       	sub	r14, r31
    130c:	fe ef       	ldi	r31, 0xFE	; 254
    130e:	ff 0a       	sbc	r15, r31
    1310:	f6 01       	movw	r30, r12
    1312:	80 81       	ld	r24, Z
    1314:	91 81       	ldd	r25, Z+1	; 0x01
    1316:	f7 01       	movw	r30, r14
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:365
  _clear_recv_buff();
    131c:	ce 01       	movw	r24, r28
    131e:	b7 db       	rcall	.-2194   	; 0xa8e <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:366
  *data_len=_sock_buff_idx;
    1320:	f7 01       	movw	r30, r14
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	f5 01       	movw	r30, r10
    1328:	91 83       	std	Z+1, r25	; 0x01
    132a:	80 83       	st	Z, r24
    132c:	ce cf       	rjmp	.-100    	; 0x12ca <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x50>

0000132e <Gsm_Ard::_write_cmd(char const*)>:
_ZN7Gsm_Ard10_write_cmdEPKc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:778
void Gsm_Ard::_write_cmd(const char* cmd){
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:779
  unsigned int cmd_len=strlen(cmd);
    133a:	fb 01       	movw	r30, r22
    133c:	01 90       	ld	r0, Z+
    133e:	00 20       	and	r0, r0
    1340:	e9 f7       	brne	.-6      	; 0x133c <Gsm_Ard::_write_cmd(char const*)+0xe>
    1342:	eb 01       	movw	r28, r22
    1344:	9f 01       	movw	r18, r30
    1346:	21 50       	subi	r18, 0x01	; 1
    1348:	31 09       	sbc	r19, r1
    134a:	79 01       	movw	r14, r18
    134c:	8c 01       	movw	r16, r24
    134e:	02 57       	subi	r16, 0x72	; 114
    1350:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:780
  for(unsigned int i=0;i<cmd_len;i++){
    1352:	ce 15       	cp	r28, r14
    1354:	df 05       	cpc	r29, r15
    1356:	29 f0       	breq	.+10     	; 0x1362 <Gsm_Ard::_write_cmd(char const*)+0x34>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:781
    _ss.write(cmd[i]);
    1358:	69 91       	ld	r22, Y+
    135a:	c8 01       	movw	r24, r16
    135c:	0e 94 75 13 	call	0x26ea	; 0x26ea <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:780
  for(unsigned int i=0;i<cmd_len;i++){
    1360:	f8 cf       	rjmp	.-16     	; 0x1352 <Gsm_Ard::_write_cmd(char const*)+0x24>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:783
  _ss.write(CR_CHAR);
    1362:	6d e0       	ldi	r22, 0x0D	; 13
    1364:	c8 01       	movw	r24, r16
    1366:	0e 94 75 13 	call	0x26ea	; 0x26ea <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:784
  _ss.write(NL_CHAR);
    136a:	6a e0       	ldi	r22, 0x0A	; 10
    136c:	c8 01       	movw	r24, r16
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:785
}
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:784
  _ss.write(NL_CHAR);
    137a:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <SoftwareSerial::write(unsigned char)>

0000137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>:
_ZN7Gsm_Ard18_send_cmd_comp_rspEPKcjS1_ji():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:374
int Gsm_Ard::_send_cmd_comp_rsp(const char* cmd, const uint16_t cmd_size, const char* exp_rsp, const uint16_t exp_rsp_size, int recv_wait_period){
    137e:	2f 92       	push	r2
    1380:	3f 92       	push	r3
    1382:	4f 92       	push	r4
    1384:	5f 92       	push	r5
    1386:	6f 92       	push	r6
    1388:	7f 92       	push	r7
    138a:	8f 92       	push	r8
    138c:	9f 92       	push	r9
    138e:	af 92       	push	r10
    1390:	bf 92       	push	r11
    1392:	cf 92       	push	r12
    1394:	df 92       	push	r13
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x26>
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x28>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x2a>
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	5c 01       	movw	r10, r24
    13ae:	7e 83       	std	Y+6, r23	; 0x06
    13b0:	6d 83       	std	Y+5, r22	; 0x05
    13b2:	3a 01       	movw	r6, r20
    13b4:	29 01       	movw	r4, r18
    13b6:	17 01       	movw	r2, r14
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:379
  char* cmd_buffer = new char[cmd_size];
    13b8:	ca 01       	movw	r24, r20
    13ba:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
    13be:	6c 01       	movw	r12, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:380
  char* exp_rsp_buffer = new char[exp_rsp_size];
    13c0:	c8 01       	movw	r24, r16
    13c2:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
    13c6:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:381
  strcpy_P(cmd_buffer, cmd);
    13c8:	6d 81       	ldd	r22, Y+5	; 0x05
    13ca:	7e 81       	ldd	r23, Y+6	; 0x06
    13cc:	c6 01       	movw	r24, r12
    13ce:	0e 94 ca 1b 	call	0x3794	; 0x3794 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:382
  strcpy_P(exp_rsp_buffer, exp_rsp);
    13d2:	b2 01       	movw	r22, r4
    13d4:	c4 01       	movw	r24, r8
    13d6:	0e 94 ca 1b 	call	0x3794	; 0x3794 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:384
  while(_ss.available()) _ss.read();
    13da:	85 01       	movw	r16, r10
    13dc:	02 57       	subi	r16, 0x72	; 114
    13de:	1e 4f       	sbci	r17, 0xFE	; 254
    13e0:	c8 01       	movw	r24, r16
    13e2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <SoftwareSerial::available()>
    13e6:	89 2b       	or	r24, r25
    13e8:	21 f0       	breq	.+8      	; 0x13f2 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x74>
    13ea:	c8 01       	movw	r24, r16
    13ec:	0e 94 54 13 	call	0x26a8	; 0x26a8 <SoftwareSerial::read()>
    13f0:	f7 cf       	rjmp	.-18     	; 0x13e0 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x62>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:395
  dbg_print_buffer(__FILE__, __LINE__, __func__, "CMD BUFFER", cmd_buffer, cmd_size);
    13f2:	73 01       	movw	r14, r6
    13f4:	86 01       	movw	r16, r12
    13f6:	2c ea       	ldi	r18, 0xAC	; 172
    13f8:	32 e0       	ldi	r19, 0x02	; 2
    13fa:	4b e0       	ldi	r20, 0x0B	; 11
    13fc:	53 e0       	ldi	r21, 0x03	; 3
    13fe:	6b e8       	ldi	r22, 0x8B	; 139
    1400:	71 e0       	ldi	r23, 0x01	; 1
    1402:	8f e5       	ldi	r24, 0x5F	; 95
    1404:	92 e0       	ldi	r25, 0x02	; 2
    1406:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:398
  _write_cmd(cmd_buffer);
    140a:	b6 01       	movw	r22, r12
    140c:	c5 01       	movw	r24, r10
    140e:	8f df       	rcall	.-226    	; 0x132e <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:399
  n=_recv_string(recv_wait_period);
    1410:	43 e0       	ldi	r20, 0x03	; 3
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	b1 01       	movw	r22, r2
    1416:	c5 01       	movw	r24, r10
    1418:	06 dd       	rcall	.-1524   	; 0xe26 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:400
  if(!n){
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	09 f0       	breq	.+2      	; 0x1420 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xa2>
    141e:	63 c0       	rjmp	.+198    	; 0x14e6 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x168>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:401
    n=_fetch_rsp_from_recv(cmd_buffer, cmd_size, &rsp_len);
    1420:	9e 01       	movw	r18, r28
    1422:	2f 5f       	subi	r18, 0xFF	; 255
    1424:	3f 4f       	sbci	r19, 0xFF	; 255
    1426:	a3 01       	movw	r20, r6
    1428:	b6 01       	movw	r22, r12
    142a:	c5 01       	movw	r24, r10
    142c:	81 db       	rcall	.-2302   	; 0xb30 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:402
    if(!n){
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	09 f0       	breq	.+2      	; 0x1434 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xb6>
    1432:	50 c0       	rjmp	.+160    	; 0x14d4 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x156>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:403
      rsp=new char[rsp_len];
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
    143c:	9c 83       	std	Y+4, r25	; 0x04
    143e:	8b 83       	std	Y+3, r24	; 0x03
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:404
      n=_get_rsp(&rsp);
    1440:	be 01       	movw	r22, r28
    1442:	6d 5f       	subi	r22, 0xFD	; 253
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	c5 01       	movw	r24, r10
    1448:	81 dc       	rcall	.-1790   	; 0xd4c <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:405
      if(n){
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	a1 f1       	breq	.+104    	; 0x14b6 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x138>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:406
        error=2+10*n;
    144e:	2a e0       	ldi	r18, 0x0A	; 10
    1450:	28 9f       	mul	r18, r24
    1452:	80 01       	movw	r16, r0
    1454:	29 9f       	mul	r18, r25
    1456:	10 0d       	add	r17, r0
    1458:	11 24       	eor	r1, r1
    145a:	0e 5f       	subi	r16, 0xFE	; 254
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:429
  delete[] cmd_buffer;
    145e:	c1 14       	cp	r12, r1
    1460:	d1 04       	cpc	r13, r1
    1462:	19 f0       	breq	.+6      	; 0x146a <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xec>
    1464:	c6 01       	movw	r24, r12
    1466:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:430
  delete[] exp_rsp_buffer;
    146a:	81 14       	cp	r8, r1
    146c:	91 04       	cpc	r9, r1
    146e:	19 f0       	breq	.+6      	; 0x1476 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xf8>
    1470:	c4 01       	movw	r24, r8
    1472:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:431
  delete[] rsp;
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	11 f0       	breq	.+4      	; 0x1482 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x104>
    147e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:433
}
    1482:	c8 01       	movw	r24, r16
    1484:	26 96       	adiw	r28, 0x06	; 6
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
    14a0:	bf 90       	pop	r11
    14a2:	af 90       	pop	r10
    14a4:	9f 90       	pop	r9
    14a6:	8f 90       	pop	r8
    14a8:	7f 90       	pop	r7
    14aa:	6f 90       	pop	r6
    14ac:	5f 90       	pop	r5
    14ae:	4f 90       	pop	r4
    14b0:	3f 90       	pop	r3
    14b2:	2f 90       	pop	r2
    14b4:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:409
      if(!strncmp(rsp, exp_rsp_buffer, rsp_len)){
    14b6:	49 81       	ldd	r20, Y+1	; 0x01
    14b8:	5a 81       	ldd	r21, Y+2	; 0x02
    14ba:	b4 01       	movw	r22, r8
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <strncmp>
    14c4:	31 e0       	ldi	r19, 0x01	; 1
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	89 2b       	or	r24, r25
    14ca:	09 f4       	brne	.+2      	; 0x14ce <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x150>
    14cc:	30 e0       	ldi	r19, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:406
        error=2+10*n;
    14ce:	03 2f       	mov	r16, r19
    14d0:	12 2f       	mov	r17, r18
    14d2:	c5 cf       	rjmp	.-118    	; 0x145e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xe0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:419
      error=3+10*n;
    14d4:	2a e0       	ldi	r18, 0x0A	; 10
    14d6:	28 9f       	mul	r18, r24
    14d8:	80 01       	movw	r16, r0
    14da:	29 9f       	mul	r18, r25
    14dc:	10 0d       	add	r17, r0
    14de:	11 24       	eor	r1, r1
    14e0:	0d 5f       	subi	r16, 0xFD	; 253
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:420
      goto leave_func;
    14e4:	bc cf       	rjmp	.-136    	; 0x145e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xe0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:424
    error=4+10*n;
    14e6:	2a e0       	ldi	r18, 0x0A	; 10
    14e8:	28 9f       	mul	r18, r24
    14ea:	80 01       	movw	r16, r0
    14ec:	29 9f       	mul	r18, r25
    14ee:	10 0d       	add	r17, r0
    14f0:	11 24       	eor	r1, r1
    14f2:	0c 5f       	subi	r16, 0xFC	; 252
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:425
    goto leave_func;
    14f6:	b3 cf       	rjmp	.-154    	; 0x145e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xe0>

000014f8 <Gsm_Ard::_disconnect_tcp_socket()>:
_ZN7Gsm_Ard22_disconnect_tcp_socketEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:262
int Gsm_Ard::_disconnect_tcp_socket(){
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	6c 01       	movw	r12, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:264
  if(_gsm_state!=GSM_TCP_STATE){
    150a:	fc 01       	movw	r30, r24
    150c:	ea 57       	subi	r30, 0x7A	; 122
    150e:	fe 4f       	sbci	r31, 0xFE	; 254
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:265
    return 1;
    1514:	c1 e0       	ldi	r28, 0x01	; 1
    1516:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:264
  if(_gsm_state!=GSM_TCP_STATE){
    1518:	04 97       	sbiw	r24, 0x04	; 4
    151a:	c9 f4       	brne	.+50     	; 0x154e <Gsm_Ard::_disconnect_tcp_socket()+0x56>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:268
  n=_send_cmd_comp_rsp(AT_CIPSTATUS, AT_CIPSTATUS_LEN , AT_OK, AT_OK_LEN, 5000);
    151c:	98 e8       	ldi	r25, 0x88	; 136
    151e:	e9 2e       	mov	r14, r25
    1520:	93 e1       	ldi	r25, 0x13	; 19
    1522:	f9 2e       	mov	r15, r25
    1524:	02 e0       	ldi	r16, 0x02	; 2
    1526:	10 e0       	ldi	r17, 0x00	; 0
    1528:	20 e9       	ldi	r18, 0x90	; 144
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4c e0       	ldi	r20, 0x0C	; 12
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	68 e6       	ldi	r22, 0x68	; 104
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	c6 01       	movw	r24, r12
    1536:	23 df       	rcall	.-442    	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
    1538:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:269
  if(n){
    153a:	89 2b       	or	r24, r25
    153c:	91 f0       	breq	.+36     	; 0x1562 <Gsm_Ard::_disconnect_tcp_socket()+0x6a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:270
    return 2+10*n;
    153e:	2a e0       	ldi	r18, 0x0A	; 10
    1540:	2c 9f       	mul	r18, r28
    1542:	c0 01       	movw	r24, r0
    1544:	2d 9f       	mul	r18, r29
    1546:	90 0d       	add	r25, r0
    1548:	11 24       	eor	r1, r1
    154a:	ec 01       	movw	r28, r24
    154c:	22 96       	adiw	r28, 0x02	; 2
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:283
}
    154e:	ce 01       	movw	r24, r28
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:273
  n=_no_cmd_comp_rsp(AT_CONNECT_OK, AT_CONNECT_OK_LEN, 10000);
    1562:	20 e1       	ldi	r18, 0x10	; 16
    1564:	37 e2       	ldi	r19, 0x27	; 39
    1566:	4a e0       	ldi	r20, 0x0A	; 10
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	66 ea       	ldi	r22, 0xA6	; 166
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	c6 01       	movw	r24, r12
    1570:	16 dd       	rcall	.-1492   	; 0xf9e <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:274
  if(n){
    1572:	89 2b       	or	r24, r25
    1574:	c1 f0       	breq	.+48     	; 0x15a6 <Gsm_Ard::_disconnect_tcp_socket()+0xae>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:275
    n=_send_cmd_comp_rsp(AT_CIPCLOSE, AT_CIPCLOSE_LEN, AT_CIPCLOSE_OK, AT_CIPCLOSE_OK_LEN, 5000);
    1576:	88 e8       	ldi	r24, 0x88	; 136
    1578:	e8 2e       	mov	r14, r24
    157a:	83 e1       	ldi	r24, 0x13	; 19
    157c:	f8 2e       	mov	r15, r24
    157e:	08 e0       	ldi	r16, 0x08	; 8
    1580:	10 e0       	ldi	r17, 0x00	; 0
    1582:	25 e7       	ldi	r18, 0x75	; 117
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4b e0       	ldi	r20, 0x0B	; 11
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	6e e7       	ldi	r22, 0x7E	; 126
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	c6 01       	movw	r24, r12
    1590:	f6 de       	rcall	.-532    	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:276
    if(n){
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	41 f0       	breq	.+16     	; 0x15a6 <Gsm_Ard::_disconnect_tcp_socket()+0xae>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:277
      return 3+10*n;
    1596:	2a e0       	ldi	r18, 0x0A	; 10
    1598:	28 9f       	mul	r18, r24
    159a:	e0 01       	movw	r28, r0
    159c:	29 9f       	mul	r18, r25
    159e:	d0 0d       	add	r29, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	23 96       	adiw	r28, 0x03	; 3
    15a4:	d4 cf       	rjmp	.-88     	; 0x154e <Gsm_Ard::_disconnect_tcp_socket()+0x56>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:281
  _change_gsm_state(GSM_IP_STATE);
    15a6:	63 e0       	ldi	r22, 0x03	; 3
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	c6 01       	movw	r24, r12
    15ac:	47 da       	rcall	.-2930   	; 0xa3c <Gsm_Ard::_change_gsm_state(GSM_STATE)>
    15ae:	cf cf       	rjmp	.-98     	; 0x154e <Gsm_Ard::_disconnect_tcp_socket()+0x56>

000015b0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>:
_ZN7Gsm_Ard26_send_cmd_comp_several_rspEPKcjS1_jS1_ji():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:436
  const char* exp_rsp2, const uint16_t exp_rsp2_size, int recv_wait_period){
    15b0:	2f 92       	push	r2
    15b2:	3f 92       	push	r3
    15b4:	4f 92       	push	r4
    15b6:	5f 92       	push	r5
    15b8:	6f 92       	push	r6
    15ba:	7f 92       	push	r7
    15bc:	8f 92       	push	r8
    15be:	9f 92       	push	r9
    15c0:	af 92       	push	r10
    15c2:	bf 92       	push	r11
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	2c 97       	sbiw	r28, 0x0c	; 12
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	4c 01       	movw	r8, r24
    15e6:	78 87       	std	Y+8, r23	; 0x08
    15e8:	6f 83       	std	Y+7, r22	; 0x07
    15ea:	2a 01       	movw	r4, r20
    15ec:	3a 87       	std	Y+10, r19	; 0x0a
    15ee:	29 87       	std	Y+9, r18	; 0x09
    15f0:	18 01       	movw	r2, r16
    15f2:	de 82       	std	Y+6, r13	; 0x06
    15f4:	cd 82       	std	Y+5, r12	; 0x05
    15f6:	bc 86       	std	Y+12, r11	; 0x0c
    15f8:	ab 86       	std	Y+11, r10	; 0x0b
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:441
  char* cmd_buffer = new char[cmd_size];
    15fa:	ca 01       	movw	r24, r20
    15fc:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
    1600:	6c 01       	movw	r12, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:442
  char* exp_rsp1_buffer = new char[exp_rsp1_size];
    1602:	c8 01       	movw	r24, r16
    1604:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
    1608:	3c 01       	movw	r6, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:443
  char* exp_rsp2_buffer = new char[exp_rsp2_size];
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
    1612:	5c 01       	movw	r10, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:444
  strcpy_P(cmd_buffer, cmd);
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	c6 01       	movw	r24, r12
    161a:	0e 94 ca 1b 	call	0x3794	; 0x3794 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:445
  strcpy_P(exp_rsp1_buffer, exp_rsp1);
    161e:	69 85       	ldd	r22, Y+9	; 0x09
    1620:	7a 85       	ldd	r23, Y+10	; 0x0a
    1622:	c3 01       	movw	r24, r6
    1624:	0e 94 ca 1b 	call	0x3794	; 0x3794 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:446
  strcpy_P(exp_rsp2_buffer, exp_rsp2);
    1628:	b7 01       	movw	r22, r14
    162a:	c5 01       	movw	r24, r10
    162c:	0e 94 ca 1b 	call	0x3794	; 0x3794 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:448
  while(_ss.available()) _ss.read();
    1630:	84 01       	movw	r16, r8
    1632:	02 57       	subi	r16, 0x72	; 114
    1634:	1e 4f       	sbci	r17, 0xFE	; 254
    1636:	c8 01       	movw	r24, r16
    1638:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <SoftwareSerial::available()>
    163c:	89 2b       	or	r24, r25
    163e:	21 f0       	breq	.+8      	; 0x1648 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x98>
    1640:	c8 01       	movw	r24, r16
    1642:	0e 94 54 13 	call	0x26a8	; 0x26a8 <SoftwareSerial::read()>
    1646:	f7 cf       	rjmp	.-18     	; 0x1636 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x86>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:459
  dbg_print_buffer(__FILE__, __LINE__, __func__, "CMD_BUFFER", cmd_buffer, cmd_size);
    1648:	72 01       	movw	r14, r4
    164a:	86 01       	movw	r16, r12
    164c:	27 eb       	ldi	r18, 0xB7	; 183
    164e:	32 e0       	ldi	r19, 0x02	; 2
    1650:	40 ef       	ldi	r20, 0xF0	; 240
    1652:	52 e0       	ldi	r21, 0x02	; 2
    1654:	6b ec       	ldi	r22, 0xCB	; 203
    1656:	71 e0       	ldi	r23, 0x01	; 1
    1658:	8f e5       	ldi	r24, 0x5F	; 95
    165a:	92 e0       	ldi	r25, 0x02	; 2
    165c:	b1 d7       	rcall	.+3938   	; 0x25c0 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:462
  _write_cmd(cmd_buffer);
    165e:	b6 01       	movw	r22, r12
    1660:	c4 01       	movw	r24, r8
    1662:	65 de       	rcall	.-822    	; 0x132e <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:463
  n=_recv_string(recv_wait_period);
    1664:	43 e0       	ldi	r20, 0x03	; 3
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	6b 85       	ldd	r22, Y+11	; 0x0b
    166a:	7c 85       	ldd	r23, Y+12	; 0x0c
    166c:	c4 01       	movw	r24, r8
    166e:	db db       	rcall	.-2122   	; 0xe26 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:464
  if(!n){
    1670:	89 2b       	or	r24, r25
    1672:	09 f0       	breq	.+2      	; 0x1676 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0xc6>
    1674:	66 c0       	rjmp	.+204    	; 0x1742 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x192>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:465
    n=_fetch_rsp_from_recv(cmd_buffer, cmd_size, &rsp_len);
    1676:	9e 01       	movw	r18, r28
    1678:	2f 5f       	subi	r18, 0xFF	; 255
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	a2 01       	movw	r20, r4
    167e:	b6 01       	movw	r22, r12
    1680:	c4 01       	movw	r24, r8
    1682:	56 da       	rcall	.-2900   	; 0xb30 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:466
    if(!n){
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	09 f0       	breq	.+2      	; 0x168a <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0xda>
    1688:	5f c0       	rjmp	.+190    	; 0x1748 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x198>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:467
      rsp=new char[rsp_len];
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <operator new[](unsigned int)>
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	8b 83       	std	Y+3, r24	; 0x03
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:468
      n=_get_rsp(&rsp);
    1696:	be 01       	movw	r22, r28
    1698:	6d 5f       	subi	r22, 0xFD	; 253
    169a:	7f 4f       	sbci	r23, 0xFF	; 255
    169c:	c4 01       	movw	r24, r8
    169e:	56 db       	rcall	.-2388   	; 0xd4c <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:469
      if(n){
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	d1 f1       	breq	.+116    	; 0x1718 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x168>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:470
        error=3+n*10;
    16a4:	2a e0       	ldi	r18, 0x0A	; 10
    16a6:	28 9f       	mul	r18, r24
    16a8:	80 01       	movw	r16, r0
    16aa:	29 9f       	mul	r18, r25
    16ac:	10 0d       	add	r17, r0
    16ae:	11 24       	eor	r1, r1
    16b0:	0d 5f       	subi	r16, 0xFD	; 253
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:490
  delete[] cmd_buffer;
    16b4:	c1 14       	cp	r12, r1
    16b6:	d1 04       	cpc	r13, r1
    16b8:	19 f0       	breq	.+6      	; 0x16c0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x110>
    16ba:	c6 01       	movw	r24, r12
    16bc:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:491
  delete[] exp_rsp1_buffer;
    16c0:	61 14       	cp	r6, r1
    16c2:	71 04       	cpc	r7, r1
    16c4:	19 f0       	breq	.+6      	; 0x16cc <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x11c>
    16c6:	c3 01       	movw	r24, r6
    16c8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:492
  delete[] exp_rsp2_buffer;
    16cc:	a1 14       	cp	r10, r1
    16ce:	b1 04       	cpc	r11, r1
    16d0:	19 f0       	breq	.+6      	; 0x16d8 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x128>
    16d2:	c5 01       	movw	r24, r10
    16d4:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:493
  delete[] rsp;
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	11 f0       	breq	.+4      	; 0x16e4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x134>
    16e0:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:495
}
    16e4:	c8 01       	movw	r24, r16
    16e6:	2c 96       	adiw	r28, 0x0c	; 12
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	ff 90       	pop	r15
    16fc:	ef 90       	pop	r14
    16fe:	df 90       	pop	r13
    1700:	cf 90       	pop	r12
    1702:	bf 90       	pop	r11
    1704:	af 90       	pop	r10
    1706:	9f 90       	pop	r9
    1708:	8f 90       	pop	r8
    170a:	7f 90       	pop	r7
    170c:	6f 90       	pop	r6
    170e:	5f 90       	pop	r5
    1710:	4f 90       	pop	r4
    1712:	3f 90       	pop	r3
    1714:	2f 90       	pop	r2
    1716:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:473
      if(!strncmp(exp_rsp1_buffer, rsp, exp_rsp1_size)){
    1718:	8b 80       	ldd	r8, Y+3	; 0x03
    171a:	9c 80       	ldd	r9, Y+4	; 0x04
    171c:	a1 01       	movw	r20, r2
    171e:	b4 01       	movw	r22, r8
    1720:	c3 01       	movw	r24, r6
    1722:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <strncmp>
    1726:	8c 01       	movw	r16, r24
    1728:	89 2b       	or	r24, r25
    172a:	21 f2       	breq	.-120    	; 0x16b4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x104>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:477
      if(!strncmp(exp_rsp2_buffer, rsp, exp_rsp2_size)){
    172c:	4d 81       	ldd	r20, Y+5	; 0x05
    172e:	5e 81       	ldd	r21, Y+6	; 0x06
    1730:	b4 01       	movw	r22, r8
    1732:	c5 01       	movw	r24, r10
    1734:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <strncmp>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:478
        error=1;
    1738:	01 e0       	ldi	r16, 0x01	; 1
    173a:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:477
      if(!strncmp(exp_rsp2_buffer, rsp, exp_rsp2_size)){
    173c:	89 2b       	or	r24, r25
    173e:	09 f4       	brne	.+2      	; 0x1742 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x192>
    1740:	b9 cf       	rjmp	.-142    	; 0x16b4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x104>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:487
  error=2;
    1742:	02 e0       	ldi	r16, 0x02	; 2
    1744:	10 e0       	ldi	r17, 0x00	; 0
    1746:	b6 cf       	rjmp	.-148    	; 0x16b4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x104>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:483
      error=4+n*10;
    1748:	2a e0       	ldi	r18, 0x0A	; 10
    174a:	28 9f       	mul	r18, r24
    174c:	80 01       	movw	r16, r0
    174e:	29 9f       	mul	r18, r25
    1750:	10 0d       	add	r17, r0
    1752:	11 24       	eor	r1, r1
    1754:	0c 5f       	subi	r16, 0xFC	; 252
    1756:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:484
      goto leave_func;
    1758:	ad cf       	rjmp	.-166    	; 0x16b4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x104>

0000175a <Gsm_Ard::init_gsm_module()>:
_ZN7Gsm_Ard15init_gsm_moduleEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:47
int Gsm_Ard::init_gsm_module(){
    175a:	6f 92       	push	r6
    175c:	7f 92       	push	r7
    175e:	8f 92       	push	r8
    1760:	9f 92       	push	r9
    1762:	af 92       	push	r10
    1764:	bf 92       	push	r11
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	6f 97       	sbiw	r28, 0x1f	; 31
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:23
  _gsm_state=new_state;
    1788:	5c 01       	movw	r10, r24
    178a:	8a e7       	ldi	r24, 0x7A	; 122
    178c:	a8 1a       	sub	r10, r24
    178e:	8e ef       	ldi	r24, 0xFE	; 254
    1790:	b8 0a       	sbc	r11, r24
    1792:	f5 01       	movw	r30, r10
    1794:	11 82       	std	Z+1, r1	; 0x01
    1796:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:29
      Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
    1798:	6d eb       	ldi	r22, 0xBD	; 189
    179a:	71 e0       	ldi	r23, 0x01	; 1
    179c:	89 e9       	ldi	r24, 0x99	; 153
    179e:	95 e0       	ldi	r25, 0x05	; 5
    17a0:	0e 94 15 18 	call	0x302a	; 0x302a <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:50
  _ss = SoftwareSerial(_GSM_RXPIN_, _GSM_TXPIN_);
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	48 e0       	ldi	r20, 0x08	; 8
    17a8:	67 e0       	ldi	r22, 0x07	; 7
    17aa:	ce 01       	movw	r24, r28
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>
    17b2:	64 01       	movw	r12, r8
    17b4:	f2 e7       	ldi	r31, 0x72	; 114
    17b6:	cf 1a       	sub	r12, r31
    17b8:	fe ef       	ldi	r31, 0xFE	; 254
    17ba:	df 0a       	sbc	r13, r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:37
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	f6 01       	movw	r30, r12
    17c2:	93 83       	std	Z+3, r25	; 0x03
    17c4:	82 83       	std	Z+2, r24	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:49
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	af 81       	ldd	r26, Y+7	; 0x07
    17cc:	b8 85       	ldd	r27, Y+8	; 0x08
    17ce:	84 83       	std	Z+4, r24	; 0x04
    17d0:	95 83       	std	Z+5, r25	; 0x05
    17d2:	a6 83       	std	Z+6, r26	; 0x06
    17d4:	b7 83       	std	Z+7, r27	; 0x07
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	ab 85       	ldd	r26, Y+11	; 0x0b
    17dc:	bc 85       	ldd	r27, Y+12	; 0x0c
    17de:	80 87       	std	Z+8, r24	; 0x08
    17e0:	91 87       	std	Z+9, r25	; 0x09
    17e2:	a2 87       	std	Z+10, r26	; 0x0a
    17e4:	b3 87       	std	Z+11, r27	; 0x0b
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:50
    17e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e8:	84 87       	std	Z+12, r24	; 0x0c
    17ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ec:	85 87       	std	Z+13, r24	; 0x0d
    17ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f0:	98 89       	ldd	r25, Y+16	; 0x10
    17f2:	97 87       	std	Z+15, r25	; 0x0f
    17f4:	86 87       	std	Z+14, r24	; 0x0e
    17f6:	89 89       	ldd	r24, Y+17	; 0x11
    17f8:	80 8b       	std	Z+16, r24	; 0x10
    17fa:	8a 89       	ldd	r24, Y+18	; 0x12
    17fc:	9b 89       	ldd	r25, Y+19	; 0x13
    17fe:	92 8b       	std	Z+18, r25	; 0x12
    1800:	81 8b       	std	Z+17, r24	; 0x11
    1802:	8c 89       	ldd	r24, Y+20	; 0x14
    1804:	9d 89       	ldd	r25, Y+21	; 0x15
    1806:	94 8b       	std	Z+20, r25	; 0x14
    1808:	83 8b       	std	Z+19, r24	; 0x13
    180a:	8e 89       	ldd	r24, Y+22	; 0x16
    180c:	85 8b       	std	Z+21, r24	; 0x15
    180e:	8f 89       	ldd	r24, Y+23	; 0x17
    1810:	98 8d       	ldd	r25, Y+24	; 0x18
    1812:	97 8b       	std	Z+23, r25	; 0x17
    1814:	86 8b       	std	Z+22, r24	; 0x16
    1816:	89 8d       	ldd	r24, Y+25	; 0x19
    1818:	9a 8d       	ldd	r25, Y+26	; 0x1a
    181a:	91 8f       	std	Z+25, r25	; 0x19
    181c:	80 8f       	std	Z+24, r24	; 0x18
    181e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1822:	93 8f       	std	Z+27, r25	; 0x1b
    1824:	82 8f       	std	Z+26, r24	; 0x1a
    1826:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1828:	9e 8d       	ldd	r25, Y+30	; 0x1e
    182a:	95 8f       	std	Z+29, r25	; 0x1d
    182c:	84 8f       	std	Z+28, r24	; 0x1c
    182e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1830:	86 8d       	ldd	r24, Z+30	; 0x1e
    1832:	90 fb       	bst	r25, 0
    1834:	80 f9       	bld	r24, 0
    1836:	91 fb       	bst	r25, 1
    1838:	81 f9       	bld	r24, 1
    183a:	86 8f       	std	Z+30, r24	; 0x1e
    183c:	ce 01       	movw	r24, r28
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	0e 94 b6 14 	call	0x296c	; 0x296c <SoftwareSerial::~SoftwareSerial()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:51
  _ss.begin(DEFAULT_SS_BAUDRATE);
    1844:	40 e6       	ldi	r20, 0x60	; 96
    1846:	59 e0       	ldi	r21, 0x09	; 9
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	c6 01       	movw	r24, r12
    184e:	0e 94 33 15 	call	0x2a66	; 0x2a66 <SoftwareSerial::begin(long)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:53
  n=_send_cmd_comp_rsp(AT, AT_LEN, AT_OK, AT_OK_LEN, 5000);
    1852:	a8 e8       	ldi	r26, 0x88	; 136
    1854:	ea 2e       	mov	r14, r26
    1856:	a3 e1       	ldi	r26, 0x13	; 19
    1858:	fa 2e       	mov	r15, r26
    185a:	02 e0       	ldi	r16, 0x02	; 2
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	20 e9       	ldi	r18, 0x90	; 144
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	42 e0       	ldi	r20, 0x02	; 2
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	61 e6       	ldi	r22, 0x61	; 97
    1868:	72 e0       	ldi	r23, 0x02	; 2
    186a:	c4 01       	movw	r24, r8
    186c:	88 dd       	rcall	.-1264   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:54
  if(!n){
    186e:	89 2b       	or	r24, r25
    1870:	21 f4       	brne	.+8      	; 0x187a <Gsm_Ard::init_gsm_module()+0x120>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:55
    _change_gsm_state(GSM_ON_STATE);
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	c4 01       	movw	r24, r8
    1878:	e1 d8       	rcall	.-3646   	; 0xa3c <Gsm_Ard::_change_gsm_state(GSM_STATE)>
    187a:	fd e2       	ldi	r31, 0x2D	; 45
    187c:	6f 2e       	mov	r6, r31
    187e:	f3 e0       	ldi	r31, 0x03	; 3
    1880:	7f 2e       	mov	r7, r31
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:57
  for(i=0;i<8 && _gsm_state!=GSM_ON_STATE;i++){
    1882:	f5 01       	movw	r30, r10
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	11 f1       	breq	.+68     	; 0x18d0 <Gsm_Ard::init_gsm_module()+0x176>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:58
    _ss.begin(_POSSIBLE_BRS[i]);
    188c:	f3 01       	movw	r30, r6
    188e:	41 91       	ld	r20, Z+
    1890:	51 91       	ld	r21, Z+
    1892:	61 91       	ld	r22, Z+
    1894:	71 91       	ld	r23, Z+
    1896:	3f 01       	movw	r6, r30
    1898:	c6 01       	movw	r24, r12
    189a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <SoftwareSerial::begin(long)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:59
    n=_send_cmd_comp_rsp(AT, AT_LEN, AT_OK, AT_OK_LEN, 5000);
    189e:	e8 e8       	ldi	r30, 0x88	; 136
    18a0:	ee 2e       	mov	r14, r30
    18a2:	e3 e1       	ldi	r30, 0x13	; 19
    18a4:	fe 2e       	mov	r15, r30
    18a6:	02 e0       	ldi	r16, 0x02	; 2
    18a8:	10 e0       	ldi	r17, 0x00	; 0
    18aa:	20 e9       	ldi	r18, 0x90	; 144
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	42 e0       	ldi	r20, 0x02	; 2
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	61 e6       	ldi	r22, 0x61	; 97
    18b4:	72 e0       	ldi	r23, 0x02	; 2
    18b6:	c4 01       	movw	r24, r8
    18b8:	62 dd       	rcall	.-1340   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:60
    if(!n){
    18ba:	89 2b       	or	r24, r25
    18bc:	21 f4       	brne	.+8      	; 0x18c6 <Gsm_Ard::init_gsm_module()+0x16c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:61
      _change_gsm_state(GSM_ON_STATE);
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	c4 01       	movw	r24, r8
    18c4:	bb d8       	rcall	.-3722   	; 0xa3c <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:57
  for(i=0;i<8 && _gsm_state!=GSM_ON_STATE;i++){
    18c6:	fd e4       	ldi	r31, 0x4D	; 77
    18c8:	6f 16       	cp	r6, r31
    18ca:	f3 e0       	ldi	r31, 0x03	; 3
    18cc:	7f 06       	cpc	r7, r31
    18ce:	c9 f6       	brne	.-78     	; 0x1882 <Gsm_Ard::init_gsm_module()+0x128>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:65
  if(_gsm_state!=GSM_ON_STATE){
    18d0:	f5 01       	movw	r30, r10
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:66
    return 1;
    18d6:	21 e0       	ldi	r18, 0x01	; 1
    18d8:	30 e0       	ldi	r19, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:65
  if(_gsm_state!=GSM_ON_STATE){
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	11 f5       	brne	.+68     	; 0x1922 <Gsm_Ard::init_gsm_module()+0x1c8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:69
  n=_send_cmd_comp_several_rsp(AT_CPIN_R, AT_CPIN_R_LEN, AT_CPIN_READY, AT_CPIN_READY_LEN, AT_CPIN_SIM_PIN, AT_CPIN_SIM_PIN_LEN, 5000);
    18de:	58 e8       	ldi	r21, 0x88	; 136
    18e0:	a5 2e       	mov	r10, r21
    18e2:	53 e1       	ldi	r21, 0x13	; 19
    18e4:	b5 2e       	mov	r11, r21
    18e6:	6e e0       	ldi	r22, 0x0E	; 14
    18e8:	c6 2e       	mov	r12, r22
    18ea:	d1 2c       	mov	r13, r1
    18ec:	7c e3       	ldi	r23, 0x3C	; 60
    18ee:	e7 2e       	mov	r14, r23
    18f0:	72 e0       	ldi	r23, 0x02	; 2
    18f2:	f7 2e       	mov	r15, r23
    18f4:	0c e0       	ldi	r16, 0x0C	; 12
    18f6:	10 e0       	ldi	r17, 0x00	; 0
    18f8:	2b e4       	ldi	r18, 0x4B	; 75
    18fa:	32 e0       	ldi	r19, 0x02	; 2
    18fc:	48 e0       	ldi	r20, 0x08	; 8
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	68 e5       	ldi	r22, 0x58	; 88
    1902:	72 e0       	ldi	r23, 0x02	; 2
    1904:	c4 01       	movw	r24, r8
    1906:	54 de       	rcall	.-856    	; 0x15b0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:70
  switch(n){
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	d1 f1       	breq	.+116    	; 0x1980 <Gsm_Ard::init_gsm_module()+0x226>
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	91 05       	cpc	r25, r1
    1910:	f1 f0       	breq	.+60     	; 0x194e <Gsm_Ard::init_gsm_module()+0x1f4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:72
      return 2+10*n;
    1912:	4a e0       	ldi	r20, 0x0A	; 10
    1914:	48 9f       	mul	r20, r24
    1916:	90 01       	movw	r18, r0
    1918:	49 9f       	mul	r20, r25
    191a:	30 0d       	add	r19, r0
    191c:	11 24       	eor	r1, r1
    191e:	2e 5f       	subi	r18, 0xFE	; 254
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:101
}
    1922:	c9 01       	movw	r24, r18
    1924:	6f 96       	adiw	r28, 0x1f	; 31
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	ff 90       	pop	r15
    193a:	ef 90       	pop	r14
    193c:	df 90       	pop	r13
    193e:	cf 90       	pop	r12
    1940:	bf 90       	pop	r11
    1942:	af 90       	pop	r10
    1944:	9f 90       	pop	r9
    1946:	8f 90       	pop	r8
    1948:	7f 90       	pop	r7
    194a:	6f 90       	pop	r6
    194c:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:77
      n=_send_cmd_comp_rsp(AT_CPIN_SET, AT_CPIN_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    194e:	48 e8       	ldi	r20, 0x88	; 136
    1950:	e4 2e       	mov	r14, r20
    1952:	43 e1       	ldi	r20, 0x13	; 19
    1954:	f4 2e       	mov	r15, r20
    1956:	02 e0       	ldi	r16, 0x02	; 2
    1958:	10 e0       	ldi	r17, 0x00	; 0
    195a:	20 e9       	ldi	r18, 0x90	; 144
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4c e0       	ldi	r20, 0x0C	; 12
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	6f e2       	ldi	r22, 0x2F	; 47
    1964:	72 e0       	ldi	r23, 0x02	; 2
    1966:	c4 01       	movw	r24, r8
    1968:	0a dd       	rcall	.-1516   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:78
      if(n){
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	49 f0       	breq	.+18     	; 0x1980 <Gsm_Ard::init_gsm_module()+0x226>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:79
        return 3+10*n;
    196e:	4a e0       	ldi	r20, 0x0A	; 10
    1970:	48 9f       	mul	r20, r24
    1972:	90 01       	movw	r18, r0
    1974:	49 9f       	mul	r20, r25
    1976:	30 0d       	add	r19, r0
    1978:	11 24       	eor	r1, r1
    197a:	2d 5f       	subi	r18, 0xFD	; 253
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	d1 cf       	rjmp	.-94     	; 0x1922 <Gsm_Ard::init_gsm_module()+0x1c8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:84
  n=_send_cmd_comp_several_rsp(AT_CIURC_R, AT_CIURC_R_LEN, AT_CIURC_0, AT_CIURC_0_LEN, AT_CIURC_1, AT_CIURC_1_LEN, 5000);
    1980:	98 e8       	ldi	r25, 0x88	; 136
    1982:	a9 2e       	mov	r10, r25
    1984:	93 e1       	ldi	r25, 0x13	; 19
    1986:	b9 2e       	mov	r11, r25
    1988:	29 e0       	ldi	r18, 0x09	; 9
    198a:	c2 2e       	mov	r12, r18
    198c:	d1 2c       	mov	r13, r1
    198e:	31 e1       	ldi	r19, 0x11	; 17
    1990:	e3 2e       	mov	r14, r19
    1992:	32 e0       	ldi	r19, 0x02	; 2
    1994:	f3 2e       	mov	r15, r19
    1996:	09 e0       	ldi	r16, 0x09	; 9
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	2b e1       	ldi	r18, 0x1B	; 27
    199c:	32 e0       	ldi	r19, 0x02	; 2
    199e:	49 e0       	ldi	r20, 0x09	; 9
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	65 e2       	ldi	r22, 0x25	; 37
    19a4:	72 e0       	ldi	r23, 0x02	; 2
    19a6:	c4 01       	movw	r24, r8
    19a8:	03 de       	rcall	.-1018   	; 0x15b0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:85
  switch(n){
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <Gsm_Ard::init_gsm_module()+0x26c>
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	91 05       	cpc	r25, r1
    19b2:	11 f1       	breq	.+68     	; 0x19f8 <Gsm_Ard::init_gsm_module()+0x29e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:87
      return 4+10*n;
    19b4:	4a e0       	ldi	r20, 0x0A	; 10
    19b6:	48 9f       	mul	r20, r24
    19b8:	90 01       	movw	r18, r0
    19ba:	49 9f       	mul	r20, r25
    19bc:	30 0d       	add	r19, r0
    19be:	11 24       	eor	r1, r1
    19c0:	2c 5f       	subi	r18, 0xFC	; 252
    19c2:	3f 4f       	sbci	r19, 0xFF	; 255
    19c4:	ae cf       	rjmp	.-164    	; 0x1922 <Gsm_Ard::init_gsm_module()+0x1c8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:90
      n=_send_cmd_comp_rsp(AT_CIURC_SET, AT_CIURC_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    19c6:	88 e8       	ldi	r24, 0x88	; 136
    19c8:	e8 2e       	mov	r14, r24
    19ca:	83 e1       	ldi	r24, 0x13	; 19
    19cc:	f8 2e       	mov	r15, r24
    19ce:	02 e0       	ldi	r16, 0x02	; 2
    19d0:	10 e0       	ldi	r17, 0x00	; 0
    19d2:	20 e9       	ldi	r18, 0x90	; 144
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4a e0       	ldi	r20, 0x0A	; 10
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	66 e0       	ldi	r22, 0x06	; 6
    19dc:	72 e0       	ldi	r23, 0x02	; 2
    19de:	c4 01       	movw	r24, r8
    19e0:	ce dc       	rcall	.-1636   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:91
      if(n){
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	49 f0       	breq	.+18     	; 0x19f8 <Gsm_Ard::init_gsm_module()+0x29e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:92
        return 5+10*n;
    19e6:	4a e0       	ldi	r20, 0x0A	; 10
    19e8:	48 9f       	mul	r20, r24
    19ea:	90 01       	movw	r18, r0
    19ec:	49 9f       	mul	r20, r25
    19ee:	30 0d       	add	r19, r0
    19f0:	11 24       	eor	r1, r1
    19f2:	2b 5f       	subi	r18, 0xFB	; 251
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	95 cf       	rjmp	.-214    	; 0x1922 <Gsm_Ard::init_gsm_module()+0x1c8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:99
  _change_gsm_state(GSM_PIN_STATE);
    19f8:	62 e0       	ldi	r22, 0x02	; 2
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	c4 01       	movw	r24, r8
    19fe:	1e d8       	rcall	.-4036   	; 0xa3c <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:100
  return 0;
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	8e cf       	rjmp	.-228    	; 0x1922 <Gsm_Ard::init_gsm_module()+0x1c8>

00001a06 <Gsm_Ard::attachGPRS()>:
_ZN7Gsm_Ard10attachGPRSEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:103
int Gsm_Ard::attachGPRS(){
    1a06:	8f 92       	push	r8
    1a08:	9f 92       	push	r9
    1a0a:	af 92       	push	r10
    1a0c:	bf 92       	push	r11
    1a0e:	cf 92       	push	r12
    1a10:	df 92       	push	r13
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:106
  if(_gsm_state!=GSM_PIN_STATE){
    1a20:	fc 01       	movw	r30, r24
    1a22:	ea 57       	subi	r30, 0x7A	; 122
    1a24:	fe 4f       	sbci	r31, 0xFE	; 254
    1a26:	80 81       	ld	r24, Z
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:107
    return 1;
    1a2a:	c1 e0       	ldi	r28, 0x01	; 1
    1a2c:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:106
  if(_gsm_state!=GSM_PIN_STATE){
    1a2e:	02 97       	sbiw	r24, 0x02	; 2
    1a30:	09 f5       	brne	.+66     	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:110
  n=_send_cmd_comp_several_rsp(AT_CGATT_R, AT_CGATT_R_LEN, AT_CGATT_0, AT_CGATT_0_LEN, AT_CGATT_1, AT_CGATT_1_LEN, 5000);
    1a32:	a8 e8       	ldi	r26, 0x88	; 136
    1a34:	aa 2e       	mov	r10, r26
    1a36:	a3 e1       	ldi	r26, 0x13	; 19
    1a38:	ba 2e       	mov	r11, r26
    1a3a:	b9 e0       	ldi	r27, 0x09	; 9
    1a3c:	cb 2e       	mov	r12, r27
    1a3e:	d1 2c       	mov	r13, r1
    1a40:	c8 ee       	ldi	r28, 0xE8	; 232
    1a42:	ec 2e       	mov	r14, r28
    1a44:	c1 e0       	ldi	r28, 0x01	; 1
    1a46:	fc 2e       	mov	r15, r28
    1a48:	09 e0       	ldi	r16, 0x09	; 9
    1a4a:	10 e0       	ldi	r17, 0x00	; 0
    1a4c:	22 ef       	ldi	r18, 0xF2	; 242
    1a4e:	31 e0       	ldi	r19, 0x01	; 1
    1a50:	49 e0       	ldi	r20, 0x09	; 9
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	6c ef       	ldi	r22, 0xFC	; 252
    1a56:	71 e0       	ldi	r23, 0x01	; 1
    1a58:	c4 01       	movw	r24, r8
    1a5a:	aa dd       	rcall	.-1196   	; 0x15b0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:111
  switch(n){
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	c1 f0       	breq	.+48     	; 0x1a90 <Gsm_Ard::attachGPRS()+0x8a>
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	91 05       	cpc	r25, r1
    1a64:	69 f1       	breq	.+90     	; 0x1ac0 <Gsm_Ard::attachGPRS()+0xba>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:113
      return 2+n*10;
    1a66:	2a e0       	ldi	r18, 0x0A	; 10
    1a68:	28 9f       	mul	r18, r24
    1a6a:	e0 01       	movw	r28, r0
    1a6c:	29 9f       	mul	r18, r25
    1a6e:	d0 0d       	add	r29, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	22 96       	adiw	r28, 0x02	; 2
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:190
}
    1a74:	ce 01       	movw	r24, r28
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	bf 90       	pop	r11
    1a88:	af 90       	pop	r10
    1a8a:	9f 90       	pop	r9
    1a8c:	8f 90       	pop	r8
    1a8e:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:116
      n=_send_cmd_comp_rsp(AT_CGATT_SET_ON, AT_CGATT_SET_ON_LEN, AT_OK, AT_OK_LEN, 10000);
    1a90:	f0 e1       	ldi	r31, 0x10	; 16
    1a92:	ef 2e       	mov	r14, r31
    1a94:	f7 e2       	ldi	r31, 0x27	; 39
    1a96:	ff 2e       	mov	r15, r31
    1a98:	02 e0       	ldi	r16, 0x02	; 2
    1a9a:	10 e0       	ldi	r17, 0x00	; 0
    1a9c:	20 e9       	ldi	r18, 0x90	; 144
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a e0       	ldi	r20, 0x0A	; 10
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	6d ed       	ldi	r22, 0xDD	; 221
    1aa6:	71 e0       	ldi	r23, 0x01	; 1
    1aa8:	c4 01       	movw	r24, r8
    1aaa:	69 dc       	rcall	.-1838   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:117
      if(n){
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	41 f0       	breq	.+16     	; 0x1ac0 <Gsm_Ard::attachGPRS()+0xba>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:118
        return 3+n*10;
    1ab0:	2a e0       	ldi	r18, 0x0A	; 10
    1ab2:	28 9f       	mul	r18, r24
    1ab4:	e0 01       	movw	r28, r0
    1ab6:	29 9f       	mul	r18, r25
    1ab8:	d0 0d       	add	r29, r0
    1aba:	11 24       	eor	r1, r1
    1abc:	23 96       	adiw	r28, 0x03	; 3
    1abe:	da cf       	rjmp	.-76     	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:125
  n=_send_cmd_comp_several_rsp(AT_CIPMODE_R, AT_CIPMODE_R_LEN, AT_CIPMODE_0, AT_CIPMODE_0_LEN, AT_CIPMODE_1, AT_CIPMODE_1_LEN, 5000);
    1ac0:	68 e8       	ldi	r22, 0x88	; 136
    1ac2:	a6 2e       	mov	r10, r22
    1ac4:	63 e1       	ldi	r22, 0x13	; 19
    1ac6:	b6 2e       	mov	r11, r22
    1ac8:	7b e0       	ldi	r23, 0x0B	; 11
    1aca:	c7 2e       	mov	r12, r23
    1acc:	d1 2c       	mov	r13, r1
    1ace:	e5 ea       	ldi	r30, 0xA5	; 165
    1ad0:	ee 2e       	mov	r14, r30
    1ad2:	e1 e0       	ldi	r30, 0x01	; 1
    1ad4:	fe 2e       	mov	r15, r30
    1ad6:	0b e0       	ldi	r16, 0x0B	; 11
    1ad8:	10 e0       	ldi	r17, 0x00	; 0
    1ada:	21 eb       	ldi	r18, 0xB1	; 177
    1adc:	31 e0       	ldi	r19, 0x01	; 1
    1ade:	4b e0       	ldi	r20, 0x0B	; 11
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	6d eb       	ldi	r22, 0xBD	; 189
    1ae4:	71 e0       	ldi	r23, 0x01	; 1
    1ae6:	c4 01       	movw	r24, r8
    1ae8:	63 dd       	rcall	.-1338   	; 0x15b0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:126
  switch(n){
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	19 f1       	breq	.+70     	; 0x1b34 <Gsm_Ard::attachGPRS()+0x12e>
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	91 05       	cpc	r25, r1
    1af2:	41 f0       	breq	.+16     	; 0x1b04 <Gsm_Ard::attachGPRS()+0xfe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:128
      return 4+n*10;
    1af4:	2a e0       	ldi	r18, 0x0A	; 10
    1af6:	28 9f       	mul	r18, r24
    1af8:	e0 01       	movw	r28, r0
    1afa:	29 9f       	mul	r18, r25
    1afc:	d0 0d       	add	r29, r0
    1afe:	11 24       	eor	r1, r1
    1b00:	24 96       	adiw	r28, 0x04	; 4
    1b02:	b8 cf       	rjmp	.-144    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:133
      n=_send_cmd_comp_rsp(AT_CIPMODE, AT_CIPMODE_LEN, AT_OK, AT_OK_LEN, 5000);
    1b04:	58 e8       	ldi	r21, 0x88	; 136
    1b06:	e5 2e       	mov	r14, r21
    1b08:	53 e1       	ldi	r21, 0x13	; 19
    1b0a:	f5 2e       	mov	r15, r21
    1b0c:	02 e0       	ldi	r16, 0x02	; 2
    1b0e:	10 e0       	ldi	r17, 0x00	; 0
    1b10:	20 e9       	ldi	r18, 0x90	; 144
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4c e0       	ldi	r20, 0x0C	; 12
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	68 e9       	ldi	r22, 0x98	; 152
    1b1a:	71 e0       	ldi	r23, 0x01	; 1
    1b1c:	c4 01       	movw	r24, r8
    1b1e:	2f dc       	rcall	.-1954   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:134
      if(n){
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	41 f0       	breq	.+16     	; 0x1b34 <Gsm_Ard::attachGPRS()+0x12e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:135
        return 5+n*10;
    1b24:	2a e0       	ldi	r18, 0x0A	; 10
    1b26:	28 9f       	mul	r18, r24
    1b28:	e0 01       	movw	r28, r0
    1b2a:	29 9f       	mul	r18, r25
    1b2c:	d0 0d       	add	r29, r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	25 96       	adiw	r28, 0x05	; 5
    1b32:	a0 cf       	rjmp	.-192    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:140
  n=_send_cmd_comp_rsp(AT_CGDCONT, AT_CGDCONT_LEN, AT_OK, AT_OK_LEN, 5000);
    1b34:	48 e8       	ldi	r20, 0x88	; 136
    1b36:	e4 2e       	mov	r14, r20
    1b38:	43 e1       	ldi	r20, 0x13	; 19
    1b3a:	f4 2e       	mov	r15, r20
    1b3c:	02 e0       	ldi	r16, 0x02	; 2
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
    1b40:	20 e9       	ldi	r18, 0x90	; 144
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	48 e2       	ldi	r20, 0x28	; 40
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	6f e6       	ldi	r22, 0x6F	; 111
    1b4a:	71 e0       	ldi	r23, 0x01	; 1
    1b4c:	c4 01       	movw	r24, r8
    1b4e:	17 dc       	rcall	.-2002   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
    1b50:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:141
  if(n){
    1b52:	89 2b       	or	r24, r25
    1b54:	49 f0       	breq	.+18     	; 0x1b68 <Gsm_Ard::attachGPRS()+0x162>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:142
    return 6+n*10;
    1b56:	2a e0       	ldi	r18, 0x0A	; 10
    1b58:	2c 9f       	mul	r18, r28
    1b5a:	c0 01       	movw	r24, r0
    1b5c:	2d 9f       	mul	r18, r29
    1b5e:	90 0d       	add	r25, r0
    1b60:	11 24       	eor	r1, r1
    1b62:	ec 01       	movw	r28, r24
    1b64:	26 96       	adiw	r28, 0x06	; 6
    1b66:	86 cf       	rjmp	.-244    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:145
  n=_send_cmd_comp_rsp(AT_CIFSR, AT_CIFSR_LEN, AT_ERROR, AT_ERROR_LEN, 5000);
    1b68:	38 e8       	ldi	r19, 0x88	; 136
    1b6a:	e3 2e       	mov	r14, r19
    1b6c:	33 e1       	ldi	r19, 0x13	; 19
    1b6e:	f3 2e       	mov	r15, r19
    1b70:	05 e0       	ldi	r16, 0x05	; 5
    1b72:	10 e0       	ldi	r17, 0x00	; 0
    1b74:	2a e8       	ldi	r18, 0x8A	; 138
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	48 e0       	ldi	r20, 0x08	; 8
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	69 ec       	ldi	r22, 0xC9	; 201
    1b7e:	71 e0       	ldi	r23, 0x01	; 1
    1b80:	c4 01       	movw	r24, r8
    1b82:	fd db       	rcall	.-2054   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:146
  switch(n){
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	61 f0       	breq	.+24     	; 0x1ba0 <Gsm_Ard::attachGPRS()+0x19a>
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <Gsm_Ard::attachGPRS()+0x18a>
    1b8e:	60 c0       	rjmp	.+192    	; 0x1c50 <Gsm_Ard::attachGPRS()+0x24a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:148
      return 7+n*10;
    1b90:	2a e0       	ldi	r18, 0x0A	; 10
    1b92:	28 9f       	mul	r18, r24
    1b94:	e0 01       	movw	r28, r0
    1b96:	29 9f       	mul	r18, r25
    1b98:	d0 0d       	add	r29, r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	27 96       	adiw	r28, 0x07	; 7
    1b9e:	6a cf       	rjmp	.-300    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:158
  n=_send_cmd_comp_rsp(AT_CIPSERVER_R, AT_CIPSERVER_R_LEN, AT_CIPSERVER_RESP, AT_CIPSERVER_RESP_LEN, 5000);
    1ba0:	28 e8       	ldi	r18, 0x88	; 136
    1ba2:	e2 2e       	mov	r14, r18
    1ba4:	23 e1       	ldi	r18, 0x13	; 19
    1ba6:	f2 2e       	mov	r15, r18
    1ba8:	0d e0       	ldi	r16, 0x0D	; 13
    1baa:	10 e0       	ldi	r17, 0x00	; 0
    1bac:	23 e5       	ldi	r18, 0x53	; 83
    1bae:	31 e0       	ldi	r19, 0x01	; 1
    1bb0:	4d e0       	ldi	r20, 0x0D	; 13
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	61 e6       	ldi	r22, 0x61	; 97
    1bb6:	71 e0       	ldi	r23, 0x01	; 1
    1bb8:	c4 01       	movw	r24, r8
    1bba:	e1 db       	rcall	.-2110   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:159
  switch(n){
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	f1 f0       	breq	.+60     	; 0x1bfc <Gsm_Ard::attachGPRS()+0x1f6>
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	41 f0       	breq	.+16     	; 0x1bd6 <Gsm_Ard::attachGPRS()+0x1d0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:161
      return 8+n*10;
    1bc6:	2a e0       	ldi	r18, 0x0A	; 10
    1bc8:	28 9f       	mul	r18, r24
    1bca:	e0 01       	movw	r28, r0
    1bcc:	29 9f       	mul	r18, r25
    1bce:	d0 0d       	add	r29, r0
    1bd0:	11 24       	eor	r1, r1
    1bd2:	28 96       	adiw	r28, 0x08	; 8
    1bd4:	4f cf       	rjmp	.-354    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:164
      n=_send_cmd_comp_rsp(AT_CIPSERVER_SET, AT_CIPSERVER_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    1bd6:	98 e8       	ldi	r25, 0x88	; 136
    1bd8:	e9 2e       	mov	r14, r25
    1bda:	93 e1       	ldi	r25, 0x13	; 19
    1bdc:	f9 2e       	mov	r15, r25
    1bde:	02 e0       	ldi	r16, 0x02	; 2
    1be0:	10 e0       	ldi	r17, 0x00	; 0
    1be2:	20 e9       	ldi	r18, 0x90	; 144
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4e e0       	ldi	r20, 0x0E	; 14
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	64 e4       	ldi	r22, 0x44	; 68
    1bec:	71 e0       	ldi	r23, 0x01	; 1
    1bee:	c4 01       	movw	r24, r8
    1bf0:	c6 db       	rcall	.-2164   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:166
        return 9+n*10;
    1bf2:	c9 e0       	ldi	r28, 0x09	; 9
    1bf4:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:165
      if(!n){
    1bf6:	89 2b       	or	r24, r25
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <Gsm_Ard::attachGPRS()+0x1f6>
    1bfa:	3c cf       	rjmp	.-392    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:173
  n=_send_cmd_comp_rsp(AT_CSTT, AT_CSTT_LEN, AT_OK, AT_OK_LEN, 5000);
    1bfc:	88 e8       	ldi	r24, 0x88	; 136
    1bfe:	e8 2e       	mov	r14, r24
    1c00:	83 e1       	ldi	r24, 0x13	; 19
    1c02:	f8 2e       	mov	r15, r24
    1c04:	02 e0       	ldi	r16, 0x02	; 2
    1c06:	10 e0       	ldi	r17, 0x00	; 0
    1c08:	20 e9       	ldi	r18, 0x90	; 144
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	44 e2       	ldi	r20, 0x24	; 36
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	6c e0       	ldi	r22, 0x0C	; 12
    1c12:	71 e0       	ldi	r23, 0x01	; 1
    1c14:	c4 01       	movw	r24, r8
    1c16:	b3 db       	rcall	.-2202   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:175
    return 10;
    1c18:	ca e0       	ldi	r28, 0x0A	; 10
    1c1a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:174
  if(n){
    1c1c:	89 2b       	or	r24, r25
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <Gsm_Ard::attachGPRS()+0x21c>
    1c20:	29 cf       	rjmp	.-430    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:178
  n=_send_cmd_comp_rsp(AT_CIICR, AT_CIICR_LEN, AT_OK, AT_OK_LEN, 5000);
    1c22:	20 e9       	ldi	r18, 0x90	; 144
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	48 e0       	ldi	r20, 0x08	; 8
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	63 e0       	ldi	r22, 0x03	; 3
    1c2c:	71 e0       	ldi	r23, 0x01	; 1
    1c2e:	c4 01       	movw	r24, r8
    1c30:	a6 db       	rcall	.-2228   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
    1c32:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:179
  if(n){
    1c34:	89 2b       	or	r24, r25
    1c36:	91 f4       	brne	.+36     	; 0x1c5c <Gsm_Ard::attachGPRS()+0x256>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:183
  n=_send_cmd_comp_rsp(AT_CIFSR, AT_CIFSR_LEN, AT_ERROR, AT_ERROR_LEN, 5000);
    1c38:	05 e0       	ldi	r16, 0x05	; 5
    1c3a:	10 e0       	ldi	r17, 0x00	; 0
    1c3c:	2a e8       	ldi	r18, 0x8A	; 138
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	48 e0       	ldi	r20, 0x08	; 8
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	69 ec       	ldi	r22, 0xC9	; 201
    1c46:	71 e0       	ldi	r23, 0x01	; 1
    1c48:	c4 01       	movw	r24, r8
    1c4a:	99 db       	rcall	.-2254   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:184
  if(n!=1){
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	49 f4       	brne	.+18     	; 0x1c62 <Gsm_Ard::attachGPRS()+0x25c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:188
  _change_gsm_state(GSM_IP_STATE);
    1c50:	63 e0       	ldi	r22, 0x03	; 3
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	c4 01       	movw	r24, r8
    1c56:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:189
  return 0;
    1c5a:	0c cf       	rjmp	.-488    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:180
    return 11;
    1c5c:	cb e0       	ldi	r28, 0x0B	; 11
    1c5e:	d0 e0       	ldi	r29, 0x00	; 0
    1c60:	09 cf       	rjmp	.-494    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:185
    return 12;
    1c62:	cc e0       	ldi	r28, 0x0C	; 12
    1c64:	d0 e0       	ldi	r29, 0x00	; 0
    1c66:	06 cf       	rjmp	.-500    	; 0x1a74 <Gsm_Ard::attachGPRS()+0x6e>

00001c68 <Gsm_Ard::dettachGPRS()>:
_ZN7Gsm_Ard11dettachGPRSEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:192
int Gsm_Ard::dettachGPRS(){
    1c68:	8f 92       	push	r8
    1c6a:	9f 92       	push	r9
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:194
  if(_gsm_state!=GSM_IP_STATE){
    1c82:	fc 01       	movw	r30, r24
    1c84:	ea 57       	subi	r30, 0x7A	; 122
    1c86:	fe 4f       	sbci	r31, 0xFE	; 254
    1c88:	80 81       	ld	r24, Z
    1c8a:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:195
    return 1;
    1c8c:	c1 e0       	ldi	r28, 0x01	; 1
    1c8e:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:194
  if(_gsm_state!=GSM_IP_STATE){
    1c90:	03 97       	sbiw	r24, 0x03	; 3
    1c92:	c9 f4       	brne	.+50     	; 0x1cc6 <Gsm_Ard::dettachGPRS()+0x5e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:198
  n=_send_cmd_comp_rsp(AT_CIPSHUT, AT_CIPSHUT_LEN, AT_SHUT_OK, AT_SHUT_OK_LEN, 10000);
    1c94:	40 e1       	ldi	r20, 0x10	; 16
    1c96:	e4 2e       	mov	r14, r20
    1c98:	47 e2       	ldi	r20, 0x27	; 39
    1c9a:	f4 2e       	mov	r15, r20
    1c9c:	07 e0       	ldi	r16, 0x07	; 7
    1c9e:	10 e0       	ldi	r17, 0x00	; 0
    1ca0:	21 e3       	ldi	r18, 0x31	; 49
    1ca2:	31 e0       	ldi	r19, 0x01	; 1
    1ca4:	4a e0       	ldi	r20, 0x0A	; 10
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	69 e3       	ldi	r22, 0x39	; 57
    1caa:	71 e0       	ldi	r23, 0x01	; 1
    1cac:	c4 01       	movw	r24, r8
    1cae:	67 db       	rcall	.-2354   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
    1cb0:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:199
  if(n){
    1cb2:	89 2b       	or	r24, r25
    1cb4:	b1 f0       	breq	.+44     	; 0x1ce2 <Gsm_Ard::dettachGPRS()+0x7a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:200
    return 2+10*n;
    1cb6:	2a e0       	ldi	r18, 0x0A	; 10
    1cb8:	2c 9f       	mul	r18, r28
    1cba:	c0 01       	movw	r24, r0
    1cbc:	2d 9f       	mul	r18, r29
    1cbe:	90 0d       	add	r25, r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	ec 01       	movw	r28, r24
    1cc4:	22 96       	adiw	r28, 0x02	; 2
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:219
}
    1cc6:	ce 01       	movw	r24, r28
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	df 90       	pop	r13
    1cd6:	cf 90       	pop	r12
    1cd8:	bf 90       	pop	r11
    1cda:	af 90       	pop	r10
    1cdc:	9f 90       	pop	r9
    1cde:	8f 90       	pop	r8
    1ce0:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:203
  n=_send_cmd_comp_several_rsp(AT_CGATT_R, AT_CGATT_R_LEN, AT_CGATT_0, AT_CGATT_0_LEN, AT_CGATT_1, AT_CGATT_1_LEN, 5000);
    1ce2:	98 e8       	ldi	r25, 0x88	; 136
    1ce4:	a9 2e       	mov	r10, r25
    1ce6:	93 e1       	ldi	r25, 0x13	; 19
    1ce8:	b9 2e       	mov	r11, r25
    1cea:	29 e0       	ldi	r18, 0x09	; 9
    1cec:	c2 2e       	mov	r12, r18
    1cee:	d1 2c       	mov	r13, r1
    1cf0:	38 ee       	ldi	r19, 0xE8	; 232
    1cf2:	e3 2e       	mov	r14, r19
    1cf4:	31 e0       	ldi	r19, 0x01	; 1
    1cf6:	f3 2e       	mov	r15, r19
    1cf8:	09 e0       	ldi	r16, 0x09	; 9
    1cfa:	10 e0       	ldi	r17, 0x00	; 0
    1cfc:	22 ef       	ldi	r18, 0xF2	; 242
    1cfe:	31 e0       	ldi	r19, 0x01	; 1
    1d00:	49 e0       	ldi	r20, 0x09	; 9
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	6c ef       	ldi	r22, 0xFC	; 252
    1d06:	71 e0       	ldi	r23, 0x01	; 1
    1d08:	c4 01       	movw	r24, r8
    1d0a:	52 dc       	rcall	.-1884   	; 0x15b0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:204
  switch(n){
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	19 f1       	breq	.+70     	; 0x1d56 <Gsm_Ard::dettachGPRS()+0xee>
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	91 05       	cpc	r25, r1
    1d14:	41 f0       	breq	.+16     	; 0x1d26 <Gsm_Ard::dettachGPRS()+0xbe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:206
      return 3+10*n;
    1d16:	2a e0       	ldi	r18, 0x0A	; 10
    1d18:	28 9f       	mul	r18, r24
    1d1a:	e0 01       	movw	r28, r0
    1d1c:	29 9f       	mul	r18, r25
    1d1e:	d0 0d       	add	r29, r0
    1d20:	11 24       	eor	r1, r1
    1d22:	23 96       	adiw	r28, 0x03	; 3
    1d24:	d0 cf       	rjmp	.-96     	; 0x1cc6 <Gsm_Ard::dettachGPRS()+0x5e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:211
      n=_send_cmd_comp_rsp(AT_CGATT_SET_OFF, AT_CGATT_SET_OFF_LEN, AT_OK, AT_OK_LEN, 10000);
    1d26:	80 e1       	ldi	r24, 0x10	; 16
    1d28:	e8 2e       	mov	r14, r24
    1d2a:	87 e2       	ldi	r24, 0x27	; 39
    1d2c:	f8 2e       	mov	r15, r24
    1d2e:	02 e0       	ldi	r16, 0x02	; 2
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	20 e9       	ldi	r18, 0x90	; 144
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4a e0       	ldi	r20, 0x0A	; 10
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	62 ed       	ldi	r22, 0xD2	; 210
    1d3c:	71 e0       	ldi	r23, 0x01	; 1
    1d3e:	c4 01       	movw	r24, r8
    1d40:	1e db       	rcall	.-2500   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:212
      if(n){
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	41 f0       	breq	.+16     	; 0x1d56 <Gsm_Ard::dettachGPRS()+0xee>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:213
        return 4+10*n;
    1d46:	2a e0       	ldi	r18, 0x0A	; 10
    1d48:	28 9f       	mul	r18, r24
    1d4a:	e0 01       	movw	r28, r0
    1d4c:	29 9f       	mul	r18, r25
    1d4e:	d0 0d       	add	r29, r0
    1d50:	11 24       	eor	r1, r1
    1d52:	24 96       	adiw	r28, 0x04	; 4
    1d54:	b8 cf       	rjmp	.-144    	; 0x1cc6 <Gsm_Ard::dettachGPRS()+0x5e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:217
  _change_gsm_state(GSM_PIN_STATE);
    1d56:	62 e0       	ldi	r22, 0x02	; 2
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	c4 01       	movw	r24, r8
    1d5c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:218
  return 0;
    1d60:	b2 cf       	rjmp	.-156    	; 0x1cc6 <Gsm_Ard::dettachGPRS()+0x5e>

00001d62 <Gsm_Ard::_connect_tcp_socket()>:
_ZN7Gsm_Ard19_connect_tcp_socketEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:221
int Gsm_Ard::_connect_tcp_socket(){
    1d62:	8f 92       	push	r8
    1d64:	9f 92       	push	r9
    1d66:	af 92       	push	r10
    1d68:	bf 92       	push	r11
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:223
  if(_gsm_state!=GSM_IP_STATE){
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	ea 57       	subi	r30, 0x7A	; 122
    1d80:	fe 4f       	sbci	r31, 0xFE	; 254
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:224
    return 1;
    1d86:	c1 e0       	ldi	r28, 0x01	; 1
    1d88:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:223
  if(_gsm_state!=GSM_IP_STATE){
    1d8a:	03 97       	sbiw	r24, 0x03	; 3
    1d8c:	b9 f4       	brne	.+46     	; 0x1dbc <Gsm_Ard::_connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:227
  n=_send_cmd_comp_rsp(AT_CIPSHUT, AT_CIPSHUT_LEN, AT_SHUT_OK, AT_SHUT_OK_LEN, 10000);
    1d8e:	50 e1       	ldi	r21, 0x10	; 16
    1d90:	e5 2e       	mov	r14, r21
    1d92:	57 e2       	ldi	r21, 0x27	; 39
    1d94:	f5 2e       	mov	r15, r21
    1d96:	07 e0       	ldi	r16, 0x07	; 7
    1d98:	10 e0       	ldi	r17, 0x00	; 0
    1d9a:	21 e3       	ldi	r18, 0x31	; 49
    1d9c:	31 e0       	ldi	r19, 0x01	; 1
    1d9e:	4a e0       	ldi	r20, 0x0A	; 10
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	69 e3       	ldi	r22, 0x39	; 57
    1da4:	71 e0       	ldi	r23, 0x01	; 1
    1da6:	c4 01       	movw	r24, r8
    1da8:	ea da       	rcall	.-2604   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:228
  if(n){
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	a9 f0       	breq	.+42     	; 0x1dd8 <Gsm_Ard::_connect_tcp_socket()+0x76>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:229
    return 2+10*n;
    1dae:	2a e0       	ldi	r18, 0x0A	; 10
    1db0:	28 9f       	mul	r18, r24
    1db2:	e0 01       	movw	r28, r0
    1db4:	29 9f       	mul	r18, r25
    1db6:	d0 0d       	add	r29, r0
    1db8:	11 24       	eor	r1, r1
    1dba:	22 96       	adiw	r28, 0x02	; 2
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:260
}
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	ff 90       	pop	r15
    1dc8:	ef 90       	pop	r14
    1dca:	df 90       	pop	r13
    1dcc:	cf 90       	pop	r12
    1dce:	bf 90       	pop	r11
    1dd0:	af 90       	pop	r10
    1dd2:	9f 90       	pop	r9
    1dd4:	8f 90       	pop	r8
    1dd6:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:232
  n=_send_cmd_comp_several_rsp(AT_CIPMUX_R, AT_CIPMUX_R_LEN, AT_CIPMUX_0, AT_CIPMUX_0_LEN, AT_CIPMUX_1, AT_CIPMUX_1_LEN, 5000);
    1dd8:	28 e8       	ldi	r18, 0x88	; 136
    1dda:	a2 2e       	mov	r10, r18
    1ddc:	23 e1       	ldi	r18, 0x13	; 19
    1dde:	b2 2e       	mov	r11, r18
    1de0:	3a e0       	ldi	r19, 0x0A	; 10
    1de2:	c3 2e       	mov	r12, r19
    1de4:	d1 2c       	mov	r13, r1
    1de6:	42 ee       	ldi	r20, 0xE2	; 226
    1de8:	e4 2e       	mov	r14, r20
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	f4 2e       	mov	r15, r20
    1dee:	0a e0       	ldi	r16, 0x0A	; 10
    1df0:	10 e0       	ldi	r17, 0x00	; 0
    1df2:	2d ee       	ldi	r18, 0xED	; 237
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a e0       	ldi	r20, 0x0A	; 10
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	68 ef       	ldi	r22, 0xF8	; 248
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	c4 01       	movw	r24, r8
    1e00:	d7 db       	rcall	.-2130   	; 0x15b0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:233
  switch(n){
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	19 f1       	breq	.+70     	; 0x1e4c <Gsm_Ard::_connect_tcp_socket()+0xea>
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	91 05       	cpc	r25, r1
    1e0a:	41 f0       	breq	.+16     	; 0x1e1c <Gsm_Ard::_connect_tcp_socket()+0xba>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:235
      return 3+10*n;
    1e0c:	2a e0       	ldi	r18, 0x0A	; 10
    1e0e:	28 9f       	mul	r18, r24
    1e10:	e0 01       	movw	r28, r0
    1e12:	29 9f       	mul	r18, r25
    1e14:	d0 0d       	add	r29, r0
    1e16:	11 24       	eor	r1, r1
    1e18:	23 96       	adiw	r28, 0x03	; 3
    1e1a:	d0 cf       	rjmp	.-96     	; 0x1dbc <Gsm_Ard::_connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:240
      n=_send_cmd_comp_rsp(AT_CIPMUX_SET, AT_CIPMUX_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    1e1c:	98 e8       	ldi	r25, 0x88	; 136
    1e1e:	e9 2e       	mov	r14, r25
    1e20:	93 e1       	ldi	r25, 0x13	; 19
    1e22:	f9 2e       	mov	r15, r25
    1e24:	02 e0       	ldi	r16, 0x02	; 2
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	20 e9       	ldi	r18, 0x90	; 144
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4b e0       	ldi	r20, 0x0B	; 11
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	66 ed       	ldi	r22, 0xD6	; 214
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	c4 01       	movw	r24, r8
    1e36:	a3 da       	rcall	.-2746   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:241
      if(n){
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	41 f0       	breq	.+16     	; 0x1e4c <Gsm_Ard::_connect_tcp_socket()+0xea>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:242
        return 4+10*n;
    1e3c:	2a e0       	ldi	r18, 0x0A	; 10
    1e3e:	28 9f       	mul	r18, r24
    1e40:	e0 01       	movw	r28, r0
    1e42:	29 9f       	mul	r18, r25
    1e44:	d0 0d       	add	r29, r0
    1e46:	11 24       	eor	r1, r1
    1e48:	24 96       	adiw	r28, 0x04	; 4
    1e4a:	b8 cf       	rjmp	.-144    	; 0x1dbc <Gsm_Ard::_connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:247
  n=_send_cmd_comp_rsp(AT_CIPSTART_SET, AT_CIPSTART_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    1e4c:	88 e8       	ldi	r24, 0x88	; 136
    1e4e:	e8 2e       	mov	r14, r24
    1e50:	83 e1       	ldi	r24, 0x13	; 19
    1e52:	f8 2e       	mov	r15, r24
    1e54:	02 e0       	ldi	r16, 0x02	; 2
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    1e58:	20 e9       	ldi	r18, 0x90	; 144
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	44 e2       	ldi	r20, 0x24	; 36
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	61 eb       	ldi	r22, 0xB1	; 177
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	c4 01       	movw	r24, r8
    1e66:	8b da       	rcall	.-2794   	; 0x137e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:248
  if(n){
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	41 f0       	breq	.+16     	; 0x1e7c <Gsm_Ard::_connect_tcp_socket()+0x11a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:249
    return 5+10*n;
    1e6c:	2a e0       	ldi	r18, 0x0A	; 10
    1e6e:	28 9f       	mul	r18, r24
    1e70:	e0 01       	movw	r28, r0
    1e72:	29 9f       	mul	r18, r25
    1e74:	d0 0d       	add	r29, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	25 96       	adiw	r28, 0x05	; 5
    1e7a:	a0 cf       	rjmp	.-192    	; 0x1dbc <Gsm_Ard::_connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:252
  n=_no_cmd_comp_rsp(AT_CONNECT_OK, AT_CONNECT_OK_LEN, 10000);
    1e7c:	20 e1       	ldi	r18, 0x10	; 16
    1e7e:	37 e2       	ldi	r19, 0x27	; 39
    1e80:	4a e0       	ldi	r20, 0x0A	; 10
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	66 ea       	ldi	r22, 0xA6	; 166
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	c4 01       	movw	r24, r8
    1e8a:	89 d8       	rcall	.-3822   	; 0xf9e <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)>
    1e8c:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:253
  if(n){
    1e8e:	89 2b       	or	r24, r25
    1e90:	49 f0       	breq	.+18     	; 0x1ea4 <Gsm_Ard::_connect_tcp_socket()+0x142>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:254
    return 6+10*n;
    1e92:	2a e0       	ldi	r18, 0x0A	; 10
    1e94:	2c 9f       	mul	r18, r28
    1e96:	c0 01       	movw	r24, r0
    1e98:	2d 9f       	mul	r18, r29
    1e9a:	90 0d       	add	r25, r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	ec 01       	movw	r28, r24
    1ea0:	26 96       	adiw	r28, 0x06	; 6
    1ea2:	8c cf       	rjmp	.-232    	; 0x1dbc <Gsm_Ard::_connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:257
  _change_gsm_state(GSM_TCP_STATE);
    1ea4:	64 e0       	ldi	r22, 0x04	; 4
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	c4 01       	movw	r24, r8
    1eaa:	0e 94 1e 05 	call	0xa3c	; 0xa3c <Gsm_Ard::_change_gsm_state(GSM_STATE)>
    1eae:	86 cf       	rjmp	.-244    	; 0x1dbc <Gsm_Ard::_connect_tcp_socket()+0x5a>

00001eb0 <Gsm_Ard::_send_tcp_data(char*, unsigned int)>:
_ZN7Gsm_Ard14_send_tcp_dataEPcj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:285
int Gsm_Ard::_send_tcp_data(char* data, unsigned int data_len){
    1eb0:	8f 92       	push	r8
    1eb2:	9f 92       	push	r9
    1eb4:	af 92       	push	r10
    1eb6:	bf 92       	push	r11
    1eb8:	cf 92       	push	r12
    1eba:	df 92       	push	r13
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	0f 93       	push	r16
    1ec2:	1f 93       	push	r17
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	6c 01       	movw	r12, r24
    1eca:	4b 01       	movw	r8, r22
    1ecc:	7a 01       	movw	r14, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:290
  if(_gsm_state!=GSM_TCP_STATE){
    1ece:	fc 01       	movw	r30, r24
    1ed0:	ea 57       	subi	r30, 0x7A	; 122
    1ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed4:	80 81       	ld	r24, Z
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:291
    return 1;
    1ed8:	01 e0       	ldi	r16, 0x01	; 1
    1eda:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:290
  if(_gsm_state!=GSM_TCP_STATE){
    1edc:	04 97       	sbiw	r24, 0x04	; 4
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x32>
    1ee0:	51 c0       	rjmp	.+162    	; 0x1f84 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xd4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:295
  cmd=new char[AT_CIPSEND_LEN];
    1ee2:	8a e0       	ldi	r24, 0x0A	; 10
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	c5 d7       	rcall	.+3978   	; 0x2e72 <operator new[](unsigned int)>
    1ee8:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:297
  strcpy_P(cmd, AT_CIPSEND);
    1eea:	6b e9       	ldi	r22, 0x9B	; 155
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	0e 94 ca 1b 	call	0x3794	; 0x3794 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:298
  _write_cmd(cmd);
    1ef2:	be 01       	movw	r22, r28
    1ef4:	c6 01       	movw	r24, r12
    1ef6:	1b da       	rcall	.-3018   	; 0x132e <Gsm_Ard::_write_cmd(char const*)>
    1ef8:	04 e6       	ldi	r16, 0x64	; 100
    1efa:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:302
    if(!_ss.available()){
    1efc:	56 01       	movw	r10, r12
    1efe:	82 e7       	ldi	r24, 0x72	; 114
    1f00:	a8 1a       	sub	r10, r24
    1f02:	8e ef       	ldi	r24, 0xFE	; 254
    1f04:	b8 0a       	sbc	r11, r24
    1f06:	c5 01       	movw	r24, r10
    1f08:	65 d4       	rcall	.+2250   	; 0x27d4 <SoftwareSerial::available()>
    1f0a:	89 2b       	or	r24, r25
    1f0c:	59 f5       	brne	.+86     	; 0x1f64 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xb4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:303
      delay(100);
    1f0e:	64 e6       	ldi	r22, 0x64	; 100
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a9 d6       	rcall	.+3410   	; 0x2c6a <delay>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:307
      if(temp==AT_CIPSEND_PROMPT){
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	29 c0       	rjmp	.+82     	; 0x1f6e <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xbe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:301
  for(int i=0;i<100 && !prompt_received;i++){
    1f1c:	99 23       	and	r25, r25
    1f1e:	99 f3       	breq	.-26     	; 0x1f06 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x56>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:331
  dbg_print_buffer(__FILE__, __LINE__, __func__, "DATA", data, data_len);
    1f20:	84 01       	movw	r16, r8
    1f22:	22 ec       	ldi	r18, 0xC2	; 194
    1f24:	32 e0       	ldi	r19, 0x02	; 2
    1f26:	4e e1       	ldi	r20, 0x1E	; 30
    1f28:	53 e0       	ldi	r21, 0x03	; 3
    1f2a:	6b e4       	ldi	r22, 0x4B	; 75
    1f2c:	71 e0       	ldi	r23, 0x01	; 1
    1f2e:	8f e5       	ldi	r24, 0x5F	; 95
    1f30:	92 e0       	ldi	r25, 0x02	; 2
    1f32:	46 d3       	rcall	.+1676   	; 0x25c0 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:334
  _ss.write(SUB_CHAR);
    1f34:	6a e1       	ldi	r22, 0x1A	; 26
    1f36:	c5 01       	movw	r24, r10
    1f38:	d8 d3       	rcall	.+1968   	; 0x26ea <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:336
  n=_no_cmd_comp_rsp(AT_CIPSEND_OK, AT_CIPSEND_OK_LEN, 10000);
    1f3a:	20 e1       	ldi	r18, 0x10	; 16
    1f3c:	37 e2       	ldi	r19, 0x27	; 39
    1f3e:	47 e0       	ldi	r20, 0x07	; 7
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	63 e9       	ldi	r22, 0x93	; 147
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	c6 01       	movw	r24, r12
    1f48:	2a d8       	rcall	.-4012   	; 0xf9e <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)>
    1f4a:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:337
  if(n){
    1f4c:	89 2b       	or	r24, r25
    1f4e:	b1 f0       	breq	.+44     	; 0x1f7c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xcc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:338
    err=3+n*10;
    1f50:	2a e0       	ldi	r18, 0x0A	; 10
    1f52:	20 9f       	mul	r18, r16
    1f54:	c0 01       	movw	r24, r0
    1f56:	21 9f       	mul	r18, r17
    1f58:	90 0d       	add	r25, r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	8c 01       	movw	r16, r24
    1f5e:	0d 5f       	subi	r16, 0xFD	; 253
    1f60:	1f 4f       	sbci	r17, 0xFF	; 255
    1f62:	0c c0       	rjmp	.+24     	; 0x1f7c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xcc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:306
      temp=_ss.read();
    1f64:	c5 01       	movw	r24, r10
    1f66:	a0 d3       	rcall	.+1856   	; 0x26a8 <SoftwareSerial::read()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:307
      if(temp==AT_CIPSEND_PROMPT){
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	8e 33       	cpi	r24, 0x3E	; 62
    1f6c:	a9 f6       	brne	.-86     	; 0x1f18 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x68>
    1f6e:	01 50       	subi	r16, 0x01	; 1
    1f70:	11 09       	sbc	r17, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:301
  for(int i=0;i<100 && !prompt_received;i++){
    1f72:	a1 f6       	brne	.-88     	; 0x1f1c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x6c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:313
    err=2;
    1f74:	02 e0       	ldi	r16, 0x02	; 2
    1f76:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:312
  if(!prompt_received){
    1f78:	91 11       	cpse	r25, r1
    1f7a:	d2 cf       	rjmp	.-92     	; 0x1f20 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x70>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:346
  delete[] cmd;
    1f7c:	20 97       	sbiw	r28, 0x00	; 0
    1f7e:	11 f0       	breq	.+4      	; 0x1f84 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xd4>
    1f80:	ce 01       	movw	r24, r28
    1f82:	78 d7       	rcall	.+3824   	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:348
}
    1f84:	c8 01       	movw	r24, r16
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	bf 90       	pop	r11
    1f98:	af 90       	pop	r10
    1f9a:	9f 90       	pop	r9
    1f9c:	8f 90       	pop	r8
    1f9e:	08 95       	ret

00001fa0 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)>:
_ZN7Gsm_Ard15send_socket_msgEPcjPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:791
int Gsm_Ard::send_socket_msg(char* data, unsigned int data_len, unsigned int* rsp_len){
    1fa0:	cf 92       	push	r12
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
    1fb2:	7b 01       	movw	r14, r22
    1fb4:	6a 01       	movw	r12, r20
    1fb6:	89 01       	movw	r16, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:793
  n=_connect_tcp_socket();
    1fb8:	d4 de       	rcall	.-600    	; 0x1d62 <Gsm_Ard::_connect_tcp_socket()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:794
  if(n){
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	89 f0       	breq	.+34     	; 0x1fe0 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x40>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:795
    return 1+10*n;
    1fbe:	4a e0       	ldi	r20, 0x0A	; 10
    1fc0:	48 9f       	mul	r20, r24
    1fc2:	90 01       	movw	r18, r0
    1fc4:	49 9f       	mul	r20, r25
    1fc6:	30 0d       	add	r19, r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	c9 01       	movw	r24, r18
    1fcc:	01 96       	adiw	r24, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:815
}
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:798
  n=_send_tcp_data(data, data_len);
    1fe0:	a6 01       	movw	r20, r12
    1fe2:	b7 01       	movw	r22, r14
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	64 df       	rcall	.-312    	; 0x1eb0 <Gsm_Ard::_send_tcp_data(char*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:799
  if(n){
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	49 f0       	breq	.+18     	; 0x1ffe <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x5e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:800
    return 2+10*n;
    1fec:	4a e0       	ldi	r20, 0x0A	; 10
    1fee:	48 9f       	mul	r20, r24
    1ff0:	90 01       	movw	r18, r0
    1ff2:	49 9f       	mul	r20, r25
    1ff4:	30 0d       	add	r19, r0
    1ff6:	11 24       	eor	r1, r1
    1ff8:	c9 01       	movw	r24, r18
    1ffa:	02 96       	adiw	r24, 0x02	; 2
    1ffc:	e8 cf       	rjmp	.-48     	; 0x1fce <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x2e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:803
  n=_recv_tcp_data(rsp_len);
    1ffe:	b8 01       	movw	r22, r16
    2000:	ce 01       	movw	r24, r28
    2002:	3b d9       	rcall	.-3466   	; 0x127a <Gsm_Ard::_recv_tcp_data(unsigned int*)>
    2004:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:805
    _disconnect_tcp_socket();
    2006:	ce 01       	movw	r24, r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:804
  if(n){
    2008:	01 15       	cp	r16, r1
    200a:	11 05       	cpc	r17, r1
    200c:	49 f0       	breq	.+18     	; 0x2020 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x80>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:805
    _disconnect_tcp_socket();
    200e:	74 da       	rcall	.-2840   	; 0x14f8 <Gsm_Ard::_disconnect_tcp_socket()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:806
    return 3+10*n;
    2010:	2a e0       	ldi	r18, 0x0A	; 10
    2012:	20 9f       	mul	r18, r16
    2014:	c0 01       	movw	r24, r0
    2016:	21 9f       	mul	r18, r17
    2018:	90 0d       	add	r25, r0
    201a:	11 24       	eor	r1, r1
    201c:	03 96       	adiw	r24, 0x03	; 3
    201e:	d7 cf       	rjmp	.-82     	; 0x1fce <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x2e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:809
  n=_disconnect_tcp_socket();
    2020:	6b da       	rcall	.-2858   	; 0x14f8 <Gsm_Ard::_disconnect_tcp_socket()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:810
  if(n){
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	a1 f2       	breq	.-88     	; 0x1fce <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x2e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:811
    return 4+10*n;
    2026:	4a e0       	ldi	r20, 0x0A	; 10
    2028:	48 9f       	mul	r20, r24
    202a:	90 01       	movw	r18, r0
    202c:	49 9f       	mul	r20, r25
    202e:	30 0d       	add	r19, r0
    2030:	11 24       	eor	r1, r1
    2032:	c9 01       	movw	r24, r18
    2034:	04 96       	adiw	r24, 0x04	; 4
    2036:	cb cf       	rjmp	.-106    	; 0x1fce <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x2e>

00002038 <freeMemory>:
freeMemory():
/home/jlr/Documents/bbd/arduino/lib/MemoryFree/MemoryFree.cpp:9


#include "MemoryFree.h"


int freeMemory() {
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	00 d0       	rcall	.+0      	; 0x203e <freeMemory+0x6>
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
/home/jlr/Documents/bbd/arduino/lib/MemoryFree/MemoryFree.cpp:12
  int free_memory;

  if((int)__brkval == 0)
    2042:	20 91 36 06 	lds	r18, 0x0636	; 0x800636 <__brkval>
    2046:	30 91 37 06 	lds	r19, 0x0637	; 0x800637 <__brkval+0x1>
    204a:	ce 01       	movw	r24, r28
    204c:	01 96       	adiw	r24, 0x01	; 1
    204e:	21 15       	cp	r18, r1
    2050:	31 05       	cpc	r19, r1
    2052:	59 f4       	brne	.+22     	; 0x206a <freeMemory+0x32>
/home/jlr/Documents/bbd/arduino/lib/MemoryFree/MemoryFree.cpp:13
     free_memory = ((int)&free_memory) - ((int)&__bss_end);
    2054:	8a 53       	subi	r24, 0x3A	; 58
    2056:	96 40       	sbci	r25, 0x06	; 6
/home/jlr/Documents/bbd/arduino/lib/MemoryFree/MemoryFree.cpp:15
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
/home/jlr/Documents/bbd/arduino/lib/MemoryFree/MemoryFree.cpp:18

  return free_memory;
}
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/MemoryFree/MemoryFree.cpp:15
    free_memory = ((int)&free_memory) - ((int)__brkval);
    206a:	82 1b       	sub	r24, r18
    206c:	93 0b       	sbc	r25, r19
    206e:	f4 cf       	rjmp	.-24     	; 0x2058 <freeMemory+0x20>

00002070 <get_last_sche_msg(char**)>:
_Z17get_last_sche_msgPPc():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:29
  *res=ntohl(curr_time);

  return 0;
}

int get_last_sche_msg(char** msg){
    2070:	fc 01       	movw	r30, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:32
  uint8_t msg_len=0;
  uint16_t temp_16=htons(SOCKET_HEADER);
  memcpy(*msg, &temp_16, SH_SIZE);
    2072:	a0 81       	ld	r26, Z
    2074:	b1 81       	ldd	r27, Z+1	; 0x01
    2076:	84 e9       	ldi	r24, 0x94	; 148
    2078:	91 e8       	ldi	r25, 0x81	; 129
    207a:	8d 93       	st	X+, r24
    207c:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:33
  memcpy(*msg+SH_SIZE,&ARDUINO_ID, ID_SIZE);
    207e:	a0 81       	ld	r26, Z
    2080:	b1 81       	ldd	r27, Z+1	; 0x01
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	12 96       	adiw	r26, 0x02	; 2
    2086:	8c 93       	st	X, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:34
  memcpy(*msg+SH_SIZE+ID_SIZE, &LAST_SCHE_MSG, TYPE_SIZE);
    2088:	a0 81       	ld	r26, Z
    208a:	b1 81       	ldd	r27, Z+1	; 0x01
    208c:	82 e0       	ldi	r24, 0x02	; 2
    208e:	13 96       	adiw	r26, 0x03	; 3
    2090:	8c 93       	st	X, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:35
  memcpy(*msg+SH_SIZE+ID_SIZE+TYPE_SIZE, &msg_len, T_SIZE_SIZE);
    2092:	01 90       	ld	r0, Z+
    2094:	f0 81       	ld	r31, Z
    2096:	e0 2d       	mov	r30, r0
    2098:	14 82       	std	Z+4, r1	; 0x04
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:37
  return 0;
}
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	08 95       	ret

000020a0 <ValveSchedule::ValveSchedule(ValveSchedule const&)>:
_ZN13ValveScheduleC2ERKS_():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:9
#include "arduino_cfg.h"
#include "socket_bbd.h"

ValveSchedule::ValveSchedule(){}

ValveSchedule::ValveSchedule(const ValveSchedule &v_sche){
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
    20a8:	ec 01       	movw	r28, r24
    20aa:	8b 01       	movw	r16, r22
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:10
  valve_id=v_sche.valve_id;
    20ac:	fb 01       	movw	r30, r22
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	99 83       	std	Y+1, r25	; 0x01
    20b4:	88 83       	st	Y, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:11
  schedule_id=v_sche.schedule_id;
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	9b 83       	std	Y+3, r25	; 0x03
    20bc:	8a 83       	std	Y+2, r24	; 0x02
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:12
  n_cicles=v_sche.n_cicles;
    20be:	84 81       	ldd	r24, Z+4	; 0x04
    20c0:	8c 83       	std	Y+4, r24	; 0x04
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:13
  cicles= new schedule_entry[n_cicles];
    20c2:	f4 e0       	ldi	r31, 0x04	; 4
    20c4:	8f 9f       	mul	r24, r31
    20c6:	c0 01       	movw	r24, r0
    20c8:	11 24       	eor	r1, r1
    20ca:	d3 d6       	rcall	.+3494   	; 0x2e72 <operator new[](unsigned int)>
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:14
  memcpy(cicles, v_sche.cicles, sizeof(schedule_entry)*n_cicles);
    20d0:	4c 81       	ldd	r20, Y+4	; 0x04
    20d2:	24 e0       	ldi	r18, 0x04	; 4
    20d4:	42 9f       	mul	r20, r18
    20d6:	a0 01       	movw	r20, r0
    20d8:	11 24       	eor	r1, r1
    20da:	f8 01       	movw	r30, r16
    20dc:	65 81       	ldd	r22, Z+5	; 0x05
    20de:	76 81       	ldd	r23, Z+6	; 0x06
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:15
}
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:14
  memcpy(cicles, v_sche.cicles, sizeof(schedule_entry)*n_cicles);
    20e8:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <memcpy>

000020ec <ValveSchedule::~ValveSchedule()>:
_ZN13ValveScheduleD2Ev():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:27

ValveSchedule::~ValveSchedule(){
  // for(uint8_t i=0;i<n_cicles;i++){
  //   delete cicles[i];
  // }
  delete[] cicles;
    20ec:	fc 01       	movw	r30, r24
    20ee:	85 81       	ldd	r24, Z+5	; 0x05
    20f0:	96 81       	ldd	r25, Z+6	; 0x06
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <ValveSchedule::~ValveSchedule()+0xc>
    20f6:	be c6       	rjmp	.+3452   	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:31
  // delete valve_id;
  // delete schedule_id;
  // delete n_cicles;
}
    20f8:	08 95       	ret

000020fa <ValveSchedule::add_cicle(schedule_entry)>:
_ZN13ValveSchedule9add_cicleE14schedule_entry():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:33

void ValveSchedule::add_cicle(schedule_entry cicle){
    20fa:	8f 92       	push	r8
    20fc:	9f 92       	push	r9
    20fe:	af 92       	push	r10
    2100:	bf 92       	push	r11
    2102:	cf 92       	push	r12
    2104:	df 92       	push	r13
    2106:	ef 92       	push	r14
    2108:	ff 92       	push	r15
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	ec 01       	movw	r28, r24
    2112:	4a 01       	movw	r8, r20
    2114:	5b 01       	movw	r10, r22
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:34
  schedule_entry* _temp=new schedule_entry[n_cicles+1];
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	01 96       	adiw	r24, 0x01	; 1
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	a6 d6       	rcall	.+3404   	; 0x2e72 <operator new[](unsigned int)>
    2126:	6c 01       	movw	r12, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:35
  memcpy(_temp, cicles, n_cicles*sizeof(schedule_entry));
    2128:	1c 81       	ldd	r17, Y+4	; 0x04
    212a:	84 e0       	ldi	r24, 0x04	; 4
    212c:	18 9f       	mul	r17, r24
    212e:	70 01       	movw	r14, r0
    2130:	11 24       	eor	r1, r1
    2132:	6d 81       	ldd	r22, Y+5	; 0x05
    2134:	7e 81       	ldd	r23, Y+6	; 0x06
    2136:	a7 01       	movw	r20, r14
    2138:	c6 01       	movw	r24, r12
    213a:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <memcpy>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:36
  memcpy(_temp+n_cicles, &cicle, sizeof(schedule_entry));
    213e:	f6 01       	movw	r30, r12
    2140:	ee 0d       	add	r30, r14
    2142:	ff 1d       	adc	r31, r15
    2144:	80 82       	st	Z, r8
    2146:	91 82       	std	Z+1, r9	; 0x01
    2148:	a2 82       	std	Z+2, r10	; 0x02
    214a:	b3 82       	std	Z+3, r11	; 0x03
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:37
  cicles=_temp;
    214c:	de 82       	std	Y+6, r13	; 0x06
    214e:	cd 82       	std	Y+5, r12	; 0x05
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:38
  n_cicles++;
    2150:	1f 5f       	subi	r17, 0xFF	; 255
    2152:	1c 83       	std	Y+4, r17	; 0x04
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:39
}
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	df 90       	pop	r13
    2160:	cf 90       	pop	r12
    2162:	bf 90       	pop	r11
    2164:	af 90       	pop	r10
    2166:	9f 90       	pop	r9
    2168:	8f 90       	pop	r8
    216a:	08 95       	ret

0000216c <ArduinoSchedules::ArduinoSchedules(unsigned int)>:
_ZN16ArduinoSchedulesC2Ej():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:50
uint16_t ValveSchedule::get_schedule_id(){
  return schedule_id;
}

ArduinoSchedules::ArduinoSchedules(uint16_t _arduino_id){
  arduino_id=_arduino_id;
    216c:	fc 01       	movw	r30, r24
    216e:	71 83       	std	Z+1, r23	; 0x01
    2170:	60 83       	st	Z, r22
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:51
  n_schedules=0;
    2172:	12 82       	std	Z+2, r1	; 0x02
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:52
}
    2174:	08 95       	ret

00002176 <ArduinoSchedules::~ArduinoSchedules()>:
_ZN16ArduinoSchedulesD2Ev():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:54

ArduinoSchedules::~ArduinoSchedules(){
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	cf 93       	push	r28
    217c:	df 93       	push	r29
    217e:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:58
  // for(uint8_t i=0;i<n_schedules;i++){
  //   delete schedules[i];
  // }
  delete[] schedules;
    2180:	fc 01       	movw	r30, r24
    2182:	c3 81       	ldd	r28, Z+3	; 0x03
    2184:	d4 81       	ldd	r29, Z+4	; 0x04
    2186:	20 97       	sbiw	r28, 0x00	; 0
    2188:	e9 f0       	breq	.+58     	; 0x21c4 <ArduinoSchedules::~ArduinoSchedules()+0x4e>
    218a:	fe 01       	movw	r30, r28
    218c:	32 97       	sbiw	r30, 0x02	; 2
    218e:	20 81       	ld	r18, Z
    2190:	31 81       	ldd	r19, Z+1	; 0x01
    2192:	47 e0       	ldi	r20, 0x07	; 7
    2194:	42 9f       	mul	r20, r18
    2196:	c0 01       	movw	r24, r0
    2198:	43 9f       	mul	r20, r19
    219a:	90 0d       	add	r25, r0
    219c:	11 24       	eor	r1, r1
    219e:	c8 0f       	add	r28, r24
    21a0:	d9 1f       	adc	r29, r25
    21a2:	9e 01       	movw	r18, r28
    21a4:	f8 01       	movw	r30, r16
    21a6:	83 81       	ldd	r24, Z+3	; 0x03
    21a8:	94 81       	ldd	r25, Z+4	; 0x04
    21aa:	27 97       	sbiw	r28, 0x07	; 7
    21ac:	82 17       	cp	r24, r18
    21ae:	93 07       	cpc	r25, r19
    21b0:	19 f0       	breq	.+6      	; 0x21b8 <ArduinoSchedules::~ArduinoSchedules()+0x42>
    21b2:	ce 01       	movw	r24, r28
    21b4:	9b df       	rcall	.-202    	; 0x20ec <ValveSchedule::~ValveSchedule()>
    21b6:	f5 cf       	rjmp	.-22     	; 0x21a2 <ArduinoSchedules::~ArduinoSchedules()+0x2c>
    21b8:	02 97       	sbiw	r24, 0x02	; 2
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:61
  // delete n_schedules;
  // delete arduino_id;
}
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:58
  delete[] schedules;
    21c2:	58 c6       	rjmp	.+3248   	; 0x2e74 <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:61
}
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	08 95       	ret

000021ce <ArduinoSchedules::add_schedule(ValveSchedule)>:
_ZN16ArduinoSchedules12add_scheduleE13ValveSchedule():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:63

int ArduinoSchedules::add_schedule(ValveSchedule sche){
    21ce:	bf 92       	push	r11
    21d0:	cf 92       	push	r12
    21d2:	df 92       	push	r13
    21d4:	ef 92       	push	r14
    21d6:	ff 92       	push	r15
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	ec 01       	movw	r28, r24
    21e2:	6b 01       	movw	r12, r22
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:65
  //check if theres schedule for valve
  for(uint8_t i=0;i<n_schedules;i++){
    21e4:	0a 81       	ldd	r16, Y+2	; 0x02
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	08 17       	cp	r16, r24
    21ee:	89 f0       	breq	.+34     	; 0x2212 <ArduinoSchedules::add_schedule(ValveSchedule)+0x44>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:66
    if(schedules[i].valve_id==sche.valve_id){
    21f0:	eb 81       	ldd	r30, Y+3	; 0x03
    21f2:	fc 81       	ldd	r31, Y+4	; 0x04
    21f4:	e2 0f       	add	r30, r18
    21f6:	f3 1f       	adc	r31, r19
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	29 5f       	subi	r18, 0xF9	; 249
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	d6 01       	movw	r26, r12
    2202:	4d 91       	ld	r20, X+
    2204:	5c 91       	ld	r21, X
    2206:	64 17       	cp	r22, r20
    2208:	75 07       	cpc	r23, r21
    220a:	09 f4       	brne	.+2      	; 0x220e <ArduinoSchedules::add_schedule(ValveSchedule)+0x40>
    220c:	56 c0       	rjmp	.+172    	; 0x22ba <ArduinoSchedules::add_schedule(ValveSchedule)+0xec>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:65
  for(uint8_t i=0;i<n_schedules;i++){
    220e:	8f 5f       	subi	r24, 0xFF	; 255
    2210:	ed cf       	rjmp	.-38     	; 0x21ec <ArduinoSchedules::add_schedule(ValveSchedule)+0x1e>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:70
      return 1;
    }
  }
  ValveSchedule* _temp = new ValveSchedule[n_schedules+1];
    2212:	10 e0       	ldi	r17, 0x00	; 0
    2214:	0f 5f       	subi	r16, 0xFF	; 255
    2216:	1f 4f       	sbci	r17, 0xFF	; 255
    2218:	87 e0       	ldi	r24, 0x07	; 7
    221a:	b8 2e       	mov	r11, r24
    221c:	b0 9e       	mul	r11, r16
    221e:	c0 01       	movw	r24, r0
    2220:	b1 9e       	mul	r11, r17
    2222:	90 0d       	add	r25, r0
    2224:	11 24       	eor	r1, r1
    2226:	02 96       	adiw	r24, 0x02	; 2
    2228:	24 d6       	rcall	.+3144   	; 0x2e72 <operator new[](unsigned int)>
    222a:	fc 01       	movw	r30, r24
    222c:	01 93       	st	Z+, r16
    222e:	11 93       	st	Z+, r17
    2230:	7f 01       	movw	r14, r30
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:71
  memcpy(_temp, schedules, sizeof(ValveSchedule)*n_schedules);
    2232:	0a 81       	ldd	r16, Y+2	; 0x02
    2234:	0b 9d       	mul	r16, r11
    2236:	80 01       	movw	r16, r0
    2238:	11 24       	eor	r1, r1
    223a:	6b 81       	ldd	r22, Y+3	; 0x03
    223c:	7c 81       	ldd	r23, Y+4	; 0x04
    223e:	a8 01       	movw	r20, r16
    2240:	cf 01       	movw	r24, r30
    2242:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <memcpy>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:72
  memcpy(_temp+n_schedules, &sche, sizeof(ValveSchedule));
    2246:	0e 0d       	add	r16, r14
    2248:	1f 1d       	adc	r17, r15
    224a:	f6 01       	movw	r30, r12
    224c:	d8 01       	movw	r26, r16
    224e:	8b 2d       	mov	r24, r11
    2250:	01 90       	ld	r0, Z+
    2252:	0d 92       	st	X+, r0
    2254:	8a 95       	dec	r24
    2256:	e1 f7       	brne	.-8      	; 0x2250 <ArduinoSchedules::add_schedule(ValveSchedule)+0x82>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:73
  _temp[n_schedules].cicles=new schedule_entry[sche.n_cicles];
    2258:	d6 01       	movw	r26, r12
    225a:	14 96       	adiw	r26, 0x04	; 4
    225c:	8c 91       	ld	r24, X
    225e:	b4 e0       	ldi	r27, 0x04	; 4
    2260:	8b 9f       	mul	r24, r27
    2262:	c0 01       	movw	r24, r0
    2264:	11 24       	eor	r1, r1
    2266:	05 d6       	rcall	.+3082   	; 0x2e72 <operator new[](unsigned int)>
    2268:	f8 01       	movw	r30, r16
    226a:	96 83       	std	Z+6, r25	; 0x06
    226c:	85 83       	std	Z+5, r24	; 0x05
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:74
  memcpy(_temp[n_schedules].cicles, sche.cicles, sizeof(schedule_entry)*sche.n_cicles);
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	f7 01       	movw	r30, r14
    2272:	8b 9d       	mul	r24, r11
    2274:	e0 0d       	add	r30, r0
    2276:	f1 1d       	adc	r31, r1
    2278:	11 24       	eor	r1, r1
    227a:	d6 01       	movw	r26, r12
    227c:	14 96       	adiw	r26, 0x04	; 4
    227e:	4c 91       	ld	r20, X
    2280:	b4 e0       	ldi	r27, 0x04	; 4
    2282:	4b 9f       	mul	r20, r27
    2284:	a0 01       	movw	r20, r0
    2286:	11 24       	eor	r1, r1
    2288:	d6 01       	movw	r26, r12
    228a:	15 96       	adiw	r26, 0x05	; 5
    228c:	6d 91       	ld	r22, X+
    228e:	7c 91       	ld	r23, X
    2290:	85 81       	ldd	r24, Z+5	; 0x05
    2292:	96 81       	ldd	r25, Z+6	; 0x06
    2294:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <memcpy>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:75
  schedules=_temp;
    2298:	fc 82       	std	Y+4, r15	; 0x04
    229a:	eb 82       	std	Y+3, r14	; 0x03
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:76
  n_schedules++;
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	8f 5f       	subi	r24, 0xFF	; 255
    22a0:	8a 83       	std	Y+2, r24	; 0x02
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:77
  return 0;
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	80 e0       	ldi	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:78
}
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	ff 90       	pop	r15
    22b0:	ef 90       	pop	r14
    22b2:	df 90       	pop	r13
    22b4:	cf 90       	pop	r12
    22b6:	bf 90       	pop	r11
    22b8:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:67
      return 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	f3 cf       	rjmp	.-26     	; 0x22a6 <ArduinoSchedules::add_schedule(ValveSchedule)+0xd8>

000022c0 <ArduinoSchedules::update_schedule(ValveSchedule)>:
_ZN16ArduinoSchedules15update_scheduleE13ValveSchedule():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:81


int ArduinoSchedules::update_schedule(ValveSchedule sche){
    22c0:	af 92       	push	r10
    22c2:	bf 92       	push	r11
    22c4:	cf 92       	push	r12
    22c6:	df 92       	push	r13
    22c8:	ef 92       	push	r14
    22ca:	ff 92       	push	r15
    22cc:	0f 93       	push	r16
    22ce:	1f 93       	push	r17
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <ArduinoSchedules::update_schedule(ValveSchedule)+0x16>
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <ArduinoSchedules::update_schedule(ValveSchedule)+0x18>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <ArduinoSchedules::update_schedule(ValveSchedule)+0x1a>
    22da:	1f 92       	push	r1
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	7c 01       	movw	r14, r24
    22e2:	6b 01       	movw	r12, r22
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:83
  bool found=false;
  for(uint8_t i=0;i<n_schedules;i++){
    22e4:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:82
  bool found=false;
    22e6:	80 e0       	ldi	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:84
    if(schedules[i].valve_id==sche.valve_id){
    22e8:	07 e0       	ldi	r16, 0x07	; 7
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:83
  for(uint8_t i=0;i<n_schedules;i++){
    22ea:	d7 01       	movw	r26, r14
    22ec:	12 96       	adiw	r26, 0x02	; 2
    22ee:	9c 91       	ld	r25, X
    22f0:	12 97       	sbiw	r26, 0x02	; 2
    22f2:	19 17       	cp	r17, r25
    22f4:	78 f5       	brcc	.+94     	; 0x2354 <ArduinoSchedules::update_schedule(ValveSchedule)+0x94>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:84
    if(schedules[i].valve_id==sche.valve_id){
    22f6:	10 9f       	mul	r17, r16
    22f8:	50 01       	movw	r10, r0
    22fa:	11 24       	eor	r1, r1
    22fc:	13 96       	adiw	r26, 0x03	; 3
    22fe:	ed 91       	ld	r30, X+
    2300:	fc 91       	ld	r31, X
    2302:	ea 0d       	add	r30, r10
    2304:	fb 1d       	adc	r31, r11
    2306:	40 81       	ld	r20, Z
    2308:	51 81       	ldd	r21, Z+1	; 0x01
    230a:	d6 01       	movw	r26, r12
    230c:	2d 91       	ld	r18, X+
    230e:	3c 91       	ld	r19, X
    2310:	11 97       	sbiw	r26, 0x01	; 1
    2312:	42 17       	cp	r20, r18
    2314:	53 07       	cpc	r21, r19
    2316:	e1 f4       	brne	.+56     	; 0x2350 <ArduinoSchedules::update_schedule(ValveSchedule)+0x90>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:85
      if(sche.schedule_id>schedules[i].schedule_id){
    2318:	12 96       	adiw	r26, 0x02	; 2
    231a:	2d 91       	ld	r18, X+
    231c:	3c 91       	ld	r19, X
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	82 17       	cp	r24, r18
    2324:	93 07       	cpc	r25, r19
    2326:	98 f4       	brcc	.+38     	; 0x234e <ArduinoSchedules::update_schedule(ValveSchedule)+0x8e>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:86
        schedules[i]=ValveSchedule(sche);
    2328:	b6 01       	movw	r22, r12
    232a:	ce 01       	movw	r24, r28
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	b8 de       	rcall	.-656    	; 0x20a0 <ValveSchedule::ValveSchedule(ValveSchedule const&)>
    2330:	f7 01       	movw	r30, r14
    2332:	a3 81       	ldd	r26, Z+3	; 0x03
    2334:	b4 81       	ldd	r27, Z+4	; 0x04
    2336:	aa 0d       	add	r26, r10
    2338:	bb 1d       	adc	r27, r11
    233a:	87 e0       	ldi	r24, 0x07	; 7
    233c:	fe 01       	movw	r30, r28
    233e:	31 96       	adiw	r30, 0x01	; 1
    2340:	01 90       	ld	r0, Z+
    2342:	0d 92       	st	X+, r0
    2344:	8a 95       	dec	r24
    2346:	e1 f7       	brne	.-8      	; 0x2340 <ArduinoSchedules::update_schedule(ValveSchedule)+0x80>
    2348:	ce 01       	movw	r24, r28
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	cf de       	rcall	.-610    	; 0x20ec <ValveSchedule::~ValveSchedule()>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:88
      }
      found=true;
    234e:	81 e0       	ldi	r24, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:83
  for(uint8_t i=0;i<n_schedules;i++){
    2350:	1f 5f       	subi	r17, 0xFF	; 255
    2352:	cb cf       	rjmp	.-106    	; 0x22ea <ArduinoSchedules::update_schedule(ValveSchedule)+0x2a>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:91
    }
  }
  return !found;  //1
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	89 27       	eor	r24, r25
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:92
}
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	27 96       	adiw	r28, 0x07	; 7
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	ff 90       	pop	r15
    2370:	ef 90       	pop	r14
    2372:	df 90       	pop	r13
    2374:	cf 90       	pop	r12
    2376:	bf 90       	pop	r11
    2378:	af 90       	pop	r10
    237a:	08 95       	ret

0000237c <ArduinoSchedules::decode_message(char*, unsigned int)>:
_ZN16ArduinoSchedules14decode_messageEPcj():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:128
    }
  }
  return 1;
}

int ArduinoSchedules::decode_message(char* msg, uint16_t msg_size){
    237c:	2f 92       	push	r2
    237e:	3f 92       	push	r3
    2380:	4f 92       	push	r4
    2382:	5f 92       	push	r5
    2384:	6f 92       	push	r6
    2386:	7f 92       	push	r7
    2388:	8f 92       	push	r8
    238a:	9f 92       	push	r9
    238c:	af 92       	push	r10
    238e:	bf 92       	push	r11
    2390:	cf 92       	push	r12
    2392:	df 92       	push	r13
    2394:	ef 92       	push	r14
    2396:	ff 92       	push	r15
    2398:	0f 93       	push	r16
    239a:	1f 93       	push	r17
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	62 97       	sbiw	r28, 0x12	; 18
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	5c 01       	movw	r10, r24
    23b2:	7b 01       	movw	r14, r22
    23b4:	4a 01       	movw	r8, r20
    23b6:	fb 01       	movw	r30, r22
    23b8:	80 81       	ld	r24, Z
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:138

  uint32_t size_16= sizeof(uint16_t);
  uint32_t size_8= sizeof(uint8_t);
  uint16_t total_read=0;

  memcpy(&arduino_id, msg, size_8);
    23ba:	f5 01       	movw	r30, r10
    23bc:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:140
  total_read+=size_8;
  memcpy(&_n_schedules, msg+total_read , size_8);
    23be:	fb 01       	movw	r30, r22
    23c0:	81 81       	ldd	r24, Z+1	; 0x01
    23c2:	8f 87       	std	Y+15, r24	; 0x0f
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:141
  total_read+=size_8;
    23c4:	02 e0       	ldi	r16, 0x02	; 2
    23c6:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:142
  for(i_sche=0;i_sche<_n_schedules;i_sche++){
    23c8:	31 2c       	mov	r3, r1
    23ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    23cc:	98 89       	ldd	r25, Y+16	; 0x10
    23ce:	38 16       	cp	r3, r24
    23d0:	19 06       	cpc	r1, r25
    23d2:	08 f0       	brcs	.+2      	; 0x23d6 <ArduinoSchedules::decode_message(char*, unsigned int)+0x5a>
    23d4:	4e c0       	rjmp	.+156    	; 0x2472 <ArduinoSchedules::decode_message(char*, unsigned int)+0xf6>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:145
    memcpy(&_valve_id, msg+total_read , size_16);
    total_read+=size_16;
    _valve_id=ntohs(_valve_id);
    23d6:	f7 01       	movw	r30, r14
    23d8:	e0 0f       	add	r30, r16
    23da:	f1 1f       	adc	r31, r17
    23dc:	20 81       	ld	r18, Z
    23de:	31 81       	ldd	r19, Z+1	; 0x01
    23e0:	32 27       	eor	r19, r18
    23e2:	23 27       	eor	r18, r19
    23e4:	32 27       	eor	r19, r18
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:148
    memcpy(&_schedule_id, msg+total_read, size_16);
    total_read+=size_16;
    _schedule_id=ntohs(_schedule_id);
    23e6:	83 81       	ldd	r24, Z+3	; 0x03
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:149
    memcpy(&_n_cicles, msg+total_read, size_8);
    23e8:	94 81       	ldd	r25, Z+4	; 0x04
    23ea:	99 8b       	std	Y+17, r25	; 0x11
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:18
  valve_id=_valve_id;
    23ec:	3a 83       	std	Y+2, r19	; 0x02
    23ee:	29 83       	std	Y+1, r18	; 0x01
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:19
  schedule_id=_schedule_id;
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:20
  n_cicles=0;
    23f6:	1d 82       	std	Y+5, r1	; 0x05
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:151
    total_read+=size_8;
    _v_s=ValveSchedule(_valve_id, _schedule_id);
    23f8:	87 e0       	ldi	r24, 0x07	; 7
    23fa:	fe 01       	movw	r30, r28
    23fc:	31 96       	adiw	r30, 0x01	; 1
    23fe:	de 01       	movw	r26, r28
    2400:	18 96       	adiw	r26, 0x08	; 8
    2402:	01 90       	ld	r0, Z+
    2404:	0d 92       	st	X+, r0
    2406:	8a 95       	dec	r24
    2408:	e1 f7       	brne	.-8      	; 0x2402 <ArduinoSchedules::decode_message(char*, unsigned int)+0x86>
    240a:	ce 01       	movw	r24, r28
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	6e de       	rcall	.-804    	; 0x20ec <ValveSchedule::~ValveSchedule()>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:150
    total_read+=size_8;
    2410:	0b 5f       	subi	r16, 0xFB	; 251
    2412:	1f 4f       	sbci	r17, 0xFF	; 255
    2414:	67 01       	movw	r12, r14
    2416:	c0 0e       	add	r12, r16
    2418:	d1 1e       	adc	r13, r17
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:152
    for(i_cicle=0;i_cicle<_n_cicles;i_cicle++){
    241a:	21 2c       	mov	r2, r1
    241c:	86 01       	movw	r16, r12
    241e:	0e 19       	sub	r16, r14
    2420:	1f 09       	sbc	r17, r15
    2422:	89 89       	ldd	r24, Y+17	; 0x11
    2424:	9a 89       	ldd	r25, Y+18	; 0x12
    2426:	28 16       	cp	r2, r24
    2428:	19 06       	cpc	r1, r25
    242a:	98 f4       	brcc	.+38     	; 0x2452 <ArduinoSchedules::decode_message(char*, unsigned int)+0xd6>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:158
      memcpy(&_cicle_start, msg+total_read , size_16);
      total_read+=size_16;
      _cicle_start=ntohs(_cicle_start);
      memcpy(&_cicle_stop, msg+total_read, size_16);
      total_read+=size_16;
      _cicle_stop=ntohs(_cicle_stop);
    242c:	f6 01       	movw	r30, r12
    242e:	82 81       	ldd	r24, Z+2	; 0x02
    2430:	93 81       	ldd	r25, Z+3	; 0x03
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:155
      _cicle_start=ntohs(_cicle_start);
    2432:	20 81       	ld	r18, Z
    2434:	31 81       	ldd	r19, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:159
      _s_e={_cicle_start, _cicle_stop};
    2436:	52 2e       	mov	r5, r18
    2438:	43 2e       	mov	r4, r19
    243a:	78 2e       	mov	r7, r24
    243c:	69 2e       	mov	r6, r25
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:160
      _v_s.add_cicle(_s_e);
    243e:	b3 01       	movw	r22, r6
    2440:	a2 01       	movw	r20, r4
    2442:	ce 01       	movw	r24, r28
    2444:	08 96       	adiw	r24, 0x08	; 8
    2446:	59 de       	rcall	.-846    	; 0x20fa <ValveSchedule::add_cicle(schedule_entry)>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:152
    for(i_cicle=0;i_cicle<_n_cicles;i_cicle++){
    2448:	23 94       	inc	r2
    244a:	f4 e0       	ldi	r31, 0x04	; 4
    244c:	cf 0e       	add	r12, r31
    244e:	d1 1c       	adc	r13, r1
    2450:	e5 cf       	rjmp	.-54     	; 0x241c <ArduinoSchedules::decode_message(char*, unsigned int)+0xa0>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:162
    }
    add_schedule(_v_s);
    2452:	be 01       	movw	r22, r28
    2454:	68 5f       	subi	r22, 0xF8	; 248
    2456:	7f 4f       	sbci	r23, 0xFF	; 255
    2458:	ce 01       	movw	r24, r28
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	21 de       	rcall	.-958    	; 0x20a0 <ValveSchedule::ValveSchedule(ValveSchedule const&)>
    245e:	be 01       	movw	r22, r28
    2460:	6f 5f       	subi	r22, 0xFF	; 255
    2462:	7f 4f       	sbci	r23, 0xFF	; 255
    2464:	c5 01       	movw	r24, r10
    2466:	b3 de       	rcall	.-666    	; 0x21ce <ArduinoSchedules::add_schedule(ValveSchedule)>
    2468:	ce 01       	movw	r24, r28
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	3f de       	rcall	.-898    	; 0x20ec <ValveSchedule::~ValveSchedule()>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:142
  for(i_sche=0;i_sche<_n_schedules;i_sche++){
    246e:	33 94       	inc	r3
    2470:	ac cf       	rjmp	.-168    	; 0x23ca <ArduinoSchedules::decode_message(char*, unsigned int)+0x4e>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:131
  ValveSchedule _v_s;
    2472:	ce 01       	movw	r24, r28
    2474:	08 96       	adiw	r24, 0x08	; 8
    2476:	3a de       	rcall	.-908    	; 0x20ec <ValveSchedule::~ValveSchedule()>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:164
  }
  return total_read != msg_size;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	08 15       	cp	r16, r8
    247e:	19 05       	cpc	r17, r9
    2480:	11 f4       	brne	.+4      	; 0x2486 <ArduinoSchedules::decode_message(char*, unsigned int)+0x10a>
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	80 e0       	ldi	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:165
}
    2486:	62 96       	adiw	r28, 0x12	; 18
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	ff 90       	pop	r15
    249c:	ef 90       	pop	r14
    249e:	df 90       	pop	r13
    24a0:	cf 90       	pop	r12
    24a2:	bf 90       	pop	r11
    24a4:	af 90       	pop	r10
    24a6:	9f 90       	pop	r9
    24a8:	8f 90       	pop	r8
    24aa:	7f 90       	pop	r7
    24ac:	6f 90       	pop	r6
    24ae:	5f 90       	pop	r5
    24b0:	4f 90       	pop	r4
    24b2:	3f 90       	pop	r3
    24b4:	2f 90       	pop	r2
    24b6:	08 95       	ret

000024b8 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)>:
_ZN16ArduinoSchedules21process_new_schedulesES_():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:176
    }
  }
  return false;
}

int ArduinoSchedules::process_new_schedules(ArduinoSchedules _new_schedules){
    24b8:	7f 92       	push	r7
    24ba:	8f 92       	push	r8
    24bc:	9f 92       	push	r9
    24be:	af 92       	push	r10
    24c0:	bf 92       	push	r11
    24c2:	cf 92       	push	r12
    24c4:	df 92       	push	r13
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	0f 93       	push	r16
    24cc:	1f 93       	push	r17
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x1c>
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x1e>
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x20>
    24d8:	1f 92       	push	r1
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	8c 01       	movw	r16, r24
    24e0:	7b 01       	movw	r14, r22
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:178
  uint16_t _new_valve_id;
  for(uint8_t i=0; i<_new_schedules.n_schedules;i++){
    24e2:	d1 2c       	mov	r13, r1
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:179
    _new_valve_id=_new_schedules.schedules[i].valve_id;
    24e4:	87 e0       	ldi	r24, 0x07	; 7
    24e6:	78 2e       	mov	r7, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:178
  for(uint8_t i=0; i<_new_schedules.n_schedules;i++){
    24e8:	d7 01       	movw	r26, r14
    24ea:	12 96       	adiw	r26, 0x02	; 2
    24ec:	8c 91       	ld	r24, X
    24ee:	12 97       	sbiw	r26, 0x02	; 2
    24f0:	d8 16       	cp	r13, r24
    24f2:	08 f0       	brcs	.+2      	; 0x24f6 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x3e>
    24f4:	62 c0       	rjmp	.+196    	; 0x25ba <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x102>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:179
    _new_valve_id=_new_schedules.schedules[i].valve_id;
    24f6:	d7 9c       	mul	r13, r7
    24f8:	50 01       	movw	r10, r0
    24fa:	11 24       	eor	r1, r1
    24fc:	13 96       	adiw	r26, 0x03	; 3
    24fe:	ed 91       	ld	r30, X+
    2500:	fc 91       	ld	r31, X
    2502:	ea 0d       	add	r30, r10
    2504:	fb 1d       	adc	r31, r11
    2506:	80 80       	ld	r8, Z
    2508:	91 80       	ldd	r9, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:169
    if(valve_id==valve_ids[i]){
    250a:	c4 01       	movw	r24, r8
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	05 97       	sbiw	r24, 0x05	; 5
    2510:	10 f0       	brcs	.+4      	; 0x2516 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x5e>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:178
  for(uint8_t i=0; i<_new_schedules.n_schedules;i++){
    2512:	d3 94       	inc	r13
    2514:	e9 cf       	rjmp	.-46     	; 0x24e8 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x30>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:169
    if(valve_id==valve_ids[i]){
    2516:	c1 2c       	mov	r12, r1
    2518:	80 e0       	ldi	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:182
    if(_is_valve_mine(_new_valve_id)){
      bool found=false;
      for(uint8_t j=0;j<n_schedules;j++){
    251a:	f8 01       	movw	r30, r16
    251c:	92 81       	ldd	r25, Z+2	; 0x02
    251e:	c9 16       	cp	r12, r25
    2520:	00 f5       	brcc	.+64     	; 0x2562 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0xaa>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:183
        if(schedules[j].valve_id==_new_valve_id){
    2522:	03 80       	ldd	r0, Z+3	; 0x03
    2524:	f4 81       	ldd	r31, Z+4	; 0x04
    2526:	e0 2d       	mov	r30, r0
    2528:	c7 9c       	mul	r12, r7
    252a:	e0 0d       	add	r30, r0
    252c:	f1 1d       	adc	r31, r1
    252e:	11 24       	eor	r1, r1
    2530:	20 81       	ld	r18, Z
    2532:	31 81       	ldd	r19, Z+1	; 0x01
    2534:	28 15       	cp	r18, r8
    2536:	39 05       	cpc	r19, r9
    2538:	91 f4       	brne	.+36     	; 0x255e <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0xa6>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:184
          update_schedule(_new_schedules.schedules[i]);
    253a:	d7 01       	movw	r26, r14
    253c:	13 96       	adiw	r26, 0x03	; 3
    253e:	6d 91       	ld	r22, X+
    2540:	7c 91       	ld	r23, X
    2542:	6a 0d       	add	r22, r10
    2544:	7b 1d       	adc	r23, r11
    2546:	ce 01       	movw	r24, r28
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	aa dd       	rcall	.-1196   	; 0x20a0 <ValveSchedule::ValveSchedule(ValveSchedule const&)>
    254c:	be 01       	movw	r22, r28
    254e:	6f 5f       	subi	r22, 0xFF	; 255
    2550:	7f 4f       	sbci	r23, 0xFF	; 255
    2552:	c8 01       	movw	r24, r16
    2554:	b5 de       	rcall	.-662    	; 0x22c0 <ArduinoSchedules::update_schedule(ValveSchedule)>
    2556:	ce 01       	movw	r24, r28
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	c8 dd       	rcall	.-1136   	; 0x20ec <ValveSchedule::~ValveSchedule()>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:185
          found=true;
    255c:	81 e0       	ldi	r24, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:182
      for(uint8_t j=0;j<n_schedules;j++){
    255e:	c3 94       	inc	r12
    2560:	dc cf       	rjmp	.-72     	; 0x251a <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x62>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:188
        }
      }
      if(!found){
    2562:	81 11       	cpse	r24, r1
    2564:	d6 cf       	rjmp	.-84     	; 0x2512 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x5a>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:189
        if(add_schedule(_new_schedules.schedules[i])){
    2566:	f7 01       	movw	r30, r14
    2568:	63 81       	ldd	r22, Z+3	; 0x03
    256a:	74 81       	ldd	r23, Z+4	; 0x04
    256c:	6a 0d       	add	r22, r10
    256e:	7b 1d       	adc	r23, r11
    2570:	ce 01       	movw	r24, r28
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	95 dd       	rcall	.-1238   	; 0x20a0 <ValveSchedule::ValveSchedule(ValveSchedule const&)>
    2576:	be 01       	movw	r22, r28
    2578:	6f 5f       	subi	r22, 0xFF	; 255
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	c8 01       	movw	r24, r16
    257e:	27 de       	rcall	.-946    	; 0x21ce <ArduinoSchedules::add_schedule(ValveSchedule)>
    2580:	5c 01       	movw	r10, r24
    2582:	ce 01       	movw	r24, r28
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	b2 dd       	rcall	.-1180   	; 0x20ec <ValveSchedule::~ValveSchedule()>
    2588:	ab 28       	or	r10, r11
    258a:	09 f4       	brne	.+2      	; 0x258e <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0xd6>
    258c:	c2 cf       	rjmp	.-124    	; 0x2512 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0x5a>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:190
          return 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:197
      }

    }
  }
  return 0;
}
    2592:	27 96       	adiw	r28, 0x07	; 7
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	1f 91       	pop	r17
    25a4:	0f 91       	pop	r16
    25a6:	ff 90       	pop	r15
    25a8:	ef 90       	pop	r14
    25aa:	df 90       	pop	r13
    25ac:	cf 90       	pop	r12
    25ae:	bf 90       	pop	r11
    25b0:	af 90       	pop	r10
    25b2:	9f 90       	pop	r9
    25b4:	8f 90       	pop	r8
    25b6:	7f 90       	pop	r7
    25b8:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/schedule.cpp:196
  return 0;
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	e9 cf       	rjmp	.-46     	; 0x2592 <ArduinoSchedules::process_new_schedules(ArduinoSchedules)+0xda>

000025c0 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)>:
_Z16dbg_print_bufferPKciS0_S0_S0_j():
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:6
#include <stdlib.h>
#include <Arduino.h>
#include "dbg.h"

void dbg_print_buffer(const char* file, int line, const char* func,
   const char* msg, const char* buffer, size_t size){
    25c0:	9f 92       	push	r9
    25c2:	af 92       	push	r10
    25c4:	bf 92       	push	r11
    25c6:	cf 92       	push	r12
    25c8:	df 92       	push	r13
    25ca:	ef 92       	push	r14
    25cc:	ff 92       	push	r15
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	6b 01       	movw	r12, r22
    25d8:	ea 01       	movw	r28, r20
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:7
  Serial.print(file);
    25da:	bc 01       	movw	r22, r24
    25dc:	89 e9       	ldi	r24, 0x99	; 153
    25de:	95 e0       	ldi	r25, 0x05	; 5
    25e0:	13 d5       	rcall	.+2598   	; 0x3008 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:8
  Serial.print(":");
    25e2:	6d e4       	ldi	r22, 0x4D	; 77
    25e4:	73 e0       	ldi	r23, 0x03	; 3
    25e6:	89 e9       	ldi	r24, 0x99	; 153
    25e8:	95 e0       	ldi	r25, 0x05	; 5
    25ea:	0e d5       	rcall	.+2588   	; 0x3008 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:9
  Serial.print(line);
    25ec:	4a e0       	ldi	r20, 0x0A	; 10
    25ee:	50 e0       	ldi	r21, 0x00	; 0
    25f0:	b6 01       	movw	r22, r12
    25f2:	89 e9       	ldi	r24, 0x99	; 153
    25f4:	95 e0       	ldi	r25, 0x05	; 5
    25f6:	bf d5       	rcall	.+2942   	; 0x3176 <Print::print(int, int)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:10
  Serial.print("in ");
    25f8:	6f e4       	ldi	r22, 0x4F	; 79
    25fa:	73 e0       	ldi	r23, 0x03	; 3
    25fc:	89 e9       	ldi	r24, 0x99	; 153
    25fe:	95 e0       	ldi	r25, 0x05	; 5
    2600:	03 d5       	rcall	.+2566   	; 0x3008 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:11
  Serial.print(func);
    2602:	be 01       	movw	r22, r28
    2604:	89 e9       	ldi	r24, 0x99	; 153
    2606:	95 e0       	ldi	r25, 0x05	; 5
    2608:	ff d4       	rcall	.+2558   	; 0x3008 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:12
  Serial.print(" : [");
    260a:	63 e5       	ldi	r22, 0x53	; 83
    260c:	73 e0       	ldi	r23, 0x03	; 3
    260e:	89 e9       	ldi	r24, 0x99	; 153
    2610:	95 e0       	ldi	r25, 0x05	; 5
    2612:	fa d4       	rcall	.+2548   	; 0x3008 <Print::print(char const*)>
    2614:	58 01       	movw	r10, r16
    2616:	ae 0c       	add	r10, r14
    2618:	bf 1c       	adc	r11, r15
    261a:	e8 01       	movw	r28, r16
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:22
    else{
      Serial.print("\\");
      Serial.print((uint8_t) buffer[i]);
    }

    if(i<size-1){
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	e8 1a       	sub	r14, r24
    2620:	f1 08       	sbc	r15, r1
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:13
  for(size_t i=0;i<size;i++){
    2622:	ca 15       	cp	r28, r10
    2624:	db 05       	cpc	r29, r11
    2626:	69 f1       	breq	.+90     	; 0x2682 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)+0xc2>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:14
    if(!isalpha(buffer[i]) && !isdigit(buffer[i])){
    2628:	98 80       	ld	r9, Y
    262a:	c9 2c       	mov	r12, r9
    262c:	09 2c       	mov	r0, r9
    262e:	00 0c       	add	r0, r0
    2630:	dd 08       	sbc	r13, r13
    2632:	c6 01       	movw	r24, r12
    2634:	0e 94 c3 1b 	call	0x3786	; 0x3786 <isalpha>
    2638:	89 2b       	or	r24, r25
    263a:	b9 f4       	brne	.+46     	; 0x266a <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)+0xaa>
    263c:	80 e3       	ldi	r24, 0x30	; 48
    263e:	c8 1a       	sub	r12, r24
    2640:	d1 08       	sbc	r13, r1
    2642:	8a e0       	ldi	r24, 0x0A	; 10
    2644:	c8 16       	cp	r12, r24
    2646:	d1 04       	cpc	r13, r1
    2648:	80 f0       	brcs	.+32     	; 0x266a <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)+0xaa>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:15
      Serial.print(buffer[i]);
    264a:	69 2d       	mov	r22, r9
    264c:	89 e9       	ldi	r24, 0x99	; 153
    264e:	95 e0       	ldi	r25, 0x05	; 5
    2650:	e2 d4       	rcall	.+2500   	; 0x3016 <Print::print(char)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:22
    if(i<size-1){
    2652:	ce 01       	movw	r24, r28
    2654:	80 1b       	sub	r24, r16
    2656:	91 0b       	sbc	r25, r17
    2658:	8e 15       	cp	r24, r14
    265a:	9f 05       	cpc	r25, r15
    265c:	20 f4       	brcc	.+8      	; 0x2666 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)+0xa6>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:23
      Serial.print(' ');
    265e:	60 e2       	ldi	r22, 0x20	; 32
    2660:	89 e9       	ldi	r24, 0x99	; 153
    2662:	95 e0       	ldi	r25, 0x05	; 5
    2664:	d8 d4       	rcall	.+2480   	; 0x3016 <Print::print(char)>
    2666:	21 96       	adiw	r28, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:13
  for(size_t i=0;i<size;i++){
    2668:	dc cf       	rjmp	.-72     	; 0x2622 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)+0x62>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:18
      Serial.print("\\");
    266a:	68 e5       	ldi	r22, 0x58	; 88
    266c:	73 e0       	ldi	r23, 0x03	; 3
    266e:	89 e9       	ldi	r24, 0x99	; 153
    2670:	95 e0       	ldi	r25, 0x05	; 5
    2672:	ca d4       	rcall	.+2452   	; 0x3008 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:19
      Serial.print((uint8_t) buffer[i]);
    2674:	4a e0       	ldi	r20, 0x0A	; 10
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	68 81       	ld	r22, Y
    267a:	89 e9       	ldi	r24, 0x99	; 153
    267c:	95 e0       	ldi	r25, 0x05	; 5
    267e:	9d d5       	rcall	.+2874   	; 0x31ba <Print::print(unsigned char, int)>
    2680:	e8 cf       	rjmp	.-48     	; 0x2652 <dbg_print_buffer(char const*, int, char const*, char const*, char const*, unsigned int)+0x92>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:26
    }
  }
  Serial.println("]");
    2682:	6a e5       	ldi	r22, 0x5A	; 90
    2684:	73 e0       	ldi	r23, 0x03	; 3
    2686:	89 e9       	ldi	r24, 0x99	; 153
    2688:	95 e0       	ldi	r25, 0x05	; 5
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:27
}
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	df 90       	pop	r13
    2698:	cf 90       	pop	r12
    269a:	bf 90       	pop	r11
    269c:	af 90       	pop	r10
    269e:	9f 90       	pop	r9
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:26
  Serial.println("]");
    26a0:	c4 c4       	rjmp	.+2440   	; 0x302a <Print::println(char const*)>

000026a2 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	08 95       	ret

000026a8 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:394


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    26a8:	20 91 8e 05 	lds	r18, 0x058E	; 0x80058e <SoftwareSerial::active_object>
    26ac:	30 91 8f 05 	lds	r19, 0x058F	; 0x80058f <SoftwareSerial::active_object+0x1>
    26b0:	28 17       	cp	r18, r24
    26b2:	39 07       	cpc	r19, r25
    26b4:	b9 f4       	brne	.+46     	; 0x26e4 <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:398
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    26b6:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <SoftwareSerial::_receive_buffer_head>
    26ba:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <SoftwareSerial::_receive_buffer_tail>
    26be:	98 17       	cp	r25, r24
    26c0:	89 f0       	breq	.+34     	; 0x26e4 <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:402
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    26c2:	e0 91 4c 05 	lds	r30, 0x054C	; 0x80054c <SoftwareSerial::_receive_buffer_head>
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	e2 5b       	subi	r30, 0xB2	; 178
    26ca:	fa 4f       	sbci	r31, 0xFA	; 250
    26cc:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:403
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    26ce:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <SoftwareSerial::_receive_buffer_head>
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	2f 5f       	subi	r18, 0xFF	; 255
    26d6:	3f 4f       	sbci	r19, 0xFF	; 255
    26d8:	2f 73       	andi	r18, 0x3F	; 63
    26da:	33 27       	eor	r19, r19
    26dc:	20 93 4c 05 	sts	0x054C, r18	; 0x80054c <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:404
  return d;
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:395
    return -1;
    26e4:	8f ef       	ldi	r24, 0xFF	; 255
    26e6:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:405
}
    26e8:	08 95       	ret

000026ea <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:416

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	dc 01       	movw	r26, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:417
  if (_tx_delay == 0) {
    26f8:	5c 96       	adiw	r26, 0x1c	; 28
    26fa:	ed 90       	ld	r14, X+
    26fc:	fc 90       	ld	r15, X
    26fe:	5d 97       	sbiw	r26, 0x1d	; 29
    2700:	e1 14       	cp	r14, r1
    2702:	f1 04       	cpc	r15, r1
    2704:	79 f4       	brne	.+30     	; 0x2724 <SoftwareSerial::write(unsigned char)+0x3a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:44
    void setWriteError(int err = 1) { write_error = err; }
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	13 96       	adiw	r26, 0x03	; 3
    270c:	9c 93       	st	X, r25
    270e:	8e 93       	st	-X, r24
    2710:	12 97       	sbiw	r26, 0x02	; 2
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:419
    setWriteError();
    return 0;
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:468

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
    2716:	df 91       	pop	r29
    2718:	cf 91       	pop	r28
    271a:	1f 91       	pop	r17
    271c:	0f 91       	pop	r16
    271e:	ff 90       	pop	r15
    2720:	ef 90       	pop	r14
    2722:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:426
  volatile uint8_t *reg = _transmitPortRegister;
    2724:	51 96       	adiw	r26, 0x11	; 17
    2726:	ed 91       	ld	r30, X+
    2728:	fc 91       	ld	r31, X
    272a:	52 97       	sbiw	r26, 0x12	; 18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:427
  uint8_t reg_mask = _transmitBitMask;
    272c:	50 96       	adiw	r26, 0x10	; 16
    272e:	8c 91       	ld	r24, X
    2730:	50 97       	sbiw	r26, 0x10	; 16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:428
  uint8_t inv_mask = ~_transmitBitMask;
    2732:	98 2f       	mov	r25, r24
    2734:	90 95       	com	r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:429
  uint8_t oldSREG = SREG;
    2736:	0f b7       	in	r16, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:430
  bool inv = _inverse_logic;
    2738:	5e 96       	adiw	r26, 0x1e	; 30
    273a:	2c 91       	ld	r18, X
    273c:	5e 97       	sbiw	r26, 0x1e	; 30
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:433
  if (inv)
    273e:	12 2f       	mov	r17, r18
    2740:	12 70       	andi	r17, 0x02	; 2
    2742:	21 fd       	sbrc	r18, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:434
    b = ~b;
    2744:	60 95       	com	r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:436
  cli();  // turn off interrupts for a clean txmit
    2746:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
    2748:	20 81       	ld	r18, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:439
  if (inv)
    274a:	11 23       	and	r17, r17
    274c:	19 f1       	breq	.+70     	; 0x2794 <SoftwareSerial::write(unsigned char)+0xaa>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
    274e:	28 2b       	or	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
    2750:	20 83       	st	Z, r18
/usr/avr/include/util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2752:	e7 01       	movw	r28, r14
    2754:	21 97       	sbiw	r28, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <SoftwareSerial::write(unsigned char)+0x6a>
    2758:	28 e0       	ldi	r18, 0x08	; 8
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:449
    if (b & 1) // choose bit
    275a:	46 2f       	mov	r20, r22
    275c:	50 e0       	ldi	r21, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:450
      *reg |= reg_mask; // send 1
    275e:	30 81       	ld	r19, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:449
    if (b & 1) // choose bit
    2760:	60 ff       	sbrs	r22, 0
    2762:	1a c0       	rjmp	.+52     	; 0x2798 <SoftwareSerial::write(unsigned char)+0xae>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:450
      *reg |= reg_mask; // send 1
    2764:	38 2b       	or	r19, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
    2766:	30 83       	st	Z, r19
/usr/avr/include/util/delay_basic.h:110
    2768:	e7 01       	movw	r28, r14
    276a:	21 97       	sbiw	r28, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <SoftwareSerial::write(unsigned char)+0x80>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:455
    b >>= 1;
    276e:	ba 01       	movw	r22, r20
    2770:	75 95       	asr	r23
    2772:	67 95       	ror	r22
    2774:	21 50       	subi	r18, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:447
  for (uint8_t i = 8; i > 0; --i)
    2776:	89 f7       	brne	.-30     	; 0x275a <SoftwareSerial::write(unsigned char)+0x70>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:459
  if (inv)
    2778:	11 23       	and	r17, r17
    277a:	81 f0       	breq	.+32     	; 0x279c <SoftwareSerial::write(unsigned char)+0xb2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:460
    *reg &= inv_mask;
    277c:	80 81       	ld	r24, Z
    277e:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:462
    *reg |= reg_mask;
    2780:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:464
  SREG = oldSREG; // turn interrupts back on
    2782:	0f bf       	out	0x3f, r16	; 63
/usr/avr/include/util/delay_basic.h:110
    2784:	5c 96       	adiw	r26, 0x1c	; 28
    2786:	8d 91       	ld	r24, X+
    2788:	9c 91       	ld	r25, X
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <SoftwareSerial::write(unsigned char)+0xa0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:467
  return 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	c1 cf       	rjmp	.-126    	; 0x2716 <SoftwareSerial::write(unsigned char)+0x2c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
    2794:	29 23       	and	r18, r25
    2796:	dc cf       	rjmp	.-72     	; 0x2750 <SoftwareSerial::write(unsigned char)+0x66>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
    2798:	39 23       	and	r19, r25
    279a:	e5 cf       	rjmp	.-54     	; 0x2766 <SoftwareSerial::write(unsigned char)+0x7c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:462
    *reg |= reg_mask;
    279c:	90 81       	ld	r25, Z
    279e:	89 2b       	or	r24, r25
    27a0:	ef cf       	rjmp	.-34     	; 0x2780 <SoftwareSerial::write(unsigned char)+0x96>

000027a2 <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:473

void SoftwareSerial::flush()
{
  // There is no tx buffering, simply return
}
    27a2:	08 95       	ret

000027a4 <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:477

int SoftwareSerial::peek()
{
  if (!isListening())
    27a4:	20 91 8e 05 	lds	r18, 0x058E	; 0x80058e <SoftwareSerial::active_object>
    27a8:	30 91 8f 05 	lds	r19, 0x058F	; 0x80058f <SoftwareSerial::active_object+0x1>
    27ac:	28 17       	cp	r18, r24
    27ae:	39 07       	cpc	r19, r25
    27b0:	71 f4       	brne	.+28     	; 0x27ce <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:481
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    27b2:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <SoftwareSerial::_receive_buffer_head>
    27b6:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <SoftwareSerial::_receive_buffer_tail>
    27ba:	98 17       	cp	r25, r24
    27bc:	41 f0       	breq	.+16     	; 0x27ce <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:485
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    27be:	e0 91 4c 05 	lds	r30, 0x054C	; 0x80054c <SoftwareSerial::_receive_buffer_head>
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	e2 5b       	subi	r30, 0xB2	; 178
    27c6:	fa 4f       	sbci	r31, 0xFA	; 250
    27c8:	80 81       	ld	r24, Z
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:478
    return -1;
    27ce:	8f ef       	ldi	r24, 0xFF	; 255
    27d0:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:486
}
    27d2:	08 95       	ret

000027d4 <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:409
  if (!isListening())
    27d4:	20 91 8e 05 	lds	r18, 0x058E	; 0x80058e <SoftwareSerial::active_object>
    27d8:	30 91 8f 05 	lds	r19, 0x058F	; 0x80058f <SoftwareSerial::active_object+0x1>
    27dc:	28 17       	cp	r18, r24
    27de:	39 07       	cpc	r19, r25
    27e0:	61 f4       	brne	.+24     	; 0x27fa <SoftwareSerial::available()+0x26>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:412
  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    27e2:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <SoftwareSerial::_receive_buffer_tail>
    27e6:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <SoftwareSerial::_receive_buffer_head>
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	80 5c       	subi	r24, 0xC0	; 192
    27ee:	9f 4f       	sbci	r25, 0xFF	; 255
    27f0:	82 1b       	sub	r24, r18
    27f2:	91 09       	sbc	r25, r1
    27f4:	60 e4       	ldi	r22, 0x40	; 64
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	38 c6       	rjmp	.+3184   	; 0x346a <__divmodhi4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:410
    return 0;
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:413
}
    27fe:	08 95       	ret

00002800 <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:111
  if (active_object == this)
    2800:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <SoftwareSerial::active_object>
    2804:	f0 91 8f 05 	lds	r31, 0x058F	; 0x80058f <SoftwareSerial::active_object+0x1>
    2808:	e8 17       	cp	r30, r24
    280a:	f9 07       	cpc	r31, r25
    280c:	69 f4       	brne	.+26     	; 0x2828 <SoftwareSerial::stopListening()+0x28>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
    280e:	a3 89       	ldd	r26, Z+19	; 0x13
    2810:	b4 89       	ldd	r27, Z+20	; 0x14
    2812:	9c 91       	ld	r25, X
    2814:	85 89       	ldd	r24, Z+21	; 0x15
    2816:	80 95       	com	r24
    2818:	89 23       	and	r24, r25
    281a:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:114
    active_object = NULL;
    281c:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <SoftwareSerial::active_object+0x1>
    2820:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <SoftwareSerial::active_object>
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:117
  return false;
    2828:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:118
}
    282a:	08 95       	ret

0000282c <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:88
{
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:89
  if (!_rx_delay_stopbit)
    2832:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2834:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2836:	89 2b       	or	r24, r25
    2838:	f9 f0       	breq	.+62     	; 0x2878 <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:92
  if (active_object != this)
    283a:	80 91 8e 05 	lds	r24, 0x058E	; 0x80058e <SoftwareSerial::active_object>
    283e:	90 91 8f 05 	lds	r25, 0x058F	; 0x80058f <SoftwareSerial::active_object+0x1>
    2842:	8c 17       	cp	r24, r28
    2844:	9d 07       	cpc	r25, r29
    2846:	c1 f0       	breq	.+48     	; 0x2878 <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:94
    if (active_object)
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	09 f0       	breq	.+2      	; 0x284e <SoftwareSerial::listen()+0x22>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:95
      active_object->stopListening();
    284c:	d9 df       	rcall	.-78     	; 0x2800 <SoftwareSerial::stopListening()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:97
    _buffer_overflow = false;
    284e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2850:	8e 7f       	andi	r24, 0xFE	; 254
    2852:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:98
    _receive_buffer_head = _receive_buffer_tail = 0;
    2854:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <SoftwareSerial::_receive_buffer_tail>
    2858:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:99
    active_object = this;
    285c:	d0 93 8f 05 	sts	0x058F, r29	; 0x80058f <SoftwareSerial::active_object+0x1>
    2860:	c0 93 8e 05 	sts	0x058E, r28	; 0x80058e <SoftwareSerial::active_object>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
    2864:	eb 89       	ldd	r30, Y+19	; 0x13
    2866:	fc 89       	ldd	r31, Y+20	; 0x14
    2868:	80 81       	ld	r24, Z
    286a:	9d 89       	ldd	r25, Y+21	; 0x15
    286c:	89 2b       	or	r24, r25
    286e:	80 83       	st	Z, r24
    2870:	81 e0       	ldi	r24, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:106
}
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:90
    return false;
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	fb cf       	rjmp	.-10     	; 0x2872 <SoftwareSerial::listen()+0x46>

0000287c <__vector_3>:
__vector_3():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:229
{
    287c:	1f 92       	push	r1
    287e:	0f 92       	push	r0
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	0f 92       	push	r0
    2884:	11 24       	eor	r1, r1
    2886:	2f 93       	push	r18
    2888:	3f 93       	push	r19
    288a:	4f 93       	push	r20
    288c:	5f 93       	push	r21
    288e:	6f 93       	push	r22
    2890:	7f 93       	push	r23
    2892:	8f 93       	push	r24
    2894:	9f 93       	push	r25
    2896:	af 93       	push	r26
    2898:	bf 93       	push	r27
    289a:	ef 93       	push	r30
    289c:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:221
  if (active_object)
    289e:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <SoftwareSerial::active_object>
    28a2:	f0 91 8f 05 	lds	r31, 0x058F	; 0x80058f <SoftwareSerial::active_object+0x1>
    28a6:	30 97       	sbiw	r30, 0x00	; 0
    28a8:	49 f0       	breq	.+18     	; 0x28bc <__vector_3+0x40>
    28aa:	a6 85       	ldd	r26, Z+14	; 0x0e
    28ac:	b7 85       	ldd	r27, Z+15	; 0x0f
    28ae:	85 85       	ldd	r24, Z+13	; 0x0d
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    28b0:	96 8d       	ldd	r25, Z+30	; 0x1e
    28b2:	91 ff       	sbrs	r25, 1
    28b4:	14 c0       	rjmp	.+40     	; 0x28de <__vector_3+0x62>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    28b6:	9c 91       	ld	r25, X
    28b8:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    28ba:	a1 f4       	brne	.+40     	; 0x28e4 <__vector_3+0x68>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
    28bc:	ff 91       	pop	r31
    28be:	ef 91       	pop	r30
    28c0:	bf 91       	pop	r27
    28c2:	af 91       	pop	r26
    28c4:	9f 91       	pop	r25
    28c6:	8f 91       	pop	r24
    28c8:	7f 91       	pop	r23
    28ca:	6f 91       	pop	r22
    28cc:	5f 91       	pop	r21
    28ce:	4f 91       	pop	r20
    28d0:	3f 91       	pop	r19
    28d2:	2f 91       	pop	r18
    28d4:	0f 90       	pop	r0
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	0f 90       	pop	r0
    28da:	1f 90       	pop	r1
    28dc:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    28de:	9c 91       	ld	r25, X
    28e0:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    28e2:	61 f7       	brne	.-40     	; 0x28bc <__vector_3+0x40>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
    28e4:	a3 89       	ldd	r26, Z+19	; 0x13
    28e6:	b4 89       	ldd	r27, Z+20	; 0x14
    28e8:	9c 91       	ld	r25, X
    28ea:	85 89       	ldd	r24, Z+21	; 0x15
    28ec:	80 95       	com	r24
    28ee:	89 23       	and	r24, r25
    28f0:	8c 93       	st	X, r24
/usr/avr/include/util/delay_basic.h:110
    28f2:	86 89       	ldd	r24, Z+22	; 0x16
    28f4:	97 89       	ldd	r25, Z+23	; 0x17
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <__vector_3+0x7a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:160
      tunedDelay(_rx_delay_intrabit);
    28fa:	60 8d       	ldd	r22, Z+24	; 0x18
    28fc:	71 8d       	ldd	r23, Z+25	; 0x19
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    28fe:	a6 85       	ldd	r26, Z+14	; 0x0e
    2900:	b7 85       	ldd	r27, Z+15	; 0x0f
    2902:	55 85       	ldd	r21, Z+13	; 0x0d
    2904:	38 e0       	ldi	r19, 0x08	; 8
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:142
  uint8_t d = 0;
    2906:	20 e0       	ldi	r18, 0x00	; 0
/usr/avr/include/util/delay_basic.h:110
    2908:	cb 01       	movw	r24, r22
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <__vector_3+0x8e>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:161
      d >>= 1;
    290e:	82 2f       	mov	r24, r18
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	95 95       	asr	r25
    2914:	87 95       	ror	r24
    2916:	28 2f       	mov	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    2918:	4c 91       	ld	r20, X
    291a:	45 23       	and	r20, r21
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:163
      if (rx_pin_read())
    291c:	09 f0       	breq	.+2      	; 0x2920 <__vector_3+0xa4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:164
        d |= 0x80;
    291e:	20 68       	ori	r18, 0x80	; 128
    2920:	31 50       	subi	r19, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:158
    for (uint8_t i=8; i > 0; --i)
    2922:	91 f7       	brne	.-28     	; 0x2908 <__vector_3+0x8c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:167
    if (_inverse_logic)
    2924:	86 8d       	ldd	r24, Z+30	; 0x1e
    2926:	81 fd       	sbrc	r24, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:168
      d = ~d;
    2928:	20 95       	com	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:171
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    292a:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <SoftwareSerial::_receive_buffer_tail>
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	8f 73       	andi	r24, 0x3F	; 63
    2934:	99 27       	eor	r25, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:172
    if (next != _receive_buffer_head)
    2936:	30 91 4c 05 	lds	r19, 0x054C	; 0x80054c <SoftwareSerial::_receive_buffer_head>
    293a:	38 17       	cp	r19, r24
    293c:	99 f0       	breq	.+38     	; 0x2964 <__vector_3+0xe8>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:175
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    293e:	a0 91 4d 05 	lds	r26, 0x054D	; 0x80054d <SoftwareSerial::_receive_buffer_tail>
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	a2 5b       	subi	r26, 0xB2	; 178
    2946:	ba 4f       	sbci	r27, 0xFA	; 250
    2948:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:176
      _receive_buffer_tail = next;
    294a:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <SoftwareSerial::_receive_buffer_tail>
/usr/avr/include/util/delay_basic.h:110
    294e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2950:	93 8d       	ldd	r25, Z+27	; 0x1b
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <__vector_3+0xd6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
    2956:	a3 89       	ldd	r26, Z+19	; 0x13
    2958:	b4 89       	ldd	r27, Z+20	; 0x14
    295a:	8c 91       	ld	r24, X
    295c:	95 89       	ldd	r25, Z+21	; 0x15
    295e:	89 2b       	or	r24, r25
    2960:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
    2962:	ac cf       	rjmp	.-168    	; 0x28bc <__vector_3+0x40>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:181
      _buffer_overflow = true;
    2964:	86 8d       	ldd	r24, Z+30	; 0x1e
    2966:	81 60       	ori	r24, 0x01	; 1
    2968:	86 8f       	std	Z+30, r24	; 0x1e
    296a:	f1 cf       	rjmp	.-30     	; 0x294e <__vector_3+0xd2>

0000296c <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:264
SoftwareSerial::~SoftwareSerial()
    296c:	20 e6       	ldi	r18, 0x60	; 96
    296e:	33 e0       	ldi	r19, 0x03	; 3
    2970:	fc 01       	movw	r30, r24
    2972:	31 83       	std	Z+1, r19	; 0x01
    2974:	20 83       	st	Z, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:387
  stopListening();
    2976:	44 cf       	rjmp	.-376    	; 0x2800 <SoftwareSerial::stopListening()>

00002978 <SoftwareSerial::setTX(unsigned char)>:
_ZN14SoftwareSerial5setTXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:270
{
    2978:	1f 93       	push	r17
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	ec 01       	movw	r28, r24
    2980:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:275
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    2982:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2984:	66 95       	lsr	r22
    2986:	61 70       	andi	r22, 0x01	; 1
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	68 27       	eor	r22, r24
    298c:	81 2f       	mov	r24, r17
    298e:	43 d2       	rcall	.+1158   	; 0x2e16 <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:276
  pinMode(tx, OUTPUT);
    2990:	61 e0       	ldi	r22, 0x01	; 1
    2992:	81 2f       	mov	r24, r17
    2994:	04 d2       	rcall	.+1032   	; 0x2d9e <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:277
  _transmitBitMask = digitalPinToBitMask(tx);
    2996:	81 2f       	mov	r24, r17
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	fc 01       	movw	r30, r24
    299c:	e8 58       	subi	r30, 0x88	; 136
    299e:	fd 4f       	sbci	r31, 0xFD	; 253
    29a0:	e4 91       	lpm	r30, Z
    29a2:	e8 8b       	std	Y+16, r30	; 0x10
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:278
  uint8_t port = digitalPinToPort(tx);
    29a4:	fc 01       	movw	r30, r24
    29a6:	e4 57       	subi	r30, 0x74	; 116
    29a8:	fd 4f       	sbci	r31, 0xFD	; 253
    29aa:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:279
  _transmitPortRegister = portOutputRegister(port);
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	ee 0f       	add	r30, r30
    29b0:	ff 1f       	adc	r31, r31
    29b2:	e6 55       	subi	r30, 0x56	; 86
    29b4:	fd 4f       	sbci	r31, 0xFD	; 253
    29b6:	85 91       	lpm	r24, Z+
    29b8:	94 91       	lpm	r25, Z
    29ba:	9a 8b       	std	Y+18, r25	; 0x12
    29bc:	89 8b       	std	Y+17, r24	; 0x11
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:280
}
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	1f 91       	pop	r17
    29c4:	08 95       	ret

000029c6 <SoftwareSerial::setRX(unsigned char)>:
_ZN14SoftwareSerial5setRXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:283
{
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	ec 01       	movw	r28, r24
    29ce:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:284
  pinMode(rx, INPUT);
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	81 2f       	mov	r24, r17
    29d4:	e4 d1       	rcall	.+968    	; 0x2d9e <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:285
  if (!_inverse_logic)
    29d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29d8:	81 fd       	sbrc	r24, 1
    29da:	03 c0       	rjmp	.+6      	; 0x29e2 <SoftwareSerial::setRX(unsigned char)+0x1c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:286
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    29dc:	61 e0       	ldi	r22, 0x01	; 1
    29de:	81 2f       	mov	r24, r17
    29e0:	1a d2       	rcall	.+1076   	; 0x2e16 <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:287
  _receivePin = rx;
    29e2:	1c 87       	std	Y+12, r17	; 0x0c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:288
  _receiveBitMask = digitalPinToBitMask(rx);
    29e4:	81 2f       	mov	r24, r17
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	fc 01       	movw	r30, r24
    29ea:	e8 58       	subi	r30, 0x88	; 136
    29ec:	fd 4f       	sbci	r31, 0xFD	; 253
    29ee:	e4 91       	lpm	r30, Z
    29f0:	ed 87       	std	Y+13, r30	; 0x0d
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:289
  uint8_t port = digitalPinToPort(rx);
    29f2:	fc 01       	movw	r30, r24
    29f4:	e4 57       	subi	r30, 0x74	; 116
    29f6:	fd 4f       	sbci	r31, 0xFD	; 253
    29f8:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:290
  _receivePortRegister = portInputRegister(port);
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	ee 0f       	add	r30, r30
    29fe:	ff 1f       	adc	r31, r31
    2a00:	e0 56       	subi	r30, 0x60	; 96
    2a02:	fd 4f       	sbci	r31, 0xFD	; 253
    2a04:	85 91       	lpm	r24, Z+
    2a06:	94 91       	lpm	r25, Z
    2a08:	9f 87       	std	Y+15, r25	; 0x0f
    2a0a:	8e 87       	std	Y+14, r24	; 0x0e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:291
}
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	08 95       	ret

00002a14 <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>:
_ZN14SoftwareSerialC2Ehhb():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:249
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	ec 01       	movw	r28, r24
    2a1c:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:46
    Print() : write_error(0) {}
    2a1e:	1b 82       	std	Y+3, r1	; 0x03
    2a20:	1a 82       	std	Y+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2a22:	88 ee       	ldi	r24, 0xE8	; 232
    2a24:	93 e0       	ldi	r25, 0x03	; 3
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	8c 83       	std	Y+4, r24	; 0x04
    2a2c:	9d 83       	std	Y+5, r25	; 0x05
    2a2e:	ae 83       	std	Y+6, r26	; 0x06
    2a30:	bf 83       	std	Y+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:255
  _inverse_logic(inverse_logic)
    2a32:	80 e6       	ldi	r24, 0x60	; 96
    2a34:	93 e0       	ldi	r25, 0x03	; 3
    2a36:	99 83       	std	Y+1, r25	; 0x01
    2a38:	88 83       	st	Y, r24
    2a3a:	1f 8a       	std	Y+23, r1	; 0x17
    2a3c:	1e 8a       	std	Y+22, r1	; 0x16
    2a3e:	19 8e       	std	Y+25, r1	; 0x19
    2a40:	18 8e       	std	Y+24, r1	; 0x18
    2a42:	1b 8e       	std	Y+27, r1	; 0x1b
    2a44:	1a 8e       	std	Y+26, r1	; 0x1a
    2a46:	1d 8e       	std	Y+29, r1	; 0x1d
    2a48:	1c 8e       	std	Y+28, r1	; 0x1c
    2a4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a4c:	8e 7f       	andi	r24, 0xFE	; 254
    2a4e:	20 fb       	bst	r18, 0
    2a50:	81 f9       	bld	r24, 1
    2a52:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:257
  setTX(transmitPin);
    2a54:	64 2f       	mov	r22, r20
    2a56:	ce 01       	movw	r24, r28
    2a58:	8f df       	rcall	.-226    	; 0x2978 <SoftwareSerial::setTX(unsigned char)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
    2a5a:	61 2f       	mov	r22, r17
    2a5c:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:259
}
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
    2a64:	b0 cf       	rjmp	.-160    	; 0x29c6 <SoftwareSerial::setRX(unsigned char)>

00002a66 <SoftwareSerial::begin(long)>:
_ZN14SoftwareSerial5beginEl():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:305
{
    2a66:	cf 93       	push	r28
    2a68:	df 93       	push	r29
    2a6a:	ec 01       	movw	r28, r24
    2a6c:	9a 01       	movw	r18, r20
    2a6e:	ab 01       	movw	r20, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:306
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2a70:	1b 8e       	std	Y+27, r1	; 0x1b
    2a72:	1a 8e       	std	Y+26, r1	; 0x1a
    2a74:	19 8e       	std	Y+25, r1	; 0x19
    2a76:	18 8e       	std	Y+24, r1	; 0x18
    2a78:	1f 8a       	std	Y+23, r1	; 0x17
    2a7a:	1e 8a       	std	Y+22, r1	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:309
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	79 e0       	ldi	r23, 0x09	; 9
    2a80:	8d e3       	ldi	r24, 0x3D	; 61
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	27 d5       	rcall	.+2638   	; 0x34d4 <__divmodsi4>
    2a86:	f9 01       	movw	r30, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    2a88:	c9 01       	movw	r24, r18
    2a8a:	03 97       	sbiw	r24, 0x03	; 3
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2a8c:	24 30       	cpi	r18, 0x04	; 4
    2a8e:	31 05       	cpc	r19, r1
    2a90:	10 f4       	brcc	.+4      	; 0x2a96 <SoftwareSerial::begin(long)+0x30>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:297
    return 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:316
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2a96:	9d 8f       	std	Y+29, r25	; 0x1d
    2a98:	8c 8f       	std	Y+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:319
  if (digitalPinToPCICR(_receivePin)) {
    2a9a:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a9c:	66 31       	cpi	r22, 0x16	; 22
    2a9e:	08 f0       	brcs	.+2      	; 0x2aa2 <SoftwareSerial::begin(long)+0x3c>
    2aa0:	52 c0       	rjmp	.+164    	; 0x2b46 <SoftwareSerial::begin(long)+0xe0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2aa2:	c9 01       	movw	r24, r18
    2aa4:	96 95       	lsr	r25
    2aa6:	87 95       	ror	r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2aa8:	84 31       	cpi	r24, 0x14	; 20
    2aaa:	91 05       	cpc	r25, r1
    2aac:	08 f4       	brcc	.+2      	; 0x2ab0 <SoftwareSerial::begin(long)+0x4a>
    2aae:	4f c0       	rjmp	.+158    	; 0x2b4e <SoftwareSerial::begin(long)+0xe8>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    2ab0:	43 97       	sbiw	r24, 0x13	; 19
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2ab2:	9f 8b       	std	Y+23, r25	; 0x17
    2ab4:	8e 8b       	std	Y+22, r24	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    2ab6:	c9 01       	movw	r24, r18
    2ab8:	05 97       	sbiw	r24, 0x05	; 5
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2aba:	36 97       	sbiw	r30, 0x06	; 6
    2abc:	10 f4       	brcc	.+4      	; 0x2ac2 <SoftwareSerial::begin(long)+0x5c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:297
    return 1;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:337
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2ac2:	99 8f       	std	Y+25, r25	; 0x19
    2ac4:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2ac6:	c9 01       	movw	r24, r18
    2ac8:	88 0f       	add	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	28 0f       	add	r18, r24
    2ace:	39 1f       	adc	r19, r25
    2ad0:	36 95       	lsr	r19
    2ad2:	27 95       	ror	r18
    2ad4:	36 95       	lsr	r19
    2ad6:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2ad8:	2d 30       	cpi	r18, 0x0D	; 13
    2ada:	31 05       	cpc	r19, r1
    2adc:	d8 f1       	brcs	.+118    	; 0x2b54 <SoftwareSerial::begin(long)+0xee>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    2ade:	2c 50       	subi	r18, 0x0C	; 12
    2ae0:	31 09       	sbc	r19, r1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2ae2:	3b 8f       	std	Y+27, r19	; 0x1b
    2ae4:	2a 8f       	std	Y+26, r18	; 0x1a
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:360
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2ae6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    2aea:	84 e0       	ldi	r24, 0x04	; 4
    2aec:	68 30       	cpi	r22, 0x08	; 8
    2aee:	48 f0       	brcs	.+18     	; 0x2b02 <SoftwareSerial::begin(long)+0x9c>
    2af0:	21 e0       	ldi	r18, 0x01	; 1
    2af2:	6e 30       	cpi	r22, 0x0E	; 14
    2af4:	08 f4       	brcc	.+2      	; 0x2af8 <SoftwareSerial::begin(long)+0x92>
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	01 c0       	rjmp	.+2      	; 0x2afe <SoftwareSerial::begin(long)+0x98>
    2afc:	88 0f       	add	r24, r24
    2afe:	2a 95       	dec	r18
    2b00:	ea f7       	brpl	.-6      	; 0x2afc <SoftwareSerial::begin(long)+0x96>
    2b02:	89 2b       	or	r24, r25
    2b04:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:363
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2b08:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b0a:	2d e6       	ldi	r18, 0x6D	; 109
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	98 30       	cpi	r25, 0x08	; 8
    2b10:	50 f0       	brcs	.+20     	; 0x2b26 <SoftwareSerial::begin(long)+0xc0>
    2b12:	2b e6       	ldi	r18, 0x6B	; 107
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	9e 30       	cpi	r25, 0x0E	; 14
    2b18:	30 f0       	brcs	.+12     	; 0x2b26 <SoftwareSerial::begin(long)+0xc0>
    2b1a:	2c e6       	ldi	r18, 0x6C	; 108
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	96 31       	cpi	r25, 0x16	; 22
    2b20:	10 f0       	brcs	.+4      	; 0x2b26 <SoftwareSerial::begin(long)+0xc0>
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3c 8b       	std	Y+20, r19	; 0x14
    2b28:	2b 8b       	std	Y+19, r18	; 0x13
    2b2a:	29 2f       	mov	r18, r25
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b2e:	98 30       	cpi	r25, 0x08	; 8
    2b30:	a0 f4       	brcc	.+40     	; 0x2b5a <SoftwareSerial::begin(long)+0xf4>
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	01 c0       	rjmp	.+2      	; 0x2b38 <SoftwareSerial::begin(long)+0xd2>
    2b36:	88 0f       	add	r24, r24
    2b38:	9a 95       	dec	r25
    2b3a:	ea f7       	brpl	.-6      	; 0x2b36 <SoftwareSerial::begin(long)+0xd0>
    2b3c:	8d 8b       	std	Y+21, r24	; 0x15
/usr/avr/include/util/delay_basic.h:110
    2b3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <SoftwareSerial::begin(long)+0xdc>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    2b46:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:375
}
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    2b4c:	6f ce       	rjmp	.-802    	; 0x282c <SoftwareSerial::listen()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:297
    return 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	af cf       	rjmp	.-162    	; 0x2ab2 <SoftwareSerial::begin(long)+0x4c>
    2b54:	21 e0       	ldi	r18, 0x01	; 1
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	c4 cf       	rjmp	.-120    	; 0x2ae2 <SoftwareSerial::begin(long)+0x7c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2b5a:	9e 30       	cpi	r25, 0x0E	; 14
    2b5c:	40 f4       	brcc	.+16     	; 0x2b6e <SoftwareSerial::begin(long)+0x108>
    2b5e:	28 50       	subi	r18, 0x08	; 8
    2b60:	31 09       	sbc	r19, r1
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	01 c0       	rjmp	.+2      	; 0x2b68 <SoftwareSerial::begin(long)+0x102>
    2b66:	88 0f       	add	r24, r24
    2b68:	2a 95       	dec	r18
    2b6a:	ea f7       	brpl	.-6      	; 0x2b66 <SoftwareSerial::begin(long)+0x100>
    2b6c:	e7 cf       	rjmp	.-50     	; 0x2b3c <SoftwareSerial::begin(long)+0xd6>
    2b6e:	2e 50       	subi	r18, 0x0E	; 14
    2b70:	31 09       	sbc	r19, r1
    2b72:	f7 cf       	rjmp	.-18     	; 0x2b62 <SoftwareSerial::begin(long)+0xfc>

00002b74 <__vector_16>:
__vector_16():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:47
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2b74:	1f 92       	push	r1
    2b76:	0f 92       	push	r0
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	0f 92       	push	r0
    2b7c:	11 24       	eor	r1, r1
    2b7e:	2f 93       	push	r18
    2b80:	3f 93       	push	r19
    2b82:	8f 93       	push	r24
    2b84:	9f 93       	push	r25
    2b86:	af 93       	push	r26
    2b88:	bf 93       	push	r27
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:50
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2b8a:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <timer0_millis>
    2b8e:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <timer0_millis+0x1>
    2b92:	a0 91 93 05 	lds	r26, 0x0593	; 0x800593 <timer0_millis+0x2>
    2b96:	b0 91 94 05 	lds	r27, 0x0594	; 0x800594 <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:51
	unsigned char f = timer0_fract;
    2b9a:	30 91 90 05 	lds	r19, 0x0590	; 0x800590 <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:54

	m += MILLIS_INC;
	f += FRACT_INC;
    2b9e:	23 e0       	ldi	r18, 0x03	; 3
    2ba0:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:55
	if (f >= FRACT_MAX) {
    2ba2:	2d 37       	cpi	r18, 0x7D	; 125
    2ba4:	58 f5       	brcc	.+86     	; 0x2bfc <__vector_16+0x88>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:53
	m += MILLIS_INC;
    2ba6:	01 96       	adiw	r24, 0x01	; 1
    2ba8:	a1 1d       	adc	r26, r1
    2baa:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:60
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
    2bac:	20 93 90 05 	sts	0x0590, r18	; 0x800590 <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:61
	timer0_millis = m;
    2bb0:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <timer0_millis>
    2bb4:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <timer0_millis+0x1>
    2bb8:	a0 93 93 05 	sts	0x0593, r26	; 0x800593 <timer0_millis+0x2>
    2bbc:	b0 93 94 05 	sts	0x0594, r27	; 0x800594 <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:62
	timer0_overflow_count++;
    2bc0:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <timer0_overflow_count>
    2bc4:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <timer0_overflow_count+0x1>
    2bc8:	a0 91 97 05 	lds	r26, 0x0597	; 0x800597 <timer0_overflow_count+0x2>
    2bcc:	b0 91 98 05 	lds	r27, 0x0598	; 0x800598 <timer0_overflow_count+0x3>
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	a1 1d       	adc	r26, r1
    2bd4:	b1 1d       	adc	r27, r1
    2bd6:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <timer0_overflow_count>
    2bda:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <timer0_overflow_count+0x1>
    2bde:	a0 93 97 05 	sts	0x0597, r26	; 0x800597 <timer0_overflow_count+0x2>
    2be2:	b0 93 98 05 	sts	0x0598, r27	; 0x800598 <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:63
}
    2be6:	bf 91       	pop	r27
    2be8:	af 91       	pop	r26
    2bea:	9f 91       	pop	r25
    2bec:	8f 91       	pop	r24
    2bee:	3f 91       	pop	r19
    2bf0:	2f 91       	pop	r18
    2bf2:	0f 90       	pop	r0
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	0f 90       	pop	r0
    2bf8:	1f 90       	pop	r1
    2bfa:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:56
		f -= FRACT_MAX;
    2bfc:	26 e8       	ldi	r18, 0x86	; 134
    2bfe:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:57
		m += 1;
    2c00:	02 96       	adiw	r24, 0x02	; 2
    2c02:	a1 1d       	adc	r26, r1
    2c04:	b1 1d       	adc	r27, r1
    2c06:	d2 cf       	rjmp	.-92     	; 0x2bac <__vector_16+0x38>

00002c08 <millis>:
millis():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:68

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2c08:	2f b7       	in	r18, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2c0a:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:73
	m = timer0_millis;
    2c0c:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <timer0_millis>
    2c10:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <timer0_millis+0x1>
    2c14:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <timer0_millis+0x2>
    2c18:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:74
	SREG = oldSREG;
    2c1c:	2f bf       	out	0x3f, r18	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:77

	return m;
}
    2c1e:	08 95       	ret

00002c20 <micros>:
micros():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:81

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2c20:	3f b7       	in	r19, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:83
	
	cli();
    2c22:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:84
	m = timer0_overflow_count;
    2c24:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <timer0_overflow_count>
    2c28:	90 91 96 05 	lds	r25, 0x0596	; 0x800596 <timer0_overflow_count+0x1>
    2c2c:	a0 91 97 05 	lds	r26, 0x0597	; 0x800597 <timer0_overflow_count+0x2>
    2c30:	b0 91 98 05 	lds	r27, 0x0598	; 0x800598 <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:86
#if defined(TCNT0)
	t = TCNT0;
    2c34:	26 b5       	in	r18, 0x26	; 38
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:94
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2c36:	a8 9b       	sbis	0x15, 0	; 21
    2c38:	05 c0       	rjmp	.+10     	; 0x2c44 <micros+0x24>
    2c3a:	2f 3f       	cpi	r18, 0xFF	; 255
    2c3c:	19 f0       	breq	.+6      	; 0x2c44 <micros+0x24>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:95
		m++;
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	a1 1d       	adc	r26, r1
    2c42:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:101
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2c44:	3f bf       	out	0x3f, r19	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:103
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2c46:	ba 2f       	mov	r27, r26
    2c48:	a9 2f       	mov	r26, r25
    2c4a:	98 2f       	mov	r25, r24
    2c4c:	88 27       	eor	r24, r24
    2c4e:	bc 01       	movw	r22, r24
    2c50:	cd 01       	movw	r24, r26
    2c52:	62 0f       	add	r22, r18
    2c54:	71 1d       	adc	r23, r1
    2c56:	81 1d       	adc	r24, r1
    2c58:	91 1d       	adc	r25, r1
    2c5a:	42 e0       	ldi	r20, 0x02	; 2
    2c5c:	66 0f       	add	r22, r22
    2c5e:	77 1f       	adc	r23, r23
    2c60:	88 1f       	adc	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	4a 95       	dec	r20
    2c66:	d1 f7       	brne	.-12     	; 0x2c5c <micros+0x3c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:104
}
    2c68:	08 95       	ret

00002c6a <delay>:
delay():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:107

void delay(unsigned long ms)
{
    2c6a:	8f 92       	push	r8
    2c6c:	9f 92       	push	r9
    2c6e:	af 92       	push	r10
    2c70:	bf 92       	push	r11
    2c72:	cf 92       	push	r12
    2c74:	df 92       	push	r13
    2c76:	ef 92       	push	r14
    2c78:	ff 92       	push	r15
    2c7a:	6b 01       	movw	r12, r22
    2c7c:	7c 01       	movw	r14, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:108
	uint32_t start = micros();
    2c7e:	d0 df       	rcall	.-96     	; 0x2c20 <micros>
    2c80:	4b 01       	movw	r8, r22
    2c82:	5c 01       	movw	r10, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:110

	while (ms > 0) {
    2c84:	c1 14       	cp	r12, r1
    2c86:	d1 04       	cpc	r13, r1
    2c88:	e1 04       	cpc	r14, r1
    2c8a:	f1 04       	cpc	r15, r1
    2c8c:	d9 f0       	breq	.+54     	; 0x2cc4 <delay+0x5a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:111
		yield();
    2c8e:	f0 d0       	rcall	.+480    	; 0x2e70 <yield>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    2c90:	c7 df       	rcall	.-114    	; 0x2c20 <micros>
    2c92:	68 19       	sub	r22, r8
    2c94:	79 09       	sbc	r23, r9
    2c96:	8a 09       	sbc	r24, r10
    2c98:	9b 09       	sbc	r25, r11
    2c9a:	68 3e       	cpi	r22, 0xE8	; 232
    2c9c:	73 40       	sbci	r23, 0x03	; 3
    2c9e:	81 05       	cpc	r24, r1
    2ca0:	91 05       	cpc	r25, r1
    2ca2:	80 f3       	brcs	.-32     	; 0x2c84 <delay+0x1a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:113
			ms--;
    2ca4:	21 e0       	ldi	r18, 0x01	; 1
    2ca6:	c2 1a       	sub	r12, r18
    2ca8:	d1 08       	sbc	r13, r1
    2caa:	e1 08       	sbc	r14, r1
    2cac:	f1 08       	sbc	r15, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:114
			start += 1000;
    2cae:	88 ee       	ldi	r24, 0xE8	; 232
    2cb0:	88 0e       	add	r8, r24
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	98 1e       	adc	r9, r24
    2cb6:	a1 1c       	adc	r10, r1
    2cb8:	b1 1c       	adc	r11, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    2cba:	c1 14       	cp	r12, r1
    2cbc:	d1 04       	cpc	r13, r1
    2cbe:	e1 04       	cpc	r14, r1
    2cc0:	f1 04       	cpc	r15, r1
    2cc2:	31 f7       	brne	.-52     	; 0x2c90 <delay+0x26>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:117
		}
	}
}
    2cc4:	ff 90       	pop	r15
    2cc6:	ef 90       	pop	r14
    2cc8:	df 90       	pop	r13
    2cca:	cf 90       	pop	r12
    2ccc:	bf 90       	pop	r11
    2cce:	af 90       	pop	r10
    2cd0:	9f 90       	pop	r9
    2cd2:	8f 90       	pop	r8
    2cd4:	08 95       	ret

00002cd6 <init>:
init():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:245

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2cd6:	78 94       	sei
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:251
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2cd8:	84 b5       	in	r24, 0x24	; 36
    2cda:	82 60       	ori	r24, 0x02	; 2
    2cdc:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:252
	sbi(TCCR0A, WGM00);
    2cde:	84 b5       	in	r24, 0x24	; 36
    2ce0:	81 60       	ori	r24, 0x01	; 1
    2ce2:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:265
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2ce4:	85 b5       	in	r24, 0x25	; 37
    2ce6:	82 60       	ori	r24, 0x02	; 2
    2ce8:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:266
	sbi(TCCR0B, CS00);
    2cea:	85 b5       	in	r24, 0x25	; 37
    2cec:	81 60       	ori	r24, 0x01	; 1
    2cee:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:279

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2cf0:	ee e6       	ldi	r30, 0x6E	; 110
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	81 60       	ori	r24, 0x01	; 1
    2cf8:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:290
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2cfa:	e1 e8       	ldi	r30, 0x81	; 129
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:293

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2d00:	80 81       	ld	r24, Z
    2d02:	82 60       	ori	r24, 0x02	; 2
    2d04:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:295
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2d06:	80 81       	ld	r24, Z
    2d08:	81 60       	ori	r24, 0x01	; 1
    2d0a:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:305
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2d0c:	e0 e8       	ldi	r30, 0x80	; 128
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	81 60       	ori	r24, 0x01	; 1
    2d14:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:312

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2d16:	e1 eb       	ldi	r30, 0xB1	; 177
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	84 60       	ori	r24, 0x04	; 4
    2d1e:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:321

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2d20:	e0 eb       	ldi	r30, 0xB0	; 176
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	81 60       	ori	r24, 0x01	; 1
    2d28:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:356
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2d2a:	ea e7       	ldi	r30, 0x7A	; 122
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	84 60       	ori	r24, 0x04	; 4
    2d32:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:357
		sbi(ADCSRA, ADPS1);
    2d34:	80 81       	ld	r24, Z
    2d36:	82 60       	ori	r24, 0x02	; 2
    2d38:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:358
		sbi(ADCSRA, ADPS0);
    2d3a:	80 81       	ld	r24, Z
    2d3c:	81 60       	ori	r24, 0x01	; 1
    2d3e:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:381
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2d40:	80 81       	ld	r24, Z
    2d42:	80 68       	ori	r24, 0x80	; 128
    2d44:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:390
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2d46:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:392
#endif
}
    2d4a:	08 95       	ret

00002d4c <turnOffPWM>:
turnOffPWM():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2d4c:	83 30       	cpi	r24, 0x03	; 3
    2d4e:	81 f0       	breq	.+32     	; 0x2d70 <turnOffPWM+0x24>
    2d50:	28 f4       	brcc	.+10     	; 0x2d5c <turnOffPWM+0x10>
    2d52:	81 30       	cpi	r24, 0x01	; 1
    2d54:	99 f0       	breq	.+38     	; 0x2d7c <turnOffPWM+0x30>
    2d56:	82 30       	cpi	r24, 0x02	; 2
    2d58:	a9 f0       	breq	.+42     	; 0x2d84 <turnOffPWM+0x38>
    2d5a:	08 95       	ret
    2d5c:	87 30       	cpi	r24, 0x07	; 7
    2d5e:	a9 f0       	breq	.+42     	; 0x2d8a <turnOffPWM+0x3e>
    2d60:	88 30       	cpi	r24, 0x08	; 8
    2d62:	c9 f0       	breq	.+50     	; 0x2d96 <turnOffPWM+0x4a>
    2d64:	84 30       	cpi	r24, 0x04	; 4
    2d66:	b1 f4       	brne	.+44     	; 0x2d94 <turnOffPWM+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d68:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2d6c:	8f 7d       	andi	r24, 0xDF	; 223
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <turnOffPWM+0x2a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:80
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2d70:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2d74:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d76:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2d7a:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:94
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2d7c:	84 b5       	in	r24, 0x24	; 36
    2d7e:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:98
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2d80:	84 bd       	out	0x24, r24	; 36
    2d82:	08 95       	ret
    2d84:	84 b5       	in	r24, 0x24	; 36
    2d86:	8f 7d       	andi	r24, 0xDF	; 223
    2d88:	fb cf       	rjmp	.-10     	; 0x2d80 <turnOffPWM+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:101
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2d8a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d8e:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2d90:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:136
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    2d94:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:104
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2d96:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2d9a:	8f 7d       	andi	r24, 0xDF	; 223
    2d9c:	f9 cf       	rjmp	.-14     	; 0x2d90 <turnOffPWM+0x44>

00002d9e <pinMode>:
pinMode():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:30
{
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:31
	uint8_t bit = digitalPinToBitMask(pin);
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	fc 01       	movw	r30, r24
    2da6:	e8 58       	subi	r30, 0x88	; 136
    2da8:	fd 4f       	sbci	r31, 0xFD	; 253
    2daa:	24 91       	lpm	r18, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:32
	uint8_t port = digitalPinToPort(pin);
    2dac:	84 57       	subi	r24, 0x74	; 116
    2dae:	9d 4f       	sbci	r25, 0xFD	; 253
    2db0:	fc 01       	movw	r30, r24
    2db2:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:35
	if (port == NOT_A_PIN) return;
    2db4:	88 23       	and	r24, r24
    2db6:	c9 f0       	breq	.+50     	; 0x2dea <pinMode+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:38
	reg = portModeRegister(port);
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	ec 54       	subi	r30, 0x4C	; 76
    2dc2:	fd 4f       	sbci	r31, 0xFD	; 253
    2dc4:	a5 91       	lpm	r26, Z+
    2dc6:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:39
	out = portOutputRegister(port);
    2dc8:	fc 01       	movw	r30, r24
    2dca:	e6 55       	subi	r30, 0x56	; 86
    2dcc:	fd 4f       	sbci	r31, 0xFD	; 253
    2dce:	c5 91       	lpm	r28, Z+
    2dd0:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:41
	if (mode == INPUT) { 
    2dd2:	61 11       	cpse	r22, r1
    2dd4:	0d c0       	rjmp	.+26     	; 0x2df0 <pinMode+0x52>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:42
		uint8_t oldSREG = SREG;
    2dd6:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:43
                cli();
    2dd8:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:44
		*reg &= ~bit;
    2dda:	8c 91       	ld	r24, X
    2ddc:	20 95       	com	r18
    2dde:	82 23       	and	r24, r18
    2de0:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:45
		*out &= ~bit;
    2de2:	88 81       	ld	r24, Y
    2de4:	28 23       	and	r18, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    2de6:	28 83       	st	Y, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:52
		SREG = oldSREG;
    2de8:	9f bf       	out	0x3f, r25	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:59
}
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:47
	} else if (mode == INPUT_PULLUP) {
    2df0:	62 30       	cpi	r22, 0x02	; 2
    2df2:	51 f4       	brne	.+20     	; 0x2e08 <pinMode+0x6a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:48
		uint8_t oldSREG = SREG;
    2df4:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:49
                cli();
    2df6:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:50
		*reg &= ~bit;
    2df8:	3c 91       	ld	r19, X
    2dfa:	82 2f       	mov	r24, r18
    2dfc:	80 95       	com	r24
    2dfe:	83 23       	and	r24, r19
    2e00:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    2e02:	e8 81       	ld	r30, Y
    2e04:	2e 2b       	or	r18, r30
    2e06:	ef cf       	rjmp	.-34     	; 0x2de6 <pinMode+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:54
		uint8_t oldSREG = SREG;
    2e08:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:55
                cli();
    2e0a:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:56
		*reg |= bit;
    2e0c:	ec 91       	ld	r30, X
    2e0e:	2e 2b       	or	r18, r30
    2e10:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:57
		SREG = oldSREG;
    2e12:	8f bf       	out	0x3f, r24	; 63
    2e14:	ea cf       	rjmp	.-44     	; 0x2dea <pinMode+0x4c>

00002e16 <digitalWrite>:
digitalWrite():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:139

void digitalWrite(uint8_t pin, uint8_t val)
{
    2e16:	1f 93       	push	r17
    2e18:	cf 93       	push	r28
    2e1a:	df 93       	push	r29
    2e1c:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:140
	uint8_t timer = digitalPinToTimer(pin);
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	f9 01       	movw	r30, r18
    2e24:	ec 59       	subi	r30, 0x9C	; 156
    2e26:	fd 4f       	sbci	r31, 0xFD	; 253
    2e28:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
    2e2a:	f9 01       	movw	r30, r18
    2e2c:	e8 58       	subi	r30, 0x88	; 136
    2e2e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e30:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
    2e32:	f9 01       	movw	r30, r18
    2e34:	e4 57       	subi	r30, 0x74	; 116
    2e36:	fd 4f       	sbci	r31, 0xFD	; 253
    2e38:	c4 91       	lpm	r28, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:145
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2e3a:	cc 23       	and	r28, r28
    2e3c:	99 f0       	breq	.+38     	; 0x2e64 <digitalWrite+0x4e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:149

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e3e:	81 11       	cpse	r24, r1
    2e40:	85 df       	rcall	.-246    	; 0x2d4c <turnOffPWM>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:151

	out = portOutputRegister(port);
    2e42:	ec 2f       	mov	r30, r28
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	ee 0f       	add	r30, r30
    2e48:	ff 1f       	adc	r31, r31
    2e4a:	e6 55       	subi	r30, 0x56	; 86
    2e4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e4e:	a5 91       	lpm	r26, Z+
    2e50:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:153

	uint8_t oldSREG = SREG;
    2e52:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:154
	cli();
    2e54:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157

	if (val == LOW) {
		*out &= ~bit;
    2e56:	ec 91       	ld	r30, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:156
	if (val == LOW) {
    2e58:	11 11       	cpse	r17, r1
    2e5a:	08 c0       	rjmp	.+16     	; 0x2e6c <digitalWrite+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157
		*out &= ~bit;
    2e5c:	d0 95       	com	r29
    2e5e:	de 23       	and	r29, r30
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
	} else {
		*out |= bit;
    2e60:	dc 93       	st	X, r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:162
	}

	SREG = oldSREG;
    2e62:	8f bf       	out	0x3f, r24	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:163
}
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	1f 91       	pop	r17
    2e6a:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
		*out |= bit;
    2e6c:	de 2b       	or	r29, r30
    2e6e:	f8 cf       	rjmp	.-16     	; 0x2e60 <digitalWrite+0x4a>

00002e70 <yield>:
__empty():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    2e70:	08 95       	ret

00002e72 <operator new[](unsigned int)>:
    2e72:	66 c3       	rjmp	.+1740   	; 0x3540 <malloc>

00002e74 <operator delete[](void*)>:
    2e74:	fd c3       	rjmp	.+2042   	; 0x3670 <free>

00002e76 <__vector_18>:
__vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2e76:	1f 92       	push	r1
    2e78:	0f 92       	push	r0
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	0f 92       	push	r0
    2e7e:	11 24       	eor	r1, r1
    2e80:	2f 93       	push	r18
    2e82:	8f 93       	push	r24
    2e84:	9f 93       	push	r25
    2e86:	ef 93       	push	r30
    2e88:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2e8a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <Serial+0x10>
    2e8e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <Serial+0x11>
    2e92:	80 81       	ld	r24, Z
    2e94:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <Serial+0x16>
    2e98:	f0 91 b0 05 	lds	r31, 0x05B0	; 0x8005b0 <Serial+0x17>
    2e9c:	82 fd       	sbrc	r24, 2
    2e9e:	1b c0       	rjmp	.+54     	; 0x2ed6 <__vector_18+0x60>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2ea0:	90 81       	ld	r25, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2ea2:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <Serial+0x19>
    2ea6:	8f 5f       	subi	r24, 0xFF	; 255
    2ea8:	8f 73       	andi	r24, 0x3F	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2eaa:	20 91 b3 05 	lds	r18, 0x05B3	; 0x8005b3 <Serial+0x1a>
    2eae:	82 17       	cp	r24, r18
    2eb0:	41 f0       	breq	.+16     	; 0x2ec2 <__vector_18+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    2eb2:	e0 91 b2 05 	lds	r30, 0x05B2	; 0x8005b2 <Serial+0x19>
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	e7 56       	subi	r30, 0x67	; 103
    2eba:	fa 4f       	sbci	r31, 0xFA	; 250
    2ebc:	95 8f       	std	Z+29, r25	; 0x1d
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    2ebe:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <Serial+0x19>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
    2ec2:	ff 91       	pop	r31
    2ec4:	ef 91       	pop	r30
    2ec6:	9f 91       	pop	r25
    2ec8:	8f 91       	pop	r24
    2eca:	2f 91       	pop	r18
    2ecc:	0f 90       	pop	r0
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	0f 90       	pop	r0
    2ed2:	1f 90       	pop	r1
    2ed4:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2ed6:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    2ed8:	f4 cf       	rjmp	.-24     	; 0x2ec2 <__vector_18+0x4c>

00002eda <__vector_19>:
__vector_19():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2eda:	1f 92       	push	r1
    2edc:	0f 92       	push	r0
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	0f 92       	push	r0
    2ee2:	11 24       	eor	r1, r1
    2ee4:	2f 93       	push	r18
    2ee6:	3f 93       	push	r19
    2ee8:	4f 93       	push	r20
    2eea:	5f 93       	push	r21
    2eec:	6f 93       	push	r22
    2eee:	7f 93       	push	r23
    2ef0:	8f 93       	push	r24
    2ef2:	9f 93       	push	r25
    2ef4:	af 93       	push	r26
    2ef6:	bf 93       	push	r27
    2ef8:	ef 93       	push	r30
    2efa:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2efc:	89 e9       	ldi	r24, 0x99	; 153
    2efe:	95 e0       	ldi	r25, 0x05	; 5
    2f00:	ce d1       	rcall	.+924    	; 0x329e <HardwareSerial::_tx_udr_empty_irq()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:65
}
    2f02:	ff 91       	pop	r31
    2f04:	ef 91       	pop	r30
    2f06:	bf 91       	pop	r27
    2f08:	af 91       	pop	r26
    2f0a:	9f 91       	pop	r25
    2f0c:	8f 91       	pop	r24
    2f0e:	7f 91       	pop	r23
    2f10:	6f 91       	pop	r22
    2f12:	5f 91       	pop	r21
    2f14:	4f 91       	pop	r20
    2f16:	3f 91       	pop	r19
    2f18:	2f 91       	pop	r18
    2f1a:	0f 90       	pop	r0
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	0f 90       	pop	r0
    2f20:	1f 90       	pop	r1
    2f22:	18 95       	reti

00002f24 <Serial0_available()>:
_Z17Serial0_availablev():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2f24:	89 e9       	ldi	r24, 0x99	; 153
    2f26:	95 e0       	ldi	r25, 0x05	; 5
    2f28:	70 d1       	rcall	.+736    	; 0x320a <HardwareSerial::available()>
    2f2a:	21 e0       	ldi	r18, 0x01	; 1
    2f2c:	89 2b       	or	r24, r25
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <Serial0_available()+0xe>
    2f30:	20 e0       	ldi	r18, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:77
}
    2f32:	82 2f       	mov	r24, r18
    2f34:	08 95       	ret

00002f36 <_GLOBAL__sub_I___vector_18>:
_GLOBAL__sub_I___vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:46
    2f36:	e9 e9       	ldi	r30, 0x99	; 153
    2f38:	f5 e0       	ldi	r31, 0x05	; 5
    2f3a:	13 82       	std	Z+3, r1	; 0x03
    2f3c:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:63
    2f3e:	88 ee       	ldi	r24, 0xE8	; 232
    2f40:	93 e0       	ldi	r25, 0x03	; 3
    2f42:	a0 e0       	ldi	r26, 0x00	; 0
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	84 83       	std	Z+4, r24	; 0x04
    2f48:	95 83       	std	Z+5, r25	; 0x05
    2f4a:	a6 83       	std	Z+6, r26	; 0x06
    2f4c:	b7 83       	std	Z+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:95
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2f4e:	85 e7       	ldi	r24, 0x75	; 117
    2f50:	93 e0       	ldi	r25, 0x03	; 3
    2f52:	91 83       	std	Z+1, r25	; 0x01
    2f54:	80 83       	st	Z, r24
    2f56:	85 ec       	ldi	r24, 0xC5	; 197
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	95 87       	std	Z+13, r25	; 0x0d
    2f5c:	84 87       	std	Z+12, r24	; 0x0c
    2f5e:	84 ec       	ldi	r24, 0xC4	; 196
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	97 87       	std	Z+15, r25	; 0x0f
    2f64:	86 87       	std	Z+14, r24	; 0x0e
    2f66:	80 ec       	ldi	r24, 0xC0	; 192
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	91 8b       	std	Z+17, r25	; 0x11
    2f6c:	80 8b       	std	Z+16, r24	; 0x10
    2f6e:	81 ec       	ldi	r24, 0xC1	; 193
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	93 8b       	std	Z+19, r25	; 0x13
    2f74:	82 8b       	std	Z+18, r24	; 0x12
    2f76:	82 ec       	ldi	r24, 0xC2	; 194
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	95 8b       	std	Z+21, r25	; 0x15
    2f7c:	84 8b       	std	Z+20, r24	; 0x14
    2f7e:	86 ec       	ldi	r24, 0xC6	; 198
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	97 8b       	std	Z+23, r25	; 0x17
    2f84:	86 8b       	std	Z+22, r24	; 0x16
    2f86:	11 8e       	std	Z+25, r1	; 0x19
    2f88:	12 8e       	std	Z+26, r1	; 0x1a
    2f8a:	13 8e       	std	Z+27, r1	; 0x1b
    2f8c:	14 8e       	std	Z+28, r1	; 0x1c
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:77
    2f8e:	08 95       	ret

00002f90 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2f90:	af 92       	push	r10
    2f92:	bf 92       	push	r11
    2f94:	cf 92       	push	r12
    2f96:	df 92       	push	r13
    2f98:	ef 92       	push	r14
    2f9a:	ff 92       	push	r15
    2f9c:	0f 93       	push	r16
    2f9e:	1f 93       	push	r17
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29
    2fa4:	6c 01       	movw	r12, r24
    2fa6:	7b 01       	movw	r14, r22
    2fa8:	8b 01       	movw	r16, r22
    2faa:	04 0f       	add	r16, r20
    2fac:	15 1f       	adc	r17, r21
    2fae:	eb 01       	movw	r28, r22
    2fb0:	5e 01       	movw	r10, r28
    2fb2:	ae 18       	sub	r10, r14
    2fb4:	bf 08       	sbc	r11, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:37
  size_t n = 0;
  while (size--) {
    2fb6:	c0 17       	cp	r28, r16
    2fb8:	d1 07       	cpc	r29, r17
    2fba:	59 f0       	breq	.+22     	; 0x2fd2 <Print::write(unsigned char const*, unsigned int)+0x42>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:38
    if (write(*buffer++)) n++;
    2fbc:	69 91       	ld	r22, Y+
    2fbe:	d6 01       	movw	r26, r12
    2fc0:	ed 91       	ld	r30, X+
    2fc2:	fc 91       	ld	r31, X
    2fc4:	01 90       	ld	r0, Z+
    2fc6:	f0 81       	ld	r31, Z
    2fc8:	e0 2d       	mov	r30, r0
    2fca:	c6 01       	movw	r24, r12
    2fcc:	09 95       	icall
    2fce:	89 2b       	or	r24, r25
    2fd0:	79 f7       	brne	.-34     	; 0x2fb0 <Print::write(unsigned char const*, unsigned int)+0x20>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:42
    else break;
  }
  return n;
}
    2fd2:	c5 01       	movw	r24, r10
    2fd4:	df 91       	pop	r29
    2fd6:	cf 91       	pop	r28
    2fd8:	1f 91       	pop	r17
    2fda:	0f 91       	pop	r16
    2fdc:	ff 90       	pop	r15
    2fde:	ef 90       	pop	r14
    2fe0:	df 90       	pop	r13
    2fe2:	cf 90       	pop	r12
    2fe4:	bf 90       	pop	r11
    2fe6:	af 90       	pop	r10
    2fe8:	08 95       	ret

00002fea <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc.part.2():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    2fea:	fb 01       	movw	r30, r22
    2fec:	01 90       	ld	r0, Z+
    2fee:	00 20       	and	r0, r0
    2ff0:	e9 f7       	brne	.-6      	; 0x2fec <Print::write(char const*) [clone .part.2]+0x2>
    2ff2:	31 97       	sbiw	r30, 0x01	; 1
    2ff4:	af 01       	movw	r20, r30
    2ff6:	46 1b       	sub	r20, r22
    2ff8:	57 0b       	sbc	r21, r23
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	ed 91       	ld	r30, X+
    2ffe:	fc 91       	ld	r31, X
    3000:	02 80       	ldd	r0, Z+2	; 0x02
    3002:	f3 81       	ldd	r31, Z+3	; 0x03
    3004:	e0 2d       	mov	r30, r0
    3006:	09 94       	ijmp

00003008 <Print::print(char const*)>:
_ZN5Print5printEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:53
      if (str == NULL) return 0;
    3008:	61 15       	cp	r22, r1
    300a:	71 05       	cpc	r23, r1
    300c:	09 f0       	breq	.+2      	; 0x3010 <Print::print(char const*)+0x8>
    300e:	ed cf       	rjmp	.-38     	; 0x2fea <Print::write(char const*) [clone .part.2]>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	08 95       	ret

00003016 <Print::print(char)>:
_ZN5Print5printEc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:69

size_t Print::print(char c)
{
  return write(c);
    3016:	dc 01       	movw	r26, r24
    3018:	ed 91       	ld	r30, X+
    301a:	fc 91       	ld	r31, X
    301c:	01 90       	ld	r0, Z+
    301e:	f0 81       	ld	r31, Z
    3020:	e0 2d       	mov	r30, r0
    3022:	09 94       	ijmp

00003024 <Print::println()>:
_ZN5Print7printlnEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:127
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    3024:	6e e6       	ldi	r22, 0x6E	; 110
    3026:	73 e0       	ldi	r23, 0x03	; 3
    3028:	e0 cf       	rjmp	.-64     	; 0x2fea <Print::write(char const*) [clone .part.2]>

0000302a <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:139
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
    3032:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:53
    3034:	d0 e0       	ldi	r29, 0x00	; 0
    3036:	c0 e0       	ldi	r28, 0x00	; 0
    3038:	61 15       	cp	r22, r1
    303a:	71 05       	cpc	r23, r1
    303c:	11 f0       	breq	.+4      	; 0x3042 <Print::println(char const*)+0x18>
    303e:	d5 df       	rcall	.-86     	; 0x2fea <Print::write(char const*) [clone .part.2]>
    3040:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:141
  size_t n = print(c);
  n += println();
    3042:	c8 01       	movw	r24, r16
    3044:	ef df       	rcall	.-34     	; 0x3024 <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:143
  return n;
}
    3046:	8c 0f       	add	r24, r28
    3048:	9d 1f       	adc	r25, r29
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	0f 91       	pop	r16
    3052:	08 95       	ret

00003054 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:204
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    3054:	8f 92       	push	r8
    3056:	9f 92       	push	r9
    3058:	af 92       	push	r10
    305a:	bf 92       	push	r11
    305c:	ef 92       	push	r14
    305e:	ff 92       	push	r15
    3060:	0f 93       	push	r16
    3062:	1f 93       	push	r17
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	a1 97       	sbiw	r28, 0x21	; 33
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	7c 01       	movw	r14, r24
    307a:	fa 01       	movw	r30, r20
    307c:	cb 01       	movw	r24, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:208
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    307e:	19 a2       	std	Y+33, r1	; 0x21
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:211

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3080:	22 30       	cpi	r18, 0x02	; 2
    3082:	08 f4       	brcc	.+2      	; 0x3086 <Print::printNumber(unsigned long, unsigned char)+0x32>
    3084:	2a e0       	ldi	r18, 0x0A	; 10
    3086:	8e 01       	movw	r16, r28
    3088:	0f 5d       	subi	r16, 0xDF	; 223
    308a:	1f 4f       	sbci	r17, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:214

  do {
    char c = n % base;
    308c:	82 2e       	mov	r8, r18
    308e:	91 2c       	mov	r9, r1
    3090:	b1 2c       	mov	r11, r1
    3092:	a1 2c       	mov	r10, r1
    3094:	bf 01       	movw	r22, r30
    3096:	a5 01       	movw	r20, r10
    3098:	94 01       	movw	r18, r8
    309a:	fa d1       	rcall	.+1012   	; 0x3490 <__udivmodsi4>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:215
    n /= base;
    309c:	f9 01       	movw	r30, r18
    309e:	ca 01       	movw	r24, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    30a0:	6a 30       	cpi	r22, 0x0A	; 10
    30a2:	04 f5       	brge	.+64     	; 0x30e4 <Print::printNumber(unsigned long, unsigned char)+0x90>
    30a4:	60 5d       	subi	r22, 0xD0	; 208
    30a6:	d8 01       	movw	r26, r16
    30a8:	6e 93       	st	-X, r22
    30aa:	8d 01       	movw	r16, r26
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:218
  } while(n);
    30ac:	23 2b       	or	r18, r19
    30ae:	24 2b       	or	r18, r20
    30b0:	25 2b       	or	r18, r21
    30b2:	81 f7       	brne	.-32     	; 0x3094 <Print::printNumber(unsigned long, unsigned char)+0x40>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:53
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	10 97       	sbiw	r26, 0x00	; 0
    30ba:	19 f0       	breq	.+6      	; 0x30c2 <Print::printNumber(unsigned long, unsigned char)+0x6e>
    30bc:	bd 01       	movw	r22, r26
    30be:	c7 01       	movw	r24, r14
    30c0:	94 df       	rcall	.-216    	; 0x2fea <Print::write(char const*) [clone .part.2]>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:221

  return write(str);
}
    30c2:	a1 96       	adiw	r28, 0x21	; 33
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	de bf       	out	0x3e, r29	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	cd bf       	out	0x3d, r28	; 61
    30ce:	df 91       	pop	r29
    30d0:	cf 91       	pop	r28
    30d2:	1f 91       	pop	r17
    30d4:	0f 91       	pop	r16
    30d6:	ff 90       	pop	r15
    30d8:	ef 90       	pop	r14
    30da:	bf 90       	pop	r11
    30dc:	af 90       	pop	r10
    30de:	9f 90       	pop	r9
    30e0:	8f 90       	pop	r8
    30e2:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    30e4:	69 5c       	subi	r22, 0xC9	; 201
    30e6:	df cf       	rjmp	.-66     	; 0x30a6 <Print::printNumber(unsigned long, unsigned char)+0x52>

000030e8 <Print::print(long, int)>:
_ZN5Print5printEli():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:88
{
    30e8:	cf 92       	push	r12
    30ea:	df 92       	push	r13
    30ec:	ef 92       	push	r14
    30ee:	ff 92       	push	r15
    30f0:	0f 93       	push	r16
    30f2:	1f 93       	push	r17
    30f4:	cf 93       	push	r28
    30f6:	df 93       	push	r29
    30f8:	ec 01       	movw	r28, r24
    30fa:	6a 01       	movw	r12, r20
    30fc:	7b 01       	movw	r14, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:89
  if (base == 0) {
    30fe:	21 15       	cp	r18, r1
    3100:	31 05       	cpc	r19, r1
    3102:	79 f4       	brne	.+30     	; 0x3122 <Print::print(long, int)+0x3a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    3104:	e8 81       	ld	r30, Y
    3106:	f9 81       	ldd	r31, Y+1	; 0x01
    3108:	01 90       	ld	r0, Z+
    310a:	f0 81       	ld	r31, Z
    310c:	e0 2d       	mov	r30, r0
    310e:	64 2f       	mov	r22, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    3110:	df 91       	pop	r29
    3112:	cf 91       	pop	r28
    3114:	1f 91       	pop	r17
    3116:	0f 91       	pop	r16
    3118:	ff 90       	pop	r15
    311a:	ef 90       	pop	r14
    311c:	df 90       	pop	r13
    311e:	cf 90       	pop	r12
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    3120:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:91
  } else if (base == 10) {
    3122:	2a 30       	cpi	r18, 0x0A	; 10
    3124:	31 05       	cpc	r19, r1
    3126:	d9 f4       	brne	.+54     	; 0x315e <Print::print(long, int)+0x76>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:97
    return printNumber(n, 10);
    3128:	2a e0       	ldi	r18, 0x0A	; 10
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:92
    if (n < 0) {
    312a:	f7 fe       	sbrs	r15, 7
    312c:	18 c0       	rjmp	.+48     	; 0x315e <Print::print(long, int)+0x76>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:93
      int t = print('-');
    312e:	6d e2       	ldi	r22, 0x2D	; 45
    3130:	72 df       	rcall	.-284    	; 0x3016 <Print::print(char)>
    3132:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:94
      n = -n;
    3134:	44 27       	eor	r20, r20
    3136:	55 27       	eor	r21, r21
    3138:	ba 01       	movw	r22, r20
    313a:	4c 19       	sub	r20, r12
    313c:	5d 09       	sbc	r21, r13
    313e:	6e 09       	sbc	r22, r14
    3140:	7f 09       	sbc	r23, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:95
      return printNumber(n, 10) + t;
    3142:	2a e0       	ldi	r18, 0x0A	; 10
    3144:	ce 01       	movw	r24, r28
    3146:	86 df       	rcall	.-244    	; 0x3054 <Print::printNumber(unsigned long, unsigned char)>
    3148:	80 0f       	add	r24, r16
    314a:	91 1f       	adc	r25, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	1f 91       	pop	r17
    3152:	0f 91       	pop	r16
    3154:	ff 90       	pop	r15
    3156:	ef 90       	pop	r14
    3158:	df 90       	pop	r13
    315a:	cf 90       	pop	r12
    315c:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    315e:	b7 01       	movw	r22, r14
    3160:	a6 01       	movw	r20, r12
    3162:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	0f 91       	pop	r16
    316c:	ff 90       	pop	r15
    316e:	ef 90       	pop	r14
    3170:	df 90       	pop	r13
    3172:	cf 90       	pop	r12
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    3174:	6f cf       	rjmp	.-290    	; 0x3054 <Print::printNumber(unsigned long, unsigned char)>

00003176 <Print::print(int, int)>:
_ZN5Print5printEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:78
{
    3176:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:79
  return print((long) n, base);
    3178:	ab 01       	movw	r20, r22
    317a:	77 0f       	add	r23, r23
    317c:	66 0b       	sbc	r22, r22
    317e:	77 0b       	sbc	r23, r23
    3180:	b3 cf       	rjmp	.-154    	; 0x30e8 <Print::print(long, int)>

00003182 <Print::println(int, int)>:
_ZN5Print7printlnEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:160
{
    3182:	0f 93       	push	r16
    3184:	1f 93       	push	r17
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:161
  size_t n = print(num, base);
    318c:	f4 df       	rcall	.-24     	; 0x3176 <Print::print(int, int)>
    318e:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:162
  n += println();
    3190:	ce 01       	movw	r24, r28
    3192:	48 df       	rcall	.-368    	; 0x3024 <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:164
}
    3194:	80 0f       	add	r24, r16
    3196:	91 1f       	adc	r25, r17
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

000031a2 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:105
  if (base == 0) return write(n);
    31a2:	21 15       	cp	r18, r1
    31a4:	31 05       	cpc	r19, r1
    31a6:	41 f4       	brne	.+16     	; 0x31b8 <Print::print(unsigned long, int)+0x16>
    31a8:	dc 01       	movw	r26, r24
    31aa:	ed 91       	ld	r30, X+
    31ac:	fc 91       	ld	r31, X
    31ae:	01 90       	ld	r0, Z+
    31b0:	f0 81       	ld	r31, Z
    31b2:	e0 2d       	mov	r30, r0
    31b4:	64 2f       	mov	r22, r20
    31b6:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:106
  else return printNumber(n, base);
    31b8:	4d cf       	rjmp	.-358    	; 0x3054 <Print::printNumber(unsigned long, unsigned char)>

000031ba <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:73
{
    31ba:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:74
  return print((unsigned long) b, base);
    31bc:	46 2f       	mov	r20, r22
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	70 e0       	ldi	r23, 0x00	; 0
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	ee cf       	rjmp	.-36     	; 0x31a2 <Print::print(unsigned long, int)>

000031c6 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:83
{
    31c6:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:84
  return print((unsigned long) n, base);
    31c8:	ab 01       	movw	r20, r22
    31ca:	70 e0       	ldi	r23, 0x00	; 0
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	e9 cf       	rjmp	.-46     	; 0x31a2 <Print::print(unsigned long, int)>

000031d0 <Print::println(unsigned int, int)>:
_ZN5Print7printlnEji():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:167
{
    31d0:	0f 93       	push	r16
    31d2:	1f 93       	push	r17
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:168
  size_t n = print(num, base);
    31da:	f5 df       	rcall	.-22     	; 0x31c6 <Print::print(unsigned int, int)>
    31dc:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:169
  n += println();
    31de:	ce 01       	movw	r24, r28
    31e0:	21 df       	rcall	.-446    	; 0x3024 <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:171
}
    31e2:	80 0f       	add	r24, r16
    31e4:	91 1f       	adc	r25, r17
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	08 95       	ret

000031f0 <initVariant>:
initVariant():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    31f0:	08 95       	ret

000031f2 <main>:
main():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:35
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    31f2:	71 dd       	rcall	.-1310   	; 0x2cd6 <init>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:37

	initVariant();
    31f4:	fd df       	rcall	.-6      	; 0x31f0 <initVariant>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:43

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    31f6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <setup>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    31fa:	c2 e4       	ldi	r28, 0x42	; 66
    31fc:	d9 e1       	ldi	r29, 0x19	; 25
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:46
		loop();
    31fe:	0e 94 8d 01 	call	0x31a	; 0x31a <loop>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
		if (serialEventRun) serialEventRun();
    3202:	20 97       	sbiw	r28, 0x00	; 0
    3204:	e1 f3       	breq	.-8      	; 0x31fe <main+0xc>
    3206:	3e d0       	rcall	.+124    	; 0x3284 <serialEventRun()>
    3208:	fa cf       	rjmp	.-12     	; 0x31fe <main+0xc>

0000320a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:153
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    320a:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:154
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    320c:	91 8d       	ldd	r25, Z+25	; 0x19
    320e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3210:	89 2f       	mov	r24, r25
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	80 5c       	subi	r24, 0xC0	; 192
    3216:	9f 4f       	sbci	r25, 0xFF	; 255
    3218:	82 1b       	sub	r24, r18
    321a:	91 09       	sbc	r25, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:155
}
    321c:	8f 73       	andi	r24, 0x3F	; 63
    321e:	99 27       	eor	r25, r25
    3220:	08 95       	ret

00003222 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:158

int HardwareSerial::peek(void)
{
    3222:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:159
  if (_rx_buffer_head == _rx_buffer_tail) {
    3224:	91 8d       	ldd	r25, Z+25	; 0x19
    3226:	82 8d       	ldd	r24, Z+26	; 0x1a
    3228:	98 17       	cp	r25, r24
    322a:	31 f0       	breq	.+12     	; 0x3238 <HardwareSerial::peek()+0x16>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:162
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    322c:	82 8d       	ldd	r24, Z+26	; 0x1a
    322e:	e8 0f       	add	r30, r24
    3230:	f1 1d       	adc	r31, r1
    3232:	85 8d       	ldd	r24, Z+29	; 0x1d
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:160
    return -1;
    3238:	8f ef       	ldi	r24, 0xFF	; 255
    323a:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:164
  }
}
    323c:	08 95       	ret

0000323e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
    323e:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:169
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3240:	91 8d       	ldd	r25, Z+25	; 0x19
    3242:	82 8d       	ldd	r24, Z+26	; 0x1a
    3244:	98 17       	cp	r25, r24
    3246:	61 f0       	breq	.+24     	; 0x3260 <HardwareSerial::read()+0x22>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:172
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3248:	a2 8d       	ldd	r26, Z+26	; 0x1a
    324a:	ae 0f       	add	r26, r30
    324c:	bf 2f       	mov	r27, r31
    324e:	b1 1d       	adc	r27, r1
    3250:	5d 96       	adiw	r26, 0x1d	; 29
    3252:	8c 91       	ld	r24, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:173
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3254:	92 8d       	ldd	r25, Z+26	; 0x1a
    3256:	9f 5f       	subi	r25, 0xFF	; 255
    3258:	9f 73       	andi	r25, 0x3F	; 63
    325a:	92 8f       	std	Z+26, r25	; 0x1a
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:174
    return c;
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:170
    return -1;
    3260:	8f ef       	ldi	r24, 0xFF	; 255
    3262:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:176
  }
}
    3264:	08 95       	ret

00003266 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:184
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    3266:	fc 01       	movw	r30, r24
    3268:	53 8d       	ldd	r21, Z+27	; 0x1b
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:185
  tx_buffer_index_t tail = _tx_buffer_tail;
    326a:	44 8d       	ldd	r20, Z+28	; 0x1c
    326c:	25 2f       	mov	r18, r21
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	84 2f       	mov	r24, r20
    3272:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:189
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3274:	82 1b       	sub	r24, r18
    3276:	93 0b       	sbc	r25, r19
    3278:	54 17       	cp	r21, r20
    327a:	10 f0       	brcs	.+4      	; 0x3280 <HardwareSerial::availableForWrite()+0x1a>
    327c:	cf 96       	adiw	r24, 0x3f	; 63
    327e:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:190
  return tail - head - 1;
    3280:	01 97       	sbiw	r24, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:191
}
    3282:	08 95       	ret

00003284 <serialEventRun()>:
_Z14serialEventRunv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:66
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3284:	82 e9       	ldi	r24, 0x92	; 146
    3286:	97 e1       	ldi	r25, 0x17	; 23
    3288:	89 2b       	or	r24, r25
    328a:	41 f0       	breq	.+16     	; 0x329c <serialEventRun()+0x18>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	89 2b       	or	r24, r25
    3292:	21 f0       	breq	.+8      	; 0x329c <serialEventRun()+0x18>
    3294:	47 de       	rcall	.-882    	; 0x2f24 <Serial0_available()>
    3296:	81 11       	cpse	r24, r1
    3298:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:77
}
    329c:	08 95       	ret

0000329e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:82
{
    329e:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:85
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    32a0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    32a2:	a8 0f       	add	r26, r24
    32a4:	b9 2f       	mov	r27, r25
    32a6:	b1 1d       	adc	r27, r1
    32a8:	a3 5a       	subi	r26, 0xA3	; 163
    32aa:	bf 4f       	sbci	r27, 0xFF	; 255
    32ac:	2c 91       	ld	r18, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    32ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	01 96       	adiw	r24, 0x01	; 1
    32b4:	8f 73       	andi	r24, 0x3F	; 63
    32b6:	99 27       	eor	r25, r25
    32b8:	84 8f       	std	Z+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:88
  *_udr = c;
    32ba:	a6 89       	ldd	r26, Z+22	; 0x16
    32bc:	b7 89       	ldd	r27, Z+23	; 0x17
    32be:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:93
  sbi(*_ucsra, TXC0);
    32c0:	a0 89       	ldd	r26, Z+16	; 0x10
    32c2:	b1 89       	ldd	r27, Z+17	; 0x11
    32c4:	8c 91       	ld	r24, X
    32c6:	80 64       	ori	r24, 0x40	; 64
    32c8:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:95
  if (_tx_buffer_head == _tx_buffer_tail) {
    32ca:	93 8d       	ldd	r25, Z+27	; 0x1b
    32cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    32ce:	98 13       	cpse	r25, r24
    32d0:	06 c0       	rjmp	.+12     	; 0x32de <HardwareSerial::_tx_udr_empty_irq()+0x40>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:97
    cbi(*_ucsrb, UDRIE0);
    32d2:	02 88       	ldd	r0, Z+18	; 0x12
    32d4:	f3 89       	ldd	r31, Z+19	; 0x13
    32d6:	e0 2d       	mov	r30, r0
    32d8:	80 81       	ld	r24, Z
    32da:	8f 7d       	andi	r24, 0xDF	; 223
    32dc:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:99
}
    32de:	08 95       	ret

000032e0 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:194

void HardwareSerial::flush()
{
    32e0:	cf 93       	push	r28
    32e2:	df 93       	push	r29
    32e4:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:198
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    32e6:	88 8d       	ldd	r24, Y+24	; 0x18
    32e8:	88 23       	and	r24, r24
    32ea:	b1 f0       	breq	.+44     	; 0x3318 <HardwareSerial::flush()+0x38>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:201
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    32ec:	aa 89       	ldd	r26, Y+18	; 0x12
    32ee:	bb 89       	ldd	r27, Y+19	; 0x13
    32f0:	e8 89       	ldd	r30, Y+16	; 0x10
    32f2:	f9 89       	ldd	r31, Y+17	; 0x11
    32f4:	8c 91       	ld	r24, X
    32f6:	85 fd       	sbrc	r24, 5
    32f8:	03 c0       	rjmp	.+6      	; 0x3300 <HardwareSerial::flush()+0x20>
    32fa:	80 81       	ld	r24, Z
    32fc:	86 fd       	sbrc	r24, 6
    32fe:	0c c0       	rjmp	.+24     	; 0x3318 <HardwareSerial::flush()+0x38>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:202
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	07 fc       	sbrc	r0, 7
    3304:	f7 cf       	rjmp	.-18     	; 0x32f4 <HardwareSerial::flush()+0x14>
    3306:	8c 91       	ld	r24, X
    3308:	85 ff       	sbrs	r24, 5
    330a:	f2 cf       	rjmp	.-28     	; 0x32f0 <HardwareSerial::flush()+0x10>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:206
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    330c:	80 81       	ld	r24, Z
    330e:	85 ff       	sbrs	r24, 5
    3310:	ed cf       	rjmp	.-38     	; 0x32ec <HardwareSerial::flush()+0xc>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:207
	  _tx_udr_empty_irq();
    3312:	ce 01       	movw	r24, r28
    3314:	c4 df       	rcall	.-120    	; 0x329e <HardwareSerial::_tx_udr_empty_irq()>
    3316:	ea cf       	rjmp	.-44     	; 0x32ec <HardwareSerial::flush()+0xc>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:211
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	08 95       	ret

0000331e <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:214

size_t HardwareSerial::write(uint8_t c)
{
    331e:	ef 92       	push	r14
    3320:	ff 92       	push	r15
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	cf 93       	push	r28
    3328:	df 93       	push	r29
    332a:	ec 01       	movw	r28, r24
    332c:	f6 2e       	mov	r15, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:215
  _written = true;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:220
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3332:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3334:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3336:	98 13       	cpse	r25, r24
    3338:	16 c0       	rjmp	.+44     	; 0x3366 <HardwareSerial::write(unsigned char)+0x48>
    333a:	e8 89       	ldd	r30, Y+16	; 0x10
    333c:	f9 89       	ldd	r31, Y+17	; 0x11
    333e:	80 81       	ld	r24, Z
    3340:	85 ff       	sbrs	r24, 5
    3342:	11 c0       	rjmp	.+34     	; 0x3366 <HardwareSerial::write(unsigned char)+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:221
    *_udr = c;
    3344:	ee 89       	ldd	r30, Y+22	; 0x16
    3346:	ff 89       	ldd	r31, Y+23	; 0x17
    3348:	60 83       	st	Z, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
    334a:	e8 89       	ldd	r30, Y+16	; 0x10
    334c:	f9 89       	ldd	r31, Y+17	; 0x11
    334e:	80 81       	ld	r24, Z
    3350:	80 64       	ori	r24, 0x40	; 64
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:245
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
    3352:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:248
  
  return 1;
}
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	1f 91       	pop	r17
    335e:	0f 91       	pop	r16
    3360:	ff 90       	pop	r15
    3362:	ef 90       	pop	r14
    3364:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:225
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3366:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3368:	10 e0       	ldi	r17, 0x00	; 0
    336a:	0f 5f       	subi	r16, 0xFF	; 255
    336c:	1f 4f       	sbci	r17, 0xFF	; 255
    336e:	0f 73       	andi	r16, 0x3F	; 63
    3370:	11 27       	eor	r17, r17
    3372:	e0 2e       	mov	r14, r16
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:229
  while (i == _tx_buffer_tail) {
    3374:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3376:	8e 11       	cpse	r24, r14
    3378:	0b c0       	rjmp	.+22     	; 0x3390 <HardwareSerial::write(unsigned char)+0x72>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:230
    if (bit_is_clear(SREG, SREG_I)) {
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	07 fc       	sbrc	r0, 7
    337e:	fa cf       	rjmp	.-12     	; 0x3374 <HardwareSerial::write(unsigned char)+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:235
      if(bit_is_set(*_ucsra, UDRE0))
    3380:	e8 89       	ldd	r30, Y+16	; 0x10
    3382:	f9 89       	ldd	r31, Y+17	; 0x11
    3384:	80 81       	ld	r24, Z
    3386:	85 ff       	sbrs	r24, 5
    3388:	f5 cf       	rjmp	.-22     	; 0x3374 <HardwareSerial::write(unsigned char)+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:236
	_tx_udr_empty_irq();
    338a:	ce 01       	movw	r24, r28
    338c:	88 df       	rcall	.-240    	; 0x329e <HardwareSerial::_tx_udr_empty_irq()>
    338e:	f2 cf       	rjmp	.-28     	; 0x3374 <HardwareSerial::write(unsigned char)+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:242
  _tx_buffer[_tx_buffer_head] = c;
    3390:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3392:	ec 0f       	add	r30, r28
    3394:	fd 2f       	mov	r31, r29
    3396:	f1 1d       	adc	r31, r1
    3398:	e3 5a       	subi	r30, 0xA3	; 163
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	f0 82       	st	Z, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:243
  _tx_buffer_head = i;
    339e:	0b 8f       	std	Y+27, r16	; 0x1b
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:245
  sbi(*_ucsrb, UDRIE0);
    33a0:	ea 89       	ldd	r30, Y+18	; 0x12
    33a2:	fb 89       	ldd	r31, Y+19	; 0x13
    33a4:	80 81       	ld	r24, Z
    33a6:	80 62       	ori	r24, 0x20	; 32
    33a8:	d4 cf       	rjmp	.-88     	; 0x3352 <HardwareSerial::write(unsigned char)+0x34>

000033aa <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:104
{
    33aa:	cf 92       	push	r12
    33ac:	df 92       	push	r13
    33ae:	ef 92       	push	r14
    33b0:	ff 92       	push	r15
    33b2:	1f 93       	push	r17
    33b4:	cf 93       	push	r28
    33b6:	df 93       	push	r29
    33b8:	ec 01       	movw	r28, r24
    33ba:	6a 01       	movw	r12, r20
    33bc:	7b 01       	movw	r14, r22
    33be:	12 2f       	mov	r17, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:107
  *_ucsra = 1 << U2X0;
    33c0:	e8 89       	ldd	r30, Y+16	; 0x10
    33c2:	f9 89       	ldd	r31, Y+17	; 0x11
    33c4:	82 e0       	ldi	r24, 0x02	; 2
    33c6:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    33c8:	c1 14       	cp	r12, r1
    33ca:	81 ee       	ldi	r24, 0xE1	; 225
    33cc:	d8 06       	cpc	r13, r24
    33ce:	e1 04       	cpc	r14, r1
    33d0:	f1 04       	cpc	r15, r1
    33d2:	99 f0       	breq	.+38     	; 0x33fa <HardwareSerial::begin(unsigned long, unsigned char)+0x50>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:106
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    33d4:	60 e0       	ldi	r22, 0x00	; 0
    33d6:	79 e0       	ldi	r23, 0x09	; 9
    33d8:	8d e3       	ldi	r24, 0x3D	; 61
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	a7 01       	movw	r20, r14
    33de:	96 01       	movw	r18, r12
    33e0:	57 d0       	rcall	.+174    	; 0x3490 <__udivmodsi4>
    33e2:	21 50       	subi	r18, 0x01	; 1
    33e4:	31 09       	sbc	r19, r1
    33e6:	41 09       	sbc	r20, r1
    33e8:	51 09       	sbc	r21, r1
    33ea:	56 95       	lsr	r21
    33ec:	47 95       	ror	r20
    33ee:	37 95       	ror	r19
    33f0:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    33f2:	21 15       	cp	r18, r1
    33f4:	80 e1       	ldi	r24, 0x10	; 16
    33f6:	38 07       	cpc	r19, r24
    33f8:	90 f0       	brcs	.+36     	; 0x341e <HardwareSerial::begin(unsigned long, unsigned char)+0x74>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:116
    *_ucsra = 0;
    33fa:	e8 89       	ldd	r30, Y+16	; 0x10
    33fc:	f9 89       	ldd	r31, Y+17	; 0x11
    33fe:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3400:	60 e8       	ldi	r22, 0x80	; 128
    3402:	74 e8       	ldi	r23, 0x84	; 132
    3404:	8e e1       	ldi	r24, 0x1E	; 30
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	a7 01       	movw	r20, r14
    340a:	96 01       	movw	r18, r12
    340c:	41 d0       	rcall	.+130    	; 0x3490 <__udivmodsi4>
    340e:	21 50       	subi	r18, 0x01	; 1
    3410:	31 09       	sbc	r19, r1
    3412:	41 09       	sbc	r20, r1
    3414:	51 09       	sbc	r21, r1
    3416:	56 95       	lsr	r21
    3418:	47 95       	ror	r20
    341a:	37 95       	ror	r19
    341c:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:121
  *_ubrrh = baud_setting >> 8;
    341e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3420:	fd 85       	ldd	r31, Y+13	; 0x0d
    3422:	30 83       	st	Z, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    3424:	ee 85       	ldd	r30, Y+14	; 0x0e
    3426:	ff 85       	ldd	r31, Y+15	; 0x0f
    3428:	20 83       	st	Z, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:124
  _written = false;
    342a:	18 8e       	std	Y+24, r1	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:130
  *_ucsrc = config;
    342c:	ec 89       	ldd	r30, Y+20	; 0x14
    342e:	fd 89       	ldd	r31, Y+21	; 0x15
    3430:	10 83       	st	Z, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:132
  sbi(*_ucsrb, RXEN0);
    3432:	ea 89       	ldd	r30, Y+18	; 0x12
    3434:	fb 89       	ldd	r31, Y+19	; 0x13
    3436:	80 81       	ld	r24, Z
    3438:	80 61       	ori	r24, 0x10	; 16
    343a:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:133
  sbi(*_ucsrb, TXEN0);
    343c:	ea 89       	ldd	r30, Y+18	; 0x12
    343e:	fb 89       	ldd	r31, Y+19	; 0x13
    3440:	80 81       	ld	r24, Z
    3442:	88 60       	ori	r24, 0x08	; 8
    3444:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:134
  sbi(*_ucsrb, RXCIE0);
    3446:	ea 89       	ldd	r30, Y+18	; 0x12
    3448:	fb 89       	ldd	r31, Y+19	; 0x13
    344a:	80 81       	ld	r24, Z
    344c:	80 68       	ori	r24, 0x80	; 128
    344e:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:135
  cbi(*_ucsrb, UDRIE0);
    3450:	ea 89       	ldd	r30, Y+18	; 0x12
    3452:	fb 89       	ldd	r31, Y+19	; 0x13
    3454:	80 81       	ld	r24, Z
    3456:	8f 7d       	andi	r24, 0xDF	; 223
    3458:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:136
}
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	1f 91       	pop	r17
    3460:	ff 90       	pop	r15
    3462:	ef 90       	pop	r14
    3464:	df 90       	pop	r13
    3466:	cf 90       	pop	r12
    3468:	08 95       	ret

0000346a <__divmodhi4>:
    346a:	97 fb       	bst	r25, 7
    346c:	07 2e       	mov	r0, r23
    346e:	16 f4       	brtc	.+4      	; 0x3474 <__divmodhi4+0xa>
    3470:	00 94       	com	r0
    3472:	06 d0       	rcall	.+12     	; 0x3480 <__divmodhi4_neg1>
    3474:	77 fd       	sbrc	r23, 7
    3476:	08 d0       	rcall	.+16     	; 0x3488 <__divmodhi4_neg2>
    3478:	49 d0       	rcall	.+146    	; 0x350c <__udivmodhi4>
    347a:	07 fc       	sbrc	r0, 7
    347c:	05 d0       	rcall	.+10     	; 0x3488 <__divmodhi4_neg2>
    347e:	3e f4       	brtc	.+14     	; 0x348e <__divmodhi4_exit>

00003480 <__divmodhi4_neg1>:
    3480:	90 95       	com	r25
    3482:	81 95       	neg	r24
    3484:	9f 4f       	sbci	r25, 0xFF	; 255
    3486:	08 95       	ret

00003488 <__divmodhi4_neg2>:
    3488:	70 95       	com	r23
    348a:	61 95       	neg	r22
    348c:	7f 4f       	sbci	r23, 0xFF	; 255

0000348e <__divmodhi4_exit>:
    348e:	08 95       	ret

00003490 <__udivmodsi4>:
    3490:	a1 e2       	ldi	r26, 0x21	; 33
    3492:	1a 2e       	mov	r1, r26
    3494:	aa 1b       	sub	r26, r26
    3496:	bb 1b       	sub	r27, r27
    3498:	fd 01       	movw	r30, r26
    349a:	0d c0       	rjmp	.+26     	; 0x34b6 <__udivmodsi4_ep>

0000349c <__udivmodsi4_loop>:
    349c:	aa 1f       	adc	r26, r26
    349e:	bb 1f       	adc	r27, r27
    34a0:	ee 1f       	adc	r30, r30
    34a2:	ff 1f       	adc	r31, r31
    34a4:	a2 17       	cp	r26, r18
    34a6:	b3 07       	cpc	r27, r19
    34a8:	e4 07       	cpc	r30, r20
    34aa:	f5 07       	cpc	r31, r21
    34ac:	20 f0       	brcs	.+8      	; 0x34b6 <__udivmodsi4_ep>
    34ae:	a2 1b       	sub	r26, r18
    34b0:	b3 0b       	sbc	r27, r19
    34b2:	e4 0b       	sbc	r30, r20
    34b4:	f5 0b       	sbc	r31, r21

000034b6 <__udivmodsi4_ep>:
    34b6:	66 1f       	adc	r22, r22
    34b8:	77 1f       	adc	r23, r23
    34ba:	88 1f       	adc	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	1a 94       	dec	r1
    34c0:	69 f7       	brne	.-38     	; 0x349c <__udivmodsi4_loop>
    34c2:	60 95       	com	r22
    34c4:	70 95       	com	r23
    34c6:	80 95       	com	r24
    34c8:	90 95       	com	r25
    34ca:	9b 01       	movw	r18, r22
    34cc:	ac 01       	movw	r20, r24
    34ce:	bd 01       	movw	r22, r26
    34d0:	cf 01       	movw	r24, r30
    34d2:	08 95       	ret

000034d4 <__divmodsi4>:
    34d4:	05 2e       	mov	r0, r21
    34d6:	97 fb       	bst	r25, 7
    34d8:	16 f4       	brtc	.+4      	; 0x34de <__divmodsi4+0xa>
    34da:	00 94       	com	r0
    34dc:	0f d0       	rcall	.+30     	; 0x34fc <__negsi2>
    34de:	57 fd       	sbrc	r21, 7
    34e0:	05 d0       	rcall	.+10     	; 0x34ec <__divmodsi4_neg2>
    34e2:	d6 df       	rcall	.-84     	; 0x3490 <__udivmodsi4>
    34e4:	07 fc       	sbrc	r0, 7
    34e6:	02 d0       	rcall	.+4      	; 0x34ec <__divmodsi4_neg2>
    34e8:	46 f4       	brtc	.+16     	; 0x34fa <__divmodsi4_exit>
    34ea:	08 c0       	rjmp	.+16     	; 0x34fc <__negsi2>

000034ec <__divmodsi4_neg2>:
    34ec:	50 95       	com	r21
    34ee:	40 95       	com	r20
    34f0:	30 95       	com	r19
    34f2:	21 95       	neg	r18
    34f4:	3f 4f       	sbci	r19, 0xFF	; 255
    34f6:	4f 4f       	sbci	r20, 0xFF	; 255
    34f8:	5f 4f       	sbci	r21, 0xFF	; 255

000034fa <__divmodsi4_exit>:
    34fa:	08 95       	ret

000034fc <__negsi2>:
    34fc:	90 95       	com	r25
    34fe:	80 95       	com	r24
    3500:	70 95       	com	r23
    3502:	61 95       	neg	r22
    3504:	7f 4f       	sbci	r23, 0xFF	; 255
    3506:	8f 4f       	sbci	r24, 0xFF	; 255
    3508:	9f 4f       	sbci	r25, 0xFF	; 255
    350a:	08 95       	ret

0000350c <__udivmodhi4>:
    350c:	aa 1b       	sub	r26, r26
    350e:	bb 1b       	sub	r27, r27
    3510:	51 e1       	ldi	r21, 0x11	; 17
    3512:	07 c0       	rjmp	.+14     	; 0x3522 <__udivmodhi4_ep>

00003514 <__udivmodhi4_loop>:
    3514:	aa 1f       	adc	r26, r26
    3516:	bb 1f       	adc	r27, r27
    3518:	a6 17       	cp	r26, r22
    351a:	b7 07       	cpc	r27, r23
    351c:	10 f0       	brcs	.+4      	; 0x3522 <__udivmodhi4_ep>
    351e:	a6 1b       	sub	r26, r22
    3520:	b7 0b       	sbc	r27, r23

00003522 <__udivmodhi4_ep>:
    3522:	88 1f       	adc	r24, r24
    3524:	99 1f       	adc	r25, r25
    3526:	5a 95       	dec	r21
    3528:	a9 f7       	brne	.-22     	; 0x3514 <__udivmodhi4_loop>
    352a:	80 95       	com	r24
    352c:	90 95       	com	r25
    352e:	bc 01       	movw	r22, r24
    3530:	cd 01       	movw	r24, r26
    3532:	08 95       	ret

00003534 <__tablejump2__>:
    3534:	ee 0f       	add	r30, r30
    3536:	ff 1f       	adc	r31, r31
    3538:	05 90       	lpm	r0, Z+
    353a:	f4 91       	lpm	r31, Z
    353c:	e0 2d       	mov	r30, r0
    353e:	09 94       	ijmp

00003540 <malloc>:
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	82 30       	cpi	r24, 0x02	; 2
    354a:	91 05       	cpc	r25, r1
    354c:	10 f4       	brcc	.+4      	; 0x3552 <malloc+0x12>
    354e:	82 e0       	ldi	r24, 0x02	; 2
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	e0 91 38 06 	lds	r30, 0x0638	; 0x800638 <__flp>
    3556:	f0 91 39 06 	lds	r31, 0x0639	; 0x800639 <__flp+0x1>
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	a0 e0       	ldi	r26, 0x00	; 0
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	30 97       	sbiw	r30, 0x00	; 0
    3564:	19 f1       	breq	.+70     	; 0x35ac <malloc+0x6c>
    3566:	40 81       	ld	r20, Z
    3568:	51 81       	ldd	r21, Z+1	; 0x01
    356a:	02 81       	ldd	r16, Z+2	; 0x02
    356c:	13 81       	ldd	r17, Z+3	; 0x03
    356e:	48 17       	cp	r20, r24
    3570:	59 07       	cpc	r21, r25
    3572:	c8 f0       	brcs	.+50     	; 0x35a6 <malloc+0x66>
    3574:	84 17       	cp	r24, r20
    3576:	95 07       	cpc	r25, r21
    3578:	69 f4       	brne	.+26     	; 0x3594 <malloc+0x54>
    357a:	10 97       	sbiw	r26, 0x00	; 0
    357c:	31 f0       	breq	.+12     	; 0x358a <malloc+0x4a>
    357e:	12 96       	adiw	r26, 0x02	; 2
    3580:	0c 93       	st	X, r16
    3582:	12 97       	sbiw	r26, 0x02	; 2
    3584:	13 96       	adiw	r26, 0x03	; 3
    3586:	1c 93       	st	X, r17
    3588:	27 c0       	rjmp	.+78     	; 0x35d8 <malloc+0x98>
    358a:	00 93 38 06 	sts	0x0638, r16	; 0x800638 <__flp>
    358e:	10 93 39 06 	sts	0x0639, r17	; 0x800639 <__flp+0x1>
    3592:	22 c0       	rjmp	.+68     	; 0x35d8 <malloc+0x98>
    3594:	21 15       	cp	r18, r1
    3596:	31 05       	cpc	r19, r1
    3598:	19 f0       	breq	.+6      	; 0x35a0 <malloc+0x60>
    359a:	42 17       	cp	r20, r18
    359c:	53 07       	cpc	r21, r19
    359e:	18 f4       	brcc	.+6      	; 0x35a6 <malloc+0x66>
    35a0:	9a 01       	movw	r18, r20
    35a2:	bd 01       	movw	r22, r26
    35a4:	ef 01       	movw	r28, r30
    35a6:	df 01       	movw	r26, r30
    35a8:	f8 01       	movw	r30, r16
    35aa:	db cf       	rjmp	.-74     	; 0x3562 <malloc+0x22>
    35ac:	21 15       	cp	r18, r1
    35ae:	31 05       	cpc	r19, r1
    35b0:	f9 f0       	breq	.+62     	; 0x35f0 <malloc+0xb0>
    35b2:	28 1b       	sub	r18, r24
    35b4:	39 0b       	sbc	r19, r25
    35b6:	24 30       	cpi	r18, 0x04	; 4
    35b8:	31 05       	cpc	r19, r1
    35ba:	80 f4       	brcc	.+32     	; 0x35dc <malloc+0x9c>
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	9b 81       	ldd	r25, Y+3	; 0x03
    35c0:	61 15       	cp	r22, r1
    35c2:	71 05       	cpc	r23, r1
    35c4:	21 f0       	breq	.+8      	; 0x35ce <malloc+0x8e>
    35c6:	fb 01       	movw	r30, r22
    35c8:	93 83       	std	Z+3, r25	; 0x03
    35ca:	82 83       	std	Z+2, r24	; 0x02
    35cc:	04 c0       	rjmp	.+8      	; 0x35d6 <malloc+0x96>
    35ce:	90 93 39 06 	sts	0x0639, r25	; 0x800639 <__flp+0x1>
    35d2:	80 93 38 06 	sts	0x0638, r24	; 0x800638 <__flp>
    35d6:	fe 01       	movw	r30, r28
    35d8:	32 96       	adiw	r30, 0x02	; 2
    35da:	44 c0       	rjmp	.+136    	; 0x3664 <malloc+0x124>
    35dc:	fe 01       	movw	r30, r28
    35de:	e2 0f       	add	r30, r18
    35e0:	f3 1f       	adc	r31, r19
    35e2:	81 93       	st	Z+, r24
    35e4:	91 93       	st	Z+, r25
    35e6:	22 50       	subi	r18, 0x02	; 2
    35e8:	31 09       	sbc	r19, r1
    35ea:	39 83       	std	Y+1, r19	; 0x01
    35ec:	28 83       	st	Y, r18
    35ee:	3a c0       	rjmp	.+116    	; 0x3664 <malloc+0x124>
    35f0:	20 91 36 06 	lds	r18, 0x0636	; 0x800636 <__brkval>
    35f4:	30 91 37 06 	lds	r19, 0x0637	; 0x800637 <__brkval+0x1>
    35f8:	23 2b       	or	r18, r19
    35fa:	41 f4       	brne	.+16     	; 0x360c <malloc+0xcc>
    35fc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3600:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3604:	30 93 37 06 	sts	0x0637, r19	; 0x800637 <__brkval+0x1>
    3608:	20 93 36 06 	sts	0x0636, r18	; 0x800636 <__brkval>
    360c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__malloc_heap_end>
    3610:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__malloc_heap_end+0x1>
    3614:	21 15       	cp	r18, r1
    3616:	31 05       	cpc	r19, r1
    3618:	41 f4       	brne	.+16     	; 0x362a <malloc+0xea>
    361a:	2d b7       	in	r18, 0x3d	; 61
    361c:	3e b7       	in	r19, 0x3e	; 62
    361e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3622:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3626:	24 1b       	sub	r18, r20
    3628:	35 0b       	sbc	r19, r21
    362a:	e0 91 36 06 	lds	r30, 0x0636	; 0x800636 <__brkval>
    362e:	f0 91 37 06 	lds	r31, 0x0637	; 0x800637 <__brkval+0x1>
    3632:	e2 17       	cp	r30, r18
    3634:	f3 07       	cpc	r31, r19
    3636:	a0 f4       	brcc	.+40     	; 0x3660 <malloc+0x120>
    3638:	2e 1b       	sub	r18, r30
    363a:	3f 0b       	sbc	r19, r31
    363c:	28 17       	cp	r18, r24
    363e:	39 07       	cpc	r19, r25
    3640:	78 f0       	brcs	.+30     	; 0x3660 <malloc+0x120>
    3642:	ac 01       	movw	r20, r24
    3644:	4e 5f       	subi	r20, 0xFE	; 254
    3646:	5f 4f       	sbci	r21, 0xFF	; 255
    3648:	24 17       	cp	r18, r20
    364a:	35 07       	cpc	r19, r21
    364c:	48 f0       	brcs	.+18     	; 0x3660 <malloc+0x120>
    364e:	4e 0f       	add	r20, r30
    3650:	5f 1f       	adc	r21, r31
    3652:	50 93 37 06 	sts	0x0637, r21	; 0x800637 <__brkval+0x1>
    3656:	40 93 36 06 	sts	0x0636, r20	; 0x800636 <__brkval>
    365a:	81 93       	st	Z+, r24
    365c:	91 93       	st	Z+, r25
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <malloc+0x124>
    3660:	e0 e0       	ldi	r30, 0x00	; 0
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	cf 01       	movw	r24, r30
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	08 95       	ret

00003670 <free>:
    3670:	cf 93       	push	r28
    3672:	df 93       	push	r29
    3674:	00 97       	sbiw	r24, 0x00	; 0
    3676:	09 f4       	brne	.+2      	; 0x367a <free+0xa>
    3678:	81 c0       	rjmp	.+258    	; 0x377c <free+0x10c>
    367a:	fc 01       	movw	r30, r24
    367c:	32 97       	sbiw	r30, 0x02	; 2
    367e:	13 82       	std	Z+3, r1	; 0x03
    3680:	12 82       	std	Z+2, r1	; 0x02
    3682:	a0 91 38 06 	lds	r26, 0x0638	; 0x800638 <__flp>
    3686:	b0 91 39 06 	lds	r27, 0x0639	; 0x800639 <__flp+0x1>
    368a:	10 97       	sbiw	r26, 0x00	; 0
    368c:	81 f4       	brne	.+32     	; 0x36ae <free+0x3e>
    368e:	20 81       	ld	r18, Z
    3690:	31 81       	ldd	r19, Z+1	; 0x01
    3692:	82 0f       	add	r24, r18
    3694:	93 1f       	adc	r25, r19
    3696:	20 91 36 06 	lds	r18, 0x0636	; 0x800636 <__brkval>
    369a:	30 91 37 06 	lds	r19, 0x0637	; 0x800637 <__brkval+0x1>
    369e:	28 17       	cp	r18, r24
    36a0:	39 07       	cpc	r19, r25
    36a2:	51 f5       	brne	.+84     	; 0x36f8 <free+0x88>
    36a4:	f0 93 37 06 	sts	0x0637, r31	; 0x800637 <__brkval+0x1>
    36a8:	e0 93 36 06 	sts	0x0636, r30	; 0x800636 <__brkval>
    36ac:	67 c0       	rjmp	.+206    	; 0x377c <free+0x10c>
    36ae:	ed 01       	movw	r28, r26
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	ce 17       	cp	r28, r30
    36b6:	df 07       	cpc	r29, r31
    36b8:	40 f4       	brcc	.+16     	; 0x36ca <free+0x5a>
    36ba:	4a 81       	ldd	r20, Y+2	; 0x02
    36bc:	5b 81       	ldd	r21, Y+3	; 0x03
    36be:	9e 01       	movw	r18, r28
    36c0:	41 15       	cp	r20, r1
    36c2:	51 05       	cpc	r21, r1
    36c4:	f1 f0       	breq	.+60     	; 0x3702 <free+0x92>
    36c6:	ea 01       	movw	r28, r20
    36c8:	f5 cf       	rjmp	.-22     	; 0x36b4 <free+0x44>
    36ca:	d3 83       	std	Z+3, r29	; 0x03
    36cc:	c2 83       	std	Z+2, r28	; 0x02
    36ce:	40 81       	ld	r20, Z
    36d0:	51 81       	ldd	r21, Z+1	; 0x01
    36d2:	84 0f       	add	r24, r20
    36d4:	95 1f       	adc	r25, r21
    36d6:	c8 17       	cp	r28, r24
    36d8:	d9 07       	cpc	r29, r25
    36da:	59 f4       	brne	.+22     	; 0x36f2 <free+0x82>
    36dc:	88 81       	ld	r24, Y
    36de:	99 81       	ldd	r25, Y+1	; 0x01
    36e0:	84 0f       	add	r24, r20
    36e2:	95 1f       	adc	r25, r21
    36e4:	02 96       	adiw	r24, 0x02	; 2
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	80 83       	st	Z, r24
    36ea:	8a 81       	ldd	r24, Y+2	; 0x02
    36ec:	9b 81       	ldd	r25, Y+3	; 0x03
    36ee:	93 83       	std	Z+3, r25	; 0x03
    36f0:	82 83       	std	Z+2, r24	; 0x02
    36f2:	21 15       	cp	r18, r1
    36f4:	31 05       	cpc	r19, r1
    36f6:	29 f4       	brne	.+10     	; 0x3702 <free+0x92>
    36f8:	f0 93 39 06 	sts	0x0639, r31	; 0x800639 <__flp+0x1>
    36fc:	e0 93 38 06 	sts	0x0638, r30	; 0x800638 <__flp>
    3700:	3d c0       	rjmp	.+122    	; 0x377c <free+0x10c>
    3702:	e9 01       	movw	r28, r18
    3704:	fb 83       	std	Y+3, r31	; 0x03
    3706:	ea 83       	std	Y+2, r30	; 0x02
    3708:	49 91       	ld	r20, Y+
    370a:	59 91       	ld	r21, Y+
    370c:	c4 0f       	add	r28, r20
    370e:	d5 1f       	adc	r29, r21
    3710:	ec 17       	cp	r30, r28
    3712:	fd 07       	cpc	r31, r29
    3714:	61 f4       	brne	.+24     	; 0x372e <free+0xbe>
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	84 0f       	add	r24, r20
    371c:	95 1f       	adc	r25, r21
    371e:	02 96       	adiw	r24, 0x02	; 2
    3720:	e9 01       	movw	r28, r18
    3722:	99 83       	std	Y+1, r25	; 0x01
    3724:	88 83       	st	Y, r24
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	9b 83       	std	Y+3, r25	; 0x03
    372c:	8a 83       	std	Y+2, r24	; 0x02
    372e:	e0 e0       	ldi	r30, 0x00	; 0
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	12 96       	adiw	r26, 0x02	; 2
    3734:	8d 91       	ld	r24, X+
    3736:	9c 91       	ld	r25, X
    3738:	13 97       	sbiw	r26, 0x03	; 3
    373a:	00 97       	sbiw	r24, 0x00	; 0
    373c:	19 f0       	breq	.+6      	; 0x3744 <free+0xd4>
    373e:	fd 01       	movw	r30, r26
    3740:	dc 01       	movw	r26, r24
    3742:	f7 cf       	rjmp	.-18     	; 0x3732 <free+0xc2>
    3744:	8d 91       	ld	r24, X+
    3746:	9c 91       	ld	r25, X
    3748:	11 97       	sbiw	r26, 0x01	; 1
    374a:	9d 01       	movw	r18, r26
    374c:	2e 5f       	subi	r18, 0xFE	; 254
    374e:	3f 4f       	sbci	r19, 0xFF	; 255
    3750:	82 0f       	add	r24, r18
    3752:	93 1f       	adc	r25, r19
    3754:	20 91 36 06 	lds	r18, 0x0636	; 0x800636 <__brkval>
    3758:	30 91 37 06 	lds	r19, 0x0637	; 0x800637 <__brkval+0x1>
    375c:	28 17       	cp	r18, r24
    375e:	39 07       	cpc	r19, r25
    3760:	69 f4       	brne	.+26     	; 0x377c <free+0x10c>
    3762:	30 97       	sbiw	r30, 0x00	; 0
    3764:	29 f4       	brne	.+10     	; 0x3770 <free+0x100>
    3766:	10 92 39 06 	sts	0x0639, r1	; 0x800639 <__flp+0x1>
    376a:	10 92 38 06 	sts	0x0638, r1	; 0x800638 <__flp>
    376e:	02 c0       	rjmp	.+4      	; 0x3774 <free+0x104>
    3770:	13 82       	std	Z+3, r1	; 0x03
    3772:	12 82       	std	Z+2, r1	; 0x02
    3774:	b0 93 37 06 	sts	0x0637, r27	; 0x800637 <__brkval+0x1>
    3778:	a0 93 36 06 	sts	0x0636, r26	; 0x800636 <__brkval>
    377c:	df 91       	pop	r29
    377e:	cf 91       	pop	r28
    3780:	08 95       	ret

00003782 <isupper>:
    3782:	85 fd       	sbrc	r24, 5
    3784:	3b c0       	rjmp	.+118    	; 0x37fc <__ctype_isfalse>

00003786 <isalpha>:
    3786:	80 62       	ori	r24, 0x20	; 32

00003788 <islower>:
    3788:	91 11       	cpse	r25, r1
    378a:	38 c0       	rjmp	.+112    	; 0x37fc <__ctype_isfalse>
    378c:	81 56       	subi	r24, 0x61	; 97
    378e:	8a 51       	subi	r24, 0x1A	; 26
    3790:	e0 f7       	brcc	.-8      	; 0x378a <islower+0x2>
    3792:	08 95       	ret

00003794 <strcpy_P>:
    3794:	fb 01       	movw	r30, r22
    3796:	dc 01       	movw	r26, r24
    3798:	05 90       	lpm	r0, Z+
    379a:	0d 92       	st	X+, r0
    379c:	00 20       	and	r0, r0
    379e:	e1 f7       	brne	.-8      	; 0x3798 <strcpy_P+0x4>
    37a0:	08 95       	ret

000037a2 <memcpy>:
    37a2:	fb 01       	movw	r30, r22
    37a4:	dc 01       	movw	r26, r24
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <memcpy+0xa>
    37a8:	01 90       	ld	r0, Z+
    37aa:	0d 92       	st	X+, r0
    37ac:	41 50       	subi	r20, 0x01	; 1
    37ae:	50 40       	sbci	r21, 0x00	; 0
    37b0:	d8 f7       	brcc	.-10     	; 0x37a8 <memcpy+0x6>
    37b2:	08 95       	ret

000037b4 <memset>:
    37b4:	dc 01       	movw	r26, r24
    37b6:	01 c0       	rjmp	.+2      	; 0x37ba <memset+0x6>
    37b8:	6d 93       	st	X+, r22
    37ba:	41 50       	subi	r20, 0x01	; 1
    37bc:	50 40       	sbci	r21, 0x00	; 0
    37be:	e0 f7       	brcc	.-8      	; 0x37b8 <memset+0x4>
    37c0:	08 95       	ret

000037c2 <strncmp>:
    37c2:	fb 01       	movw	r30, r22
    37c4:	dc 01       	movw	r26, r24
    37c6:	41 50       	subi	r20, 0x01	; 1
    37c8:	50 40       	sbci	r21, 0x00	; 0
    37ca:	30 f0       	brcs	.+12     	; 0x37d8 <strncmp+0x16>
    37cc:	8d 91       	ld	r24, X+
    37ce:	01 90       	ld	r0, Z+
    37d0:	80 19       	sub	r24, r0
    37d2:	19 f4       	brne	.+6      	; 0x37da <strncmp+0x18>
    37d4:	00 20       	and	r0, r0
    37d6:	b9 f7       	brne	.-18     	; 0x37c6 <strncmp+0x4>
    37d8:	88 1b       	sub	r24, r24
    37da:	99 0b       	sbc	r25, r25
    37dc:	08 95       	ret

000037de <strncpy>:
    37de:	fb 01       	movw	r30, r22
    37e0:	dc 01       	movw	r26, r24
    37e2:	41 50       	subi	r20, 0x01	; 1
    37e4:	50 40       	sbci	r21, 0x00	; 0
    37e6:	48 f0       	brcs	.+18     	; 0x37fa <strncpy+0x1c>
    37e8:	01 90       	ld	r0, Z+
    37ea:	0d 92       	st	X+, r0
    37ec:	00 20       	and	r0, r0
    37ee:	c9 f7       	brne	.-14     	; 0x37e2 <strncpy+0x4>
    37f0:	01 c0       	rjmp	.+2      	; 0x37f4 <strncpy+0x16>
    37f2:	1d 92       	st	X+, r1
    37f4:	41 50       	subi	r20, 0x01	; 1
    37f6:	50 40       	sbci	r21, 0x00	; 0
    37f8:	e0 f7       	brcc	.-8      	; 0x37f2 <strncpy+0x14>
    37fa:	08 95       	ret

000037fc <__ctype_isfalse>:
    37fc:	99 27       	eor	r25, r25
    37fe:	88 27       	eor	r24, r24

00003800 <__ctype_istrue>:
    3800:	08 95       	ret

00003802 <__do_global_dtors>:
    3802:	11 e0       	ldi	r17, 0x01	; 1
    3804:	c2 e6       	ldi	r28, 0x62	; 98
    3806:	d1 e0       	ldi	r29, 0x01	; 1
    3808:	03 c0       	rjmp	.+6      	; 0x3810 <__do_global_dtors+0xe>
    380a:	fe 01       	movw	r30, r28
    380c:	93 de       	rcall	.-730    	; 0x3534 <__tablejump2__>
    380e:	21 96       	adiw	r28, 0x01	; 1
    3810:	c4 36       	cpi	r28, 0x64	; 100
    3812:	d1 07       	cpc	r29, r17
    3814:	d1 f7       	brne	.-12     	; 0x380a <__do_global_dtors+0x8>
    3816:	f8 94       	cli

00003818 <__stop_program>:
    3818:	ff cf       	rjmp	.-2      	; 0x3818 <__stop_program>
