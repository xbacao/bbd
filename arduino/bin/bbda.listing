
bin/bbda.elf:     file format elf32-avr

Sections:
Idx Name                     Size      VMA       LMA       File off  Algn  Flags
  0 .data                    00000188  00800100  000038b8  0000394c  2**0  CONTENTS, ALLOC, LOAD, DATA
  1 .text                    000038b8  00000000  00000000  00000094  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss                     000002bc  00800288  00800288  00003ad4  2**0  ALLOC
  3 .stab                    0000a92c  00000000  00000000  00003ad4  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr                 000086fb  00000000  00000000  0000e400  2**0  CONTENTS, READONLY, DEBUGGING
  5 .comment                 00000022  00000000  00000000  00016afb  2**0  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00016b20  2**2  CONTENTS, READONLY
  7 .debug_info              000005f4  00000000  00000000  00016b60  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev            000005a2  00000000  00000000  00017154  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_line              0000001d  00000000  00000000  000176f6  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_str               00000208  00000000  00000000  00017713  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00800288 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Time.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800125 l     O .data	0000000c monthDays
0080044b l     O .bss	00000004 cacheTime
0080044f l     O .bss	00000007 tm
00800447 l     O .bss	00000004 sysTime
00800106 l     O .data	00000004 syncInterval
0080043f l     O .bss	00000004 nextSyncTime
0080043d l     O .bss	00000002 Status
00800443 l     O .bss	00000004 prevMillis
00000000 l    df *ABS*	00000000 bbda.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000824 l     F .text	00000006 _GLOBAL__sub_I_gsm
0000082a l     F .text	00000008 _GLOBAL__sub_D_gsm
00000000 l    df *ABS*	00000000 gsm_ard.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000000a2 l     O .text	00000003 AT_OK
0000007a l     O .text	0000000d AT_CIPSTATUS
00000068 l     O .text	00000012 AT_STATE_CONNECT_OK
00000087 l     O .text	00000009 AT_CIPCLOSE_OK
00000090 l     O .text	0000000c AT_CIPCLOSE
00000283 l     O .text	00000003 AT
00800226 l     O .data	00000020 _POSSIBLE_BRS
0000025e l     O .text	0000000f AT_CPIN_SIM_PIN
0000026d l     O .text	0000000d AT_CPIN_READY
0000027a l     O .text	00000009 AT_CPIN_R
00000251 l     O .text	0000000d AT_CPIN_SET
00000233 l     O .text	0000000a AT_CIURC_1
0000023d l     O .text	0000000a AT_CIURC_0
00000247 l     O .text	0000000a AT_CIURC_R
00000228 l     O .text	0000000b AT_CIURC_SET
0000020a l     O .text	0000000a AT_CGATT_1
00000214 l     O .text	0000000a AT_CGATT_0
0000021e l     O .text	0000000a AT_CGATT_R
000001ff l     O .text	0000000b AT_CGATT_SET_ON
000001c7 l     O .text	0000000c AT_CIPMODE_1
000001d3 l     O .text	0000000c AT_CIPMODE_0
000001df l     O .text	0000000c AT_CIPMODE_R
000001ba l     O .text	0000000d AT_CIPMODE
00000191 l     O .text	00000029 AT_CGDCONT
0000009c l     O .text	00000006 AT_ERROR
000001eb l     O .text	00000009 AT_CIFSR
00000175 l     O .text	0000000e AT_CIPSERVER_RESP
00000183 l     O .text	0000000e AT_CIPSERVER_R
00000166 l     O .text	0000000f AT_CIPSERVER_SET
0000012e l     O .text	00000025 AT_CSTT
00000125 l     O .text	00000009 AT_CIICR
00000153 l     O .text	00000008 AT_SHUT_OK
0000015b l     O .text	0000000b AT_CIPSHUT
000001f4 l     O .text	0000000b AT_CGATT_SET_OFF
00000104 l     O .text	0000000b AT_CIPMUX_1
0000010f l     O .text	0000000b AT_CIPMUX_0
0000011a l     O .text	0000000b AT_CIPMUX_R
000000f8 l     O .text	0000000c AT_CIPMUX_SET
000000d3 l     O .text	00000025 AT_CIPSTART_SET
000000c8 l     O .text	0000000b AT_CONNECT_OK
000000b8 l     O .text	00000010 TCP_START_RSP
000000ad l     O .text	0000000b AT_CIPSEND
000000a5 l     O .text	00000008 AT_CIPSEND_OK
00000000 l    df *ABS*	00000000 dbg.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 SoftwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Print.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000030b2 l     F .text	0000001e Print::write(char const*) [clone .part.2]
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring_digital.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002e14 l     F .text	00000052 turnOffPWM
00000000 l    df *ABS*	00000000 HardwareSerial0.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002ffe l     F .text	0000005a _GLOBAL__sub_I___vector_18
00000000 l    df *ABS*	00000000 _clear_bss.o
00000312 l       .text	00000000 .do_clear_bss_start
00000310 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 socket_bbd.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080049a l     O .bss	00000001 timer0_fract
00000000 l    df *ABS*	00000000 hooks.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002f38 l     F .text	00000002 __empty
00000000 l    df *ABS*	00000000 new.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 main.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _divmodhi4.o
0000351e l       .text	00000000 __divmodhi4_neg1
00003526 l       .text	00000000 __divmodhi4_neg2
0000352c l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
00003554 l       .text	00000000 __udivmodsi4_ep
0000353a l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0000358a l       .text	00000000 __divmodsi4_neg2
00003598 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 _udivmodhi4.o
000035ce l       .text	00000000 __udivmodhi4_ep
000035c0 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _exit.o
000038b6 l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 evController.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000336  w      .text	00000000 __vector_22
0080049f g     O .bss	00000004 timer0_overflow_count
00001fbe g     F .text	0000026e Gsm_Ard::_recv_socket(int)
00002f3a g     F .text	00000002 operator new[](unsigned int)
00002b2e g     F .text	0000010e SoftwareSerial::begin(long)
00002f38  w    F .text	00000002 yield
000002d6 g     O .text	0000000a port_to_mode_PGM
00000336  w      .text	00000000 __vector_1
000030ec g     F .text	00000006 Print::println()
0000324a g     F .text	00000020 Print::println(int, int)
00002504 g     F .text	0000005c Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)
0000389e g       .text	00000000 __ctype_istrue
00000cc2 g     F .text	0000003a Gsm_Ard::Gsm_Ard()
000028f4 g     F .text	00000050 SoftwareSerial::listen()
00000cc2 g     F .text	0000003a Gsm_Ard::Gsm_Ard()
0000ffa0 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0080049b g     O .bss	00000004 timer0_millis
00000a32 g     F .text	0000000e year(unsigned long)
000032c0 g     F .text	0000001c HardwareSerial::peek()
0000311c g     F .text	00000094 Print::printNumber(unsigned long, unsigned char)
000035b8 g       .text	00000028 .hidden __udivmodhi4
00003058 g     F .text	0000005a Print::write(unsigned char const*, unsigned int)
00000cfc g     F .text	00000150 Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)
00800498 g     O .bss	00000002 SoftwareSerial::active_object
00000068 g       .text	00000000 __trampolines_start
000038b8 g       .text	00000000 _etext
0000389a g       .text	00000000 __ctype_isfalse
000032a8 g     F .text	00000018 HardwareSerial::available()
00000336  w      .text	00000000 __vector_24
00000338 g     F .text	00000002 loop
0000333c g     F .text	00000042 HardwareSerial::_tx_udr_empty_irq()
00000336  w      .text	00000000 __vector_12
0000328e  w    F .text	00000002 initVariant
000035aa g       .text	0000000e .hidden __bswapsi2
0000270e g     F .text	0000005c dbg_print_error(char const*, int, int)
000033bc g     F .text	0000008c HardwareSerial::write(unsigned char)
00001318 g     F .text	00000180 Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)
00000336 g       .text	00000000 __bad_interrupt
0000384e g     F .text	00000012 memcpy
00002adc g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
00003a40 g       *ABS*	00000000 __data_load_end
00003834 g       .text	00000000 islower
00000336  w      .text	00000000 __vector_6
000035ec g     F .text	00000130 malloc
0000222c g     F .text	000000d2 Gsm_Ard::_recv_tcp_data(unsigned int*)
00800102 g     O .data	00000002 __malloc_heap_start
000009ea g     F .text	00000048 refreshCache(unsigned long)
00000068 g       .text	00000000 __trampolines_end
00002944 g     F .text	000000f0 __vector_3
00002ede g     F .text	0000005a digitalWrite
000022fe g     F .text	00000110 Gsm_Ard::_wait_for_tcp_start()
00002e66 g     F .text	00000078 pinMode
00001e8e g     F .text	00000130 Gsm_Ard::_recv_socket_size(int, unsigned int*)
000002ae g     O .text	00000014 digital_pin_to_port_PGM
00000336  w      .text	00000000 __vector_23
000038b8 g       *ABS*	00000000 __data_load_start
000002e6 g       .text	00000000 __dtors_end
00800544 g       .bss	00000000 __bss_end
00002a40 g     F .text	0000004e SoftwareSerial::setTX(unsigned char)
00002770 g     F .text	00000042 SoftwareSerial::read()
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
00001738 g     F .text	000002ac Gsm_Ard::init_gsm_module()
00001202 g     F .text	00000116 Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)
00000336  w      .text	00000000 __vector_25
00800540 g     O .bss	00000002 __brkval
00000f36 g     F .text	00000052 Gsm_Ard::_get_rsp(char**)
0000323e g     F .text	0000000c Print::print(int, int)
00000c9e g     F .text	00000024 Gsm_Ard::_clear_sock_buff()
00000bec g     F .text	0000000c day()
00001d40 g     F .text	0000014e Gsm_Ard::connect_tcp_socket()
00000a40 g     F .text	00000066 setTime(unsigned long)
00000336  w      .text	00000000 __vector_11
00003304 g     F .text	0000001e HardwareSerial::availableForWrite()
0080028d g     O .bss	00000001 started
00001576 g     F .text	000001c2 Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)
000002e6  w      .text	00000000 __init
00003282 g     F .text	0000000c Print::print(unsigned char, int)
0000286c g     F .text	00000030 SoftwareSerial::peek()
0000106a g     F .text	00000198 Gsm_Ard::_recv_string(int, int)
00000c04 g     F .text	00000004 year()
00003322  w    F .text	0000001a serialEventRun()
0000337e g     F .text	0000003e HardwareSerial::flush()
00000336  w      .text	00000000 __vector_13
00002560 g     F .text	0000002e get_time_request_msg(char**)
00000336  w      .text	00000000 __vector_17
00002fa2 g     F .text	0000004a __vector_19
000030f2 g     F .text	0000002a Print::println(char const*)
00000336  w      .text	00000000 __vector_7
00000c08 g     F .text	00000052 Gsm_Ard::_change_gsm_state(GSM_STATE)
000038a0 g       .text	00000014 .hidden __do_global_dtors
008004a3 g     O .bss	0000009d Serial
00800275  w    O .data	00000012 vtable for HardwareSerial
00000308 g       .text	00000010 .hidden __do_clear_bss
000030de g     F .text	0000000e Print::print(char)
00002fec g     F .text	00000012 Serial0_available()
00810000 g       .stab	00000000 __eeprom_end
000027b2 g     F .text	000000b8 SoftwareSerial::write(unsigned char)
0000029a g     O .text	00000014 digital_pin_to_bit_mask_PGM
00003448 g     F .text	000000c0 HardwareSerial::begin(unsigned long, unsigned char)
00800456 g     O .bss	00000001 SoftwareSerial::_receive_buffer_head
00800100 g     O .data	00000002 __malloc_heap_end
00002a34 g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
00000000 g       .text	00000000 __vectors
0000382e g       .text	00000000 isupper
00003860 g     F .text	0000001c strncmp
00800288 g       .data	00000000 __data_end
0000387c g     F .text	0000001e strncpy
00000000  w      .text	00000000 __vector_default
00003508 g       .text	00000026 .hidden __divmodhi4
00002944 g     F .text	000000f0 __vector_5
0000289c g     F .text	0000002c SoftwareSerial::available()
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
000035e0 g       .text	0000000c .hidden __tablejump2__
00002d9e g     F .text	00000076 init
00003832 g       .text	00000000 isalpha
00800458 g     O .bss	00000040 SoftwareSerial::_receive_buffer
000002e0 g       .text	00000000 __ctors_start
0000101a g     F .text	00000050 Gsm_Ard::_write_cmd(char const*)
00800457 g     O .bss	00000001 SoftwareSerial::_receive_buffer_tail
000002f2 g       .text	00000016 .hidden __do_copy_data
0080043b g     O .bss	00000002 getTimePtr
00800288 g       .bss	00000000 __bss_start
000025b8 g     F .text	000000bc dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)
00003290 g     F .text	00000018 main
00001c46 g     F .text	000000fa Gsm_Ard::dettachGPRS()
00002674 g     F .text	0000009a dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)
00001498 g     F .text	000000de Gsm_Ard::disconnect_tcp_socket()
00000aa6 g     F .text	00000122 now()
00002944 g     F .text	000000f0 __vector_4
00002f3c g     F .text	00000002 operator delete[](void*)
000030d0 g     F .text	0000000e Print::print(char const*)
00002ce8 g     F .text	0000004a micros
0000359a g       .text	00000010 .hidden __negsi2
000028c8 g     F .text	0000002c SoftwareSerial::stopListening()
0080028e g     O .bss	000001ad gsm
00000000  w      *ABS*	00000000 __heap_end
00000336  w      .text	00000000 __vector_9
00002d32 g     F .text	0000006c delay
000019e4 g     F .text	00000262 Gsm_Ard::attachGPRS()
00000336  w      .text	00000000 __vector_2
00000bf8 g     F .text	0000000c month()
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000033a g     F .text	00000034 printDigits(int)
00000c7a g     F .text	00000024 Gsm_Ard::_clear_rsp_buff()
0000036e g     F .text	00000074 digitalClockDisplay()
00000832 g     F .text	000001b8 breakTime(unsigned long, tmElements_t&)
00000c5a g     F .text	00000020 Gsm_Ard::_clear_recv_buff()
00000336  w      .text	00000000 __vector_21
00800260  w    O .data	00000012 vtable for SoftwareSerial
00000336  w      .text	00000000 __vector_15
00000bd4 g     F .text	0000000c minute()
000002cc g     O .text	0000000a port_to_output_PGM
0000258e g     F .text	0000002a decode_time_rsp_msg(char*, unsigned int, unsigned long*)
0000326a g     F .text	00000018 Print::print(unsigned long, int)
00000540 g     F .text	000002e4 setup
00800544 g       .stab	00000000 __heap_start
000002e4 g       .text	00000000 __dtors_start
000002e4 g       .text	00000000 __ctors_end
00003572 g       .text	00000028 .hidden __divmodsi4
000008ff  w      *ABS*	00000000 __stack
000002c2 g     O .text	0000000a port_to_input_PGM
00000f88 g     F .text	00000092 Gsm_Ard::get_socket_rsp(char**)
00800288 g       .data	00000000 _edata
00002a34 g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
00800544 g       .stab	00000000 _end
00000336  w      .text	00000000 __vector_8
00000be0 g     F .text	0000000c second()
00000286 g     O .text	00000014 digital_pin_to_timer_PGM
00003840 g     F .text	0000000e strcpy_P
000003e2 g     F .text	0000015e sync_time_with_server()
00000e4c g     F .text	000000ea Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)
000038a0  w      .text	00000000 .hidden exit
000031b0 g     F .text	0000008e Print::print(long, int)
00003508 g       .text	00000000 .hidden _div
000032dc g     F .text	00000028 HardwareSerial::read()
00800542 g     O .bss	00000002 __flp
0000352e g       .text	00000044 .hidden __udivmodsi4
00000bc8 g     F .text	0000000c hour()
0000240e g     F .text	000000f6 Gsm_Ard::_send_tcp_data(char*, unsigned int)
00002a8e g     F .text	0000004e SoftwareSerial::setRX(unsigned char)
0000286a g     F .text	00000002 SoftwareSerial::flush()
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
000038a0 g       .text	00000000 .hidden _exit
0080028c g     O .bss	00000001 timeSynced
00000336  w      .text	00000000 __vector_14
00000336  w      .text	00000000 __vector_10
00002c3c g     F .text	00000094 __vector_16
00800100 g       .data	00000000 __data_start
00002adc g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
00002f3e g     F .text	00000064 __vector_18
00000400 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00800104 g     O .data	00000002 __malloc_margin
00000336  w      .text	00000000 __vector_20
00800288 g     O .bss	00000004 last_sync
00002cd0 g     F .text	00000018 millis
0000276a  w    F .text	00000006 Print::availableForWrite()
0000371c g     F .text	00000112 free
00000318 g       .text	00000016 .hidden __do_global_ctors



Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	72 c1       	rjmp	.+740    	; 0x2e6 <__dtors_end>
       2:	00 00       	nop
       4:	98 c1       	rjmp	.+816    	; 0x336 <__bad_interrupt>
       6:	00 00       	nop
       8:	96 c1       	rjmp	.+812    	; 0x336 <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__vector_3>
      10:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__vector_3>
      14:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__vector_3>
      18:	8e c1       	rjmp	.+796    	; 0x336 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c1       	rjmp	.+792    	; 0x336 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c1       	rjmp	.+788    	; 0x336 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c1       	rjmp	.+784    	; 0x336 <__bad_interrupt>
      26:	00 00       	nop
      28:	86 c1       	rjmp	.+780    	; 0x336 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	84 c1       	rjmp	.+776    	; 0x336 <__bad_interrupt>
      2e:	00 00       	nop
      30:	82 c1       	rjmp	.+772    	; 0x336 <__bad_interrupt>
      32:	00 00       	nop
      34:	80 c1       	rjmp	.+768    	; 0x336 <__bad_interrupt>
      36:	00 00       	nop
      38:	7e c1       	rjmp	.+764    	; 0x336 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7c c1       	rjmp	.+760    	; 0x336 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__vector_16>
      44:	78 c1       	rjmp	.+752    	; 0x336 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__vector_18>
      4c:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__vector_19>
      50:	72 c1       	rjmp	.+740    	; 0x336 <__bad_interrupt>
      52:	00 00       	nop
      54:	70 c1       	rjmp	.+736    	; 0x336 <__bad_interrupt>
      56:	00 00       	nop
      58:	6e c1       	rjmp	.+732    	; 0x336 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6c c1       	rjmp	.+728    	; 0x336 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6a c1       	rjmp	.+724    	; 0x336 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c1       	rjmp	.+720    	; 0x336 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
__trampolines_start():
      68:	53 54       	subi	r21, 0x43	; 67
      6a:	41 54       	subi	r20, 0x41	; 65
      6c:	45 3a       	cpi	r20, 0xA5	; 165
      6e:	20 43       	sbci	r18, 0x30	; 48
      70:	4f 4e       	sbci	r20, 0xEF	; 239
      72:	4e 45       	sbci	r20, 0x5E	; 94
      74:	43 54       	subi	r20, 0x43	; 67
      76:	20 4f       	sbci	r18, 0xF0	; 240
      78:	4b 00       	.word	0x004b	; ????

0000007a <AT_CIPSTATUS>:
      7a:	41 54 2b 43 49 50 53 54 41 54 55 53 00              AT+CIPSTATUS.

00000087 <AT_CIPCLOSE_OK>:
      87:	43 4c 4f 53 45 20 4f 4b 00                          CLOSE OK.

00000090 <AT_CIPCLOSE>:
      90:	41 54 2b 43 49 50 43 4c 4f 53 45 00                 AT+CIPCLOSE.

0000009c <AT_ERROR>:
      9c:	45 52 52 4f 52 00                                   ERROR.

000000a2 <AT_OK>:
      a2:	4f 4b 00                                            OK.

000000a5 <AT_CIPSEND_OK>:
      a5:	53 45 4e 44 20 4f 4b 00                             SEND OK.

000000ad <AT_CIPSEND>:
      ad:	41 54 2b 43 49 50 53 45 4e 44 00                    AT+CIPSEND.

000000b8 <TCP_START_RSP>:
      b8:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 0d 0a 3e 20     AT+CIPSEND....> 

000000c8 <AT_CONNECT_OK>:
      c8:	43 4f 4e 4e 45 43 54 20 4f 4b 00                    CONNECT OK.

000000d3 <AT_CIPSTART_SET>:
      d3:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 54 43 50     AT+CIPSTART="TCP
      e3:	22 2c 22 31 37 38 2e 36 32 2e 36 2e 34 34 22 2c     ","178.62.6.44",
      f3:	37 37 37 37 00                                      7777.

000000f8 <AT_CIPMUX_SET>:
      f8:	41 54 2b 43 49 50 4d 55 58 3d 30 00                 AT+CIPMUX=0.

00000104 <AT_CIPMUX_1>:
     104:	2b 43 49 50 4d 55 58 3a 20 31 00                    +CIPMUX: 1.

0000010f <AT_CIPMUX_0>:
     10f:	2b 43 49 50 4d 55 58 3a 20 30 00                    +CIPMUX: 0.

0000011a <AT_CIPMUX_R>:
     11a:	41 54 2b 43 49 50 4d 55 58 3f 00                    AT+CIPMUX?.

00000125 <AT_CIICR>:
     125:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

0000012e <AT_CSTT>:
     12e:	41 54 2b 43 53 54 54 3d 22 69 6e 74 65 72 6e 65     AT+CSTT="interne
     13e:	74 2e 76 6f 64 61 66 6f 6e 65 2e 70 74 22 2c 22     t.vodafone.pt","
     14e:	22 2c 22 22 00                                      ","".

00000153 <AT_SHUT_OK>:
     153:	53 48 55 54 20 4f 4b 00                             SHUT OK.

0000015b <AT_CIPSHUT>:
     15b:	41 54 2b 43 49 50 53 48 55 54 00                    AT+CIPSHUT.

00000166 <AT_CIPSERVER_SET>:
     166:	41 54 2b 43 49 50 53 45 52 56 45 52 3d 30 00        AT+CIPSERVER=0.

00000175 <AT_CIPSERVER_RESP>:
     175:	2b 43 49 50 53 45 52 56 45 52 3a 20 30 00           +CIPSERVER: 0.

00000183 <AT_CIPSERVER_R>:
     183:	41 54 2b 43 49 50 53 45 52 56 45 52 3f 00           AT+CIPSERVER?.

00000191 <AT_CGDCONT>:
     191:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     1a1:	22 2c 22 69 6e 74 65 72 6e 65 74 2e 76 6f 64 61     ","internet.voda
     1b1:	66 6f 6e 65 2e 70 74 22 00                          fone.pt".

000001ba <AT_CIPMODE>:
     1ba:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 00              AT+CIPMODE=0.

000001c7 <AT_CIPMODE_1>:
     1c7:	2b 43 49 50 4d 4f 44 45 3a 20 31 00                 +CIPMODE: 1.

000001d3 <AT_CIPMODE_0>:
     1d3:	2b 43 49 50 4d 4f 44 45 3a 20 30 00                 +CIPMODE: 0.

000001df <AT_CIPMODE_R>:
     1df:	41 54 2b 43 49 50 4d 4f 44 45 3f 00                 AT+CIPMODE?.

000001eb <AT_CIFSR>:
     1eb:	41 54 2b 43 49 46 53 52 00                          AT+CIFSR.

000001f4 <AT_CGATT_SET_OFF>:
     1f4:	41 54 2b 43 47 41 54 54 3d 30 00                    AT+CGATT=0.

000001ff <AT_CGATT_SET_ON>:
     1ff:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

0000020a <AT_CGATT_1>:
     20a:	2b 43 47 41 54 54 3a 20 31 00                       +CGATT: 1.

00000214 <AT_CGATT_0>:
     214:	2b 43 47 41 54 54 3a 20 30 00                       +CGATT: 0.

0000021e <AT_CGATT_R>:
     21e:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

00000228 <AT_CIURC_SET>:
     228:	41 54 2b 43 49 55 52 43 3d 30 00                    AT+CIURC=0.

00000233 <AT_CIURC_1>:
     233:	2b 43 49 55 52 43 3a 20 30 00                       +CIURC: 0.

0000023d <AT_CIURC_0>:
     23d:	2b 43 49 55 52 43 3a 20 31 00                       +CIURC: 1.

00000247 <AT_CIURC_R>:
     247:	41 54 2b 43 49 55 52 43 3f 00                       AT+CIURC?.

00000251 <AT_CPIN_SET>:
     251:	41 54 2b 43 50 49 4e 3d 30 30 34 38 00              AT+CPIN=0048.

0000025e <AT_CPIN_SIM_PIN>:
     25e:	2b 43 50 49 4e 3a 20 53 49 4d 20 50 49 4e 00        +CPIN: SIM PIN.

0000026d <AT_CPIN_READY>:
     26d:	2b 43 50 49 4e 3a 20 52 45 41 44 59 00              +CPIN: READY.

0000027a <AT_CPIN_R>:
     27a:	41 54 2b 43 50 49 4e 3f 00                          AT+CPIN?.

00000283 <AT>:
     283:	41 54 00                                            AT.

00000286 <digital_pin_to_timer_PGM>:
     286:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     296:	00 00 00 00                                         ....

0000029a <digital_pin_to_bit_mask_PGM>:
     29a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     2aa:	04 08 10 20                                         ... 

000002ae <digital_pin_to_port_PGM>:
     2ae:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     2be:	03 03 03 03                                         ....

000002c2 <port_to_input_PGM>:
     2c2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000002cc <port_to_output_PGM>:
     2cc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000002d6 <port_to_mode_PGM>:
     2d6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000002e0 <__ctors_start>:
__ctors_start():
     2e0:	12 04       	cpc	r1, r2
     2e2:	ff 17       	cp	r31, r31

000002e4 <__ctors_end>:
__dtors_start():
     2e4:	15 04       	cpc	r1, r5

000002e6 <__dtors_end>:
__dtors_end():
     2e6:	11 24       	eor	r1, r1
     2e8:	1f be       	out	0x3f, r1	; 63
     2ea:	cf ef       	ldi	r28, 0xFF	; 255
     2ec:	d8 e0       	ldi	r29, 0x08	; 8
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	cd bf       	out	0x3d, r28	; 61

000002f2 <__do_copy_data>:
__do_copy_data():
     2f2:	12 e0       	ldi	r17, 0x02	; 2
     2f4:	a0 e0       	ldi	r26, 0x00	; 0
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	e8 eb       	ldi	r30, 0xB8	; 184
     2fa:	f8 e3       	ldi	r31, 0x38	; 56
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <__do_copy_data+0x10>
     2fe:	05 90       	lpm	r0, Z+
     300:	0d 92       	st	X+, r0
     302:	a8 38       	cpi	r26, 0x88	; 136
     304:	b1 07       	cpc	r27, r17
     306:	d9 f7       	brne	.-10     	; 0x2fe <__do_copy_data+0xc>

00000308 <__do_clear_bss>:
__do_clear_bss():
     308:	25 e0       	ldi	r18, 0x05	; 5
     30a:	a8 e8       	ldi	r26, 0x88	; 136
     30c:	b2 e0       	ldi	r27, 0x02	; 2
     30e:	01 c0       	rjmp	.+2      	; 0x312 <.do_clear_bss_start>

00000310 <.do_clear_bss_loop>:
     310:	1d 92       	st	X+, r1

00000312 <.do_clear_bss_start>:
     312:	a4 34       	cpi	r26, 0x44	; 68
     314:	b2 07       	cpc	r27, r18
     316:	e1 f7       	brne	.-8      	; 0x310 <.do_clear_bss_loop>

00000318 <__do_global_ctors>:
__do_global_ctors():
     318:	11 e0       	ldi	r17, 0x01	; 1
     31a:	c2 e7       	ldi	r28, 0x72	; 114
     31c:	d1 e0       	ldi	r29, 0x01	; 1
     31e:	04 c0       	rjmp	.+8      	; 0x328 <__do_global_ctors+0x10>
     320:	21 97       	sbiw	r28, 0x01	; 1
     322:	fe 01       	movw	r30, r28
     324:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <__tablejump2__>
     328:	c0 37       	cpi	r28, 0x70	; 112
     32a:	d1 07       	cpc	r29, r17
     32c:	c9 f7       	brne	.-14     	; 0x320 <__do_global_ctors+0x8>
     32e:	0e 94 48 19 	call	0x3290	; 0x3290 <main>
     332:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__do_global_dtors>

00000336 <__bad_interrupt>:
__vector_22():
     336:	64 ce       	rjmp	.-824    	; 0x0 <__vectors>

00000338 <loop>:
loop():
bbda.cpp:138
//       goto scheduler_ops;
//     }
//   }
// scheduler_ops:
//   scheduler_action();
}
     338:	08 95       	ret

0000033a <printDigits(int)>:
_Z11printDigitsi():
bbda.cpp:346
  Serial.print(" ");
  Serial.print(year());
  Serial.println();
}

void printDigits(int digits){
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	ec 01       	movw	r28, r24
bbda.cpp:348
  // utility function for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
     340:	63 e1       	ldi	r22, 0x13	; 19
     342:	71 e0       	ldi	r23, 0x01	; 1
     344:	83 ea       	ldi	r24, 0xA3	; 163
     346:	94 e0       	ldi	r25, 0x04	; 4
     348:	0e 94 68 18 	call	0x30d0	; 0x30d0 <Print::print(char const*)>
bbda.cpp:349
  if(digits < 10)
     34c:	ca 30       	cpi	r28, 0x0A	; 10
     34e:	d1 05       	cpc	r29, r1
     350:	2c f4       	brge	.+10     	; 0x35c <printDigits(int)+0x22>
bbda.cpp:350
    Serial.print('0');
     352:	60 e3       	ldi	r22, 0x30	; 48
     354:	83 ea       	ldi	r24, 0xA3	; 163
     356:	94 e0       	ldi	r25, 0x04	; 4
     358:	0e 94 6f 18 	call	0x30de	; 0x30de <Print::print(char)>
bbda.cpp:351
  Serial.print(digits);
     35c:	4a e0       	ldi	r20, 0x0A	; 10
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	be 01       	movw	r22, r28
     362:	83 ea       	ldi	r24, 0xA3	; 163
     364:	94 e0       	ldi	r25, 0x04	; 4
bbda.cpp:352
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
bbda.cpp:351
  Serial.print(digits);
     36a:	0c 94 1f 19 	jmp	0x323e	; 0x323e <Print::print(int, int)>

0000036e <digitalClockDisplay()>:
_Z19digitalClockDisplayv():
bbda.cpp:334
  Serial.print(hour());
     36e:	2c d4       	rcall	.+2136   	; 0xbc8 <hour()>
     370:	4a e0       	ldi	r20, 0x0A	; 10
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	bc 01       	movw	r22, r24
     376:	83 ea       	ldi	r24, 0xA3	; 163
     378:	94 e0       	ldi	r25, 0x04	; 4
     37a:	0e 94 1f 19 	call	0x323e	; 0x323e <Print::print(int, int)>
bbda.cpp:335
  printDigits(minute());
     37e:	2a d4       	rcall	.+2132   	; 0xbd4 <minute()>
     380:	dc df       	rcall	.-72     	; 0x33a <printDigits(int)>
bbda.cpp:336
  printDigits(second());
     382:	2e d4       	rcall	.+2140   	; 0xbe0 <second()>
     384:	da df       	rcall	.-76     	; 0x33a <printDigits(int)>
bbda.cpp:337
  Serial.print(" ");
     386:	6e e5       	ldi	r22, 0x5E	; 94
     388:	72 e0       	ldi	r23, 0x02	; 2
     38a:	83 ea       	ldi	r24, 0xA3	; 163
     38c:	94 e0       	ldi	r25, 0x04	; 4
     38e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <Print::print(char const*)>
bbda.cpp:338
  Serial.print(day());
     392:	2c d4       	rcall	.+2136   	; 0xbec <day()>
     394:	4a e0       	ldi	r20, 0x0A	; 10
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	bc 01       	movw	r22, r24
     39a:	83 ea       	ldi	r24, 0xA3	; 163
     39c:	94 e0       	ldi	r25, 0x04	; 4
     39e:	0e 94 1f 19 	call	0x323e	; 0x323e <Print::print(int, int)>
bbda.cpp:339
  Serial.print(" ");
     3a2:	6e e5       	ldi	r22, 0x5E	; 94
     3a4:	72 e0       	ldi	r23, 0x02	; 2
     3a6:	83 ea       	ldi	r24, 0xA3	; 163
     3a8:	94 e0       	ldi	r25, 0x04	; 4
     3aa:	0e 94 68 18 	call	0x30d0	; 0x30d0 <Print::print(char const*)>
bbda.cpp:340
  Serial.print(month());
     3ae:	24 d4       	rcall	.+2120   	; 0xbf8 <month()>
     3b0:	4a e0       	ldi	r20, 0x0A	; 10
     3b2:	50 e0       	ldi	r21, 0x00	; 0
     3b4:	bc 01       	movw	r22, r24
     3b6:	83 ea       	ldi	r24, 0xA3	; 163
     3b8:	94 e0       	ldi	r25, 0x04	; 4
     3ba:	0e 94 1f 19 	call	0x323e	; 0x323e <Print::print(int, int)>
bbda.cpp:341
  Serial.print(" ");
     3be:	6e e5       	ldi	r22, 0x5E	; 94
     3c0:	72 e0       	ldi	r23, 0x02	; 2
     3c2:	83 ea       	ldi	r24, 0xA3	; 163
     3c4:	94 e0       	ldi	r25, 0x04	; 4
     3c6:	0e 94 68 18 	call	0x30d0	; 0x30d0 <Print::print(char const*)>
bbda.cpp:342
  Serial.print(year());
     3ca:	1c d4       	rcall	.+2104   	; 0xc04 <year()>
     3cc:	4a e0       	ldi	r20, 0x0A	; 10
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	bc 01       	movw	r22, r24
     3d2:	83 ea       	ldi	r24, 0xA3	; 163
     3d4:	94 e0       	ldi	r25, 0x04	; 4
     3d6:	0e 94 1f 19 	call	0x323e	; 0x323e <Print::print(int, int)>
bbda.cpp:343
  Serial.println();
     3da:	83 ea       	ldi	r24, 0xA3	; 163
     3dc:	94 e0       	ldi	r25, 0x04	; 4
     3de:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <Print::println()>

000003e2 <sync_time_with_server()>:
_Z21sync_time_with_serverv():
bbda.cpp:140
int sync_time_with_server(){
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	2a 97       	sbiw	r28, 0x0a	; 10
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
bbda.cpp:146
  n=gsm.connect_tcp_socket();
     3fa:	8e e8       	ldi	r24, 0x8E	; 142
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <Gsm_Ard::connect_tcp_socket()>
bbda.cpp:147
  if(n){
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	a1 f0       	breq	.+40     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
bbda.cpp:153
    return 1+10*n;
     406:	2a e0       	ldi	r18, 0x0A	; 10
     408:	28 9f       	mul	r18, r24
     40a:	80 01       	movw	r16, r0
     40c:	29 9f       	mul	r18, r25
     40e:	10 0d       	add	r17, r0
     410:	11 24       	eor	r1, r1
     412:	0f 5f       	subi	r16, 0xFF	; 255
     414:	1f 4f       	sbci	r17, 0xFF	; 255
bbda.cpp:204
}
     416:	c8 01       	movw	r24, r16
     418:	2a 96       	adiw	r28, 0x0a	; 10
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret
bbda.cpp:156
  msg = new char[REQUEST_TIME_MSG_SIZE];
     42e:	85 e0       	ldi	r24, 0x05	; 5
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
     436:	9e 83       	std	Y+6, r25	; 0x06
     438:	8d 83       	std	Y+5, r24	; 0x05
bbda.cpp:157
  n=get_time_request_msg(&msg);
     43a:	ce 01       	movw	r24, r28
     43c:	05 96       	adiw	r24, 0x05	; 5
     43e:	0e 94 b0 12 	call	0x2560	; 0x2560 <get_time_request_msg(char**)>
bbda.cpp:158
  if(n){
     442:	00 97       	sbiw	r24, 0x00	; 0
     444:	19 f1       	breq	.+70     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
bbda.cpp:159
    err=2+10*n;
     446:	2a e0       	ldi	r18, 0x0A	; 10
     448:	28 9f       	mul	r18, r24
     44a:	80 01       	movw	r16, r0
     44c:	29 9f       	mul	r18, r25
     44e:	10 0d       	add	r17, r0
     450:	11 24       	eor	r1, r1
     452:	0e 5f       	subi	r16, 0xFE	; 254
     454:	1f 4f       	sbci	r17, 0xFF	; 255
bbda.cpp:195
  delete[] msg;
     456:	8d 81       	ldd	r24, Y+5	; 0x05
     458:	9e 81       	ldd	r25, Y+6	; 0x06
     45a:	00 97       	sbiw	r24, 0x00	; 0
     45c:	11 f0       	breq	.+4      	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
     45e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
bbda.cpp:196
  delete[] rsp;
     462:	8f 81       	ldd	r24, Y+7	; 0x07
     464:	98 85       	ldd	r25, Y+8	; 0x08
     466:	00 97       	sbiw	r24, 0x00	; 0
     468:	11 f0       	breq	.+4      	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
     46a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
bbda.cpp:197
  gsm.disconnect_tcp_socket();
     46e:	8e e8       	ldi	r24, 0x8E	; 142
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	0e 94 4c 0a 	call	0x1498	; 0x1498 <Gsm_Ard::disconnect_tcp_socket()>
bbda.cpp:199
  if(err){
     476:	01 15       	cp	r16, r1
     478:	11 05       	cpc	r17, r1
     47a:	69 f2       	breq	.-102    	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
bbda.cpp:200
    dbg_print_error(__FILE__, __LINE__, err);
     47c:	a8 01       	movw	r20, r16
     47e:	68 ec       	ldi	r22, 0xC8	; 200
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	8a e0       	ldi	r24, 0x0A	; 10
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
     48a:	c5 cf       	rjmp	.-118    	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
bbda.cpp:163
  n=gsm.send_socket_msg(msg, REQUEST_TIME_MSG_SIZE, &rsp_len);
     48c:	6d 81       	ldd	r22, Y+5	; 0x05
     48e:	7e 81       	ldd	r23, Y+6	; 0x06
     490:	9e 01       	movw	r18, r28
     492:	27 5f       	subi	r18, 0xF7	; 247
     494:	3f 4f       	sbci	r19, 0xFF	; 255
     496:	45 e0       	ldi	r20, 0x05	; 5
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	8e e8       	ldi	r24, 0x8E	; 142
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	0e 94 82 12 	call	0x2504	; 0x2504 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)>
bbda.cpp:164
  if(n){
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	49 f0       	breq	.+18     	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
bbda.cpp:165
    err=3+10*n;
     4a6:	2a e0       	ldi	r18, 0x0A	; 10
     4a8:	28 9f       	mul	r18, r24
     4aa:	80 01       	movw	r16, r0
     4ac:	29 9f       	mul	r18, r25
     4ae:	10 0d       	add	r17, r0
     4b0:	11 24       	eor	r1, r1
     4b2:	0d 5f       	subi	r16, 0xFD	; 253
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	cf cf       	rjmp	.-98     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
bbda.cpp:169
  rsp = new char[rsp_len];
     4b8:	89 85       	ldd	r24, Y+9	; 0x09
     4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     4bc:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
     4c0:	98 87       	std	Y+8, r25	; 0x08
     4c2:	8f 83       	std	Y+7, r24	; 0x07
bbda.cpp:170
  n=gsm.get_socket_rsp(&rsp);
     4c4:	be 01       	movw	r22, r28
     4c6:	69 5f       	subi	r22, 0xF9	; 249
     4c8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ca:	8e e8       	ldi	r24, 0x8E	; 142
     4cc:	92 e0       	ldi	r25, 0x02	; 2
     4ce:	5c d5       	rcall	.+2744   	; 0xf88 <Gsm_Ard::get_socket_rsp(char**)>
bbda.cpp:171
  if(n){
     4d0:	00 97       	sbiw	r24, 0x00	; 0
     4d2:	49 f0       	breq	.+18     	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
bbda.cpp:172
    err=4+10*n;
     4d4:	2a e0       	ldi	r18, 0x0A	; 10
     4d6:	28 9f       	mul	r18, r24
     4d8:	80 01       	movw	r16, r0
     4da:	29 9f       	mul	r18, r25
     4dc:	10 0d       	add	r17, r0
     4de:	11 24       	eor	r1, r1
     4e0:	0c 5f       	subi	r16, 0xFC	; 252
     4e2:	1f 4f       	sbci	r17, 0xFF	; 255
     4e4:	b8 cf       	rjmp	.-144    	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
bbda.cpp:177
  n=decode_time_rsp_msg(rsp, rsp_len, &cur_time);
     4e6:	69 85       	ldd	r22, Y+9	; 0x09
     4e8:	7a 85       	ldd	r23, Y+10	; 0x0a
     4ea:	ae 01       	movw	r20, r28
     4ec:	4f 5f       	subi	r20, 0xFF	; 255
     4ee:	5f 4f       	sbci	r21, 0xFF	; 255
     4f0:	8f 81       	ldd	r24, Y+7	; 0x07
     4f2:	98 85       	ldd	r25, Y+8	; 0x08
     4f4:	0e 94 c7 12 	call	0x258e	; 0x258e <decode_time_rsp_msg(char*, unsigned int, unsigned long*)>
     4f8:	8c 01       	movw	r16, r24
bbda.cpp:178
  if(n){
     4fa:	89 2b       	or	r24, r25
     4fc:	51 f0       	breq	.+20     	; 0x512 <__FUSE_REGION_LENGTH__+0x112>
bbda.cpp:179
    err=5+10*n;
     4fe:	2a e0       	ldi	r18, 0x0A	; 10
     500:	20 9f       	mul	r18, r16
     502:	c0 01       	movw	r24, r0
     504:	21 9f       	mul	r18, r17
     506:	90 0d       	add	r25, r0
     508:	11 24       	eor	r1, r1
     50a:	8c 01       	movw	r16, r24
     50c:	0b 5f       	subi	r16, 0xFB	; 251
     50e:	1f 4f       	sbci	r17, 0xFF	; 255
     510:	a2 cf       	rjmp	.-188    	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
bbda.cpp:183
  setTime(cur_time+3600);
     512:	69 81       	ldd	r22, Y+1	; 0x01
     514:	7a 81       	ldd	r23, Y+2	; 0x02
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	60 5f       	subi	r22, 0xF0	; 240
     51c:	71 4f       	sbci	r23, 0xF1	; 241
     51e:	8f 4f       	sbci	r24, 0xFF	; 255
     520:	9f 4f       	sbci	r25, 0xFF	; 255
     522:	8e d2       	rcall	.+1308   	; 0xa40 <setTime(unsigned long)>
bbda.cpp:184
  timeSynced = true;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <timeSynced>
bbda.cpp:185
  last_sync=now();
     52a:	bd d2       	rcall	.+1402   	; 0xaa6 <now()>
     52c:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <__data_end>
     530:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <__data_end+0x1>
     534:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <__data_end+0x2>
     538:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <__data_end+0x3>
bbda.cpp:188
  digitalClockDisplay();
     53c:	18 df       	rcall	.-464    	; 0x36e <digitalClockDisplay()>
     53e:	8b cf       	rjmp	.-234    	; 0x456 <__FUSE_REGION_LENGTH__+0x56>

00000540 <setup>:
setup():
bbda.cpp:21
{
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	cd 5a       	subi	r28, 0xAD	; 173
     54c:	d1 40       	sbci	r29, 0x01	; 1
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     558:	26 e0       	ldi	r18, 0x06	; 6
     55a:	40 e8       	ldi	r20, 0x80	; 128
     55c:	55 e2       	ldi	r21, 0x25	; 37
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	83 ea       	ldi	r24, 0xA3	; 163
     564:	94 e0       	ldi	r25, 0x04	; 4
     566:	0e 94 24 1a 	call	0x3448	; 0x3448 <HardwareSerial::begin(unsigned long, unsigned char)>
bbda.cpp:27
  gsm=Gsm_Ard();
     56a:	ce 01       	movw	r24, r28
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	a9 d3       	rcall	.+1874   	; 0xcc2 <Gsm_Ard::Gsm_Ard()>
     570:	fe 01       	movw	r30, r28
     572:	31 96       	adiw	r30, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:24
#define DEBUG_STATES

enum GSM_STATE{GSM_OFF_STATE, GSM_ON_STATE, GSM_PIN_STATE, GSM_IP_STATE, GSM_TCP_STATE};
enum BUFF_STATE{BUFF_READY, BUFF_USED};

class Gsm_Ard{
     574:	ae e8       	ldi	r26, 0x8E	; 142
     576:	b2 e0       	ldi	r27, 0x02	; 2
     578:	81 91       	ld	r24, Z+
     57a:	8d 93       	st	X+, r24
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	ae 30       	cpi	r26, 0x0E	; 14
     580:	b8 07       	cpc	r27, r24
     582:	d1 f7       	brne	.-12     	; 0x578 <setup+0x38>
     584:	de 01       	movw	r26, r28
     586:	af 57       	subi	r26, 0x7F	; 127
     588:	bf 4f       	sbci	r27, 0xFF	; 255
     58a:	ee e0       	ldi	r30, 0x0E	; 14
     58c:	f3 e0       	ldi	r31, 0x03	; 3
     58e:	8d 91       	ld	r24, X+
     590:	81 93       	st	Z+, r24
     592:	83 e0       	ldi	r24, 0x03	; 3
     594:	ee 38       	cpi	r30, 0x8E	; 142
     596:	f8 07       	cpc	r31, r24
     598:	d1 f7       	brne	.-12     	; 0x58e <setup+0x4e>
     59a:	de 01       	movw	r26, r28
     59c:	af 5f       	subi	r26, 0xFF	; 255
     59e:	be 4f       	sbci	r27, 0xFE	; 254
     5a0:	ee e8       	ldi	r30, 0x8E	; 142
     5a2:	f3 e0       	ldi	r31, 0x03	; 3
     5a4:	8d 91       	ld	r24, X+
     5a6:	81 93       	st	Z+, r24
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	ee 30       	cpi	r30, 0x0E	; 14
     5ac:	f8 07       	cpc	r31, r24
     5ae:	d1 f7       	brne	.-12     	; 0x5a4 <setup+0x64>
     5b0:	cf 57       	subi	r28, 0x7F	; 127
     5b2:	de 4f       	sbci	r29, 0xFE	; 254
     5b4:	88 81       	ld	r24, Y
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	c1 58       	subi	r28, 0x81	; 129
     5ba:	d1 40       	sbci	r29, 0x01	; 1
     5bc:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <gsm+0x181>
     5c0:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <gsm+0x180>
     5c4:	cd 57       	subi	r28, 0x7D	; 125
     5c6:	de 4f       	sbci	r29, 0xFE	; 254
     5c8:	88 81       	ld	r24, Y
     5ca:	99 81       	ldd	r25, Y+1	; 0x01
     5cc:	c3 58       	subi	r28, 0x83	; 131
     5ce:	d1 40       	sbci	r29, 0x01	; 1
     5d0:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <gsm+0x183>
     5d4:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <gsm+0x182>
     5d8:	cb 57       	subi	r28, 0x7B	; 123
     5da:	de 4f       	sbci	r29, 0xFE	; 254
     5dc:	88 81       	ld	r24, Y
     5de:	99 81       	ldd	r25, Y+1	; 0x01
     5e0:	c5 58       	subi	r28, 0x85	; 133
     5e2:	d1 40       	sbci	r29, 0x01	; 1
     5e4:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <gsm+0x185>
     5e8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <gsm+0x184>
     5ec:	c9 57       	subi	r28, 0x79	; 121
     5ee:	de 4f       	sbci	r29, 0xFE	; 254
     5f0:	88 81       	ld	r24, Y
     5f2:	99 81       	ldd	r25, Y+1	; 0x01
     5f4:	c7 58       	subi	r28, 0x87	; 135
     5f6:	d1 40       	sbci	r29, 0x01	; 1
     5f8:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <gsm+0x187>
     5fc:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <gsm+0x186>
     600:	c7 57       	subi	r28, 0x77	; 119
     602:	de 4f       	sbci	r29, 0xFE	; 254
     604:	88 81       	ld	r24, Y
     606:	99 81       	ldd	r25, Y+1	; 0x01
     608:	c9 58       	subi	r28, 0x89	; 137
     60a:	d1 40       	sbci	r29, 0x01	; 1
     60c:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <gsm+0x189>
     610:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <gsm+0x188>
     614:	c5 57       	subi	r28, 0x75	; 117
     616:	de 4f       	sbci	r29, 0xFE	; 254
     618:	88 81       	ld	r24, Y
     61a:	99 81       	ldd	r25, Y+1	; 0x01
     61c:	cb 58       	subi	r28, 0x8B	; 139
     61e:	d1 40       	sbci	r29, 0x01	; 1
     620:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <gsm+0x18b>
     624:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <gsm+0x18a>
     628:	c3 57       	subi	r28, 0x73	; 115
     62a:	de 4f       	sbci	r29, 0xFE	; 254
     62c:	88 81       	ld	r24, Y
     62e:	99 81       	ldd	r25, Y+1	; 0x01
     630:	cd 58       	subi	r28, 0x8D	; 141
     632:	d1 40       	sbci	r29, 0x01	; 1
     634:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <gsm+0x18d>
     638:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <gsm+0x18c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:37
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     63c:	cf 56       	subi	r28, 0x6F	; 111
     63e:	de 4f       	sbci	r29, 0xFE	; 254
     640:	88 81       	ld	r24, Y
     642:	99 81       	ldd	r25, Y+1	; 0x01
     644:	c1 59       	subi	r28, 0x91	; 145
     646:	d1 40       	sbci	r29, 0x01	; 1
     648:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <gsm+0x191>
     64c:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <gsm+0x190>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     650:	cd 56       	subi	r28, 0x6D	; 109
     652:	de 4f       	sbci	r29, 0xFE	; 254
     654:	88 81       	ld	r24, Y
     656:	99 81       	ldd	r25, Y+1	; 0x01
     658:	aa 81       	ldd	r26, Y+2	; 0x02
     65a:	bb 81       	ldd	r27, Y+3	; 0x03
     65c:	c3 59       	subi	r28, 0x93	; 147
     65e:	d1 40       	sbci	r29, 0x01	; 1
     660:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <gsm+0x192>
     664:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <gsm+0x193>
     668:	a0 93 22 04 	sts	0x0422, r26	; 0x800422 <gsm+0x194>
     66c:	b0 93 23 04 	sts	0x0423, r27	; 0x800423 <gsm+0x195>
     670:	c9 56       	subi	r28, 0x69	; 105
     672:	de 4f       	sbci	r29, 0xFE	; 254
     674:	88 81       	ld	r24, Y
     676:	99 81       	ldd	r25, Y+1	; 0x01
     678:	aa 81       	ldd	r26, Y+2	; 0x02
     67a:	bb 81       	ldd	r27, Y+3	; 0x03
     67c:	c7 59       	subi	r28, 0x97	; 151
     67e:	d1 40       	sbci	r29, 0x01	; 1
     680:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <gsm+0x196>
     684:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <gsm+0x197>
     688:	a0 93 26 04 	sts	0x0426, r26	; 0x800426 <gsm+0x198>
     68c:	b0 93 27 04 	sts	0x0427, r27	; 0x800427 <gsm+0x199>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:50

#ifndef GCC_VERSION
#define GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
#endif

class SoftwareSerial : public Stream
     690:	c5 56       	subi	r28, 0x65	; 101
     692:	de 4f       	sbci	r29, 0xFE	; 254
     694:	88 81       	ld	r24, Y
     696:	cb 59       	subi	r28, 0x9B	; 155
     698:	d1 40       	sbci	r29, 0x01	; 1
     69a:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <gsm+0x19a>
     69e:	c4 56       	subi	r28, 0x64	; 100
     6a0:	de 4f       	sbci	r29, 0xFE	; 254
     6a2:	88 81       	ld	r24, Y
     6a4:	cc 59       	subi	r28, 0x9C	; 156
     6a6:	d1 40       	sbci	r29, 0x01	; 1
     6a8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <gsm+0x19b>
     6ac:	c3 56       	subi	r28, 0x63	; 99
     6ae:	de 4f       	sbci	r29, 0xFE	; 254
     6b0:	88 81       	ld	r24, Y
     6b2:	99 81       	ldd	r25, Y+1	; 0x01
     6b4:	cd 59       	subi	r28, 0x9D	; 157
     6b6:	d1 40       	sbci	r29, 0x01	; 1
     6b8:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <gsm+0x19d>
     6bc:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <gsm+0x19c>
     6c0:	c1 56       	subi	r28, 0x61	; 97
     6c2:	de 4f       	sbci	r29, 0xFE	; 254
     6c4:	88 81       	ld	r24, Y
     6c6:	cf 59       	subi	r28, 0x9F	; 159
     6c8:	d1 40       	sbci	r29, 0x01	; 1
     6ca:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <gsm+0x19e>
     6ce:	c0 56       	subi	r28, 0x60	; 96
     6d0:	de 4f       	sbci	r29, 0xFE	; 254
     6d2:	88 81       	ld	r24, Y
     6d4:	99 81       	ldd	r25, Y+1	; 0x01
     6d6:	c0 5a       	subi	r28, 0xA0	; 160
     6d8:	d1 40       	sbci	r29, 0x01	; 1
     6da:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <gsm+0x1a0>
     6de:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <gsm+0x19f>
     6e2:	ce 55       	subi	r28, 0x5E	; 94
     6e4:	de 4f       	sbci	r29, 0xFE	; 254
     6e6:	88 81       	ld	r24, Y
     6e8:	99 81       	ldd	r25, Y+1	; 0x01
     6ea:	c2 5a       	subi	r28, 0xA2	; 162
     6ec:	d1 40       	sbci	r29, 0x01	; 1
     6ee:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <gsm+0x1a2>
     6f2:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <gsm+0x1a1>
     6f6:	cc 55       	subi	r28, 0x5C	; 92
     6f8:	de 4f       	sbci	r29, 0xFE	; 254
     6fa:	88 81       	ld	r24, Y
     6fc:	c4 5a       	subi	r28, 0xA4	; 164
     6fe:	d1 40       	sbci	r29, 0x01	; 1
     700:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <gsm+0x1a3>
     704:	cb 55       	subi	r28, 0x5B	; 91
     706:	de 4f       	sbci	r29, 0xFE	; 254
     708:	88 81       	ld	r24, Y
     70a:	99 81       	ldd	r25, Y+1	; 0x01
     70c:	c5 5a       	subi	r28, 0xA5	; 165
     70e:	d1 40       	sbci	r29, 0x01	; 1
     710:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <gsm+0x1a5>
     714:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <gsm+0x1a4>
     718:	c9 55       	subi	r28, 0x59	; 89
     71a:	de 4f       	sbci	r29, 0xFE	; 254
     71c:	88 81       	ld	r24, Y
     71e:	99 81       	ldd	r25, Y+1	; 0x01
     720:	c7 5a       	subi	r28, 0xA7	; 167
     722:	d1 40       	sbci	r29, 0x01	; 1
     724:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <gsm+0x1a7>
     728:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <gsm+0x1a6>
     72c:	c7 55       	subi	r28, 0x57	; 87
     72e:	de 4f       	sbci	r29, 0xFE	; 254
     730:	88 81       	ld	r24, Y
     732:	99 81       	ldd	r25, Y+1	; 0x01
     734:	c9 5a       	subi	r28, 0xA9	; 169
     736:	d1 40       	sbci	r29, 0x01	; 1
     738:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <gsm+0x1a9>
     73c:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <gsm+0x1a8>
     740:	c5 55       	subi	r28, 0x55	; 85
     742:	de 4f       	sbci	r29, 0xFE	; 254
     744:	88 81       	ld	r24, Y
     746:	99 81       	ldd	r25, Y+1	; 0x01
     748:	cb 5a       	subi	r28, 0xAB	; 171
     74a:	d1 40       	sbci	r29, 0x01	; 1
     74c:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <gsm+0x1ab>
     750:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <gsm+0x1aa>
     754:	c3 55       	subi	r28, 0x53	; 83
     756:	de 4f       	sbci	r29, 0xFE	; 254
     758:	98 81       	ld	r25, Y
     75a:	cd 5a       	subi	r28, 0xAD	; 173
     75c:	d1 40       	sbci	r29, 0x01	; 1
     75e:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <gsm+0x1ac>
     762:	90 fb       	bst	r25, 0
     764:	80 f9       	bld	r24, 0
     766:	91 fb       	bst	r25, 1
     768:	81 f9       	bld	r24, 1
     76a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <gsm+0x1ac>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:24
     76e:	ce 01       	movw	r24, r28
     770:	81 57       	subi	r24, 0x71	; 113
     772:	9e 4f       	sbci	r25, 0xFE	; 254
     774:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <SoftwareSerial::~SoftwareSerial()>
bbda.cpp:30
  Serial.println("GSM Shield init");
     778:	65 e1       	ldi	r22, 0x15	; 21
     77a:	71 e0       	ldi	r23, 0x01	; 1
     77c:	83 ea       	ldi	r24, 0xA3	; 163
     77e:	94 e0       	ldi	r25, 0x04	; 4
     780:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Print::println(char const*)>
bbda.cpp:33
    n=gsm.init_gsm_module();
     784:	8e e8       	ldi	r24, 0x8E	; 142
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	d7 d7       	rcall	.+4014   	; 0x1738 <Gsm_Ard::init_gsm_module()>
bbda.cpp:34
    if(n){
     78a:	00 97       	sbiw	r24, 0x00	; 0
     78c:	d1 f5       	brne	.+116    	; 0x802 <setup+0x2c2>
bbda.cpp:59
          started=true;//apagar
     78e:	11 e0       	ldi	r17, 0x01	; 1
bbda.cpp:43
    n=gsm.attachGPRS();
     790:	8e e8       	ldi	r24, 0x8E	; 142
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Gsm_Ard::attachGPRS()>
bbda.cpp:46
      dbg_print_error(__FILE__, __LINE__, n);
     798:	ac 01       	movw	r20, r24
     79a:	6e e2       	ldi	r22, 0x2E	; 46
     79c:	70 e0       	ldi	r23, 0x00	; 0
bbda.cpp:44
    if(n){
     79e:	89 2b       	or	r24, r25
     7a0:	b9 f4       	brne	.+46     	; 0x7d0 <setup+0x290>
bbda.cpp:50
      if(!timeSynced){
     7a2:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <timeSynced>
     7a6:	81 11       	cpse	r24, r1
     7a8:	0a c0       	rjmp	.+20     	; 0x7be <setup+0x27e>
bbda.cpp:51
        n=sync_time_with_server();
     7aa:	1b de       	rcall	.-970    	; 0x3e2 <sync_time_with_server()>
bbda.cpp:52
        if(n){
     7ac:	00 97       	sbiw	r24, 0x00	; 0
     7ae:	b9 f1       	breq	.+110    	; 0x81e <setup+0x2de>
bbda.cpp:54
          dbg_print_error(__FILE__, __LINE__, n);
     7b0:	ac 01       	movw	r20, r24
     7b2:	66 e3       	ldi	r22, 0x36	; 54
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	8a e0       	ldi	r24, 0x0A	; 10
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
bbda.cpp:85
      n=gsm.dettachGPRS();
     7be:	8e e8       	ldi	r24, 0x8E	; 142
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <Gsm_Ard::dettachGPRS()>
bbda.cpp:86
      if(n){
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	39 f0       	breq	.+14     	; 0x7d8 <setup+0x298>
bbda.cpp:88
        dbg_print_error(__FILE__, __LINE__, n);
     7ca:	ac 01       	movw	r20, r24
     7cc:	68 e5       	ldi	r22, 0x58	; 88
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	8a e0       	ldi	r24, 0x0A	; 10
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
bbda.cpp:92
    delay(1000);
     7d8:	68 ee       	ldi	r22, 0xE8	; 232
     7da:	73 e0       	ldi	r23, 0x03	; 3
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <delay>
bbda.cpp:93
  } while(!started);
     7e4:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <started>
     7e8:	88 23       	and	r24, r24
     7ea:	91 f2       	breq	.-92     	; 0x790 <setup+0x250>
bbda.cpp:95
}
     7ec:	c3 55       	subi	r28, 0x53	; 83
     7ee:	de 4f       	sbci	r29, 0xFE	; 254
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	f8 94       	cli
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	0f be       	out	0x3f, r0	; 63
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	08 95       	ret
bbda.cpp:36
      dbg_print_error(__FILE__, __LINE__, n);
     802:	ac 01       	movw	r20, r24
     804:	64 e2       	ldi	r22, 0x24	; 36
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	8a e0       	ldi	r24, 0x0A	; 10
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
bbda.cpp:38
      delay(10000);
     810:	60 e1       	ldi	r22, 0x10	; 16
     812:	77 e2       	ldi	r23, 0x27	; 39
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 99 16 	call	0x2d32	; 0x2d32 <delay>
     81c:	b3 cf       	rjmp	.-154    	; 0x784 <setup+0x244>
bbda.cpp:59
          started=true;//apagar
     81e:	10 93 8d 02 	sts	0x028D, r17	; 0x80028d <started>
     822:	cd cf       	rjmp	.-102    	; 0x7be <setup+0x27e>

00000824 <_GLOBAL__sub_I_gsm>:
_GLOBAL__sub_I_gsm():
bbda.cpp:12
Gsm_Ard gsm;
     824:	8e e8       	ldi	r24, 0x8E	; 142
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	4c c2       	rjmp	.+1176   	; 0xcc2 <Gsm_Ard::Gsm_Ard()>

0000082a <_GLOBAL__sub_D_gsm>:
_GLOBAL__sub_D_gsm():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:24
     82a:	8c e1       	ldi	r24, 0x1C	; 28
     82c:	94 e0       	ldi	r25, 0x04	; 4
     82e:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <SoftwareSerial::~SoftwareSerial()>

00000832 <breakTime(unsigned long, tmElements_t&)>:
_Z9breakTimemR12tmElements_t():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:151
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
     832:	6f 92       	push	r6
     834:	7f 92       	push	r7
     836:	8f 92       	push	r8
     838:	9f 92       	push	r9
     83a:	af 92       	push	r10
     83c:	bf 92       	push	r11
     83e:	cf 92       	push	r12
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	6b 01       	movw	r12, r22
     850:	7c 01       	movw	r14, r24
     852:	ea 01       	movw	r28, r20
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:162
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     854:	8c e3       	ldi	r24, 0x3C	; 60
     856:	88 2e       	mov	r8, r24
     858:	91 2c       	mov	r9, r1
     85a:	a1 2c       	mov	r10, r1
     85c:	b1 2c       	mov	r11, r1
     85e:	c7 01       	movw	r24, r14
     860:	a5 01       	movw	r20, r10
     862:	94 01       	movw	r18, r8
     864:	0e 94 97 1a 	call	0x352e	; 0x352e <__udivmodsi4>
     868:	68 83       	st	Y, r22
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:164
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     86a:	ca 01       	movw	r24, r20
     86c:	b9 01       	movw	r22, r18
     86e:	a5 01       	movw	r20, r10
     870:	94 01       	movw	r18, r8
     872:	0e 94 97 1a 	call	0x352e	; 0x352e <__udivmodsi4>
     876:	69 83       	std	Y+1, r22	; 0x01
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:165
  time /= 60; // now it is hours
     878:	c7 01       	movw	r24, r14
     87a:	b6 01       	movw	r22, r12
     87c:	20 e1       	ldi	r18, 0x10	; 16
     87e:	3e e0       	ldi	r19, 0x0E	; 14
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	0e 94 97 1a 	call	0x352e	; 0x352e <__udivmodsi4>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:166
  tm.Hour = time % 24;
     888:	ca 01       	movw	r24, r20
     88a:	b9 01       	movw	r22, r18
     88c:	28 e1       	ldi	r18, 0x18	; 24
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	0e 94 97 1a 	call	0x352e	; 0x352e <__udivmodsi4>
     898:	6a 83       	std	Y+2, r22	; 0x02
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:167
  time /= 24; // now it is days
     89a:	c7 01       	movw	r24, r14
     89c:	b6 01       	movw	r22, r12
     89e:	20 e8       	ldi	r18, 0x80	; 128
     8a0:	31 e5       	ldi	r19, 0x51	; 81
     8a2:	41 e0       	ldi	r20, 0x01	; 1
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	0e 94 97 1a 	call	0x352e	; 0x352e <__udivmodsi4>
     8aa:	69 01       	movw	r12, r18
     8ac:	7a 01       	movw	r14, r20
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:168
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     8ae:	ca 01       	movw	r24, r20
     8b0:	b9 01       	movw	r22, r18
     8b2:	6c 5f       	subi	r22, 0xFC	; 252
     8b4:	7f 4f       	sbci	r23, 0xFF	; 255
     8b6:	8f 4f       	sbci	r24, 0xFF	; 255
     8b8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ba:	27 e0       	ldi	r18, 0x07	; 7
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	0e 94 97 1a 	call	0x352e	; 0x352e <__udivmodsi4>
     8c6:	6f 5f       	subi	r22, 0xFF	; 255
     8c8:	6b 83       	std	Y+3, r22	; 0x03
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:171
  
  year = 0;  
  days = 0;
     8ca:	81 2c       	mov	r8, r1
     8cc:	91 2c       	mov	r9, r1
     8ce:	54 01       	movw	r10, r8
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:170
  year = 0;  
     8d0:	40 e0       	ldi	r20, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:172
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     8d2:	94 e6       	ldi	r25, 0x64	; 100
     8d4:	69 2e       	mov	r6, r25
     8d6:	71 2c       	mov	r7, r1
     8d8:	00 e9       	ldi	r16, 0x90	; 144
     8da:	11 e0       	ldi	r17, 0x01	; 1
     8dc:	24 2f       	mov	r18, r20
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	2e 54       	subi	r18, 0x4E	; 78
     8e2:	38 4f       	sbci	r19, 0xF8	; 248
     8e4:	f9 01       	movw	r30, r18
     8e6:	e3 70       	andi	r30, 0x03	; 3
     8e8:	ff 27       	eor	r31, r31
     8ea:	30 97       	sbiw	r30, 0x00	; 0
     8ec:	f9 f4       	brne	.+62     	; 0x92c <__stack+0x2d>
     8ee:	c9 01       	movw	r24, r18
     8f0:	b3 01       	movw	r22, r6
     8f2:	0e 94 84 1a 	call	0x3508	; 0x3508 <__divmodhi4>
     8f6:	89 2b       	or	r24, r25
     8f8:	31 f4       	brne	.+12     	; 0x906 <__stack+0x7>
     8fa:	c9 01       	movw	r24, r18
     8fc:	b8 01       	movw	r22, r16
     8fe:	0e 94 84 1a 	call	0x3508	; 0x3508 <__divmodhi4>
     902:	89 2b       	or	r24, r25
     904:	99 f4       	brne	.+38     	; 0x92c <__stack+0x2d>
     906:	8e e6       	ldi	r24, 0x6E	; 110
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	a0 e0       	ldi	r26, 0x00	; 0
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	88 0e       	add	r8, r24
     910:	99 1e       	adc	r9, r25
     912:	aa 1e       	adc	r10, r26
     914:	bb 1e       	adc	r11, r27
     916:	d5 01       	movw	r26, r10
     918:	c4 01       	movw	r24, r8
     91a:	aa 27       	eor	r26, r26
     91c:	bb 27       	eor	r27, r27
     91e:	c8 16       	cp	r12, r24
     920:	d9 06       	cpc	r13, r25
     922:	ea 06       	cpc	r14, r26
     924:	fb 06       	cpc	r15, r27
     926:	38 f0       	brcs	.+14     	; 0x936 <__stack+0x37>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:173
    year++;
     928:	4f 5f       	subi	r20, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:172
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     92a:	d8 cf       	rjmp	.-80     	; 0x8dc <breakTime(unsigned long, tmElements_t&)+0xaa>
     92c:	8d e6       	ldi	r24, 0x6D	; 109
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	a0 e0       	ldi	r26, 0x00	; 0
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	ec cf       	rjmp	.-40     	; 0x90e <__stack+0xf>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:175
  }
  tm.Year = year; // year is offset from 1970 
     936:	4e 83       	std	Y+6, r20	; 0x06
     938:	c9 01       	movw	r24, r18
     93a:	64 e6       	ldi	r22, 0x64	; 100
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	0e 94 84 1a 	call	0x3508	; 0x3508 <__divmodhi4>
     942:	8c 01       	movw	r16, r24
     944:	c9 01       	movw	r24, r18
     946:	60 e9       	ldi	r22, 0x90	; 144
     948:	71 e0       	ldi	r23, 0x01	; 1
     94a:	0e 94 84 1a 	call	0x3508	; 0x3508 <__divmodhi4>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:177
  
  days -= LEAP_YEAR(year) ? 366 : 365;
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	29 f4       	brne	.+10     	; 0x95c <__stack+0x5d>
     952:	01 15       	cp	r16, r1
     954:	11 05       	cpc	r17, r1
     956:	e1 f4       	brne	.+56     	; 0x990 <__stack+0x91>
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	d1 f0       	breq	.+52     	; 0x990 <__stack+0x91>
     95c:	4d e6       	ldi	r20, 0x6D	; 109
     95e:	51 e0       	ldi	r21, 0x01	; 1
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	84 1a       	sub	r8, r20
     966:	95 0a       	sbc	r9, r21
     968:	a6 0a       	sbc	r10, r22
     96a:	b7 0a       	sbc	r11, r23
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:178
  time  -= days; // now it is days in this year, starting at 0
     96c:	c8 18       	sub	r12, r8
     96e:	d9 08       	sbc	r13, r9
     970:	ea 08       	sbc	r14, r10
     972:	fb 08       	sbc	r15, r11
     974:	a5 e2       	ldi	r26, 0x25	; 37
     976:	b1 e0       	ldi	r27, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:183
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
     978:	20 e0       	ldi	r18, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:184
    if (month==1) { // february
     97a:	21 30       	cpi	r18, 0x01	; 1
     97c:	71 f4       	brne	.+28     	; 0x99a <__stack+0x9b>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:185
      if (LEAP_YEAR(year)) {
     97e:	30 97       	sbiw	r30, 0x00	; 0
     980:	91 f5       	brne	.+100    	; 0x9e6 <__stack+0xe7>
     982:	01 15       	cp	r16, r1
     984:	11 05       	cpc	r17, r1
     986:	11 f4       	brne	.+4      	; 0x98c <__stack+0x8d>
     988:	00 97       	sbiw	r24, 0x00	; 0
     98a:	69 f5       	brne	.+90     	; 0x9e6 <__stack+0xe7>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:186
        monthLength=29;
     98c:	4d e1       	ldi	r20, 0x1D	; 29
     98e:	06 c0       	rjmp	.+12     	; 0x99c <__stack+0x9d>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:177
  days -= LEAP_YEAR(year) ? 366 : 365;
     990:	4e e6       	ldi	r20, 0x6E	; 110
     992:	51 e0       	ldi	r21, 0x01	; 1
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	e5 cf       	rjmp	.-54     	; 0x964 <__stack+0x65>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:191
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
     99a:	4c 91       	ld	r20, X
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:194
    }
    
    if (time >= monthLength) {
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	31 e0       	ldi	r19, 0x01	; 1
     9a4:	32 0f       	add	r19, r18
     9a6:	c4 16       	cp	r12, r20
     9a8:	d5 06       	cpc	r13, r21
     9aa:	e6 06       	cpc	r14, r22
     9ac:	f7 06       	cpc	r15, r23
     9ae:	40 f0       	brcs	.+16     	; 0x9c0 <__stack+0xc1>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:195
      time -= monthLength;
     9b0:	c4 1a       	sub	r12, r20
     9b2:	d5 0a       	sbc	r13, r21
     9b4:	e6 0a       	sbc	r14, r22
     9b6:	f7 0a       	sbc	r15, r23
     9b8:	11 96       	adiw	r26, 0x01	; 1
     9ba:	23 2f       	mov	r18, r19
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:183
  for (month=0; month<12; month++) {
     9bc:	3c 30       	cpi	r19, 0x0C	; 12
     9be:	e9 f6       	brne	.-70     	; 0x97a <__stack+0x7b>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:200
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
     9c0:	2f 5f       	subi	r18, 0xFF	; 255
     9c2:	2d 83       	std	Y+5, r18	; 0x05
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:201
  tm.Day = time + 1;     // day of month
     9c4:	c3 94       	inc	r12
     9c6:	cc 82       	std	Y+4, r12	; 0x04
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:202
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	9f 90       	pop	r9
     9de:	8f 90       	pop	r8
     9e0:	7f 90       	pop	r7
     9e2:	6f 90       	pop	r6
     9e4:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:188
        monthLength=28;
     9e6:	4c e1       	ldi	r20, 0x1C	; 28
     9e8:	d9 cf       	rjmp	.-78     	; 0x99c <__stack+0x9d>

000009ea <refreshCache(unsigned long)>:
_Z12refreshCachem():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:42
void refreshCache(time_t t) {
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	6b 01       	movw	r12, r22
     9f4:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:43
  if (t != cacheTime) {
     9f6:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <cacheTime>
     9fa:	90 91 4c 04 	lds	r25, 0x044C	; 0x80044c <cacheTime+0x1>
     9fe:	a0 91 4d 04 	lds	r26, 0x044D	; 0x80044d <cacheTime+0x2>
     a02:	b0 91 4e 04 	lds	r27, 0x044E	; 0x80044e <cacheTime+0x3>
     a06:	8c 15       	cp	r24, r12
     a08:	9d 05       	cpc	r25, r13
     a0a:	ae 05       	cpc	r26, r14
     a0c:	bf 05       	cpc	r27, r15
     a0e:	61 f0       	breq	.+24     	; 0xa28 <refreshCache(unsigned long)+0x3e>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:44
    breakTime(t, tm); 
     a10:	4f e4       	ldi	r20, 0x4F	; 79
     a12:	54 e0       	ldi	r21, 0x04	; 4
     a14:	c7 01       	movw	r24, r14
     a16:	0d df       	rcall	.-486    	; 0x832 <breakTime(unsigned long, tmElements_t&)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:45
    cacheTime = t; 
     a18:	c0 92 4b 04 	sts	0x044B, r12	; 0x80044b <cacheTime>
     a1c:	d0 92 4c 04 	sts	0x044C, r13	; 0x80044c <cacheTime+0x1>
     a20:	e0 92 4d 04 	sts	0x044D, r14	; 0x80044d <cacheTime+0x2>
     a24:	f0 92 4e 04 	sts	0x044E, r15	; 0x80044e <cacheTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:47
}
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	df 90       	pop	r13
     a2e:	cf 90       	pop	r12
     a30:	08 95       	ret

00000a32 <year(unsigned long)>:
_Z4yearm():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:138
  refreshCache(t);
     a32:	db df       	rcall	.-74     	; 0x9ea <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:139
  return tmYearToCalendar(tm.Year);
     a34:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <tm+0x6>
     a38:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:140
}
     a3a:	8e 54       	subi	r24, 0x4E	; 78
     a3c:	98 4f       	sbci	r25, 0xF8	; 248
     a3e:	08 95       	ret

00000a40 <setTime(unsigned long)>:
_Z7setTimem():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:274
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:280
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
     a44:	60 93 47 04 	sts	0x0447, r22	; 0x800447 <sysTime>
     a48:	70 93 48 04 	sts	0x0448, r23	; 0x800448 <sysTime+0x1>
     a4c:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <sysTime+0x2>
     a50:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:281
  nextSyncTime = (uint32_t)t + syncInterval;
     a54:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <syncInterval>
     a58:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <syncInterval+0x1>
     a5c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <syncInterval+0x2>
     a60:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <syncInterval+0x3>
     a64:	dc 01       	movw	r26, r24
     a66:	cb 01       	movw	r24, r22
     a68:	80 0f       	add	r24, r16
     a6a:	91 1f       	adc	r25, r17
     a6c:	a2 1f       	adc	r26, r18
     a6e:	b3 1f       	adc	r27, r19
     a70:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <nextSyncTime>
     a74:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <nextSyncTime+0x1>
     a78:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <nextSyncTime+0x2>
     a7c:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:282
  Status = timeSet;
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <Status+0x1>
     a88:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <Status>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:283
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     a8c:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <millis>
     a90:	60 93 43 04 	sts	0x0443, r22	; 0x800443 <prevMillis>
     a94:	70 93 44 04 	sts	0x0444, r23	; 0x800444 <prevMillis+0x1>
     a98:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <prevMillis+0x2>
     a9c:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:284
} 
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	08 95       	ret

00000aa6 <now()>:
_Z3nowv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:250
time_t now() {
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     ab2:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <millis>
     ab6:	c0 90 43 04 	lds	r12, 0x0443	; 0x800443 <prevMillis>
     aba:	d0 90 44 04 	lds	r13, 0x0444	; 0x800444 <prevMillis+0x1>
     abe:	e0 90 45 04 	lds	r14, 0x0445	; 0x800445 <prevMillis+0x2>
     ac2:	f0 90 46 04 	lds	r15, 0x0446	; 0x800446 <prevMillis+0x3>
     ac6:	8b 01       	movw	r16, r22
     ac8:	9c 01       	movw	r18, r24
     aca:	0c 19       	sub	r16, r12
     acc:	1d 09       	sbc	r17, r13
     ace:	2e 09       	sbc	r18, r14
     ad0:	3f 09       	sbc	r19, r15
     ad2:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <sysTime>
     ad6:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <sysTime+0x1>
     ada:	a0 91 49 04 	lds	r26, 0x0449	; 0x800449 <sysTime+0x2>
     ade:	b0 91 4a 04 	lds	r27, 0x044A	; 0x80044a <sysTime+0x3>
     ae2:	08 3e       	cpi	r16, 0xE8	; 232
     ae4:	13 40       	sbci	r17, 0x03	; 3
     ae6:	21 05       	cpc	r18, r1
     ae8:	31 05       	cpc	r19, r1
     aea:	d0 f0       	brcs	.+52     	; 0xb20 <now()+0x7a>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:254
    sysTime++;
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	a1 1d       	adc	r26, r1
     af0:	b1 1d       	adc	r27, r1
     af2:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <sysTime>
     af6:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <sysTime+0x1>
     afa:	a0 93 49 04 	sts	0x0449, r26	; 0x800449 <sysTime+0x2>
     afe:	b0 93 4a 04 	sts	0x044A, r27	; 0x80044a <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:255
    prevMillis += 1000;	
     b02:	b7 01       	movw	r22, r14
     b04:	a6 01       	movw	r20, r12
     b06:	48 51       	subi	r20, 0x18	; 24
     b08:	5c 4f       	sbci	r21, 0xFC	; 252
     b0a:	6f 4f       	sbci	r22, 0xFF	; 255
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	40 93 43 04 	sts	0x0443, r20	; 0x800443 <prevMillis>
     b12:	50 93 44 04 	sts	0x0444, r21	; 0x800444 <prevMillis+0x1>
     b16:	60 93 45 04 	sts	0x0445, r22	; 0x800445 <prevMillis+0x2>
     b1a:	70 93 46 04 	sts	0x0446, r23	; 0x800446 <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     b1e:	c9 cf       	rjmp	.-110    	; 0xab2 <now()+0xc>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:260
  if (nextSyncTime <= sysTime) {
     b20:	40 91 3f 04 	lds	r20, 0x043F	; 0x80043f <nextSyncTime>
     b24:	50 91 40 04 	lds	r21, 0x0440	; 0x800440 <nextSyncTime+0x1>
     b28:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <nextSyncTime+0x2>
     b2c:	70 91 42 04 	lds	r23, 0x0442	; 0x800442 <nextSyncTime+0x3>
     b30:	84 17       	cp	r24, r20
     b32:	95 07       	cpc	r25, r21
     b34:	a6 07       	cpc	r26, r22
     b36:	b7 07       	cpc	r27, r23
     b38:	68 f0       	brcs	.+26     	; 0xb54 <now()+0xae>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:261
    if (getTimePtr != 0) {
     b3a:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <getTimePtr>
     b3e:	f0 91 3c 04 	lds	r31, 0x043C	; 0x80043c <getTimePtr+0x1>
     b42:	30 97       	sbiw	r30, 0x00	; 0
     b44:	39 f0       	breq	.+14     	; 0xb54 <now()+0xae>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:262
      time_t t = getTimePtr();
     b46:	09 95       	icall
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:263
      if (t != 0) {
     b48:	61 15       	cp	r22, r1
     b4a:	71 05       	cpc	r23, r1
     b4c:	81 05       	cpc	r24, r1
     b4e:	91 05       	cpc	r25, r1
     b50:	81 f0       	breq	.+32     	; 0xb72 <now()+0xcc>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:264
        setTime(t);
     b52:	76 df       	rcall	.-276    	; 0xa40 <setTime(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:271
  return (time_t)sysTime;
     b54:	60 91 47 04 	lds	r22, 0x0447	; 0x800447 <sysTime>
     b58:	70 91 48 04 	lds	r23, 0x0448	; 0x800448 <sysTime+0x1>
     b5c:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <sysTime+0x2>
     b60:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:272
}
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:266
        nextSyncTime = sysTime + syncInterval;
     b72:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <sysTime>
     b76:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <sysTime+0x1>
     b7a:	a0 91 49 04 	lds	r26, 0x0449	; 0x800449 <sysTime+0x2>
     b7e:	b0 91 4a 04 	lds	r27, 0x044A	; 0x80044a <sysTime+0x3>
     b82:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <syncInterval>
     b86:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <syncInterval+0x1>
     b8a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <syncInterval+0x2>
     b8e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <syncInterval+0x3>
     b92:	84 0f       	add	r24, r20
     b94:	95 1f       	adc	r25, r21
     b96:	a6 1f       	adc	r26, r22
     b98:	b7 1f       	adc	r27, r23
     b9a:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <nextSyncTime>
     b9e:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <nextSyncTime+0x1>
     ba2:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <nextSyncTime+0x2>
     ba6:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:267
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <Status>
     bb2:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <Status+0x1>
     bb6:	23 2b       	or	r18, r19
     bb8:	11 f4       	brne	.+4      	; 0xbbe <now()+0x118>
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <Status+0x1>
     bc2:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <Status>
     bc6:	c6 cf       	rjmp	.-116    	; 0xb54 <now()+0xae>

00000bc8 <hour()>:
_Z4hourv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:50
  return hour(now()); 
     bc8:	6e df       	rcall	.-292    	; 0xaa6 <now()>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:54
  refreshCache(t);
     bca:	0f df       	rcall	.-482    	; 0x9ea <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:55
  return tm.Hour;  
     bcc:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <tm+0x2>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:51
}
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	08 95       	ret

00000bd4 <minute()>:
_Z6minutev():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:89
  return minute(now()); 
     bd4:	68 df       	rcall	.-304    	; 0xaa6 <now()>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:93
  refreshCache(t);
     bd6:	09 df       	rcall	.-494    	; 0x9ea <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:94
  return tm.Minute;  
     bd8:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <tm+0x1>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:90
}
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	08 95       	ret

00000be0 <second()>:
_Z6secondv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:98
  return second(now()); 
     be0:	62 df       	rcall	.-316    	; 0xaa6 <now()>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:102
  refreshCache(t);
     be2:	03 df       	rcall	.-506    	; 0x9ea <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:103
  return tm.Second;
     be4:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <tm>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:99
}
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	08 95       	ret

00000bec <day()>:
_Z3dayv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:107
  return(day(now())); 
     bec:	5c df       	rcall	.-328    	; 0xaa6 <now()>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:111
  refreshCache(t);
     bee:	fd de       	rcall	.-518    	; 0x9ea <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:112
  return tm.Day;
     bf0:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <tm+0x4>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:108
}
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	08 95       	ret

00000bf8 <month()>:
_Z5monthv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:125
  return month(now()); 
     bf8:	56 df       	rcall	.-340    	; 0xaa6 <now()>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:129
  refreshCache(t);
     bfa:	f7 de       	rcall	.-530    	; 0x9ea <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:130
  return tm.Month;
     bfc:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <tm+0x5>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:126
}
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	08 95       	ret

00000c04 <year()>:
_Z4yearv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:134
  return year(now()); 
     c04:	50 df       	rcall	.-352    	; 0xaa6 <now()>
     c06:	15 cf       	rjmp	.-470    	; 0xa32 <year(unsigned long)>

00000c08 <Gsm_Ard::_change_gsm_state(GSM_STATE)>:
_ZN7Gsm_Ard17_change_gsm_stateE9GSM_STATE():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:23
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
  #endif
}

void Gsm_Ard::_change_gsm_state(GSM_STATE new_state){
  _gsm_state=new_state;
     c08:	8a 57       	subi	r24, 0x7A	; 122
     c0a:	9e 4f       	sbci	r25, 0xFE	; 254
     c0c:	fc 01       	movw	r30, r24
     c0e:	71 83       	std	Z+1, r23	; 0x01
     c10:	60 83       	st	Z, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:25
  #ifdef DEBUG_STATES
  switch(_gsm_state){
     c12:	62 30       	cpi	r22, 0x02	; 2
     c14:	71 05       	cpc	r23, r1
     c16:	c1 f0       	breq	.+48     	; 0xc48 <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x40>
     c18:	38 f4       	brcc	.+14     	; 0xc28 <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x20>
     c1a:	61 15       	cp	r22, r1
     c1c:	71 05       	cpc	r23, r1
     c1e:	59 f0       	breq	.+22     	; 0xc36 <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x2e>
     c20:	61 30       	cpi	r22, 0x01	; 1
     c22:	71 05       	cpc	r23, r1
     c24:	71 f0       	breq	.+28     	; 0xc42 <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x3a>
     c26:	08 95       	ret
     c28:	63 30       	cpi	r22, 0x03	; 3
     c2a:	71 05       	cpc	r23, r1
     c2c:	81 f0       	breq	.+32     	; 0xc4e <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x46>
     c2e:	64 30       	cpi	r22, 0x04	; 4
     c30:	71 05       	cpc	r23, r1
     c32:	81 f0       	breq	.+32     	; 0xc54 <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x4c>
     c34:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:29
    default:
      break;
    case GSM_OFF_STATE:
      Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     c36:	61 e3       	ldi	r22, 0x31	; 49
     c38:	71 e0       	ldi	r23, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:41
      break;
    case GSM_IP_STATE:
      Serial.println("DB: GSM_STATE=GSM_IP_STATE");
      break;
    case GSM_TCP_STATE:
      Serial.println("DB: GSM_STATE=GSM_TCP_STATE");
     c3a:	83 ea       	ldi	r24, 0xA3	; 163
     c3c:	94 e0       	ldi	r25, 0x04	; 4
     c3e:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:32
      Serial.println("DB: GSM_STATE=GSM_ON_STATE");
     c42:	6d e4       	ldi	r22, 0x4D	; 77
     c44:	71 e0       	ldi	r23, 0x01	; 1
     c46:	f9 cf       	rjmp	.-14     	; 0xc3a <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:35
      Serial.println("DB: GSM_STATE=GSM_PIN_STATE");
     c48:	68 e6       	ldi	r22, 0x68	; 104
     c4a:	71 e0       	ldi	r23, 0x01	; 1
     c4c:	f6 cf       	rjmp	.-20     	; 0xc3a <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:38
      Serial.println("DB: GSM_STATE=GSM_IP_STATE");
     c4e:	64 e8       	ldi	r22, 0x84	; 132
     c50:	71 e0       	ldi	r23, 0x01	; 1
     c52:	f3 cf       	rjmp	.-26     	; 0xc3a <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:41
      Serial.println("DB: GSM_STATE=GSM_TCP_STATE");
     c54:	6f e9       	ldi	r22, 0x9F	; 159
     c56:	71 e0       	ldi	r23, 0x01	; 1
     c58:	f0 cf       	rjmp	.-32     	; 0xc3a <Gsm_Ard::_change_gsm_state(GSM_STATE)+0x32>

00000c5a <Gsm_Ard::_clear_recv_buff()>:
_ZN7Gsm_Ard16_clear_recv_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:736
  _recv_buff_state=BUFF_USED;
  return 0;
}

void Gsm_Ard::_clear_recv_buff(){
  _recv_buff_idx=0;
     c5a:	fc 01       	movw	r30, r24
     c5c:	e0 58       	subi	r30, 0x80	; 128
     c5e:	fe 4f       	sbci	r31, 0xFE	; 254
     c60:	11 82       	std	Z+1, r1	; 0x01
     c62:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:737
  memset(_recv_buff, 0, RECV_BUFF_LEN);
     c64:	20 e8       	ldi	r18, 0x80	; 128
     c66:	fc 01       	movw	r30, r24
     c68:	11 92       	st	Z+, r1
     c6a:	2a 95       	dec	r18
     c6c:	e9 f7       	brne	.-6      	; 0xc68 <Gsm_Ard::_clear_recv_buff()+0xe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:738
  _recv_buff_state=BUFF_READY;
     c6e:	88 57       	subi	r24, 0x78	; 120
     c70:	9e 4f       	sbci	r25, 0xFE	; 254
     c72:	fc 01       	movw	r30, r24
     c74:	11 82       	std	Z+1, r1	; 0x01
     c76:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:739
}
     c78:	08 95       	ret

00000c7a <Gsm_Ard::_clear_rsp_buff()>:
_ZN7Gsm_Ard15_clear_rsp_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:742

void Gsm_Ard::_clear_rsp_buff(){
  _rsp_buff_idx=0;
     c7a:	fc 01       	movw	r30, r24
     c7c:	ee 57       	subi	r30, 0x7E	; 126
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	11 82       	std	Z+1, r1	; 0x01
     c82:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:743
  memset(_rsp_buff, 0, RSP_BUFF_LEN);
     c84:	e2 50       	subi	r30, 0x02	; 2
     c86:	f1 40       	sbci	r31, 0x01	; 1
     c88:	20 e8       	ldi	r18, 0x80	; 128
     c8a:	df 01       	movw	r26, r30
     c8c:	1d 92       	st	X+, r1
     c8e:	2a 95       	dec	r18
     c90:	e9 f7       	brne	.-6      	; 0xc8c <Gsm_Ard::_clear_rsp_buff()+0x12>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:744
  _rsp_buff_state=BUFF_READY;
     c92:	86 57       	subi	r24, 0x76	; 118
     c94:	9e 4f       	sbci	r25, 0xFE	; 254
     c96:	fc 01       	movw	r30, r24
     c98:	11 82       	std	Z+1, r1	; 0x01
     c9a:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:745
}
     c9c:	08 95       	ret

00000c9e <Gsm_Ard::_clear_sock_buff()>:
_ZN7Gsm_Ard16_clear_sock_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:748

void Gsm_Ard::_clear_sock_buff(){
  _sock_buff_idx=0;
     c9e:	fc 01       	movw	r30, r24
     ca0:	ec 57       	subi	r30, 0x7C	; 124
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	11 82       	std	Z+1, r1	; 0x01
     ca6:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:749
  memset(_sock_buff, 0, SOCK_BUFF_LEN);
     ca8:	e4 58       	subi	r30, 0x84	; 132
     caa:	f1 09       	sbc	r31, r1
     cac:	20 e8       	ldi	r18, 0x80	; 128
     cae:	df 01       	movw	r26, r30
     cb0:	1d 92       	st	X+, r1
     cb2:	2a 95       	dec	r18
     cb4:	e9 f7       	brne	.-6      	; 0xcb0 <Gsm_Ard::_clear_sock_buff()+0x12>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:750
  _sock_buff_state=BUFF_READY;
     cb6:	84 57       	subi	r24, 0x74	; 116
     cb8:	9e 4f       	sbci	r25, 0xFE	; 254
     cba:	fc 01       	movw	r30, r24
     cbc:	11 82       	std	Z+1, r1	; 0x01
     cbe:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:751
}
     cc0:	08 95       	ret

00000cc2 <Gsm_Ard::Gsm_Ard()>:
_ZN7Gsm_ArdC2Ev():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:12
Gsm_Ard::Gsm_Ard(){
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	ec 01       	movw	r28, r24
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	48 e0       	ldi	r20, 0x08	; 8
     ccc:	67 e0       	ldi	r22, 0x07	; 7
     cce:	82 57       	subi	r24, 0x72	; 114
     cd0:	9e 4f       	sbci	r25, 0xFE	; 254
     cd2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:13
  _gsm_state=GSM_OFF_STATE;
     cd6:	fe 01       	movw	r30, r28
     cd8:	ea 57       	subi	r30, 0x7A	; 122
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	11 82       	std	Z+1, r1	; 0x01
     cde:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:14
  _clear_recv_buff();
     ce0:	ce 01       	movw	r24, r28
     ce2:	bb df       	rcall	.-138    	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:15
  _clear_rsp_buff();
     ce4:	ce 01       	movw	r24, r28
     ce6:	c9 df       	rcall	.-110    	; 0xc7a <Gsm_Ard::_clear_rsp_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:16
  _clear_sock_buff();
     ce8:	ce 01       	movw	r24, r28
     cea:	d9 df       	rcall	.-78     	; 0xc9e <Gsm_Ard::_clear_sock_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:18
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     cec:	61 e3       	ldi	r22, 0x31	; 49
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	83 ea       	ldi	r24, 0xA3	; 163
     cf2:	94 e0       	ldi	r25, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:20
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:18
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     cf8:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <Print::println(char const*)>

00000cfc <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>:
_ZN7Gsm_Ard20_fetch_rsp_from_recvEPKcjPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:753

int Gsm_Ard::_fetch_rsp_from_recv(const char* cmd, unsigned int cmd_size, unsigned int* rsp_len){
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	ec 01       	movw	r28, r24
     d0a:	89 01       	movw	r16, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:755
  unsigned int i, start_idx;
  if(_rsp_buff_state!=BUFF_READY || _recv_buff_state!=BUFF_USED){
     d0c:	dc 01       	movw	r26, r24
     d0e:	a6 57       	subi	r26, 0x76	; 118
     d10:	be 4f       	sbci	r27, 0xFE	; 254
     d12:	8d 91       	ld	r24, X+
     d14:	9c 91       	ld	r25, X
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	89 2b       	or	r24, r25
     d1a:	09 f0       	breq	.+2      	; 0xd1e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x22>
     d1c:	8c c0       	rjmp	.+280    	; 0xe36 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x13a>
     d1e:	fe 01       	movw	r30, r28
     d20:	e8 57       	subi	r30, 0x78	; 120
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	09 f0       	breq	.+2      	; 0xd2e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x32>
     d2c:	84 c0       	rjmp	.+264    	; 0xe36 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x13a>
     d2e:	7b 01       	movw	r14, r22
     d30:	be 01       	movw	r22, r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:761
    #ifdef DEBUG
    dbg_print_error(__FILE__, __LINE__,  1);
    #endif
    return 1;
  }
  for(i=0;i<cmd_size;i++){
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	fb 01       	movw	r30, r22
     d38:	21 91       	ld	r18, Z+
     d3a:	bf 01       	movw	r22, r30
     d3c:	48 17       	cp	r20, r24
     d3e:	59 07       	cpc	r21, r25
     d40:	d1 f0       	breq	.+52     	; 0xd76 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x7a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:762
    if(cmd[i]!=_recv_buff[i]){
     d42:	f7 01       	movw	r30, r14
     d44:	31 91       	ld	r19, Z+
     d46:	7f 01       	movw	r14, r30
     d48:	32 17       	cp	r19, r18
     d4a:	99 f0       	breq	.+38     	; 0xd72 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x76>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:763
      _clear_recv_buff();
     d4c:	ce 01       	movw	r24, r28
     d4e:	85 df       	rcall	.-246    	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:765
      #ifdef DEBUG
      dbg_print_error(__FILE__, __LINE__,  2);
     d50:	42 e0       	ldi	r20, 0x02	; 2
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	6d ef       	ldi	r22, 0xFD	; 253
     d56:	72 e0       	ldi	r23, 0x02	; 2
     d58:	8b eb       	ldi	r24, 0xBB	; 187
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:767
      #endif
      return 2;
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:803

  _clear_recv_buff();

  *rsp_len=_rsp_buff_idx;
  return 0;
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:761
  for(i=0;i<cmd_size;i++){
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	e0 cf       	rjmp	.-64     	; 0xd36 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x3a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:771
  if(_recv_buff[i]!=CR_CHAR || _recv_buff[i+1]!=NL_CHAR || _recv_buff[i+2]!=CR_CHAR || _recv_buff[i+3]!=NL_CHAR){
     d76:	2d 30       	cpi	r18, 0x0D	; 13
     d78:	61 f4       	brne	.+24     	; 0xd92 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x96>
     d7a:	fe 01       	movw	r30, r28
     d7c:	e4 0f       	add	r30, r20
     d7e:	f5 1f       	adc	r31, r21
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	8a 30       	cpi	r24, 0x0A	; 10
     d84:	31 f4       	brne	.+12     	; 0xd92 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x96>
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	8d 30       	cpi	r24, 0x0D	; 13
     d8a:	19 f4       	brne	.+6      	; 0xd92 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x96>
     d8c:	83 81       	ldd	r24, Z+3	; 0x03
     d8e:	8a 30       	cpi	r24, 0x0A	; 10
     d90:	69 f0       	breq	.+26     	; 0xdac <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xb0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:772
    _clear_recv_buff();
     d92:	ce 01       	movw	r24, r28
     d94:	62 df       	rcall	.-316    	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:774
    dbg_print_error(__FILE__, __LINE__,  3);
     d96:	43 e0       	ldi	r20, 0x03	; 3
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	66 e0       	ldi	r22, 0x06	; 6
     d9c:	73 e0       	ldi	r23, 0x03	; 3
     d9e:	8b eb       	ldi	r24, 0xBB	; 187
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:776
    return 3;
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	dc cf       	rjmp	.-72     	; 0xd64 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x68>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:779
  i+=4;
     dac:	4c 5f       	subi	r20, 0xFC	; 252
     dae:	5f 4f       	sbci	r21, 0xFF	; 255
     db0:	fe 01       	movw	r30, r28
     db2:	e4 0f       	add	r30, r20
     db4:	f5 1f       	adc	r31, r21
     db6:	bf 01       	movw	r22, r30
     db8:	9f 01       	movw	r18, r30
     dba:	2c 1b       	sub	r18, r28
     dbc:	3d 0b       	sbc	r19, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:782
  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     dbe:	81 91       	ld	r24, Z+
     dc0:	8d 30       	cpi	r24, 0x0D	; 13
     dc2:	19 f0       	breq	.+6      	; 0xdca <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xce>
     dc4:	80 81       	ld	r24, Z
     dc6:	8a 30       	cpi	r24, 0x0A	; 10
     dc8:	b9 f7       	brne	.-18     	; 0xdb8 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xbc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:786
  if(i!=_recv_buff_idx-2){
     dca:	fe 01       	movw	r30, r28
     dcc:	e0 58       	subi	r30, 0x80	; 128
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	02 97       	sbiw	r24, 0x02	; 2
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	69 f0       	breq	.+26     	; 0xdf6 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xfa>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:787
    _clear_recv_buff();
     ddc:	ce 01       	movw	r24, r28
     dde:	3d df       	rcall	.-390    	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:789
    dbg_print_error(__FILE__, __LINE__,  4);
     de0:	44 e0       	ldi	r20, 0x04	; 4
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	65 e1       	ldi	r22, 0x15	; 21
     de6:	73 e0       	ldi	r23, 0x03	; 3
     de8:	8b eb       	ldi	r24, 0xBB	; 187
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:791
    return 4;
     df0:	84 e0       	ldi	r24, 0x04	; 4
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	b7 cf       	rjmp	.-146    	; 0xd64 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x68>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:794
  _rsp_buff_idx=i-start_idx;
     df6:	c9 01       	movw	r24, r18
     df8:	84 1b       	sub	r24, r20
     dfa:	95 0b       	sbc	r25, r21
     dfc:	ac 01       	movw	r20, r24
     dfe:	7e 01       	movw	r14, r28
     e00:	9e e7       	ldi	r25, 0x7E	; 126
     e02:	e9 1a       	sub	r14, r25
     e04:	9e ef       	ldi	r25, 0xFE	; 254
     e06:	f9 0a       	sbc	r15, r25
     e08:	f7 01       	movw	r30, r14
     e0a:	51 83       	std	Z+1, r21	; 0x01
     e0c:	40 83       	st	Z, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:795
  _rsp_buff_state=BUFF_USED;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	8d 93       	st	X+, r24
     e14:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:797
  strncpy(_rsp_buff, _recv_buff+start_idx, _rsp_buff_idx);
     e16:	ce 01       	movw	r24, r28
     e18:	80 58       	subi	r24, 0x80	; 128
     e1a:	9f 4f       	sbci	r25, 0xFF	; 255
     e1c:	0e 94 3e 1c 	call	0x387c	; 0x387c <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:799
  _clear_recv_buff();
     e20:	ce 01       	movw	r24, r28
     e22:	1b df       	rcall	.-458    	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:801
  *rsp_len=_rsp_buff_idx;
     e24:	f7 01       	movw	r30, r14
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	f8 01       	movw	r30, r16
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:802
  return 0;
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	97 cf       	rjmp	.-210    	; 0xd64 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x68>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:757
    dbg_print_error(__FILE__, __LINE__,  1);
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	65 ef       	ldi	r22, 0xF5	; 245
     e3c:	72 e0       	ldi	r23, 0x02	; 2
     e3e:	8b eb       	ldi	r24, 0xBB	; 187
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:759
    return 1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	8c cf       	rjmp	.-232    	; 0xd64 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x68>

00000e4c <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>:
_ZN7Gsm_Ard17_fetch_rsp_wo_cmdEPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:805

int Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int* rsp_len){
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	ec 01       	movw	r28, r24
     e5a:	8b 01       	movw	r16, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:807
  unsigned int i, start_idx;
  if(_rsp_buff_state!=BUFF_READY || _recv_buff_state!=BUFF_USED){
     e5c:	dc 01       	movw	r26, r24
     e5e:	a6 57       	subi	r26, 0x76	; 118
     e60:	be 4f       	sbci	r27, 0xFE	; 254
     e62:	8d 91       	ld	r24, X+
     e64:	9c 91       	ld	r25, X
     e66:	11 97       	sbiw	r26, 0x01	; 1
     e68:	89 2b       	or	r24, r25
     e6a:	09 f0       	breq	.+2      	; 0xe6e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x22>
     e6c:	59 c0       	rjmp	.+178    	; 0xf20 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xd4>
     e6e:	fe 01       	movw	r30, r28
     e70:	e8 57       	subi	r30, 0x78	; 120
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	09 f0       	breq	.+2      	; 0xe7e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x32>
     e7c:	51 c0       	rjmp	.+162    	; 0xf20 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xd4>
     e7e:	fe 01       	movw	r30, r28
     e80:	cf 01       	movw	r24, r30
     e82:	8c 1b       	sub	r24, r28
     e84:	9d 0b       	sbc	r25, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:814
    dbg_print_error(__FILE__, __LINE__,  1);
    #endif
    return 1;
  }
  start_idx=0;
  while(_recv_buff[start_idx]!=CR_CHAR || _recv_buff[start_idx+1]!=NL_CHAR){
     e86:	21 91       	ld	r18, Z+
     e88:	2d 30       	cpi	r18, 0x0D	; 13
     e8a:	d1 f7       	brne	.-12     	; 0xe80 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x34>
     e8c:	20 81       	ld	r18, Z
     e8e:	2a 30       	cpi	r18, 0x0A	; 10
     e90:	b9 f7       	brne	.-18     	; 0xe80 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x34>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:818
    start_idx++;
  }

  start_idx+=2;
     e92:	02 96       	adiw	r24, 0x02	; 2
     e94:	fe 01       	movw	r30, r28
     e96:	e8 0f       	add	r30, r24
     e98:	f9 1f       	adc	r31, r25
     e9a:	bf 01       	movw	r22, r30
     e9c:	af 01       	movw	r20, r30
     e9e:	4c 1b       	sub	r20, r28
     ea0:	5d 0b       	sbc	r21, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:821
  i=start_idx;

  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     ea2:	21 91       	ld	r18, Z+
     ea4:	2d 30       	cpi	r18, 0x0D	; 13
     ea6:	19 f0       	breq	.+6      	; 0xeae <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x62>
     ea8:	20 81       	ld	r18, Z
     eaa:	2a 30       	cpi	r18, 0x0A	; 10
     eac:	b9 f7       	brne	.-18     	; 0xe9c <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x50>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:825
    i++;
  }

  if(i!=_recv_buff_idx-2){
     eae:	fe 01       	movw	r30, r28
     eb0:	e0 58       	subi	r30, 0x80	; 128
     eb2:	fe 4f       	sbci	r31, 0xFE	; 254
     eb4:	20 81       	ld	r18, Z
     eb6:	31 81       	ldd	r19, Z+1	; 0x01
     eb8:	22 50       	subi	r18, 0x02	; 2
     eba:	31 09       	sbc	r19, r1
     ebc:	24 17       	cp	r18, r20
     ebe:	35 07       	cpc	r19, r21
     ec0:	89 f0       	breq	.+34     	; 0xee4 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x98>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:827
    #ifdef DEBUG
    dbg_print_error(__FILE__, __LINE__,  3);
     ec2:	43 e0       	ldi	r20, 0x03	; 3
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	6b e3       	ldi	r22, 0x3B	; 59
     ec8:	73 e0       	ldi	r23, 0x03	; 3
     eca:	8b eb       	ldi	r24, 0xBB	; 187
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:829
    #endif
    return 3;
     ed2:	83 e0       	ldi	r24, 0x03	; 3
     ed4:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:841

  _clear_recv_buff();

  *rsp_len=_rsp_buff_idx;
  return 0;
}
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:832
  _rsp_buff_idx=i-start_idx;
     ee4:	48 1b       	sub	r20, r24
     ee6:	59 0b       	sbc	r21, r25
     ee8:	7e 01       	movw	r14, r28
     eea:	8e e7       	ldi	r24, 0x7E	; 126
     eec:	e8 1a       	sub	r14, r24
     eee:	8e ef       	ldi	r24, 0xFE	; 254
     ef0:	f8 0a       	sbc	r15, r24
     ef2:	f7 01       	movw	r30, r14
     ef4:	51 83       	std	Z+1, r21	; 0x01
     ef6:	40 83       	st	Z, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:833
  _rsp_buff_state=BUFF_USED;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	8d 93       	st	X+, r24
     efe:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:835
  strncpy(_rsp_buff, _recv_buff+start_idx, _rsp_buff_idx);
     f00:	ce 01       	movw	r24, r28
     f02:	80 58       	subi	r24, 0x80	; 128
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	0e 94 3e 1c 	call	0x387c	; 0x387c <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:837
  _clear_recv_buff();
     f0a:	ce 01       	movw	r24, r28
     f0c:	a6 de       	rcall	.-692    	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:839
  *rsp_len=_rsp_buff_idx;
     f0e:	f7 01       	movw	r30, r14
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	f8 01       	movw	r30, r16
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:840
  return 0;
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	db cf       	rjmp	.-74     	; 0xed6 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x8a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:809
    dbg_print_error(__FILE__, __LINE__,  1);
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	69 e2       	ldi	r22, 0x29	; 41
     f26:	73 e0       	ldi	r23, 0x03	; 3
     f28:	8b eb       	ldi	r24, 0xBB	; 187
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:811
    return 1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	d0 cf       	rjmp	.-96     	; 0xed6 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x8a>

00000f36 <Gsm_Ard::_get_rsp(char**)>:
_ZN7Gsm_Ard8_get_rspEPPc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:888
  }

  return 0;
}

int Gsm_Ard::_get_rsp(char** rsp){
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	ec 01       	movw	r28, r24
     f3c:	fb 01       	movw	r30, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:889
  if(_rsp_buff_state!=BUFF_USED){
     f3e:	dc 01       	movw	r26, r24
     f40:	a6 57       	subi	r26, 0x76	; 118
     f42:	be 4f       	sbci	r27, 0xFE	; 254
     f44:	8d 91       	ld	r24, X+
     f46:	9c 91       	ld	r25, X
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	69 f0       	breq	.+26     	; 0xf66 <Gsm_Ard::_get_rsp(char**)+0x30>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:891
    #ifdef DEBUG
    dbg_print_error(__FILE__, __LINE__,  1);
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	6b e7       	ldi	r22, 0x7B	; 123
     f52:	73 e0       	ldi	r23, 0x03	; 3
     f54:	8b eb       	ldi	r24, 0xBB	; 187
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:893
    #endif
    return 1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:898
  }
  strncpy(*rsp, _rsp_buff, _rsp_buff_idx);
  _clear_rsp_buff();
  return 0;
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:895
  strncpy(*rsp, _rsp_buff, _rsp_buff_idx);
     f66:	de 01       	movw	r26, r28
     f68:	ae 57       	subi	r26, 0x7E	; 126
     f6a:	be 4f       	sbci	r27, 0xFE	; 254
     f6c:	4d 91       	ld	r20, X+
     f6e:	5c 91       	ld	r21, X
     f70:	be 01       	movw	r22, r28
     f72:	60 58       	subi	r22, 0x80	; 128
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	0e 94 3e 1c 	call	0x387c	; 0x387c <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:896
  _clear_rsp_buff();
     f7e:	ce 01       	movw	r24, r28
     f80:	7c de       	rcall	.-776    	; 0xc7a <Gsm_Ard::_clear_rsp_buff()>
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	ec cf       	rjmp	.-40     	; 0xf60 <Gsm_Ard::_get_rsp(char**)+0x2a>

00000f88 <Gsm_Ard::get_socket_rsp(char**)>:
_ZN7Gsm_Ard14get_socket_rspEPPc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:935
  }

  return 0;
}

int Gsm_Ard::get_socket_rsp(char** data){
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
     f9e:	5b 01       	movw	r10, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:936
  if(_sock_buff_state!=BUFF_USED){
     fa0:	fc 01       	movw	r30, r24
     fa2:	e4 57       	subi	r30, 0x74	; 116
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	80 81       	ld	r24, Z
     fa8:	91 81       	ldd	r25, Z+1	; 0x01
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	a9 f0       	breq	.+42     	; 0xfd8 <Gsm_Ard::get_socket_rsp(char**)+0x50>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:938
    #ifdef DEBUG
    dbg_print_error(__FILE__, __LINE__,  1);
     fae:	41 e0       	ldi	r20, 0x01	; 1
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	6a ea       	ldi	r22, 0xAA	; 170
     fb4:	73 e0       	ldi	r23, 0x03	; 3
     fb6:	8b eb       	ldi	r24, 0xBB	; 187
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:940
    #endif
    return 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:950

  memcpy(*data, _sock_buff, _sock_buff_idx);
  _clear_sock_buff();

  return 0;
}
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:943
  dbg_print_sock_buffer(__FILE__, __LINE__, "SOCKET BUFFER", _sock_buff,
     fd8:	7e 01       	movw	r14, r28
     fda:	f3 94       	inc	r15
     fdc:	6e 01       	movw	r12, r28
     fde:	ec e7       	ldi	r30, 0x7C	; 124
     fe0:	ce 1a       	sub	r12, r30
     fe2:	ee ef       	ldi	r30, 0xFE	; 254
     fe4:	de 0a       	sbc	r13, r30
     fe6:	f6 01       	movw	r30, r12
     fe8:	00 81       	ld	r16, Z
     fea:	11 81       	ldd	r17, Z+1	; 0x01
     fec:	97 01       	movw	r18, r14
     fee:	42 ef       	ldi	r20, 0xF2	; 242
     ff0:	51 e0       	ldi	r21, 0x01	; 1
     ff2:	6f ea       	ldi	r22, 0xAF	; 175
     ff4:	73 e0       	ldi	r23, 0x03	; 3
     ff6:	8b eb       	ldi	r24, 0xBB	; 187
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	0e 94 3a 13 	call	0x2674	; 0x2674 <dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:946
  memcpy(*data, _sock_buff, _sock_buff_idx);
     ffe:	f6 01       	movw	r30, r12
    1000:	40 81       	ld	r20, Z
    1002:	51 81       	ldd	r21, Z+1	; 0x01
    1004:	b7 01       	movw	r22, r14
    1006:	f5 01       	movw	r30, r10
    1008:	80 81       	ld	r24, Z
    100a:	91 81       	ldd	r25, Z+1	; 0x01
    100c:	0e 94 27 1c 	call	0x384e	; 0x384e <memcpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:947
  _clear_sock_buff();
    1010:	ce 01       	movw	r24, r28
    1012:	45 de       	rcall	.-886    	; 0xc9e <Gsm_Ard::_clear_sock_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:949
  return 0;
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	d4 cf       	rjmp	.-88     	; 0xfc2 <Gsm_Ard::get_socket_rsp(char**)+0x3a>

0000101a <Gsm_Ard::_write_cmd(char const*)>:
_ZN7Gsm_Ard10_write_cmdEPKc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:900
void Gsm_Ard::_write_cmd(const char* cmd){
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:901
  unsigned int cmd_len=strlen(cmd);
    1026:	fb 01       	movw	r30, r22
    1028:	01 90       	ld	r0, Z+
    102a:	00 20       	and	r0, r0
    102c:	e9 f7       	brne	.-6      	; 0x1028 <Gsm_Ard::_write_cmd(char const*)+0xe>
    102e:	eb 01       	movw	r28, r22
    1030:	9f 01       	movw	r18, r30
    1032:	21 50       	subi	r18, 0x01	; 1
    1034:	31 09       	sbc	r19, r1
    1036:	79 01       	movw	r14, r18
    1038:	8c 01       	movw	r16, r24
    103a:	02 57       	subi	r16, 0x72	; 114
    103c:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:902
  for(unsigned int i=0;i<cmd_len;i++){
    103e:	ce 15       	cp	r28, r14
    1040:	df 05       	cpc	r29, r15
    1042:	29 f0       	breq	.+10     	; 0x104e <Gsm_Ard::_write_cmd(char const*)+0x34>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:903
    _ss.write(cmd[i]);
    1044:	69 91       	ld	r22, Y+
    1046:	c8 01       	movw	r24, r16
    1048:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:902
  for(unsigned int i=0;i<cmd_len;i++){
    104c:	f8 cf       	rjmp	.-16     	; 0x103e <Gsm_Ard::_write_cmd(char const*)+0x24>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:905
  _ss.write(CR_CHAR);
    104e:	6d e0       	ldi	r22, 0x0D	; 13
    1050:	c8 01       	movw	r24, r16
    1052:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:906
  _ss.write(NL_CHAR);
    1056:	6a e0       	ldi	r22, 0x0A	; 10
    1058:	c8 01       	movw	r24, r16
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:907
}
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:906
  _ss.write(NL_CHAR);
    1066:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <SoftwareSerial::write(unsigned char)>

0000106a <Gsm_Ard::_recv_string(int, int)>:
_ZN7Gsm_Ard12_recv_stringEii():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:551
int Gsm_Ard::_recv_string(int wait_period, int max_nl){
    106a:	4f 92       	push	r4
    106c:	5f 92       	push	r5
    106e:	6f 92       	push	r6
    1070:	7f 92       	push	r7
    1072:	8f 92       	push	r8
    1074:	9f 92       	push	r9
    1076:	af 92       	push	r10
    1078:	bf 92       	push	r11
    107a:	cf 92       	push	r12
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	ec 01       	movw	r28, r24
    108c:	cb 01       	movw	r24, r22
    108e:	6a 01       	movw	r12, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:552
  if(_recv_buff_state!=BUFF_READY){
    1090:	fe 01       	movw	r30, r28
    1092:	e8 57       	subi	r30, 0x78	; 120
    1094:	fe 4f       	sbci	r31, 0xFE	; 254
    1096:	20 81       	ld	r18, Z
    1098:	31 81       	ldd	r19, Z+1	; 0x01
    109a:	23 2b       	or	r18, r19
    109c:	09 f0       	breq	.+2      	; 0x10a0 <Gsm_Ard::_recv_string(int, int)+0x36>
    109e:	ae c0       	rjmp	.+348    	; 0x11fc <Gsm_Ard::_recv_string(int, int)+0x192>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:557
  _recv_buff_state=BUFF_USED;
    10a0:	21 e0       	ldi	r18, 0x01	; 1
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	31 83       	std	Z+1, r19	; 0x01
    10a6:	20 83       	st	Z, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:562
      delay(wait_period/10);
    10a8:	6a e0       	ldi	r22, 0x0A	; 10
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	0e 94 84 1a 	call	0x3508	; 0x3508 <__divmodhi4>
    10b0:	2b 01       	movw	r4, r22
    10b2:	77 0f       	add	r23, r23
    10b4:	66 08       	sbc	r6, r6
    10b6:	77 08       	sbc	r7, r7
    10b8:	8a e0       	ldi	r24, 0x0A	; 10
    10ba:	88 2e       	mov	r8, r24
    10bc:	91 2c       	mov	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:555
  int nl_counter=0;
    10be:	f1 2c       	mov	r15, r1
    10c0:	e1 2c       	mov	r14, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:561
    if(!_ss.available()){
    10c2:	8e 01       	movw	r16, r28
    10c4:	02 57       	subi	r16, 0x72	; 114
    10c6:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:565
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && nl_counter<max_nl){
    10c8:	5e 01       	movw	r10, r28
    10ca:	80 e8       	ldi	r24, 0x80	; 128
    10cc:	a8 1a       	sub	r10, r24
    10ce:	8e ef       	ldi	r24, 0xFE	; 254
    10d0:	b8 0a       	sbc	r11, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:560
  for(int i=0;i<10 && nl_counter<max_nl;i++){
    10d2:	ec 14       	cp	r14, r12
    10d4:	fd 04       	cpc	r15, r13
    10d6:	74 f4       	brge	.+28     	; 0x10f4 <Gsm_Ard::_recv_string(int, int)+0x8a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:561
    if(!_ss.available()){
    10d8:	c8 01       	movw	r24, r16
    10da:	0e 94 4e 14 	call	0x289c	; 0x289c <SoftwareSerial::available()>
    10de:	89 2b       	or	r24, r25
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <Gsm_Ard::_recv_string(int, int)+0x7a>
    10e2:	3d c0       	rjmp	.+122    	; 0x115e <Gsm_Ard::_recv_string(int, int)+0xf4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:562
      delay(wait_period/10);
    10e4:	c3 01       	movw	r24, r6
    10e6:	b2 01       	movw	r22, r4
    10e8:	0e 94 99 16 	call	0x2d32	; 0x2d32 <delay>
    10ec:	e1 e0       	ldi	r30, 0x01	; 1
    10ee:	8e 1a       	sub	r8, r30
    10f0:	91 08       	sbc	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:560
  for(int i=0;i<10 && nl_counter<max_nl;i++){
    10f2:	79 f7       	brne	.-34     	; 0x10d2 <Gsm_Ard::_recv_string(int, int)+0x68>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:575
  dbg_print_serial_buffer(__FILE__, __LINE__, "RECV_BUFFER", _recv_buff,
    10f4:	5e 01       	movw	r10, r28
    10f6:	f0 e8       	ldi	r31, 0x80	; 128
    10f8:	af 1a       	sub	r10, r31
    10fa:	fe ef       	ldi	r31, 0xFE	; 254
    10fc:	bf 0a       	sbc	r11, r31
    10fe:	d5 01       	movw	r26, r10
    1100:	0d 91       	ld	r16, X+
    1102:	1c 91       	ld	r17, X
    1104:	9e 01       	movw	r18, r28
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	52 e0       	ldi	r21, 0x02	; 2
    110a:	6f e3       	ldi	r22, 0x3F	; 63
    110c:	72 e0       	ldi	r23, 0x02	; 2
    110e:	8b eb       	ldi	r24, 0xBB	; 187
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:579
  if(_recv_buff_idx==RECV_BUFF_LEN){
    1116:	f5 01       	movw	r30, r10
    1118:	80 81       	ld	r24, Z
    111a:	91 81       	ldd	r25, Z+1	; 0x01
    111c:	80 38       	cpi	r24, 0x80	; 128
    111e:	91 05       	cpc	r25, r1
    1120:	09 f0       	breq	.+2      	; 0x1124 <Gsm_Ard::_recv_string(int, int)+0xba>
    1122:	4a c0       	rjmp	.+148    	; 0x11b8 <Gsm_Ard::_recv_string(int, int)+0x14e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:580
    _clear_recv_buff();
    1124:	ce 01       	movw	r24, r28
    1126:	99 dd       	rcall	.-1230   	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:582
    dbg_print_error(__FILE__, __LINE__,  2);
    1128:	42 e0       	ldi	r20, 0x02	; 2
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	66 e4       	ldi	r22, 0x46	; 70
    112e:	72 e0       	ldi	r23, 0x02	; 2
    1130:	8b eb       	ldi	r24, 0xBB	; 187
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:584
    return 2;
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:601
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	df 90       	pop	r13
    114a:	cf 90       	pop	r12
    114c:	bf 90       	pop	r11
    114e:	af 90       	pop	r10
    1150:	9f 90       	pop	r9
    1152:	8f 90       	pop	r8
    1154:	7f 90       	pop	r7
    1156:	6f 90       	pop	r6
    1158:	5f 90       	pop	r5
    115a:	4f 90       	pop	r4
    115c:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:565
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && nl_counter<max_nl){
    115e:	c8 01       	movw	r24, r16
    1160:	0e 94 4e 14 	call	0x289c	; 0x289c <SoftwareSerial::available()>
    1164:	89 2b       	or	r24, r25
    1166:	09 f4       	brne	.+2      	; 0x116a <Gsm_Ard::_recv_string(int, int)+0x100>
    1168:	c1 cf       	rjmp	.-126    	; 0x10ec <Gsm_Ard::_recv_string(int, int)+0x82>
    116a:	d5 01       	movw	r26, r10
    116c:	8d 91       	ld	r24, X+
    116e:	9c 91       	ld	r25, X
    1170:	80 38       	cpi	r24, 0x80	; 128
    1172:	91 05       	cpc	r25, r1
    1174:	08 f0       	brcs	.+2      	; 0x1178 <Gsm_Ard::_recv_string(int, int)+0x10e>
    1176:	ba cf       	rjmp	.-140    	; 0x10ec <Gsm_Ard::_recv_string(int, int)+0x82>
    1178:	ec 14       	cp	r14, r12
    117a:	fd 04       	cpc	r15, r13
    117c:	0c f0       	brlt	.+2      	; 0x1180 <Gsm_Ard::_recv_string(int, int)+0x116>
    117e:	b6 cf       	rjmp	.-148    	; 0x10ec <Gsm_Ard::_recv_string(int, int)+0x82>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:566
        _recv_buff[_recv_buff_idx++]=_ss.read();
    1180:	c8 01       	movw	r24, r16
    1182:	0e 94 b8 13 	call	0x2770	; 0x2770 <SoftwareSerial::read()>
    1186:	d5 01       	movw	r26, r10
    1188:	ed 91       	ld	r30, X+
    118a:	fc 91       	ld	r31, X
    118c:	11 97       	sbiw	r26, 0x01	; 1
    118e:	9f 01       	movw	r18, r30
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	2d 93       	st	X+, r18
    1196:	3c 93       	st	X, r19
    1198:	ec 0f       	add	r30, r28
    119a:	fd 1f       	adc	r31, r29
    119c:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:567
        if(_recv_buff_idx>1 && _recv_buff[_recv_buff_idx-1]==NL_CHAR && _recv_buff[_recv_buff_idx-2]==CR_CHAR){
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	e8 f2       	brcs	.-70     	; 0x115e <Gsm_Ard::_recv_string(int, int)+0xf4>
    11a4:	8a 30       	cpi	r24, 0x0A	; 10
    11a6:	d9 f6       	brne	.-74     	; 0x115e <Gsm_Ard::_recv_string(int, int)+0xf4>
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	80 81       	ld	r24, Z
    11ac:	8d 30       	cpi	r24, 0x0D	; 13
    11ae:	b9 f6       	brne	.-82     	; 0x115e <Gsm_Ard::_recv_string(int, int)+0xf4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:568
          nl_counter++;
    11b0:	bf ef       	ldi	r27, 0xFF	; 255
    11b2:	eb 1a       	sub	r14, r27
    11b4:	fb 0a       	sbc	r15, r27
    11b6:	d3 cf       	rjmp	.-90     	; 0x115e <Gsm_Ard::_recv_string(int, int)+0xf4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:586
  else if(!_recv_buff_idx){
    11b8:	89 2b       	or	r24, r25
    11ba:	69 f4       	brne	.+26     	; 0x11d6 <Gsm_Ard::_recv_string(int, int)+0x16c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:587
    _clear_recv_buff();
    11bc:	ce 01       	movw	r24, r28
    11be:	4d dd       	rcall	.-1382   	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:589
    dbg_print_error(__FILE__, __LINE__,  3);
    11c0:	43 e0       	ldi	r20, 0x03	; 3
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	6d e4       	ldi	r22, 0x4D	; 77
    11c6:	72 e0       	ldi	r23, 0x02	; 2
    11c8:	8b eb       	ldi	r24, 0xBB	; 187
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:591
    return 3;
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	b3 cf       	rjmp	.-154    	; 0x113c <Gsm_Ard::_recv_string(int, int)+0xd2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:600
  return 0;
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	80 e0       	ldi	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:593
  else if(nl_counter!=max_nl){
    11da:	ce 14       	cp	r12, r14
    11dc:	df 04       	cpc	r13, r15
    11de:	09 f4       	brne	.+2      	; 0x11e2 <Gsm_Ard::_recv_string(int, int)+0x178>
    11e0:	ad cf       	rjmp	.-166    	; 0x113c <Gsm_Ard::_recv_string(int, int)+0xd2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:594
    _clear_recv_buff();
    11e2:	ce 01       	movw	r24, r28
    11e4:	3a dd       	rcall	.-1420   	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:596
    dbg_print_error(__FILE__, __LINE__,  4);
    11e6:	44 e0       	ldi	r20, 0x04	; 4
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	64 e5       	ldi	r22, 0x54	; 84
    11ec:	72 e0       	ldi	r23, 0x02	; 2
    11ee:	8b eb       	ldi	r24, 0xBB	; 187
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:598
    return 4;
    11f6:	84 e0       	ldi	r24, 0x04	; 4
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 cf       	rjmp	.-192    	; 0x113c <Gsm_Ard::_recv_string(int, int)+0xd2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:553
    return 1;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	9d cf       	rjmp	.-198    	; 0x113c <Gsm_Ard::_recv_string(int, int)+0xd2>

00001202 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)>:
_ZN7Gsm_Ard16_no_cmd_comp_rspEPKcji():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:490
int Gsm_Ard::_no_cmd_comp_rsp(const char* exp_rsp, const uint16_t exp_rsp_size, int recv_wait_period){
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	00 d0       	rcall	.+0      	; 0x1214 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x12>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x14>
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	8c 01       	movw	r16, r24
    121c:	6b 01       	movw	r12, r22
    121e:	7a 01       	movw	r14, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:495
  n=_recv_string(recv_wait_period,2);
    1220:	42 e0       	ldi	r20, 0x02	; 2
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	b9 01       	movw	r22, r18
    1226:	21 df       	rcall	.-446    	; 0x106a <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:496
  if(n){
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	e9 f0       	breq	.+58     	; 0x1266 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x64>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:498
    dbg_print_error(__FILE__, __LINE__,  1+n*10);
    122c:	2a e0       	ldi	r18, 0x0A	; 10
    122e:	28 9f       	mul	r18, r24
    1230:	80 01       	movw	r16, r0
    1232:	29 9f       	mul	r18, r25
    1234:	10 0d       	add	r17, r0
    1236:	11 24       	eor	r1, r1
    1238:	0f 5f       	subi	r16, 0xFF	; 255
    123a:	1f 4f       	sbci	r17, 0xFF	; 255
    123c:	a8 01       	movw	r20, r16
    123e:	62 ef       	ldi	r22, 0xF2	; 242
    1240:	71 e0       	ldi	r23, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:507
    dbg_print_error(__FILE__, __LINE__,  2+n*10);
    1242:	8b eb       	ldi	r24, 0xBB	; 187
    1244:	91 e0       	ldi	r25, 0x01	; 1
    1246:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:543
}
    124a:	c8 01       	movw	r24, r16
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:504
  n=_fetch_rsp_wo_cmd(&rsp_len);
    1266:	be 01       	movw	r22, r28
    1268:	6d 5f       	subi	r22, 0xFD	; 253
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	c8 01       	movw	r24, r16
    126e:	ee dd       	rcall	.-1060   	; 0xe4c <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:505
  if(n){
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 f0       	breq	.+24     	; 0x128c <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x8a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:507
    dbg_print_error(__FILE__, __LINE__,  2+n*10);
    1274:	2a e0       	ldi	r18, 0x0A	; 10
    1276:	28 9f       	mul	r18, r24
    1278:	80 01       	movw	r16, r0
    127a:	29 9f       	mul	r18, r25
    127c:	10 0d       	add	r17, r0
    127e:	11 24       	eor	r1, r1
    1280:	0e 5f       	subi	r16, 0xFE	; 254
    1282:	1f 4f       	sbci	r17, 0xFF	; 255
    1284:	a8 01       	movw	r20, r16
    1286:	6b ef       	ldi	r22, 0xFB	; 251
    1288:	71 e0       	ldi	r23, 0x01	; 1
    128a:	db cf       	rjmp	.-74     	; 0x1242 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x40>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:512
  rsp=new char[rsp_len];
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:513
  n=_get_rsp(&rsp);
    1298:	be 01       	movw	r22, r28
    129a:	6f 5f       	subi	r22, 0xFF	; 255
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	c8 01       	movw	r24, r16
    12a0:	4a de       	rcall	.-876    	; 0xf36 <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:514
  if(n){
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	b9 f0       	breq	.+46     	; 0x12d4 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0xd2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:515
    ret=3+n*10;
    12a6:	2a e0       	ldi	r18, 0x0A	; 10
    12a8:	28 9f       	mul	r18, r24
    12aa:	80 01       	movw	r16, r0
    12ac:	29 9f       	mul	r18, r25
    12ae:	10 0d       	add	r17, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	0d 5f       	subi	r16, 0xFD	; 253
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:529
  dbg_print_error(__FILE__, __LINE__,  ret);
    12b6:	a8 01       	movw	r20, r16
    12b8:	61 e1       	ldi	r22, 0x11	; 17
    12ba:	72 e0       	ldi	r23, 0x02	; 2
    12bc:	8b eb       	ldi	r24, 0xBB	; 187
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:541
  delete[] rsp;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	09 f4       	brne	.+2      	; 0x12ce <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0xcc>
    12cc:	be cf       	rjmp	.-132    	; 0x124a <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x48>
    12ce:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
    12d2:	bb cf       	rjmp	.-138    	; 0x124a <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x48>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:519
  exp_rsp_buffer = new char[exp_rsp_size];
    12d4:	c7 01       	movw	r24, r14
    12d6:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
    12da:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:521
  strcpy_P(exp_rsp_buffer, exp_rsp);
    12dc:	b6 01       	movw	r22, r12
    12de:	0e 94 20 1c 	call	0x3840	; 0x3840 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:523
  if(!strncmp(rsp, exp_rsp_buffer, rsp_len)) ret=0;
    12e2:	4b 81       	ldd	r20, Y+3	; 0x03
    12e4:	5c 81       	ldd	r21, Y+4	; 0x04
    12e6:	b7 01       	movw	r22, r14
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	0e 94 30 1c 	call	0x3860	; 0x3860 <strncmp>
    12f0:	8c 01       	movw	r16, r24
    12f2:	89 2b       	or	r24, r25
    12f4:	51 f0       	breq	.+20     	; 0x130a <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0x108>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:537
    dbg_print_error(__FILE__, __LINE__,  ret);
    12f6:	44 e0       	ldi	r20, 0x04	; 4
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	69 e1       	ldi	r22, 0x19	; 25
    12fc:	72 e0       	ldi	r23, 0x02	; 2
    12fe:	8b eb       	ldi	r24, 0xBB	; 187
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:524
  else ret=4;
    1306:	04 e0       	ldi	r16, 0x04	; 4
    1308:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:540
  delete[] exp_rsp_buffer;
    130a:	e1 14       	cp	r14, r1
    130c:	f1 04       	cpc	r15, r1
    130e:	d1 f2       	breq	.-76     	; 0x12c4 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0xc2>
    1310:	c7 01       	movw	r24, r14
    1312:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
    1316:	d6 cf       	rjmp	.-84     	; 0x12c4 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)+0xc2>

00001318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>:
_ZN7Gsm_Ard18_send_cmd_comp_rspEPKcjS1_ji():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:373
int Gsm_Ard::_send_cmd_comp_rsp(const char* cmd, const uint16_t cmd_size, const char* exp_rsp, const uint16_t exp_rsp_size, int recv_wait_period){
    1318:	2f 92       	push	r2
    131a:	3f 92       	push	r3
    131c:	4f 92       	push	r4
    131e:	5f 92       	push	r5
    1320:	6f 92       	push	r6
    1322:	7f 92       	push	r7
    1324:	8f 92       	push	r8
    1326:	9f 92       	push	r9
    1328:	af 92       	push	r10
    132a:	bf 92       	push	r11
    132c:	cf 92       	push	r12
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	00 d0       	rcall	.+0      	; 0x133e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x26>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x28>
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	6c 01       	movw	r12, r24
    1346:	1b 01       	movw	r2, r22
    1348:	5a 01       	movw	r10, r20
    134a:	49 01       	movw	r8, r18
    134c:	27 01       	movw	r4, r14
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:378
  char* cmd_buffer = new char[cmd_size];
    134e:	ca 01       	movw	r24, r20
    1350:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
    1354:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:379
  char* exp_rsp_buffer = new char[exp_rsp_size];
    1356:	c8 01       	movw	r24, r16
    1358:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
    135c:	3c 01       	movw	r6, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:380
  strcpy_P(cmd_buffer, cmd);
    135e:	b1 01       	movw	r22, r2
    1360:	c7 01       	movw	r24, r14
    1362:	0e 94 20 1c 	call	0x3840	; 0x3840 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:381
  strcpy_P(exp_rsp_buffer, exp_rsp);
    1366:	b4 01       	movw	r22, r8
    1368:	c3 01       	movw	r24, r6
    136a:	0e 94 20 1c 	call	0x3840	; 0x3840 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:383
  while(_ss.available()) _ss.read();
    136e:	86 01       	movw	r16, r12
    1370:	02 57       	subi	r16, 0x72	; 114
    1372:	1e 4f       	sbci	r17, 0xFE	; 254
    1374:	c8 01       	movw	r24, r16
    1376:	0e 94 4e 14 	call	0x289c	; 0x289c <SoftwareSerial::available()>
    137a:	89 2b       	or	r24, r25
    137c:	21 f0       	breq	.+8      	; 0x1386 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x6e>
    137e:	c8 01       	movw	r24, r16
    1380:	0e 94 b8 13 	call	0x2770	; 0x2770 <SoftwareSerial::read()>
    1384:	f7 cf       	rjmp	.-18     	; 0x1374 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x5c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:386
  dbg_print_serial_buffer(__FILE__, __LINE__, "CMD_BUFFER", cmd_buffer, cmd_size);
    1386:	85 01       	movw	r16, r10
    1388:	97 01       	movw	r18, r14
    138a:	4c e0       	ldi	r20, 0x0C	; 12
    138c:	52 e0       	ldi	r21, 0x02	; 2
    138e:	62 e8       	ldi	r22, 0x82	; 130
    1390:	71 e0       	ldi	r23, 0x01	; 1
    1392:	8b eb       	ldi	r24, 0xBB	; 187
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:389
  _write_cmd(cmd_buffer);
    139a:	b7 01       	movw	r22, r14
    139c:	c6 01       	movw	r24, r12
    139e:	3d de       	rcall	.-902    	; 0x101a <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:390
  n=_recv_string(recv_wait_period);
    13a0:	43 e0       	ldi	r20, 0x03	; 3
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	b2 01       	movw	r22, r4
    13a6:	c6 01       	movw	r24, r12
    13a8:	60 de       	rcall	.-832    	; 0x106a <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:391
  if(!n){
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x98>
    13ae:	68 c0       	rjmp	.+208    	; 0x1480 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x168>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:392
    n=_fetch_rsp_from_recv(cmd_buffer, cmd_size, &rsp_len);
    13b0:	9e 01       	movw	r18, r28
    13b2:	2f 5f       	subi	r18, 0xFF	; 255
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	a5 01       	movw	r20, r10
    13b8:	b7 01       	movw	r22, r14
    13ba:	c6 01       	movw	r24, r12
    13bc:	9f dc       	rcall	.-1730   	; 0xcfc <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:393
    if(!n){
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xac>
    13c2:	55 c0       	rjmp	.+170    	; 0x146e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x156>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:394
      rsp=new char[rsp_len];
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
    13cc:	9c 83       	std	Y+4, r25	; 0x04
    13ce:	8b 83       	std	Y+3, r24	; 0x03
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:395
      n=_get_rsp(&rsp);
    13d0:	be 01       	movw	r22, r28
    13d2:	6d 5f       	subi	r22, 0xFD	; 253
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	c6 01       	movw	r24, r12
    13d8:	ae dd       	rcall	.-1188   	; 0xf36 <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:396
      if(n){
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	99 f0       	breq	.+38     	; 0x1404 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xec>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:397
        error=2+10*n;
    13de:	2a e0       	ldi	r18, 0x0A	; 10
    13e0:	28 9f       	mul	r18, r24
    13e2:	80 01       	movw	r16, r0
    13e4:	29 9f       	mul	r18, r25
    13e6:	10 0d       	add	r17, r0
    13e8:	11 24       	eor	r1, r1
    13ea:	0e 5f       	subi	r16, 0xFE	; 254
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:421
  if(error){
    13ee:	01 15       	cp	r16, r1
    13f0:	11 05       	cpc	r17, r1
    13f2:	89 f0       	breq	.+34     	; 0x1416 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xfe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:422
    dbg_print_error(__FILE__, __LINE__, error);
    13f4:	a8 01       	movw	r20, r16
    13f6:	66 ea       	ldi	r22, 0xA6	; 166
    13f8:	71 e0       	ldi	r23, 0x01	; 1
    13fa:	8b eb       	ldi	r24, 0xBB	; 187
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
    1402:	0b c0       	rjmp	.+22     	; 0x141a <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x102>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:400
      if(!strncmp(rsp, exp_rsp_buffer, rsp_len)){
    1404:	49 81       	ldd	r20, Y+1	; 0x01
    1406:	5a 81       	ldd	r21, Y+2	; 0x02
    1408:	b3 01       	movw	r22, r6
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	0e 94 30 1c 	call	0x3860	; 0x3860 <strncmp>
    1412:	89 2b       	or	r24, r25
    1414:	f1 f5       	brne	.+124    	; 0x1492 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x17a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:401
        error=0;
    1416:	10 e0       	ldi	r17, 0x00	; 0
    1418:	00 e0       	ldi	r16, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:425
  delete[] cmd_buffer;
    141a:	e1 14       	cp	r14, r1
    141c:	f1 04       	cpc	r15, r1
    141e:	19 f0       	breq	.+6      	; 0x1426 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x10e>
    1420:	c7 01       	movw	r24, r14
    1422:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:426
  delete[] exp_rsp_buffer;
    1426:	61 14       	cp	r6, r1
    1428:	71 04       	cpc	r7, r1
    142a:	19 f0       	breq	.+6      	; 0x1432 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x11a>
    142c:	c3 01       	movw	r24, r6
    142e:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:427
  delete[] rsp;
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	11 f0       	breq	.+4      	; 0x143e <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0x126>
    143a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:429
}
    143e:	c8 01       	movw	r24, r16
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	1f 91       	pop	r17
    144e:	0f 91       	pop	r16
    1450:	ff 90       	pop	r15
    1452:	ef 90       	pop	r14
    1454:	df 90       	pop	r13
    1456:	cf 90       	pop	r12
    1458:	bf 90       	pop	r11
    145a:	af 90       	pop	r10
    145c:	9f 90       	pop	r9
    145e:	8f 90       	pop	r8
    1460:	7f 90       	pop	r7
    1462:	6f 90       	pop	r6
    1464:	5f 90       	pop	r5
    1466:	4f 90       	pop	r4
    1468:	3f 90       	pop	r3
    146a:	2f 90       	pop	r2
    146c:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:410
      error=3+10*n;
    146e:	2a e0       	ldi	r18, 0x0A	; 10
    1470:	28 9f       	mul	r18, r24
    1472:	80 01       	movw	r16, r0
    1474:	29 9f       	mul	r18, r25
    1476:	10 0d       	add	r17, r0
    1478:	11 24       	eor	r1, r1
    147a:	0d 5f       	subi	r16, 0xFD	; 253
    147c:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:411
      goto leave_func;
    147e:	b7 cf       	rjmp	.-146    	; 0x13ee <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xd6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:415
    error=4+10*n;
    1480:	2a e0       	ldi	r18, 0x0A	; 10
    1482:	28 9f       	mul	r18, r24
    1484:	80 01       	movw	r16, r0
    1486:	29 9f       	mul	r18, r25
    1488:	10 0d       	add	r17, r0
    148a:	11 24       	eor	r1, r1
    148c:	0c 5f       	subi	r16, 0xFC	; 252
    148e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:416
    goto leave_func;
    1490:	ae cf       	rjmp	.-164    	; 0x13ee <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xd6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:405
        error=1;
    1492:	01 e0       	ldi	r16, 0x01	; 1
    1494:	10 e0       	ldi	r17, 0x00	; 0
    1496:	ae cf       	rjmp	.-164    	; 0x13f4 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)+0xdc>

00001498 <Gsm_Ard::disconnect_tcp_socket()>:
_ZN7Gsm_Ard21disconnect_tcp_socketEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:262
int Gsm_Ard::disconnect_tcp_socket(){
    1498:	cf 92       	push	r12
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	6c 01       	movw	r12, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:264
  if(_gsm_state!=GSM_TCP_STATE){
    14aa:	fc 01       	movw	r30, r24
    14ac:	ea 57       	subi	r30, 0x7A	; 122
    14ae:	fe 4f       	sbci	r31, 0xFE	; 254
    14b0:	80 81       	ld	r24, Z
    14b2:	91 81       	ldd	r25, Z+1	; 0x01
    14b4:	04 97       	sbiw	r24, 0x04	; 4
    14b6:	a1 f0       	breq	.+40     	; 0x14e0 <Gsm_Ard::disconnect_tcp_socket()+0x48>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:266
    dbg_print_error(__FILE__, __LINE__, 1);
    14b8:	41 e0       	ldi	r20, 0x01	; 1
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	6a e0       	ldi	r22, 0x0A	; 10
    14be:	71 e0       	ldi	r23, 0x01	; 1
    14c0:	8b eb       	ldi	r24, 0xBB	; 187
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:268
    return 1;
    14c8:	c1 e0       	ldi	r28, 0x01	; 1
    14ca:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:292
}
    14cc:	ce 01       	movw	r24, r28
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	cf 90       	pop	r12
    14de:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:271
  n=_send_cmd_comp_rsp(AT_CIPSTATUS, AT_CIPSTATUS_LEN , AT_OK, AT_OK_LEN, 5000);
    14e0:	98 e8       	ldi	r25, 0x88	; 136
    14e2:	e9 2e       	mov	r14, r25
    14e4:	93 e1       	ldi	r25, 0x13	; 19
    14e6:	f9 2e       	mov	r15, r25
    14e8:	02 e0       	ldi	r16, 0x02	; 2
    14ea:	10 e0       	ldi	r17, 0x00	; 0
    14ec:	22 ea       	ldi	r18, 0xA2	; 162
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4c e0       	ldi	r20, 0x0C	; 12
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	6a e7       	ldi	r22, 0x7A	; 122
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	c6 01       	movw	r24, r12
    14fa:	0e df       	rcall	.-484    	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
    14fc:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:272
  if(n){
    14fe:	89 2b       	or	r24, r25
    1500:	81 f0       	breq	.+32     	; 0x1522 <Gsm_Ard::disconnect_tcp_socket()+0x8a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:274
    dbg_print_error(__FILE__, __LINE__, 2+10*n);
    1502:	2a e0       	ldi	r18, 0x0A	; 10
    1504:	2c 9f       	mul	r18, r28
    1506:	c0 01       	movw	r24, r0
    1508:	2d 9f       	mul	r18, r29
    150a:	90 0d       	add	r25, r0
    150c:	11 24       	eor	r1, r1
    150e:	ec 01       	movw	r28, r24
    1510:	22 96       	adiw	r28, 0x02	; 2
    1512:	ae 01       	movw	r20, r28
    1514:	62 e1       	ldi	r22, 0x12	; 18
    1516:	71 e0       	ldi	r23, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:284
      dbg_print_error(__FILE__, __LINE__, 3+10*n);
    1518:	8b eb       	ldi	r24, 0xBB	; 187
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:286
      return 3+10*n;
    1520:	d5 cf       	rjmp	.-86     	; 0x14cc <Gsm_Ard::disconnect_tcp_socket()+0x34>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:279
  n=_no_cmd_comp_rsp(AT_STATE_CONNECT_OK, AT_STATE_CONNECT_OK_LEN, 10000);
    1522:	20 e1       	ldi	r18, 0x10	; 16
    1524:	37 e2       	ldi	r19, 0x27	; 39
    1526:	41 e1       	ldi	r20, 0x11	; 17
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	68 e6       	ldi	r22, 0x68	; 104
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	c6 01       	movw	r24, r12
    1530:	68 de       	rcall	.-816    	; 0x1202 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:280
  if(!n){
    1532:	89 2b       	or	r24, r25
    1534:	d9 f4       	brne	.+54     	; 0x156c <Gsm_Ard::disconnect_tcp_socket()+0xd4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:281
    n=_send_cmd_comp_rsp(AT_CIPCLOSE, AT_CIPCLOSE_LEN, AT_CIPCLOSE_OK, AT_CIPCLOSE_OK_LEN, 5000);
    1536:	88 e8       	ldi	r24, 0x88	; 136
    1538:	e8 2e       	mov	r14, r24
    153a:	83 e1       	ldi	r24, 0x13	; 19
    153c:	f8 2e       	mov	r15, r24
    153e:	08 e0       	ldi	r16, 0x08	; 8
    1540:	10 e0       	ldi	r17, 0x00	; 0
    1542:	27 e8       	ldi	r18, 0x87	; 135
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4b e0       	ldi	r20, 0x0B	; 11
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	60 e9       	ldi	r22, 0x90	; 144
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	c6 01       	movw	r24, r12
    1550:	e3 de       	rcall	.-570    	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:282
    if(n){
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	59 f0       	breq	.+22     	; 0x156c <Gsm_Ard::disconnect_tcp_socket()+0xd4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:284
      dbg_print_error(__FILE__, __LINE__, 3+10*n);
    1556:	2a e0       	ldi	r18, 0x0A	; 10
    1558:	28 9f       	mul	r18, r24
    155a:	e0 01       	movw	r28, r0
    155c:	29 9f       	mul	r18, r25
    155e:	d0 0d       	add	r29, r0
    1560:	11 24       	eor	r1, r1
    1562:	23 96       	adiw	r28, 0x03	; 3
    1564:	ae 01       	movw	r20, r28
    1566:	6c e1       	ldi	r22, 0x1C	; 28
    1568:	71 e0       	ldi	r23, 0x01	; 1
    156a:	d6 cf       	rjmp	.-84     	; 0x1518 <Gsm_Ard::disconnect_tcp_socket()+0x80>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:290
  _change_gsm_state(GSM_IP_STATE);
    156c:	63 e0       	ldi	r22, 0x03	; 3
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	c6 01       	movw	r24, r12
    1572:	4a db       	rcall	.-2412   	; 0xc08 <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:291
  return 0;
    1574:	ab cf       	rjmp	.-170    	; 0x14cc <Gsm_Ard::disconnect_tcp_socket()+0x34>

00001576 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>:
_ZN7Gsm_Ard26_send_cmd_comp_several_rspEPKcjS1_jS1_ji():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:432
  const char* exp_rsp2, const uint16_t exp_rsp2_size, int recv_wait_period){
    1576:	2f 92       	push	r2
    1578:	3f 92       	push	r3
    157a:	4f 92       	push	r4
    157c:	5f 92       	push	r5
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	2a 97       	sbiw	r28, 0x0a	; 10
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	4c 01       	movw	r8, r24
    15ac:	7e 83       	std	Y+6, r23	; 0x06
    15ae:	6d 83       	std	Y+5, r22	; 0x05
    15b0:	3a 01       	movw	r6, r20
    15b2:	38 87       	std	Y+8, r19	; 0x08
    15b4:	2f 83       	std	Y+7, r18	; 0x07
    15b6:	28 01       	movw	r4, r16
    15b8:	87 01       	movw	r16, r14
    15ba:	16 01       	movw	r2, r12
    15bc:	ba 86       	std	Y+10, r11	; 0x0a
    15be:	a9 86       	std	Y+9, r10	; 0x09
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:437
  char* cmd_buffer = new char[cmd_size];
    15c0:	ca 01       	movw	r24, r20
    15c2:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
    15c6:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:438
  char* exp_rsp1_buffer = new char[exp_rsp1_size];
    15c8:	c2 01       	movw	r24, r4
    15ca:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
    15ce:	5c 01       	movw	r10, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:439
  char* exp_rsp2_buffer = new char[exp_rsp2_size];
    15d0:	c6 01       	movw	r24, r12
    15d2:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
    15d6:	6c 01       	movw	r12, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:440
  strcpy_P(cmd_buffer, cmd);
    15d8:	6d 81       	ldd	r22, Y+5	; 0x05
    15da:	7e 81       	ldd	r23, Y+6	; 0x06
    15dc:	c7 01       	movw	r24, r14
    15de:	0e 94 20 1c 	call	0x3840	; 0x3840 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:441
  strcpy_P(exp_rsp1_buffer, exp_rsp1);
    15e2:	6f 81       	ldd	r22, Y+7	; 0x07
    15e4:	78 85       	ldd	r23, Y+8	; 0x08
    15e6:	c5 01       	movw	r24, r10
    15e8:	0e 94 20 1c 	call	0x3840	; 0x3840 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:442
  strcpy_P(exp_rsp2_buffer, exp_rsp2);
    15ec:	b8 01       	movw	r22, r16
    15ee:	c6 01       	movw	r24, r12
    15f0:	0e 94 20 1c 	call	0x3840	; 0x3840 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:444
  while(_ss.available()) _ss.read();
    15f4:	84 01       	movw	r16, r8
    15f6:	02 57       	subi	r16, 0x72	; 114
    15f8:	1e 4f       	sbci	r17, 0xFE	; 254
    15fa:	c8 01       	movw	r24, r16
    15fc:	0e 94 4e 14 	call	0x289c	; 0x289c <SoftwareSerial::available()>
    1600:	89 2b       	or	r24, r25
    1602:	21 f0       	breq	.+8      	; 0x160c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x96>
    1604:	c8 01       	movw	r24, r16
    1606:	0e 94 b8 13 	call	0x2770	; 0x2770 <SoftwareSerial::read()>
    160a:	f7 cf       	rjmp	.-18     	; 0x15fa <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x84>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:447
  dbg_print_serial_buffer(__FILE__, __LINE__, "CMD_BUFFER", cmd_buffer, cmd_size);
    160c:	83 01       	movw	r16, r6
    160e:	97 01       	movw	r18, r14
    1610:	4c e0       	ldi	r20, 0x0C	; 12
    1612:	52 e0       	ldi	r21, 0x02	; 2
    1614:	6f eb       	ldi	r22, 0xBF	; 191
    1616:	71 e0       	ldi	r23, 0x01	; 1
    1618:	8b eb       	ldi	r24, 0xBB	; 187
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	cd d7       	rcall	.+3994   	; 0x25b8 <dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:450
  _write_cmd(cmd_buffer);
    161e:	b7 01       	movw	r22, r14
    1620:	c4 01       	movw	r24, r8
    1622:	fb dc       	rcall	.-1546   	; 0x101a <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:451
  n=_recv_string(recv_wait_period);
    1624:	43 e0       	ldi	r20, 0x03	; 3
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	69 85       	ldd	r22, Y+9	; 0x09
    162a:	7a 85       	ldd	r23, Y+10	; 0x0a
    162c:	c4 01       	movw	r24, r8
    162e:	1d dd       	rcall	.-1478   	; 0x106a <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:452
  if(!n){
    1630:	89 2b       	or	r24, r25
    1632:	59 f0       	breq	.+22     	; 0x164a <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0xd4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:475
  error=2;
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	89 2e       	mov	r8, r25
    1638:	91 2c       	mov	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:480
    dbg_print_error(__FILE__, __LINE__, error);
    163a:	a4 01       	movw	r20, r8
    163c:	60 ee       	ldi	r22, 0xE0	; 224
    163e:	71 e0       	ldi	r23, 0x01	; 1
    1640:	8b eb       	ldi	r24, 0xBB	; 187
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	0e 94 87 13 	call	0x270e	; 0x270e <dbg_print_error(char const*, int, int)>
    1648:	25 c0       	rjmp	.+74     	; 0x1694 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x11e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:453
    n=_fetch_rsp_from_recv(cmd_buffer, cmd_size, &rsp_len);
    164a:	9e 01       	movw	r18, r28
    164c:	2f 5f       	subi	r18, 0xFF	; 255
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	a3 01       	movw	r20, r6
    1652:	b7 01       	movw	r22, r14
    1654:	c4 01       	movw	r24, r8
    1656:	52 db       	rcall	.-2396   	; 0xcfc <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:454
    if(!n){
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	09 f0       	breq	.+2      	; 0x165e <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0xe8>
    165c:	63 c0       	rjmp	.+198    	; 0x1724 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x1ae>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:455
      rsp=new char[rsp_len];
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <operator new[](unsigned int)>
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	8b 83       	std	Y+3, r24	; 0x03
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:456
      n=_get_rsp(&rsp);
    166a:	be 01       	movw	r22, r28
    166c:	6d 5f       	subi	r22, 0xFD	; 253
    166e:	7f 4f       	sbci	r23, 0xFF	; 255
    1670:	c4 01       	movw	r24, r8
    1672:	61 dc       	rcall	.-1854   	; 0xf36 <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:457
      if(n){
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	09 f4       	brne	.+2      	; 0x167a <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x104>
    1678:	3f c0       	rjmp	.+126    	; 0x16f8 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x182>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:458
        error=3+n*10;
    167a:	2a e0       	ldi	r18, 0x0A	; 10
    167c:	28 9f       	mul	r18, r24
    167e:	40 01       	movw	r8, r0
    1680:	29 9f       	mul	r18, r25
    1682:	90 0c       	add	r9, r0
    1684:	11 24       	eor	r1, r1
    1686:	83 e0       	ldi	r24, 0x03	; 3
    1688:	88 0e       	add	r8, r24
    168a:	91 1c       	adc	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:479
  if(error>1){
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	88 16       	cp	r8, r24
    1690:	91 04       	cpc	r9, r1
    1692:	9c f6       	brge	.-90     	; 0x163a <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0xc4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:483
  delete[] cmd_buffer;
    1694:	e1 14       	cp	r14, r1
    1696:	f1 04       	cpc	r15, r1
    1698:	19 f0       	breq	.+6      	; 0x16a0 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x12a>
    169a:	c7 01       	movw	r24, r14
    169c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:484
  delete[] exp_rsp1_buffer;
    16a0:	a1 14       	cp	r10, r1
    16a2:	b1 04       	cpc	r11, r1
    16a4:	19 f0       	breq	.+6      	; 0x16ac <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x136>
    16a6:	c5 01       	movw	r24, r10
    16a8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:485
  delete[] exp_rsp2_buffer;
    16ac:	c1 14       	cp	r12, r1
    16ae:	d1 04       	cpc	r13, r1
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x142>
    16b2:	c6 01       	movw	r24, r12
    16b4:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:486
  delete[] rsp;
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	11 f0       	breq	.+4      	; 0x16c4 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x14e>
    16c0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:488
}
    16c4:	c4 01       	movw	r24, r8
    16c6:	2a 96       	adiw	r28, 0x0a	; 10
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	9f 90       	pop	r9
    16e8:	8f 90       	pop	r8
    16ea:	7f 90       	pop	r7
    16ec:	6f 90       	pop	r6
    16ee:	5f 90       	pop	r5
    16f0:	4f 90       	pop	r4
    16f2:	3f 90       	pop	r3
    16f4:	2f 90       	pop	r2
    16f6:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:461
      if(!strncmp(exp_rsp1_buffer, rsp, exp_rsp1_size)){
    16f8:	0b 81       	ldd	r16, Y+3	; 0x03
    16fa:	1c 81       	ldd	r17, Y+4	; 0x04
    16fc:	a2 01       	movw	r20, r4
    16fe:	b8 01       	movw	r22, r16
    1700:	c5 01       	movw	r24, r10
    1702:	0e 94 30 1c 	call	0x3860	; 0x3860 <strncmp>
    1706:	4c 01       	movw	r8, r24
    1708:	89 2b       	or	r24, r25
    170a:	21 f2       	breq	.-120    	; 0x1694 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x11e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:465
      if(!strncmp(exp_rsp2_buffer, rsp, exp_rsp2_size)){
    170c:	a1 01       	movw	r20, r2
    170e:	b8 01       	movw	r22, r16
    1710:	c6 01       	movw	r24, r12
    1712:	0e 94 30 1c 	call	0x3860	; 0x3860 <strncmp>
    1716:	89 2b       	or	r24, r25
    1718:	09 f0       	breq	.+2      	; 0x171c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x1a6>
    171a:	8c cf       	rjmp	.-232    	; 0x1634 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0xbe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:466
        error=1;
    171c:	88 24       	eor	r8, r8
    171e:	83 94       	inc	r8
    1720:	91 2c       	mov	r9, r1
    1722:	b8 cf       	rjmp	.-144    	; 0x1694 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x11e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:471
      error=4+n*10;
    1724:	2a e0       	ldi	r18, 0x0A	; 10
    1726:	28 9f       	mul	r18, r24
    1728:	40 01       	movw	r8, r0
    172a:	29 9f       	mul	r18, r25
    172c:	90 0c       	add	r9, r0
    172e:	11 24       	eor	r1, r1
    1730:	84 e0       	ldi	r24, 0x04	; 4
    1732:	88 0e       	add	r8, r24
    1734:	91 1c       	adc	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:472
      goto leave_func;
    1736:	aa cf       	rjmp	.-172    	; 0x168c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)+0x116>

00001738 <Gsm_Ard::init_gsm_module()>:
_ZN7Gsm_Ard15init_gsm_moduleEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:47
int Gsm_Ard::init_gsm_module(){
    1738:	6f 92       	push	r6
    173a:	7f 92       	push	r7
    173c:	8f 92       	push	r8
    173e:	9f 92       	push	r9
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	6f 97       	sbiw	r28, 0x1f	; 31
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:23
  _gsm_state=new_state;
    1766:	5c 01       	movw	r10, r24
    1768:	8a e7       	ldi	r24, 0x7A	; 122
    176a:	a8 1a       	sub	r10, r24
    176c:	8e ef       	ldi	r24, 0xFE	; 254
    176e:	b8 0a       	sbc	r11, r24
    1770:	f5 01       	movw	r30, r10
    1772:	11 82       	std	Z+1, r1	; 0x01
    1774:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:29
      Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
    1776:	61 e3       	ldi	r22, 0x31	; 49
    1778:	71 e0       	ldi	r23, 0x01	; 1
    177a:	83 ea       	ldi	r24, 0xA3	; 163
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:50
  _ss = SoftwareSerial(_GSM_RXPIN_, _GSM_TXPIN_);
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	48 e0       	ldi	r20, 0x08	; 8
    1786:	67 e0       	ldi	r22, 0x07	; 7
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	0e 94 6e 15 	call	0x2adc	; 0x2adc <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>
    1790:	64 01       	movw	r12, r8
    1792:	f2 e7       	ldi	r31, 0x72	; 114
    1794:	cf 1a       	sub	r12, r31
    1796:	fe ef       	ldi	r31, 0xFE	; 254
    1798:	df 0a       	sbc	r13, r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:37
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	f6 01       	movw	r30, r12
    17a0:	93 83       	std	Z+3, r25	; 0x03
    17a2:	82 83       	std	Z+2, r24	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:49
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	af 81       	ldd	r26, Y+7	; 0x07
    17aa:	b8 85       	ldd	r27, Y+8	; 0x08
    17ac:	84 83       	std	Z+4, r24	; 0x04
    17ae:	95 83       	std	Z+5, r25	; 0x05
    17b0:	a6 83       	std	Z+6, r26	; 0x06
    17b2:	b7 83       	std	Z+7, r27	; 0x07
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	ab 85       	ldd	r26, Y+11	; 0x0b
    17ba:	bc 85       	ldd	r27, Y+12	; 0x0c
    17bc:	80 87       	std	Z+8, r24	; 0x08
    17be:	91 87       	std	Z+9, r25	; 0x09
    17c0:	a2 87       	std	Z+10, r26	; 0x0a
    17c2:	b3 87       	std	Z+11, r27	; 0x0b
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:50
    17c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c6:	84 87       	std	Z+12, r24	; 0x0c
    17c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ca:	85 87       	std	Z+13, r24	; 0x0d
    17cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ce:	98 89       	ldd	r25, Y+16	; 0x10
    17d0:	97 87       	std	Z+15, r25	; 0x0f
    17d2:	86 87       	std	Z+14, r24	; 0x0e
    17d4:	89 89       	ldd	r24, Y+17	; 0x11
    17d6:	80 8b       	std	Z+16, r24	; 0x10
    17d8:	8a 89       	ldd	r24, Y+18	; 0x12
    17da:	9b 89       	ldd	r25, Y+19	; 0x13
    17dc:	92 8b       	std	Z+18, r25	; 0x12
    17de:	81 8b       	std	Z+17, r24	; 0x11
    17e0:	8c 89       	ldd	r24, Y+20	; 0x14
    17e2:	9d 89       	ldd	r25, Y+21	; 0x15
    17e4:	94 8b       	std	Z+20, r25	; 0x14
    17e6:	83 8b       	std	Z+19, r24	; 0x13
    17e8:	8e 89       	ldd	r24, Y+22	; 0x16
    17ea:	85 8b       	std	Z+21, r24	; 0x15
    17ec:	8f 89       	ldd	r24, Y+23	; 0x17
    17ee:	98 8d       	ldd	r25, Y+24	; 0x18
    17f0:	97 8b       	std	Z+23, r25	; 0x17
    17f2:	86 8b       	std	Z+22, r24	; 0x16
    17f4:	89 8d       	ldd	r24, Y+25	; 0x19
    17f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17f8:	91 8f       	std	Z+25, r25	; 0x19
    17fa:	80 8f       	std	Z+24, r24	; 0x18
    17fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1800:	93 8f       	std	Z+27, r25	; 0x1b
    1802:	82 8f       	std	Z+26, r24	; 0x1a
    1804:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1806:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1808:	95 8f       	std	Z+29, r25	; 0x1d
    180a:	84 8f       	std	Z+28, r24	; 0x1c
    180c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    180e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1810:	90 fb       	bst	r25, 0
    1812:	80 f9       	bld	r24, 0
    1814:	91 fb       	bst	r25, 1
    1816:	81 f9       	bld	r24, 1
    1818:	86 8f       	std	Z+30, r24	; 0x1e
    181a:	ce 01       	movw	r24, r28
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <SoftwareSerial::~SoftwareSerial()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:51
  _ss.begin(DEFAULT_SS_BAUDRATE);
    1822:	40 e6       	ldi	r20, 0x60	; 96
    1824:	59 e0       	ldi	r21, 0x09	; 9
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	c6 01       	movw	r24, r12
    182c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <SoftwareSerial::begin(long)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:53
  n=_send_cmd_comp_rsp(AT, AT_LEN, AT_OK, AT_OK_LEN, 5000);
    1830:	a8 e8       	ldi	r26, 0x88	; 136
    1832:	ea 2e       	mov	r14, r26
    1834:	a3 e1       	ldi	r26, 0x13	; 19
    1836:	fa 2e       	mov	r15, r26
    1838:	02 e0       	ldi	r16, 0x02	; 2
    183a:	10 e0       	ldi	r17, 0x00	; 0
    183c:	22 ea       	ldi	r18, 0xA2	; 162
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	42 e0       	ldi	r20, 0x02	; 2
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	63 e8       	ldi	r22, 0x83	; 131
    1846:	72 e0       	ldi	r23, 0x02	; 2
    1848:	c4 01       	movw	r24, r8
    184a:	66 dd       	rcall	.-1332   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:54
  if(!n){
    184c:	89 2b       	or	r24, r25
    184e:	21 f4       	brne	.+8      	; 0x1858 <Gsm_Ard::init_gsm_module()+0x120>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:55
    _change_gsm_state(GSM_ON_STATE);
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	c4 01       	movw	r24, r8
    1856:	d8 d9       	rcall	.-3152   	; 0xc08 <Gsm_Ard::_change_gsm_state(GSM_STATE)>
    1858:	f6 e2       	ldi	r31, 0x26	; 38
    185a:	6f 2e       	mov	r6, r31
    185c:	f2 e0       	ldi	r31, 0x02	; 2
    185e:	7f 2e       	mov	r7, r31
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:57
  for(i=0;i<8 && _gsm_state!=GSM_ON_STATE;i++){
    1860:	f5 01       	movw	r30, r10
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	11 f1       	breq	.+68     	; 0x18ae <Gsm_Ard::init_gsm_module()+0x176>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:58
    _ss.begin(_POSSIBLE_BRS[i]);
    186a:	f3 01       	movw	r30, r6
    186c:	41 91       	ld	r20, Z+
    186e:	51 91       	ld	r21, Z+
    1870:	61 91       	ld	r22, Z+
    1872:	71 91       	ld	r23, Z+
    1874:	3f 01       	movw	r6, r30
    1876:	c6 01       	movw	r24, r12
    1878:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <SoftwareSerial::begin(long)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:59
    n=_send_cmd_comp_rsp(AT, AT_LEN, AT_OK, AT_OK_LEN, 5000);
    187c:	e8 e8       	ldi	r30, 0x88	; 136
    187e:	ee 2e       	mov	r14, r30
    1880:	e3 e1       	ldi	r30, 0x13	; 19
    1882:	fe 2e       	mov	r15, r30
    1884:	02 e0       	ldi	r16, 0x02	; 2
    1886:	10 e0       	ldi	r17, 0x00	; 0
    1888:	22 ea       	ldi	r18, 0xA2	; 162
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	42 e0       	ldi	r20, 0x02	; 2
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	63 e8       	ldi	r22, 0x83	; 131
    1892:	72 e0       	ldi	r23, 0x02	; 2
    1894:	c4 01       	movw	r24, r8
    1896:	40 dd       	rcall	.-1408   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:60
    if(!n){
    1898:	89 2b       	or	r24, r25
    189a:	21 f4       	brne	.+8      	; 0x18a4 <Gsm_Ard::init_gsm_module()+0x16c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:61
      _change_gsm_state(GSM_ON_STATE);
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	c4 01       	movw	r24, r8
    18a2:	b2 d9       	rcall	.-3228   	; 0xc08 <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:57
  for(i=0;i<8 && _gsm_state!=GSM_ON_STATE;i++){
    18a4:	f6 e4       	ldi	r31, 0x46	; 70
    18a6:	6f 16       	cp	r6, r31
    18a8:	f2 e0       	ldi	r31, 0x02	; 2
    18aa:	7f 06       	cpc	r7, r31
    18ac:	c9 f6       	brne	.-78     	; 0x1860 <Gsm_Ard::init_gsm_module()+0x128>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:65
  if(_gsm_state!=GSM_ON_STATE){
    18ae:	f5 01       	movw	r30, r10
    18b0:	80 81       	ld	r24, Z
    18b2:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:66
    return 1;
    18b4:	21 e0       	ldi	r18, 0x01	; 1
    18b6:	30 e0       	ldi	r19, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:65
  if(_gsm_state!=GSM_ON_STATE){
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	11 f5       	brne	.+68     	; 0x1900 <Gsm_Ard::init_gsm_module()+0x1c8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:69
  n=_send_cmd_comp_several_rsp(AT_CPIN_R, AT_CPIN_R_LEN, AT_CPIN_READY, AT_CPIN_READY_LEN, AT_CPIN_SIM_PIN, AT_CPIN_SIM_PIN_LEN, 5000);
    18bc:	58 e8       	ldi	r21, 0x88	; 136
    18be:	a5 2e       	mov	r10, r21
    18c0:	53 e1       	ldi	r21, 0x13	; 19
    18c2:	b5 2e       	mov	r11, r21
    18c4:	6e e0       	ldi	r22, 0x0E	; 14
    18c6:	c6 2e       	mov	r12, r22
    18c8:	d1 2c       	mov	r13, r1
    18ca:	7e e5       	ldi	r23, 0x5E	; 94
    18cc:	e7 2e       	mov	r14, r23
    18ce:	72 e0       	ldi	r23, 0x02	; 2
    18d0:	f7 2e       	mov	r15, r23
    18d2:	0c e0       	ldi	r16, 0x0C	; 12
    18d4:	10 e0       	ldi	r17, 0x00	; 0
    18d6:	2d e6       	ldi	r18, 0x6D	; 109
    18d8:	32 e0       	ldi	r19, 0x02	; 2
    18da:	48 e0       	ldi	r20, 0x08	; 8
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	6a e7       	ldi	r22, 0x7A	; 122
    18e0:	72 e0       	ldi	r23, 0x02	; 2
    18e2:	c4 01       	movw	r24, r8
    18e4:	48 de       	rcall	.-880    	; 0x1576 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:70
  switch(n){
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	d1 f1       	breq	.+116    	; 0x195e <Gsm_Ard::init_gsm_module()+0x226>
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	91 05       	cpc	r25, r1
    18ee:	f1 f0       	breq	.+60     	; 0x192c <Gsm_Ard::init_gsm_module()+0x1f4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:72
      return 2+10*n;
    18f0:	4a e0       	ldi	r20, 0x0A	; 10
    18f2:	48 9f       	mul	r20, r24
    18f4:	90 01       	movw	r18, r0
    18f6:	49 9f       	mul	r20, r25
    18f8:	30 0d       	add	r19, r0
    18fa:	11 24       	eor	r1, r1
    18fc:	2e 5f       	subi	r18, 0xFE	; 254
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:101
}
    1900:	c9 01       	movw	r24, r18
    1902:	6f 96       	adiw	r28, 0x1f	; 31
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	bf 90       	pop	r11
    1920:	af 90       	pop	r10
    1922:	9f 90       	pop	r9
    1924:	8f 90       	pop	r8
    1926:	7f 90       	pop	r7
    1928:	6f 90       	pop	r6
    192a:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:77
      n=_send_cmd_comp_rsp(AT_CPIN_SET, AT_CPIN_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    192c:	48 e8       	ldi	r20, 0x88	; 136
    192e:	e4 2e       	mov	r14, r20
    1930:	43 e1       	ldi	r20, 0x13	; 19
    1932:	f4 2e       	mov	r15, r20
    1934:	02 e0       	ldi	r16, 0x02	; 2
    1936:	10 e0       	ldi	r17, 0x00	; 0
    1938:	22 ea       	ldi	r18, 0xA2	; 162
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	4c e0       	ldi	r20, 0x0C	; 12
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	61 e5       	ldi	r22, 0x51	; 81
    1942:	72 e0       	ldi	r23, 0x02	; 2
    1944:	c4 01       	movw	r24, r8
    1946:	e8 dc       	rcall	.-1584   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:78
      if(n){
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	49 f0       	breq	.+18     	; 0x195e <Gsm_Ard::init_gsm_module()+0x226>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:79
        return 3+10*n;
    194c:	4a e0       	ldi	r20, 0x0A	; 10
    194e:	48 9f       	mul	r20, r24
    1950:	90 01       	movw	r18, r0
    1952:	49 9f       	mul	r20, r25
    1954:	30 0d       	add	r19, r0
    1956:	11 24       	eor	r1, r1
    1958:	2d 5f       	subi	r18, 0xFD	; 253
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	d1 cf       	rjmp	.-94     	; 0x1900 <Gsm_Ard::init_gsm_module()+0x1c8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:84
  n=_send_cmd_comp_several_rsp(AT_CIURC_R, AT_CIURC_R_LEN, AT_CIURC_0, AT_CIURC_0_LEN, AT_CIURC_1, AT_CIURC_1_LEN, 5000);
    195e:	98 e8       	ldi	r25, 0x88	; 136
    1960:	a9 2e       	mov	r10, r25
    1962:	93 e1       	ldi	r25, 0x13	; 19
    1964:	b9 2e       	mov	r11, r25
    1966:	29 e0       	ldi	r18, 0x09	; 9
    1968:	c2 2e       	mov	r12, r18
    196a:	d1 2c       	mov	r13, r1
    196c:	33 e3       	ldi	r19, 0x33	; 51
    196e:	e3 2e       	mov	r14, r19
    1970:	32 e0       	ldi	r19, 0x02	; 2
    1972:	f3 2e       	mov	r15, r19
    1974:	09 e0       	ldi	r16, 0x09	; 9
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	2d e3       	ldi	r18, 0x3D	; 61
    197a:	32 e0       	ldi	r19, 0x02	; 2
    197c:	49 e0       	ldi	r20, 0x09	; 9
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	67 e4       	ldi	r22, 0x47	; 71
    1982:	72 e0       	ldi	r23, 0x02	; 2
    1984:	c4 01       	movw	r24, r8
    1986:	f7 dd       	rcall	.-1042   	; 0x1576 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:85
  switch(n){
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	61 f0       	breq	.+24     	; 0x19a4 <Gsm_Ard::init_gsm_module()+0x26c>
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	11 f1       	breq	.+68     	; 0x19d6 <Gsm_Ard::init_gsm_module()+0x29e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:87
      return 4+10*n;
    1992:	4a e0       	ldi	r20, 0x0A	; 10
    1994:	48 9f       	mul	r20, r24
    1996:	90 01       	movw	r18, r0
    1998:	49 9f       	mul	r20, r25
    199a:	30 0d       	add	r19, r0
    199c:	11 24       	eor	r1, r1
    199e:	2c 5f       	subi	r18, 0xFC	; 252
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	ae cf       	rjmp	.-164    	; 0x1900 <Gsm_Ard::init_gsm_module()+0x1c8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:90
      n=_send_cmd_comp_rsp(AT_CIURC_SET, AT_CIURC_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    19a4:	88 e8       	ldi	r24, 0x88	; 136
    19a6:	e8 2e       	mov	r14, r24
    19a8:	83 e1       	ldi	r24, 0x13	; 19
    19aa:	f8 2e       	mov	r15, r24
    19ac:	02 e0       	ldi	r16, 0x02	; 2
    19ae:	10 e0       	ldi	r17, 0x00	; 0
    19b0:	22 ea       	ldi	r18, 0xA2	; 162
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	4a e0       	ldi	r20, 0x0A	; 10
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	68 e2       	ldi	r22, 0x28	; 40
    19ba:	72 e0       	ldi	r23, 0x02	; 2
    19bc:	c4 01       	movw	r24, r8
    19be:	ac dc       	rcall	.-1704   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:91
      if(n){
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	49 f0       	breq	.+18     	; 0x19d6 <Gsm_Ard::init_gsm_module()+0x29e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:92
        return 5+10*n;
    19c4:	4a e0       	ldi	r20, 0x0A	; 10
    19c6:	48 9f       	mul	r20, r24
    19c8:	90 01       	movw	r18, r0
    19ca:	49 9f       	mul	r20, r25
    19cc:	30 0d       	add	r19, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	2b 5f       	subi	r18, 0xFB	; 251
    19d2:	3f 4f       	sbci	r19, 0xFF	; 255
    19d4:	95 cf       	rjmp	.-214    	; 0x1900 <Gsm_Ard::init_gsm_module()+0x1c8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:99
  _change_gsm_state(GSM_PIN_STATE);
    19d6:	62 e0       	ldi	r22, 0x02	; 2
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	c4 01       	movw	r24, r8
    19dc:	15 d9       	rcall	.-3542   	; 0xc08 <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:100
  return 0;
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	8e cf       	rjmp	.-228    	; 0x1900 <Gsm_Ard::init_gsm_module()+0x1c8>

000019e4 <Gsm_Ard::attachGPRS()>:
_ZN7Gsm_Ard10attachGPRSEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:103
int Gsm_Ard::attachGPRS(){
    19e4:	8f 92       	push	r8
    19e6:	9f 92       	push	r9
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:106
  if(_gsm_state!=GSM_PIN_STATE){
    19fe:	fc 01       	movw	r30, r24
    1a00:	ea 57       	subi	r30, 0x7A	; 122
    1a02:	fe 4f       	sbci	r31, 0xFE	; 254
    1a04:	80 81       	ld	r24, Z
    1a06:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:107
    return 1;
    1a08:	c1 e0       	ldi	r28, 0x01	; 1
    1a0a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:106
  if(_gsm_state!=GSM_PIN_STATE){
    1a0c:	02 97       	sbiw	r24, 0x02	; 2
    1a0e:	09 f5       	brne	.+66     	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:110
  n=_send_cmd_comp_several_rsp(AT_CGATT_R, AT_CGATT_R_LEN, AT_CGATT_0, AT_CGATT_0_LEN, AT_CGATT_1, AT_CGATT_1_LEN, 5000);
    1a10:	a8 e8       	ldi	r26, 0x88	; 136
    1a12:	aa 2e       	mov	r10, r26
    1a14:	a3 e1       	ldi	r26, 0x13	; 19
    1a16:	ba 2e       	mov	r11, r26
    1a18:	b9 e0       	ldi	r27, 0x09	; 9
    1a1a:	cb 2e       	mov	r12, r27
    1a1c:	d1 2c       	mov	r13, r1
    1a1e:	ca e0       	ldi	r28, 0x0A	; 10
    1a20:	ec 2e       	mov	r14, r28
    1a22:	c2 e0       	ldi	r28, 0x02	; 2
    1a24:	fc 2e       	mov	r15, r28
    1a26:	09 e0       	ldi	r16, 0x09	; 9
    1a28:	10 e0       	ldi	r17, 0x00	; 0
    1a2a:	24 e1       	ldi	r18, 0x14	; 20
    1a2c:	32 e0       	ldi	r19, 0x02	; 2
    1a2e:	49 e0       	ldi	r20, 0x09	; 9
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	6e e1       	ldi	r22, 0x1E	; 30
    1a34:	72 e0       	ldi	r23, 0x02	; 2
    1a36:	c4 01       	movw	r24, r8
    1a38:	9e dd       	rcall	.-1220   	; 0x1576 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:111
  switch(n){
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	c1 f0       	breq	.+48     	; 0x1a6e <Gsm_Ard::attachGPRS()+0x8a>
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	69 f1       	breq	.+90     	; 0x1a9e <Gsm_Ard::attachGPRS()+0xba>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:113
      return 2+n*10;
    1a44:	2a e0       	ldi	r18, 0x0A	; 10
    1a46:	28 9f       	mul	r18, r24
    1a48:	e0 01       	movw	r28, r0
    1a4a:	29 9f       	mul	r18, r25
    1a4c:	d0 0d       	add	r29, r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	22 96       	adiw	r28, 0x02	; 2
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:190
}
    1a52:	ce 01       	movw	r24, r28
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:116
      n=_send_cmd_comp_rsp(AT_CGATT_SET_ON, AT_CGATT_SET_ON_LEN, AT_OK, AT_OK_LEN, 10000);
    1a6e:	f0 e1       	ldi	r31, 0x10	; 16
    1a70:	ef 2e       	mov	r14, r31
    1a72:	f7 e2       	ldi	r31, 0x27	; 39
    1a74:	ff 2e       	mov	r15, r31
    1a76:	02 e0       	ldi	r16, 0x02	; 2
    1a78:	10 e0       	ldi	r17, 0x00	; 0
    1a7a:	22 ea       	ldi	r18, 0xA2	; 162
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a e0       	ldi	r20, 0x0A	; 10
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	6f ef       	ldi	r22, 0xFF	; 255
    1a84:	71 e0       	ldi	r23, 0x01	; 1
    1a86:	c4 01       	movw	r24, r8
    1a88:	47 dc       	rcall	.-1906   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:117
      if(n){
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	41 f0       	breq	.+16     	; 0x1a9e <Gsm_Ard::attachGPRS()+0xba>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:118
        return 3+n*10;
    1a8e:	2a e0       	ldi	r18, 0x0A	; 10
    1a90:	28 9f       	mul	r18, r24
    1a92:	e0 01       	movw	r28, r0
    1a94:	29 9f       	mul	r18, r25
    1a96:	d0 0d       	add	r29, r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	23 96       	adiw	r28, 0x03	; 3
    1a9c:	da cf       	rjmp	.-76     	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:125
  n=_send_cmd_comp_several_rsp(AT_CIPMODE_R, AT_CIPMODE_R_LEN, AT_CIPMODE_0, AT_CIPMODE_0_LEN, AT_CIPMODE_1, AT_CIPMODE_1_LEN, 5000);
    1a9e:	68 e8       	ldi	r22, 0x88	; 136
    1aa0:	a6 2e       	mov	r10, r22
    1aa2:	63 e1       	ldi	r22, 0x13	; 19
    1aa4:	b6 2e       	mov	r11, r22
    1aa6:	7b e0       	ldi	r23, 0x0B	; 11
    1aa8:	c7 2e       	mov	r12, r23
    1aaa:	d1 2c       	mov	r13, r1
    1aac:	e7 ec       	ldi	r30, 0xC7	; 199
    1aae:	ee 2e       	mov	r14, r30
    1ab0:	e1 e0       	ldi	r30, 0x01	; 1
    1ab2:	fe 2e       	mov	r15, r30
    1ab4:	0b e0       	ldi	r16, 0x0B	; 11
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	23 ed       	ldi	r18, 0xD3	; 211
    1aba:	31 e0       	ldi	r19, 0x01	; 1
    1abc:	4b e0       	ldi	r20, 0x0B	; 11
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	6f ed       	ldi	r22, 0xDF	; 223
    1ac2:	71 e0       	ldi	r23, 0x01	; 1
    1ac4:	c4 01       	movw	r24, r8
    1ac6:	57 dd       	rcall	.-1362   	; 0x1576 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:126
  switch(n){
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	19 f1       	breq	.+70     	; 0x1b12 <Gsm_Ard::attachGPRS()+0x12e>
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	91 05       	cpc	r25, r1
    1ad0:	41 f0       	breq	.+16     	; 0x1ae2 <Gsm_Ard::attachGPRS()+0xfe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:128
      return 4+n*10;
    1ad2:	2a e0       	ldi	r18, 0x0A	; 10
    1ad4:	28 9f       	mul	r18, r24
    1ad6:	e0 01       	movw	r28, r0
    1ad8:	29 9f       	mul	r18, r25
    1ada:	d0 0d       	add	r29, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	24 96       	adiw	r28, 0x04	; 4
    1ae0:	b8 cf       	rjmp	.-144    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:133
      n=_send_cmd_comp_rsp(AT_CIPMODE, AT_CIPMODE_LEN, AT_OK, AT_OK_LEN, 5000);
    1ae2:	58 e8       	ldi	r21, 0x88	; 136
    1ae4:	e5 2e       	mov	r14, r21
    1ae6:	53 e1       	ldi	r21, 0x13	; 19
    1ae8:	f5 2e       	mov	r15, r21
    1aea:	02 e0       	ldi	r16, 0x02	; 2
    1aec:	10 e0       	ldi	r17, 0x00	; 0
    1aee:	22 ea       	ldi	r18, 0xA2	; 162
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4c e0       	ldi	r20, 0x0C	; 12
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	6a eb       	ldi	r22, 0xBA	; 186
    1af8:	71 e0       	ldi	r23, 0x01	; 1
    1afa:	c4 01       	movw	r24, r8
    1afc:	0d dc       	rcall	.-2022   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:134
      if(n){
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	41 f0       	breq	.+16     	; 0x1b12 <Gsm_Ard::attachGPRS()+0x12e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:135
        return 5+n*10;
    1b02:	2a e0       	ldi	r18, 0x0A	; 10
    1b04:	28 9f       	mul	r18, r24
    1b06:	e0 01       	movw	r28, r0
    1b08:	29 9f       	mul	r18, r25
    1b0a:	d0 0d       	add	r29, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	25 96       	adiw	r28, 0x05	; 5
    1b10:	a0 cf       	rjmp	.-192    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:140
  n=_send_cmd_comp_rsp(AT_CGDCONT, AT_CGDCONT_LEN, AT_OK, AT_OK_LEN, 5000);
    1b12:	48 e8       	ldi	r20, 0x88	; 136
    1b14:	e4 2e       	mov	r14, r20
    1b16:	43 e1       	ldi	r20, 0x13	; 19
    1b18:	f4 2e       	mov	r15, r20
    1b1a:	02 e0       	ldi	r16, 0x02	; 2
    1b1c:	10 e0       	ldi	r17, 0x00	; 0
    1b1e:	22 ea       	ldi	r18, 0xA2	; 162
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	48 e2       	ldi	r20, 0x28	; 40
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	61 e9       	ldi	r22, 0x91	; 145
    1b28:	71 e0       	ldi	r23, 0x01	; 1
    1b2a:	c4 01       	movw	r24, r8
    1b2c:	f5 db       	rcall	.-2070   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
    1b2e:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:141
  if(n){
    1b30:	89 2b       	or	r24, r25
    1b32:	49 f0       	breq	.+18     	; 0x1b46 <Gsm_Ard::attachGPRS()+0x162>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:142
    return 6+n*10;
    1b34:	2a e0       	ldi	r18, 0x0A	; 10
    1b36:	2c 9f       	mul	r18, r28
    1b38:	c0 01       	movw	r24, r0
    1b3a:	2d 9f       	mul	r18, r29
    1b3c:	90 0d       	add	r25, r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	ec 01       	movw	r28, r24
    1b42:	26 96       	adiw	r28, 0x06	; 6
    1b44:	86 cf       	rjmp	.-244    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:145
  n=_send_cmd_comp_rsp(AT_CIFSR, AT_CIFSR_LEN, AT_ERROR, AT_ERROR_LEN, 5000);
    1b46:	38 e8       	ldi	r19, 0x88	; 136
    1b48:	e3 2e       	mov	r14, r19
    1b4a:	33 e1       	ldi	r19, 0x13	; 19
    1b4c:	f3 2e       	mov	r15, r19
    1b4e:	05 e0       	ldi	r16, 0x05	; 5
    1b50:	10 e0       	ldi	r17, 0x00	; 0
    1b52:	2c e9       	ldi	r18, 0x9C	; 156
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	48 e0       	ldi	r20, 0x08	; 8
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	6b ee       	ldi	r22, 0xEB	; 235
    1b5c:	71 e0       	ldi	r23, 0x01	; 1
    1b5e:	c4 01       	movw	r24, r8
    1b60:	db db       	rcall	.-2122   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:146
  switch(n){
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	61 f0       	breq	.+24     	; 0x1b7e <Gsm_Ard::attachGPRS()+0x19a>
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	91 05       	cpc	r25, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <Gsm_Ard::attachGPRS()+0x18a>
    1b6c:	60 c0       	rjmp	.+192    	; 0x1c2e <Gsm_Ard::attachGPRS()+0x24a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:148
      return 7+n*10;
    1b6e:	2a e0       	ldi	r18, 0x0A	; 10
    1b70:	28 9f       	mul	r18, r24
    1b72:	e0 01       	movw	r28, r0
    1b74:	29 9f       	mul	r18, r25
    1b76:	d0 0d       	add	r29, r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	27 96       	adiw	r28, 0x07	; 7
    1b7c:	6a cf       	rjmp	.-300    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:158
  n=_send_cmd_comp_rsp(AT_CIPSERVER_R, AT_CIPSERVER_R_LEN, AT_CIPSERVER_RESP, AT_CIPSERVER_RESP_LEN, 5000);
    1b7e:	28 e8       	ldi	r18, 0x88	; 136
    1b80:	e2 2e       	mov	r14, r18
    1b82:	23 e1       	ldi	r18, 0x13	; 19
    1b84:	f2 2e       	mov	r15, r18
    1b86:	0d e0       	ldi	r16, 0x0D	; 13
    1b88:	10 e0       	ldi	r17, 0x00	; 0
    1b8a:	25 e7       	ldi	r18, 0x75	; 117
    1b8c:	31 e0       	ldi	r19, 0x01	; 1
    1b8e:	4d e0       	ldi	r20, 0x0D	; 13
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	63 e8       	ldi	r22, 0x83	; 131
    1b94:	71 e0       	ldi	r23, 0x01	; 1
    1b96:	c4 01       	movw	r24, r8
    1b98:	bf db       	rcall	.-2178   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:159
  switch(n){
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	f1 f0       	breq	.+60     	; 0x1bda <Gsm_Ard::attachGPRS()+0x1f6>
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	41 f0       	breq	.+16     	; 0x1bb4 <Gsm_Ard::attachGPRS()+0x1d0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:161
      return 8+n*10;
    1ba4:	2a e0       	ldi	r18, 0x0A	; 10
    1ba6:	28 9f       	mul	r18, r24
    1ba8:	e0 01       	movw	r28, r0
    1baa:	29 9f       	mul	r18, r25
    1bac:	d0 0d       	add	r29, r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	28 96       	adiw	r28, 0x08	; 8
    1bb2:	4f cf       	rjmp	.-354    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:164
      n=_send_cmd_comp_rsp(AT_CIPSERVER_SET, AT_CIPSERVER_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    1bb4:	98 e8       	ldi	r25, 0x88	; 136
    1bb6:	e9 2e       	mov	r14, r25
    1bb8:	93 e1       	ldi	r25, 0x13	; 19
    1bba:	f9 2e       	mov	r15, r25
    1bbc:	02 e0       	ldi	r16, 0x02	; 2
    1bbe:	10 e0       	ldi	r17, 0x00	; 0
    1bc0:	22 ea       	ldi	r18, 0xA2	; 162
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4e e0       	ldi	r20, 0x0E	; 14
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	66 e6       	ldi	r22, 0x66	; 102
    1bca:	71 e0       	ldi	r23, 0x01	; 1
    1bcc:	c4 01       	movw	r24, r8
    1bce:	a4 db       	rcall	.-2232   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:166
        return 9+n*10;
    1bd0:	c9 e0       	ldi	r28, 0x09	; 9
    1bd2:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:165
      if(!n){
    1bd4:	89 2b       	or	r24, r25
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <Gsm_Ard::attachGPRS()+0x1f6>
    1bd8:	3c cf       	rjmp	.-392    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:173
  n=_send_cmd_comp_rsp(AT_CSTT, AT_CSTT_LEN, AT_OK, AT_OK_LEN, 5000);
    1bda:	88 e8       	ldi	r24, 0x88	; 136
    1bdc:	e8 2e       	mov	r14, r24
    1bde:	83 e1       	ldi	r24, 0x13	; 19
    1be0:	f8 2e       	mov	r15, r24
    1be2:	02 e0       	ldi	r16, 0x02	; 2
    1be4:	10 e0       	ldi	r17, 0x00	; 0
    1be6:	22 ea       	ldi	r18, 0xA2	; 162
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	44 e2       	ldi	r20, 0x24	; 36
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	6e e2       	ldi	r22, 0x2E	; 46
    1bf0:	71 e0       	ldi	r23, 0x01	; 1
    1bf2:	c4 01       	movw	r24, r8
    1bf4:	91 db       	rcall	.-2270   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:175
    return 10;
    1bf6:	ca e0       	ldi	r28, 0x0A	; 10
    1bf8:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:174
  if(n){
    1bfa:	89 2b       	or	r24, r25
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <Gsm_Ard::attachGPRS()+0x21c>
    1bfe:	29 cf       	rjmp	.-430    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:178
  n=_send_cmd_comp_rsp(AT_CIICR, AT_CIICR_LEN, AT_OK, AT_OK_LEN, 5000);
    1c00:	22 ea       	ldi	r18, 0xA2	; 162
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	48 e0       	ldi	r20, 0x08	; 8
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	65 e2       	ldi	r22, 0x25	; 37
    1c0a:	71 e0       	ldi	r23, 0x01	; 1
    1c0c:	c4 01       	movw	r24, r8
    1c0e:	84 db       	rcall	.-2296   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
    1c10:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:179
  if(n){
    1c12:	89 2b       	or	r24, r25
    1c14:	91 f4       	brne	.+36     	; 0x1c3a <Gsm_Ard::attachGPRS()+0x256>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:183
  n=_send_cmd_comp_rsp(AT_CIFSR, AT_CIFSR_LEN, AT_ERROR, AT_ERROR_LEN, 5000);
    1c16:	05 e0       	ldi	r16, 0x05	; 5
    1c18:	10 e0       	ldi	r17, 0x00	; 0
    1c1a:	2c e9       	ldi	r18, 0x9C	; 156
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	48 e0       	ldi	r20, 0x08	; 8
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	6b ee       	ldi	r22, 0xEB	; 235
    1c24:	71 e0       	ldi	r23, 0x01	; 1
    1c26:	c4 01       	movw	r24, r8
    1c28:	77 db       	rcall	.-2322   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:184
  if(n!=1){
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	49 f4       	brne	.+18     	; 0x1c40 <Gsm_Ard::attachGPRS()+0x25c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:188
  _change_gsm_state(GSM_IP_STATE);
    1c2e:	63 e0       	ldi	r22, 0x03	; 3
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	c4 01       	movw	r24, r8
    1c34:	0e 94 04 06 	call	0xc08	; 0xc08 <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:189
  return 0;
    1c38:	0c cf       	rjmp	.-488    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:180
    return 11;
    1c3a:	cb e0       	ldi	r28, 0x0B	; 11
    1c3c:	d0 e0       	ldi	r29, 0x00	; 0
    1c3e:	09 cf       	rjmp	.-494    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:185
    return 12;
    1c40:	cc e0       	ldi	r28, 0x0C	; 12
    1c42:	d0 e0       	ldi	r29, 0x00	; 0
    1c44:	06 cf       	rjmp	.-500    	; 0x1a52 <Gsm_Ard::attachGPRS()+0x6e>

00001c46 <Gsm_Ard::dettachGPRS()>:
_ZN7Gsm_Ard11dettachGPRSEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:192
int Gsm_Ard::dettachGPRS(){
    1c46:	8f 92       	push	r8
    1c48:	9f 92       	push	r9
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:194
  if(_gsm_state!=GSM_IP_STATE){
    1c60:	fc 01       	movw	r30, r24
    1c62:	ea 57       	subi	r30, 0x7A	; 122
    1c64:	fe 4f       	sbci	r31, 0xFE	; 254
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:195
    return 1;
    1c6a:	c1 e0       	ldi	r28, 0x01	; 1
    1c6c:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:194
  if(_gsm_state!=GSM_IP_STATE){
    1c6e:	03 97       	sbiw	r24, 0x03	; 3
    1c70:	c9 f4       	brne	.+50     	; 0x1ca4 <Gsm_Ard::dettachGPRS()+0x5e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:198
  n=_send_cmd_comp_rsp(AT_CIPSHUT, AT_CIPSHUT_LEN, AT_SHUT_OK, AT_SHUT_OK_LEN, 10000);
    1c72:	40 e1       	ldi	r20, 0x10	; 16
    1c74:	e4 2e       	mov	r14, r20
    1c76:	47 e2       	ldi	r20, 0x27	; 39
    1c78:	f4 2e       	mov	r15, r20
    1c7a:	07 e0       	ldi	r16, 0x07	; 7
    1c7c:	10 e0       	ldi	r17, 0x00	; 0
    1c7e:	23 e5       	ldi	r18, 0x53	; 83
    1c80:	31 e0       	ldi	r19, 0x01	; 1
    1c82:	4a e0       	ldi	r20, 0x0A	; 10
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	6b e5       	ldi	r22, 0x5B	; 91
    1c88:	71 e0       	ldi	r23, 0x01	; 1
    1c8a:	c4 01       	movw	r24, r8
    1c8c:	45 db       	rcall	.-2422   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
    1c8e:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:199
  if(n){
    1c90:	89 2b       	or	r24, r25
    1c92:	b1 f0       	breq	.+44     	; 0x1cc0 <Gsm_Ard::dettachGPRS()+0x7a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:200
    return 2+10*n;
    1c94:	2a e0       	ldi	r18, 0x0A	; 10
    1c96:	2c 9f       	mul	r18, r28
    1c98:	c0 01       	movw	r24, r0
    1c9a:	2d 9f       	mul	r18, r29
    1c9c:	90 0d       	add	r25, r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	ec 01       	movw	r28, r24
    1ca2:	22 96       	adiw	r28, 0x02	; 2
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:219
}
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	bf 90       	pop	r11
    1cb8:	af 90       	pop	r10
    1cba:	9f 90       	pop	r9
    1cbc:	8f 90       	pop	r8
    1cbe:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:203
  n=_send_cmd_comp_several_rsp(AT_CGATT_R, AT_CGATT_R_LEN, AT_CGATT_0, AT_CGATT_0_LEN, AT_CGATT_1, AT_CGATT_1_LEN, 5000);
    1cc0:	98 e8       	ldi	r25, 0x88	; 136
    1cc2:	a9 2e       	mov	r10, r25
    1cc4:	93 e1       	ldi	r25, 0x13	; 19
    1cc6:	b9 2e       	mov	r11, r25
    1cc8:	29 e0       	ldi	r18, 0x09	; 9
    1cca:	c2 2e       	mov	r12, r18
    1ccc:	d1 2c       	mov	r13, r1
    1cce:	3a e0       	ldi	r19, 0x0A	; 10
    1cd0:	e3 2e       	mov	r14, r19
    1cd2:	32 e0       	ldi	r19, 0x02	; 2
    1cd4:	f3 2e       	mov	r15, r19
    1cd6:	09 e0       	ldi	r16, 0x09	; 9
    1cd8:	10 e0       	ldi	r17, 0x00	; 0
    1cda:	24 e1       	ldi	r18, 0x14	; 20
    1cdc:	32 e0       	ldi	r19, 0x02	; 2
    1cde:	49 e0       	ldi	r20, 0x09	; 9
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	6e e1       	ldi	r22, 0x1E	; 30
    1ce4:	72 e0       	ldi	r23, 0x02	; 2
    1ce6:	c4 01       	movw	r24, r8
    1ce8:	46 dc       	rcall	.-1908   	; 0x1576 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:204
  switch(n){
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	19 f1       	breq	.+70     	; 0x1d34 <Gsm_Ard::dettachGPRS()+0xee>
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	41 f0       	breq	.+16     	; 0x1d04 <Gsm_Ard::dettachGPRS()+0xbe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:206
      return 3+10*n;
    1cf4:	2a e0       	ldi	r18, 0x0A	; 10
    1cf6:	28 9f       	mul	r18, r24
    1cf8:	e0 01       	movw	r28, r0
    1cfa:	29 9f       	mul	r18, r25
    1cfc:	d0 0d       	add	r29, r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	23 96       	adiw	r28, 0x03	; 3
    1d02:	d0 cf       	rjmp	.-96     	; 0x1ca4 <Gsm_Ard::dettachGPRS()+0x5e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:211
      n=_send_cmd_comp_rsp(AT_CGATT_SET_OFF, AT_CGATT_SET_OFF_LEN, AT_OK, AT_OK_LEN, 10000);
    1d04:	80 e1       	ldi	r24, 0x10	; 16
    1d06:	e8 2e       	mov	r14, r24
    1d08:	87 e2       	ldi	r24, 0x27	; 39
    1d0a:	f8 2e       	mov	r15, r24
    1d0c:	02 e0       	ldi	r16, 0x02	; 2
    1d0e:	10 e0       	ldi	r17, 0x00	; 0
    1d10:	22 ea       	ldi	r18, 0xA2	; 162
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a e0       	ldi	r20, 0x0A	; 10
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	64 ef       	ldi	r22, 0xF4	; 244
    1d1a:	71 e0       	ldi	r23, 0x01	; 1
    1d1c:	c4 01       	movw	r24, r8
    1d1e:	fc da       	rcall	.-2568   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:212
      if(n){
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	41 f0       	breq	.+16     	; 0x1d34 <Gsm_Ard::dettachGPRS()+0xee>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:213
        return 4+10*n;
    1d24:	2a e0       	ldi	r18, 0x0A	; 10
    1d26:	28 9f       	mul	r18, r24
    1d28:	e0 01       	movw	r28, r0
    1d2a:	29 9f       	mul	r18, r25
    1d2c:	d0 0d       	add	r29, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	24 96       	adiw	r28, 0x04	; 4
    1d32:	b8 cf       	rjmp	.-144    	; 0x1ca4 <Gsm_Ard::dettachGPRS()+0x5e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:217
  _change_gsm_state(GSM_PIN_STATE);
    1d34:	62 e0       	ldi	r22, 0x02	; 2
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	c4 01       	movw	r24, r8
    1d3a:	0e 94 04 06 	call	0xc08	; 0xc08 <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:218
  return 0;
    1d3e:	b2 cf       	rjmp	.-156    	; 0x1ca4 <Gsm_Ard::dettachGPRS()+0x5e>

00001d40 <Gsm_Ard::connect_tcp_socket()>:
_ZN7Gsm_Ard18connect_tcp_socketEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:221
int Gsm_Ard::connect_tcp_socket(){
    1d40:	8f 92       	push	r8
    1d42:	9f 92       	push	r9
    1d44:	af 92       	push	r10
    1d46:	bf 92       	push	r11
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	4c 01       	movw	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:223
  if(_gsm_state!=GSM_IP_STATE){
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	ea 57       	subi	r30, 0x7A	; 122
    1d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:224
    return 1;
    1d64:	c1 e0       	ldi	r28, 0x01	; 1
    1d66:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:223
  if(_gsm_state!=GSM_IP_STATE){
    1d68:	03 97       	sbiw	r24, 0x03	; 3
    1d6a:	b9 f4       	brne	.+46     	; 0x1d9a <Gsm_Ard::connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:227
  n=_send_cmd_comp_rsp(AT_CIPSHUT, AT_CIPSHUT_LEN, AT_SHUT_OK, AT_SHUT_OK_LEN, 10000);
    1d6c:	50 e1       	ldi	r21, 0x10	; 16
    1d6e:	e5 2e       	mov	r14, r21
    1d70:	57 e2       	ldi	r21, 0x27	; 39
    1d72:	f5 2e       	mov	r15, r21
    1d74:	07 e0       	ldi	r16, 0x07	; 7
    1d76:	10 e0       	ldi	r17, 0x00	; 0
    1d78:	23 e5       	ldi	r18, 0x53	; 83
    1d7a:	31 e0       	ldi	r19, 0x01	; 1
    1d7c:	4a e0       	ldi	r20, 0x0A	; 10
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	6b e5       	ldi	r22, 0x5B	; 91
    1d82:	71 e0       	ldi	r23, 0x01	; 1
    1d84:	c4 01       	movw	r24, r8
    1d86:	c8 da       	rcall	.-2672   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:228
  if(n){
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	a9 f0       	breq	.+42     	; 0x1db6 <Gsm_Ard::connect_tcp_socket()+0x76>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:229
    return 2+10*n;
    1d8c:	2a e0       	ldi	r18, 0x0A	; 10
    1d8e:	28 9f       	mul	r18, r24
    1d90:	e0 01       	movw	r28, r0
    1d92:	29 9f       	mul	r18, r25
    1d94:	d0 0d       	add	r29, r0
    1d96:	11 24       	eor	r1, r1
    1d98:	22 96       	adiw	r28, 0x02	; 2
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:260
}
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	bf 90       	pop	r11
    1dae:	af 90       	pop	r10
    1db0:	9f 90       	pop	r9
    1db2:	8f 90       	pop	r8
    1db4:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:232
  n=_send_cmd_comp_several_rsp(AT_CIPMUX_R, AT_CIPMUX_R_LEN, AT_CIPMUX_0, AT_CIPMUX_0_LEN, AT_CIPMUX_1, AT_CIPMUX_1_LEN, 5000);
    1db6:	28 e8       	ldi	r18, 0x88	; 136
    1db8:	a2 2e       	mov	r10, r18
    1dba:	23 e1       	ldi	r18, 0x13	; 19
    1dbc:	b2 2e       	mov	r11, r18
    1dbe:	3a e0       	ldi	r19, 0x0A	; 10
    1dc0:	c3 2e       	mov	r12, r19
    1dc2:	d1 2c       	mov	r13, r1
    1dc4:	44 e0       	ldi	r20, 0x04	; 4
    1dc6:	e4 2e       	mov	r14, r20
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	f4 2e       	mov	r15, r20
    1dcc:	0a e0       	ldi	r16, 0x0A	; 10
    1dce:	10 e0       	ldi	r17, 0x00	; 0
    1dd0:	2f e0       	ldi	r18, 0x0F	; 15
    1dd2:	31 e0       	ldi	r19, 0x01	; 1
    1dd4:	4a e0       	ldi	r20, 0x0A	; 10
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	6a e1       	ldi	r22, 0x1A	; 26
    1dda:	71 e0       	ldi	r23, 0x01	; 1
    1ddc:	c4 01       	movw	r24, r8
    1dde:	cb db       	rcall	.-2154   	; 0x1576 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, unsigned int, char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:233
  switch(n){
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	19 f1       	breq	.+70     	; 0x1e2a <Gsm_Ard::connect_tcp_socket()+0xea>
    1de4:	81 30       	cpi	r24, 0x01	; 1
    1de6:	91 05       	cpc	r25, r1
    1de8:	41 f0       	breq	.+16     	; 0x1dfa <Gsm_Ard::connect_tcp_socket()+0xba>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:235
      return 3+10*n;
    1dea:	2a e0       	ldi	r18, 0x0A	; 10
    1dec:	28 9f       	mul	r18, r24
    1dee:	e0 01       	movw	r28, r0
    1df0:	29 9f       	mul	r18, r25
    1df2:	d0 0d       	add	r29, r0
    1df4:	11 24       	eor	r1, r1
    1df6:	23 96       	adiw	r28, 0x03	; 3
    1df8:	d0 cf       	rjmp	.-96     	; 0x1d9a <Gsm_Ard::connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:240
      n=_send_cmd_comp_rsp(AT_CIPMUX_SET, AT_CIPMUX_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    1dfa:	98 e8       	ldi	r25, 0x88	; 136
    1dfc:	e9 2e       	mov	r14, r25
    1dfe:	93 e1       	ldi	r25, 0x13	; 19
    1e00:	f9 2e       	mov	r15, r25
    1e02:	02 e0       	ldi	r16, 0x02	; 2
    1e04:	10 e0       	ldi	r17, 0x00	; 0
    1e06:	22 ea       	ldi	r18, 0xA2	; 162
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	4b e0       	ldi	r20, 0x0B	; 11
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	68 ef       	ldi	r22, 0xF8	; 248
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	c4 01       	movw	r24, r8
    1e14:	81 da       	rcall	.-2814   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:241
      if(n){
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	41 f0       	breq	.+16     	; 0x1e2a <Gsm_Ard::connect_tcp_socket()+0xea>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:242
        return 4+10*n;
    1e1a:	2a e0       	ldi	r18, 0x0A	; 10
    1e1c:	28 9f       	mul	r18, r24
    1e1e:	e0 01       	movw	r28, r0
    1e20:	29 9f       	mul	r18, r25
    1e22:	d0 0d       	add	r29, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	24 96       	adiw	r28, 0x04	; 4
    1e28:	b8 cf       	rjmp	.-144    	; 0x1d9a <Gsm_Ard::connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:247
  n=_send_cmd_comp_rsp(AT_CIPSTART_SET, AT_CIPSTART_SET_LEN, AT_OK, AT_OK_LEN, 5000);
    1e2a:	88 e8       	ldi	r24, 0x88	; 136
    1e2c:	e8 2e       	mov	r14, r24
    1e2e:	83 e1       	ldi	r24, 0x13	; 19
    1e30:	f8 2e       	mov	r15, r24
    1e32:	02 e0       	ldi	r16, 0x02	; 2
    1e34:	10 e0       	ldi	r17, 0x00	; 0
    1e36:	22 ea       	ldi	r18, 0xA2	; 162
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	44 e2       	ldi	r20, 0x24	; 36
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	63 ed       	ldi	r22, 0xD3	; 211
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	c4 01       	movw	r24, r8
    1e44:	69 da       	rcall	.-2862   	; 0x1318 <Gsm_Ard::_send_cmd_comp_rsp(char const*, unsigned int, char const*, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:248
  if(n){
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	41 f0       	breq	.+16     	; 0x1e5a <Gsm_Ard::connect_tcp_socket()+0x11a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:249
    return 5+10*n;
    1e4a:	2a e0       	ldi	r18, 0x0A	; 10
    1e4c:	28 9f       	mul	r18, r24
    1e4e:	e0 01       	movw	r28, r0
    1e50:	29 9f       	mul	r18, r25
    1e52:	d0 0d       	add	r29, r0
    1e54:	11 24       	eor	r1, r1
    1e56:	25 96       	adiw	r28, 0x05	; 5
    1e58:	a0 cf       	rjmp	.-192    	; 0x1d9a <Gsm_Ard::connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:252
  n=_no_cmd_comp_rsp(AT_CONNECT_OK, AT_CONNECT_OK_LEN, 10000);
    1e5a:	20 e1       	ldi	r18, 0x10	; 16
    1e5c:	37 e2       	ldi	r19, 0x27	; 39
    1e5e:	4a e0       	ldi	r20, 0x0A	; 10
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	68 ec       	ldi	r22, 0xC8	; 200
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	c4 01       	movw	r24, r8
    1e68:	cc d9       	rcall	.-3176   	; 0x1202 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)>
    1e6a:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:253
  if(n){
    1e6c:	89 2b       	or	r24, r25
    1e6e:	49 f0       	breq	.+18     	; 0x1e82 <Gsm_Ard::connect_tcp_socket()+0x142>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:254
    return 6+10*n;
    1e70:	2a e0       	ldi	r18, 0x0A	; 10
    1e72:	2c 9f       	mul	r18, r28
    1e74:	c0 01       	movw	r24, r0
    1e76:	2d 9f       	mul	r18, r29
    1e78:	90 0d       	add	r25, r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	ec 01       	movw	r28, r24
    1e7e:	26 96       	adiw	r28, 0x06	; 6
    1e80:	8c cf       	rjmp	.-232    	; 0x1d9a <Gsm_Ard::connect_tcp_socket()+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:257
  _change_gsm_state(GSM_TCP_STATE);
    1e82:	64 e0       	ldi	r22, 0x04	; 4
    1e84:	70 e0       	ldi	r23, 0x00	; 0
    1e86:	c4 01       	movw	r24, r8
    1e88:	0e 94 04 06 	call	0xc08	; 0xc08 <Gsm_Ard::_change_gsm_state(GSM_STATE)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:259
  return 0;
    1e8c:	86 cf       	rjmp	.-244    	; 0x1d9a <Gsm_Ard::connect_tcp_socket()+0x5a>

00001e8e <Gsm_Ard::_recv_socket_size(int, unsigned int*)>:
_ZN7Gsm_Ard17_recv_socket_sizeEiPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:604
int Gsm_Ard::_recv_socket_size(int wait_period, uint16_t* rsp_size){
    1e8e:	6f 92       	push	r6
    1e90:	7f 92       	push	r7
    1e92:	8f 92       	push	r8
    1e94:	9f 92       	push	r9
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	ec 01       	movw	r28, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	3a 01       	movw	r6, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:606
  if(_recv_buff_state!=BUFF_READY){
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e8 57       	subi	r30, 0x78	; 120
    1eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb6:	20 81       	ld	r18, Z
    1eb8:	31 81       	ldd	r19, Z+1	; 0x01
    1eba:	23 2b       	or	r18, r19
    1ebc:	c1 f0       	breq	.+48     	; 0x1eee <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0x60>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:608
    dbg_print_error(__FILE__, __LINE__,  1);
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	60 e6       	ldi	r22, 0x60	; 96
    1ec4:	72 e0       	ldi	r23, 0x02	; 2
    1ec6:	8b eb       	ldi	r24, 0xBB	; 187
    1ec8:	91 e0       	ldi	r25, 0x01	; 1
    1eca:	21 d4       	rcall	.+2114   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:610
    return 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:643
}
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	bf 90       	pop	r11
    1ee2:	af 90       	pop	r10
    1ee4:	9f 90       	pop	r9
    1ee6:	8f 90       	pop	r8
    1ee8:	7f 90       	pop	r7
    1eea:	6f 90       	pop	r6
    1eec:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:612
  if(_gsm_state!=GSM_TCP_STATE){
    1eee:	de 01       	movw	r26, r28
    1ef0:	aa 57       	subi	r26, 0x7A	; 122
    1ef2:	be 4f       	sbci	r27, 0xFE	; 254
    1ef4:	2d 91       	ld	r18, X+
    1ef6:	3c 91       	ld	r19, X
    1ef8:	24 30       	cpi	r18, 0x04	; 4
    1efa:	31 05       	cpc	r19, r1
    1efc:	51 f0       	breq	.+20     	; 0x1f12 <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0x84>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:614
    dbg_print_error(__FILE__, __LINE__,  2);
    1efe:	42 e0       	ldi	r20, 0x02	; 2
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	66 e6       	ldi	r22, 0x66	; 102
    1f04:	72 e0       	ldi	r23, 0x02	; 2
    1f06:	8b eb       	ldi	r24, 0xBB	; 187
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	01 d4       	rcall	.+2050   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:616
    return 2;
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	df cf       	rjmp	.-66     	; 0x1ed0 <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0x42>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:619
  _recv_buff_state=BUFF_USED;
    1f12:	21 e0       	ldi	r18, 0x01	; 1
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	31 83       	std	Z+1, r19	; 0x01
    1f18:	20 83       	st	Z, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:623
      delay(wait_period/10);
    1f1a:	6a e0       	ldi	r22, 0x0A	; 10
    1f1c:	70 e0       	ldi	r23, 0x00	; 0
    1f1e:	0e 94 84 1a 	call	0x3508	; 0x3508 <__divmodhi4>
    1f22:	4b 01       	movw	r8, r22
    1f24:	77 0f       	add	r23, r23
    1f26:	aa 08       	sbc	r10, r10
    1f28:	bb 08       	sbc	r11, r11
    1f2a:	8a e0       	ldi	r24, 0x0A	; 10
    1f2c:	e8 2e       	mov	r14, r24
    1f2e:	f1 2c       	mov	r15, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:621
  for(int i=0;i<10 && _recv_buff_idx<2;i++){
    1f30:	8e 01       	movw	r16, r28
    1f32:	00 58       	subi	r16, 0x80	; 128
    1f34:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:622
    if(!_ss.available()){
    1f36:	6e 01       	movw	r12, r28
    1f38:	82 e7       	ldi	r24, 0x72	; 114
    1f3a:	c8 1a       	sub	r12, r24
    1f3c:	8e ef       	ldi	r24, 0xFE	; 254
    1f3e:	d8 0a       	sbc	r13, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:621
  for(int i=0;i<10 && _recv_buff_idx<2;i++){
    1f40:	f8 01       	movw	r30, r16
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	02 97       	sbiw	r24, 0x02	; 2
    1f48:	58 f4       	brcc	.+22     	; 0x1f60 <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0xd2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:622
    if(!_ss.available()){
    1f4a:	c6 01       	movw	r24, r12
    1f4c:	a7 d4       	rcall	.+2382   	; 0x289c <SoftwareSerial::available()>
    1f4e:	89 2b       	or	r24, r25
    1f50:	c9 f4       	brne	.+50     	; 0x1f84 <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0xf6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:623
      delay(wait_period/10);
    1f52:	c5 01       	movw	r24, r10
    1f54:	b4 01       	movw	r22, r8
    1f56:	ed d6       	rcall	.+3546   	; 0x2d32 <delay>
    1f58:	f1 e0       	ldi	r31, 0x01	; 1
    1f5a:	ef 1a       	sub	r14, r31
    1f5c:	f1 08       	sbc	r15, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:621
  for(int i=0;i<10 && _recv_buff_idx<2;i++){
    1f5e:	81 f7       	brne	.-32     	; 0x1f40 <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0xb2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:630
  if(_recv_buff_idx != 2){
    1f60:	f8 01       	movw	r30, r16
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	02 97       	sbiw	r24, 0x02	; 2
    1f68:	e1 f0       	breq	.+56     	; 0x1fa2 <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0x114>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:632
    dbg_print_error(__FILE__, __LINE__,  3);
    1f6a:	43 e0       	ldi	r20, 0x03	; 3
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	68 e7       	ldi	r22, 0x78	; 120
    1f70:	72 e0       	ldi	r23, 0x02	; 2
    1f72:	8b eb       	ldi	r24, 0xBB	; 187
    1f74:	91 e0       	ldi	r25, 0x01	; 1
    1f76:	cb d3       	rcall	.+1942   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:634
    _clear_recv_buff();
    1f78:	ce 01       	movw	r24, r28
    1f7a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:635
    return 3;
    1f7e:	83 e0       	ldi	r24, 0x03	; 3
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a6 cf       	rjmp	.-180    	; 0x1ed0 <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0x42>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:626
      _recv_buff[_recv_buff_idx++]=_ss.read();
    1f84:	c6 01       	movw	r24, r12
    1f86:	f4 d3       	rcall	.+2024   	; 0x2770 <SoftwareSerial::read()>
    1f88:	f8 01       	movw	r30, r16
    1f8a:	20 81       	ld	r18, Z
    1f8c:	31 81       	ldd	r19, Z+1	; 0x01
    1f8e:	a9 01       	movw	r20, r18
    1f90:	4f 5f       	subi	r20, 0xFF	; 255
    1f92:	5f 4f       	sbci	r21, 0xFF	; 255
    1f94:	51 83       	std	Z+1, r21	; 0x01
    1f96:	40 83       	st	Z, r20
    1f98:	2c 0f       	add	r18, r28
    1f9a:	3d 1f       	adc	r19, r29
    1f9c:	f9 01       	movw	r30, r18
    1f9e:	80 83       	st	Z, r24
    1fa0:	db cf       	rjmp	.-74     	; 0x1f58 <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0xca>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:639
  *rsp_size=ntohs(tmp);
    1fa2:	88 81       	ld	r24, Y
    1fa4:	99 81       	ldd	r25, Y+1	; 0x01
    1fa6:	98 27       	eor	r25, r24
    1fa8:	89 27       	eor	r24, r25
    1faa:	98 27       	eor	r25, r24
    1fac:	f3 01       	movw	r30, r6
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:641
  _clear_recv_buff();
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:642
  return 0;
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	89 cf       	rjmp	.-238    	; 0x1ed0 <Gsm_Ard::_recv_socket_size(int, unsigned int*)+0x42>

00001fbe <Gsm_Ard::_recv_socket(int)>:
_ZN7Gsm_Ard12_recv_socketEi():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:645
int Gsm_Ard::_recv_socket(int wait_period){
    1fbe:	2f 92       	push	r2
    1fc0:	3f 92       	push	r3
    1fc2:	4f 92       	push	r4
    1fc4:	5f 92       	push	r5
    1fc6:	6f 92       	push	r6
    1fc8:	7f 92       	push	r7
    1fca:	8f 92       	push	r8
    1fcc:	9f 92       	push	r9
    1fce:	af 92       	push	r10
    1fd0:	bf 92       	push	r11
    1fd2:	cf 92       	push	r12
    1fd4:	df 92       	push	r13
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <Gsm_Ard::_recv_socket(int)+0x26>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <Gsm_Ard::_recv_socket(int)+0x28>
    1fe6:	1f 92       	push	r1
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	7c 01       	movw	r14, r24
    1fee:	8b 01       	movw	r16, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:652
  if(_recv_buff_state!=BUFF_READY){
    1ff0:	88 57       	subi	r24, 0x78	; 120
    1ff2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ff4:	9d 83       	std	Y+5, r25	; 0x05
    1ff6:	8c 83       	std	Y+4, r24	; 0x04
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	89 2b       	or	r24, r25
    2000:	19 f1       	breq	.+70     	; 0x2048 <Gsm_Ard::_recv_socket(int)+0x8a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:654
    dbg_print_error(__FILE__, __LINE__,  1);
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	6e e8       	ldi	r22, 0x8E	; 142
    2008:	72 e0       	ldi	r23, 0x02	; 2
    200a:	8b eb       	ldi	r24, 0xBB	; 187
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	7f d3       	rcall	.+1790   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:656
    return 1;
    2010:	cc 24       	eor	r12, r12
    2012:	c3 94       	inc	r12
    2014:	d1 2c       	mov	r13, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:733
}
    2016:	c6 01       	movw	r24, r12
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	bf 90       	pop	r11
    2034:	af 90       	pop	r10
    2036:	9f 90       	pop	r9
    2038:	8f 90       	pop	r8
    203a:	7f 90       	pop	r7
    203c:	6f 90       	pop	r6
    203e:	5f 90       	pop	r5
    2040:	4f 90       	pop	r4
    2042:	3f 90       	pop	r3
    2044:	2f 90       	pop	r2
    2046:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:658
  if(_gsm_state!=GSM_TCP_STATE){
    2048:	f7 01       	movw	r30, r14
    204a:	ea 57       	subi	r30, 0x7A	; 122
    204c:	fe 4f       	sbci	r31, 0xFE	; 254
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	04 97       	sbiw	r24, 0x04	; 4
    2054:	59 f0       	breq	.+22     	; 0x206c <Gsm_Ard::_recv_socket(int)+0xae>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:660
    dbg_print_error(__FILE__, __LINE__,  2);
    2056:	42 e0       	ldi	r20, 0x02	; 2
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	64 e9       	ldi	r22, 0x94	; 148
    205c:	72 e0       	ldi	r23, 0x02	; 2
    205e:	8b eb       	ldi	r24, 0xBB	; 187
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	55 d3       	rcall	.+1706   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:662
    return 2;
    2064:	52 e0       	ldi	r21, 0x02	; 2
    2066:	c5 2e       	mov	r12, r21
    2068:	d1 2c       	mov	r13, r1
    206a:	d5 cf       	rjmp	.-86     	; 0x2016 <Gsm_Ard::_recv_socket(int)+0x58>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:665
  n=_recv_socket_size(wait_period, &trans_size);
    206c:	ae 01       	movw	r20, r28
    206e:	4f 5f       	subi	r20, 0xFF	; 255
    2070:	5f 4f       	sbci	r21, 0xFF	; 255
    2072:	c7 01       	movw	r24, r14
    2074:	0c df       	rcall	.-488    	; 0x1e8e <Gsm_Ard::_recv_socket_size(int, unsigned int*)>
    2076:	6c 01       	movw	r12, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:666
  if(n){
    2078:	89 2b       	or	r24, r25
    207a:	89 f0       	breq	.+34     	; 0x209e <Gsm_Ard::_recv_socket(int)+0xe0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:668
    dbg_print_error(__FILE__, __LINE__,  3+10*n);
    207c:	2a e0       	ldi	r18, 0x0A	; 10
    207e:	2c 9d       	mul	r18, r12
    2080:	c0 01       	movw	r24, r0
    2082:	2d 9d       	mul	r18, r13
    2084:	90 0d       	add	r25, r0
    2086:	11 24       	eor	r1, r1
    2088:	6c 01       	movw	r12, r24
    208a:	f3 e0       	ldi	r31, 0x03	; 3
    208c:	cf 0e       	add	r12, r31
    208e:	d1 1c       	adc	r13, r1
    2090:	a6 01       	movw	r20, r12
    2092:	6c e9       	ldi	r22, 0x9C	; 156
    2094:	72 e0       	ldi	r23, 0x02	; 2
    2096:	8b eb       	ldi	r24, 0xBB	; 187
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	39 d3       	rcall	.+1650   	; 0x270e <dbg_print_error(char const*, int, int)>
    209c:	bc cf       	rjmp	.-136    	; 0x2016 <Gsm_Ard::_recv_socket(int)+0x58>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:673
  _recv_buff_state=BUFF_USED;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	ec 81       	ldd	r30, Y+4	; 0x04
    20a4:	fd 81       	ldd	r31, Y+5	; 0x05
    20a6:	91 83       	std	Z+1, r25	; 0x01
    20a8:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:677
      delay(wait_period/10);
    20aa:	c8 01       	movw	r24, r16
    20ac:	6a e0       	ldi	r22, 0x0A	; 10
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	0e 94 84 1a 	call	0x3508	; 0x3508 <__divmodhi4>
    20b4:	2b 01       	movw	r4, r22
    20b6:	77 0f       	add	r23, r23
    20b8:	66 08       	sbc	r6, r6
    20ba:	77 08       	sbc	r7, r7
    20bc:	4a e0       	ldi	r20, 0x0A	; 10
    20be:	a4 2e       	mov	r10, r20
    20c0:	b1 2c       	mov	r11, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:650
  uint8_t data_read=0;
    20c2:	1b 82       	std	Y+3, r1	; 0x03
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:647
  bool ready_for_confirm=false;
    20c4:	21 2c       	mov	r2, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:676
    if(!_ss.available()){
    20c6:	87 01       	movw	r16, r14
    20c8:	02 57       	subi	r16, 0x72	; 114
    20ca:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:694
        while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && data_read<trans_size){
    20cc:	47 01       	movw	r8, r14
    20ce:	f0 e8       	ldi	r31, 0x80	; 128
    20d0:	8f 1a       	sub	r8, r31
    20d2:	fe ef       	ldi	r31, 0xFE	; 254
    20d4:	9f 0a       	sbc	r9, r31
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:676
    if(!_ss.available()){
    20d6:	c8 01       	movw	r24, r16
    20d8:	e1 d3       	rcall	.+1986   	; 0x289c <SoftwareSerial::available()>
    20da:	89 2b       	or	r24, r25
    20dc:	79 f5       	brne	.+94     	; 0x213c <Gsm_Ard::_recv_socket(int)+0x17e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:677
      delay(wait_period/10);
    20de:	c3 01       	movw	r24, r6
    20e0:	b2 01       	movw	r22, r4
    20e2:	27 d6       	rcall	.+3150   	; 0x2d32 <delay>
    20e4:	31 2c       	mov	r3, r1
    20e6:	21 e0       	ldi	r18, 0x01	; 1
    20e8:	a2 1a       	sub	r10, r18
    20ea:	b1 08       	sbc	r11, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:675
  for(int i=0;i<10 && !done;i++){
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <Gsm_Ard::_recv_socket(int)+0x134>
    20ee:	33 20       	and	r3, r3
    20f0:	91 f3       	breq	.-28     	; 0x20d6 <Gsm_Ard::_recv_socket(int)+0x118>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:706
  dbg_print_sock_buffer(__FILE__, __LINE__, "RECV_BUFF", _recv_buff,
    20f2:	57 01       	movw	r10, r14
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	a4 1a       	sub	r10, r20
    20f8:	4e ef       	ldi	r20, 0xFE	; 254
    20fa:	b4 0a       	sbc	r11, r20
    20fc:	f5 01       	movw	r30, r10
    20fe:	00 81       	ld	r16, Z
    2100:	11 81       	ldd	r17, Z+1	; 0x01
    2102:	97 01       	movw	r18, r14
    2104:	47 e1       	ldi	r20, 0x17	; 23
    2106:	52 e0       	ldi	r21, 0x02	; 2
    2108:	62 ec       	ldi	r22, 0xC2	; 194
    210a:	72 e0       	ldi	r23, 0x02	; 2
    210c:	8b eb       	ldi	r24, 0xBB	; 187
    210e:	91 e0       	ldi	r25, 0x01	; 1
    2110:	b1 d2       	rcall	.+1378   	; 0x2674 <dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:710
  if(_recv_buff_idx==RECV_BUFF_LEN){
    2112:	f5 01       	movw	r30, r10
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	80 38       	cpi	r24, 0x80	; 128
    211a:	91 05       	cpc	r25, r1
    211c:	09 f0       	breq	.+2      	; 0x2120 <Gsm_Ard::_recv_socket(int)+0x162>
    211e:	5f c0       	rjmp	.+190    	; 0x21de <Gsm_Ard::_recv_socket(int)+0x220>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:711
    _clear_recv_buff();
    2120:	c7 01       	movw	r24, r14
    2122:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:713
    dbg_print_error(__FILE__, __LINE__,  5);
    2126:	45 e0       	ldi	r20, 0x05	; 5
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	69 ec       	ldi	r22, 0xC9	; 201
    212c:	72 e0       	ldi	r23, 0x02	; 2
    212e:	8b eb       	ldi	r24, 0xBB	; 187
    2130:	91 e0       	ldi	r25, 0x01	; 1
    2132:	ed d2       	rcall	.+1498   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:715
    return 5;
    2134:	25 e0       	ldi	r18, 0x05	; 5
    2136:	c2 2e       	mov	r12, r18
    2138:	d1 2c       	mov	r13, r1
    213a:	6d cf       	rjmp	.-294    	; 0x2016 <Gsm_Ard::_recv_socket(int)+0x58>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:680
      if(ready_for_confirm){
    213c:	22 20       	and	r2, r2
    213e:	09 f1       	breq	.+66     	; 0x2182 <Gsm_Ard::_recv_socket(int)+0x1c4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:681
        if(_ss.read()!=END_TRANS_CHAR){
    2140:	c8 01       	movw	r24, r16
    2142:	16 d3       	rcall	.+1580   	; 0x2770 <SoftwareSerial::read()>
    2144:	8f 3f       	cpi	r24, 0xFF	; 255
    2146:	91 05       	cpc	r25, r1
    2148:	09 f4       	brne	.+2      	; 0x214c <Gsm_Ard::_recv_socket(int)+0x18e>
    214a:	47 c0       	rjmp	.+142    	; 0x21da <Gsm_Ard::_recv_socket(int)+0x21c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:683
          dbg_print_error(__FILE__, __LINE__,  4);
    214c:	44 e0       	ldi	r20, 0x04	; 4
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	6b ea       	ldi	r22, 0xAB	; 171
    2152:	72 e0       	ldi	r23, 0x02	; 2
    2154:	8b eb       	ldi	r24, 0xBB	; 187
    2156:	91 e0       	ldi	r25, 0x01	; 1
    2158:	da d2       	rcall	.+1460   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:684
          dbg_print_sock_buffer(__FILE__, __LINE__, "", _recv_buff, _recv_buff_idx);
    215a:	f7 01       	movw	r30, r14
    215c:	e0 58       	subi	r30, 0x80	; 128
    215e:	fe 4f       	sbci	r31, 0xFE	; 254
    2160:	00 81       	ld	r16, Z
    2162:	11 81       	ldd	r17, Z+1	; 0x01
    2164:	97 01       	movw	r18, r14
    2166:	44 e7       	ldi	r20, 0x74	; 116
    2168:	52 e0       	ldi	r21, 0x02	; 2
    216a:	6c ea       	ldi	r22, 0xAC	; 172
    216c:	72 e0       	ldi	r23, 0x02	; 2
    216e:	8b eb       	ldi	r24, 0xBB	; 187
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	80 d2       	rcall	.+1280   	; 0x2674 <dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:686
          _clear_recv_buff();
    2174:	c7 01       	movw	r24, r14
    2176:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:687
          return 4;
    217a:	34 e0       	ldi	r19, 0x04	; 4
    217c:	c3 2e       	mov	r12, r19
    217e:	d1 2c       	mov	r13, r1
    2180:	4a cf       	rjmp	.-364    	; 0x2016 <Gsm_Ard::_recv_socket(int)+0x58>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:694
        while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && data_read<trans_size){
    2182:	c8 01       	movw	r24, r16
    2184:	8b d3       	rcall	.+1814   	; 0x289c <SoftwareSerial::available()>
    2186:	4b 81       	ldd	r20, Y+3	; 0x03
    2188:	24 2f       	mov	r18, r20
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	49 81       	ldd	r20, Y+1	; 0x01
    218e:	5a 81       	ldd	r21, Y+2	; 0x02
    2190:	89 2b       	or	r24, r25
    2192:	d9 f0       	breq	.+54     	; 0x21ca <Gsm_Ard::_recv_socket(int)+0x20c>
    2194:	f4 01       	movw	r30, r8
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	80 38       	cpi	r24, 0x80	; 128
    219c:	91 05       	cpc	r25, r1
    219e:	a8 f4       	brcc	.+42     	; 0x21ca <Gsm_Ard::_recv_socket(int)+0x20c>
    21a0:	24 17       	cp	r18, r20
    21a2:	35 07       	cpc	r19, r21
    21a4:	90 f4       	brcc	.+36     	; 0x21ca <Gsm_Ard::_recv_socket(int)+0x20c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:695
          _recv_buff[_recv_buff_idx++]=_ss.read();
    21a6:	c8 01       	movw	r24, r16
    21a8:	e3 d2       	rcall	.+1478   	; 0x2770 <SoftwareSerial::read()>
    21aa:	f4 01       	movw	r30, r8
    21ac:	20 81       	ld	r18, Z
    21ae:	31 81       	ldd	r19, Z+1	; 0x01
    21b0:	a9 01       	movw	r20, r18
    21b2:	4f 5f       	subi	r20, 0xFF	; 255
    21b4:	5f 4f       	sbci	r21, 0xFF	; 255
    21b6:	51 83       	std	Z+1, r21	; 0x01
    21b8:	40 83       	st	Z, r20
    21ba:	2e 0d       	add	r18, r14
    21bc:	3f 1d       	adc	r19, r15
    21be:	f9 01       	movw	r30, r18
    21c0:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:696
          data_read++;
    21c2:	fb 81       	ldd	r31, Y+3	; 0x03
    21c4:	ff 5f       	subi	r31, 0xFF	; 255
    21c6:	fb 83       	std	Y+3, r31	; 0x03
    21c8:	dc cf       	rjmp	.-72     	; 0x2182 <Gsm_Ard::_recv_socket(int)+0x1c4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:698
        if(data_read==trans_size){
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	42 17       	cp	r20, r18
    21ce:	53 07       	cpc	r21, r19
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <Gsm_Ard::_recv_socket(int)+0x216>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	31 2c       	mov	r3, r1
    21d6:	28 2e       	mov	r2, r24
    21d8:	86 cf       	rjmp	.-244    	; 0x20e6 <Gsm_Ard::_recv_socket(int)+0x128>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:690
          done=true;
    21da:	32 2c       	mov	r3, r2
    21dc:	84 cf       	rjmp	.-248    	; 0x20e6 <Gsm_Ard::_recv_socket(int)+0x128>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:717
  else if(!_recv_buff_idx){
    21de:	89 2b       	or	r24, r25
    21e0:	71 f4       	brne	.+28     	; 0x21fe <Gsm_Ard::_recv_socket(int)+0x240>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:718
    _clear_recv_buff();
    21e2:	c7 01       	movw	r24, r14
    21e4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:720
    dbg_print_error(__FILE__, __LINE__,  6);
    21e8:	46 e0       	ldi	r20, 0x06	; 6
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	60 ed       	ldi	r22, 0xD0	; 208
    21ee:	72 e0       	ldi	r23, 0x02	; 2
    21f0:	8b eb       	ldi	r24, 0xBB	; 187
    21f2:	91 e0       	ldi	r25, 0x01	; 1
    21f4:	8c d2       	rcall	.+1304   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:722
    return 6;
    21f6:	96 e0       	ldi	r25, 0x06	; 6
    21f8:	c9 2e       	mov	r12, r25
    21fa:	d1 2c       	mov	r13, r1
    21fc:	0c cf       	rjmp	.-488    	; 0x2016 <Gsm_Ard::_recv_socket(int)+0x58>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:724
  else if(!done){
    21fe:	31 10       	cpse	r3, r1
    2200:	0e c0       	rjmp	.+28     	; 0x221e <Gsm_Ard::_recv_socket(int)+0x260>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:725
    _clear_recv_buff();
    2202:	c7 01       	movw	r24, r14
    2204:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:727
    dbg_print_error(__FILE__, __LINE__,  7);
    2208:	47 e0       	ldi	r20, 0x07	; 7
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	67 ed       	ldi	r22, 0xD7	; 215
    220e:	72 e0       	ldi	r23, 0x02	; 2
    2210:	8b eb       	ldi	r24, 0xBB	; 187
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	7c d2       	rcall	.+1272   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:729
    return 7;
    2216:	87 e0       	ldi	r24, 0x07	; 7
    2218:	c8 2e       	mov	r12, r24
    221a:	d1 2c       	mov	r13, r1
    221c:	fc ce       	rjmp	.-520    	; 0x2016 <Gsm_Ard::_recv_socket(int)+0x58>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:731
  _recv_buff_state=BUFF_USED;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	ec 81       	ldd	r30, Y+4	; 0x04
    2224:	fd 81       	ldd	r31, Y+5	; 0x05
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	f5 ce       	rjmp	.-534    	; 0x2016 <Gsm_Ard::_recv_socket(int)+0x58>

0000222c <Gsm_Ard::_recv_tcp_data(unsigned int*)>:
_ZN7Gsm_Ard14_recv_tcp_dataEPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:343
int Gsm_Ard::_recv_tcp_data(uint16_t* data_len){
    222c:	af 92       	push	r10
    222e:	bf 92       	push	r11
    2230:	cf 92       	push	r12
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	ec 01       	movw	r28, r24
    2242:	5b 01       	movw	r10, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:345
  if(_sock_buff_state==BUFF_USED){
    2244:	7c 01       	movw	r14, r24
    2246:	84 e7       	ldi	r24, 0x74	; 116
    2248:	e8 1a       	sub	r14, r24
    224a:	8e ef       	ldi	r24, 0xFE	; 254
    224c:	f8 0a       	sbc	r15, r24
    224e:	f7 01       	movw	r30, r14
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	a9 f4       	brne	.+42     	; 0x2282 <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x56>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:347
    dbg_print_error(__FILE__, __LINE__, 1);
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	6b e5       	ldi	r22, 0x5B	; 91
    225e:	71 e0       	ldi	r23, 0x01	; 1
    2260:	8b eb       	ldi	r24, 0xBB	; 187
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	54 d2       	rcall	.+1192   	; 0x270e <dbg_print_error(char const*, int, int)>
    2266:	01 e0       	ldi	r16, 0x01	; 1
    2268:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:367
}
    226a:	c8 01       	movw	r24, r16
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	1f 91       	pop	r17
    2272:	0f 91       	pop	r16
    2274:	ff 90       	pop	r15
    2276:	ef 90       	pop	r14
    2278:	df 90       	pop	r13
    227a:	cf 90       	pop	r12
    227c:	bf 90       	pop	r11
    227e:	af 90       	pop	r10
    2280:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:352
  n=_recv_socket(10000);
    2282:	60 e1       	ldi	r22, 0x10	; 16
    2284:	77 e2       	ldi	r23, 0x27	; 39
    2286:	ce 01       	movw	r24, r28
    2288:	9a de       	rcall	.-716    	; 0x1fbe <Gsm_Ard::_recv_socket(int)>
    228a:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:353
  if(n){
    228c:	89 2b       	or	r24, r25
    228e:	81 f0       	breq	.+32     	; 0x22b0 <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x84>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:355
    dbg_print_error(__FILE__, __LINE__, 2+10*n);
    2290:	2a e0       	ldi	r18, 0x0A	; 10
    2292:	20 9f       	mul	r18, r16
    2294:	c0 01       	movw	r24, r0
    2296:	21 9f       	mul	r18, r17
    2298:	90 0d       	add	r25, r0
    229a:	11 24       	eor	r1, r1
    229c:	8c 01       	movw	r16, r24
    229e:	0e 5f       	subi	r16, 0xFE	; 254
    22a0:	1f 4f       	sbci	r17, 0xFF	; 255
    22a2:	a8 01       	movw	r20, r16
    22a4:	63 e6       	ldi	r22, 0x63	; 99
    22a6:	71 e0       	ldi	r23, 0x01	; 1
    22a8:	8b eb       	ldi	r24, 0xBB	; 187
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	30 d2       	rcall	.+1120   	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:357
    return 2+10*n;
    22ae:	dd cf       	rjmp	.-70     	; 0x226a <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x3e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:360
  _sock_buff_state=BUFF_USED;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	f7 01       	movw	r30, r14
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:361
  memcpy(_sock_buff, _recv_buff, _recv_buff_idx);
    22ba:	6e 01       	movw	r12, r28
    22bc:	f0 e8       	ldi	r31, 0x80	; 128
    22be:	cf 1a       	sub	r12, r31
    22c0:	fe ef       	ldi	r31, 0xFE	; 254
    22c2:	df 0a       	sbc	r13, r31
    22c4:	f6 01       	movw	r30, r12
    22c6:	40 81       	ld	r20, Z
    22c8:	51 81       	ldd	r21, Z+1	; 0x01
    22ca:	be 01       	movw	r22, r28
    22cc:	ce 01       	movw	r24, r28
    22ce:	93 95       	inc	r25
    22d0:	0e 94 27 1c 	call	0x384e	; 0x384e <memcpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:362
  _sock_buff_idx=_recv_buff_idx;
    22d4:	7e 01       	movw	r14, r28
    22d6:	fc e7       	ldi	r31, 0x7C	; 124
    22d8:	ef 1a       	sub	r14, r31
    22da:	fe ef       	ldi	r31, 0xFE	; 254
    22dc:	ff 0a       	sbc	r15, r31
    22de:	f6 01       	movw	r30, r12
    22e0:	80 81       	ld	r24, Z
    22e2:	91 81       	ldd	r25, Z+1	; 0x01
    22e4:	f7 01       	movw	r30, r14
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:364
  _clear_recv_buff();
    22ea:	ce 01       	movw	r24, r28
    22ec:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:365
  *data_len=_sock_buff_idx;
    22f0:	f7 01       	movw	r30, r14
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	f5 01       	movw	r30, r10
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:366
  return 0;
    22fc:	b6 cf       	rjmp	.-148    	; 0x226a <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x3e>

000022fe <Gsm_Ard::_wait_for_tcp_start()>:
_ZN7Gsm_Ard19_wait_for_tcp_startEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:843
int Gsm_Ard::_wait_for_tcp_start(){
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:847
  if(_recv_buff_state!=BUFF_READY){
    2310:	fc 01       	movw	r30, r24
    2312:	e8 57       	subi	r30, 0x78	; 120
    2314:	fe 4f       	sbci	r31, 0xFE	; 254
    2316:	80 81       	ld	r24, Z
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	89 2b       	or	r24, r25
    231c:	99 f0       	breq	.+38     	; 0x2344 <Gsm_Ard::_wait_for_tcp_start()+0x46>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:849
    dbg_print_error(__FILE__, __LINE__,  1);
    231e:	41 e0       	ldi	r20, 0x01	; 1
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	61 e5       	ldi	r22, 0x51	; 81
    2324:	73 e0       	ldi	r23, 0x03	; 3
    2326:	8b eb       	ldi	r24, 0xBB	; 187
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	f1 d1       	rcall	.+994    	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:851
    return 1;
    232c:	01 e0       	ldi	r16, 0x01	; 1
    232e:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:886
}
    2330:	c8 01       	movw	r24, r16
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
    2338:	0f 91       	pop	r16
    233a:	ff 90       	pop	r15
    233c:	ef 90       	pop	r14
    233e:	df 90       	pop	r13
    2340:	cf 90       	pop	r12
    2342:	08 95       	ret
    2344:	0a e0       	ldi	r16, 0x0A	; 10
    2346:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:855
    if(!_ss.available()){
    2348:	7e 01       	movw	r14, r28
    234a:	82 e7       	ldi	r24, 0x72	; 114
    234c:	e8 1a       	sub	r14, r24
    234e:	8e ef       	ldi	r24, 0xFE	; 254
    2350:	f8 0a       	sbc	r15, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:859
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN &&
    2352:	6e 01       	movw	r12, r28
    2354:	e0 e8       	ldi	r30, 0x80	; 128
    2356:	ce 1a       	sub	r12, r30
    2358:	ee ef       	ldi	r30, 0xFE	; 254
    235a:	de 0a       	sbc	r13, r30
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:855
    if(!_ss.available()){
    235c:	c7 01       	movw	r24, r14
    235e:	9e d2       	rcall	.+1340   	; 0x289c <SoftwareSerial::available()>
    2360:	89 2b       	or	r24, r25
    2362:	09 f0       	breq	.+2      	; 0x2366 <Gsm_Ard::_wait_for_tcp_start()+0x68>
    2364:	3a c0       	rjmp	.+116    	; 0x23da <Gsm_Ard::_wait_for_tcp_start()+0xdc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:856
      delay(500);
    2366:	64 ef       	ldi	r22, 0xF4	; 244
    2368:	71 e0       	ldi	r23, 0x01	; 1
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	e1 d4       	rcall	.+2498   	; 0x2d32 <delay>
    2370:	01 50       	subi	r16, 0x01	; 1
    2372:	11 09       	sbc	r17, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:854
  for(int i=0;i<10;i++){
    2374:	99 f7       	brne	.-26     	; 0x235c <Gsm_Ard::_wait_for_tcp_start()+0x5e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:866
  dbg_print_sock_buffer(__FILE__, __LINE__, "RECV_BUFF", _recv_buff,
    2376:	fe 01       	movw	r30, r28
    2378:	e0 58       	subi	r30, 0x80	; 128
    237a:	fe 4f       	sbci	r31, 0xFE	; 254
    237c:	00 81       	ld	r16, Z
    237e:	11 81       	ldd	r17, Z+1	; 0x01
    2380:	9e 01       	movw	r18, r28
    2382:	47 e1       	ldi	r20, 0x17	; 23
    2384:	52 e0       	ldi	r21, 0x02	; 2
    2386:	62 e6       	ldi	r22, 0x62	; 98
    2388:	73 e0       	ldi	r23, 0x03	; 3
    238a:	8b eb       	ldi	r24, 0xBB	; 187
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	72 d1       	rcall	.+740    	; 0x2674 <dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:869
  expected_rsp=new char[TCP_START_RSP_LEN];
    2390:	80 e1       	ldi	r24, 0x10	; 16
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	d2 d5       	rcall	.+2980   	; 0x2f3a <operator new[](unsigned int)>
    2396:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:871
  strcpy_P(expected_rsp, TCP_START_RSP);
    2398:	68 eb       	ldi	r22, 0xB8	; 184
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	0e 94 20 1c 	call	0x3840	; 0x3840 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:873
  res=!strncmp(_recv_buff, expected_rsp ,TCP_START_RSP_LEN);
    23a0:	40 e1       	ldi	r20, 0x10	; 16
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	b7 01       	movw	r22, r14
    23a6:	ce 01       	movw	r24, r28
    23a8:	0e 94 30 1c 	call	0x3860	; 0x3860 <strncmp>
    23ac:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:875
  delete[] expected_rsp;
    23ae:	e1 14       	cp	r14, r1
    23b0:	f1 04       	cpc	r15, r1
    23b2:	11 f0       	breq	.+4      	; 0x23b8 <Gsm_Ard::_wait_for_tcp_start()+0xba>
    23b4:	c7 01       	movw	r24, r14
    23b6:	c2 d5       	rcall	.+2948   	; 0x2f3c <operator delete[](void*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:876
  _clear_recv_buff();
    23b8:	ce 01       	movw	r24, r28
    23ba:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:878
  if(!res){
    23be:	01 15       	cp	r16, r1
    23c0:	11 05       	cpc	r17, r1
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <Gsm_Ard::_wait_for_tcp_start()+0xc8>
    23c4:	b5 cf       	rjmp	.-150    	; 0x2330 <Gsm_Ard::_wait_for_tcp_start()+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:880
    dbg_print_error(__FILE__, __LINE__,  2);
    23c6:	42 e0       	ldi	r20, 0x02	; 2
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	60 e7       	ldi	r22, 0x70	; 112
    23cc:	73 e0       	ldi	r23, 0x03	; 3
    23ce:	8b eb       	ldi	r24, 0xBB	; 187
    23d0:	91 e0       	ldi	r25, 0x01	; 1
    23d2:	9d d1       	rcall	.+826    	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:882
    return 2;
    23d4:	02 e0       	ldi	r16, 0x02	; 2
    23d6:	10 e0       	ldi	r17, 0x00	; 0
    23d8:	ab cf       	rjmp	.-170    	; 0x2330 <Gsm_Ard::_wait_for_tcp_start()+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:859
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN &&
    23da:	c7 01       	movw	r24, r14
    23dc:	5f d2       	rcall	.+1214   	; 0x289c <SoftwareSerial::available()>
    23de:	89 2b       	or	r24, r25
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <Gsm_Ard::_wait_for_tcp_start()+0xe6>
    23e2:	c6 cf       	rjmp	.-116    	; 0x2370 <Gsm_Ard::_wait_for_tcp_start()+0x72>
    23e4:	f6 01       	movw	r30, r12
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	40 97       	sbiw	r24, 0x10	; 16
    23ec:	08 f0       	brcs	.+2      	; 0x23f0 <Gsm_Ard::_wait_for_tcp_start()+0xf2>
    23ee:	c0 cf       	rjmp	.-128    	; 0x2370 <Gsm_Ard::_wait_for_tcp_start()+0x72>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:861
        _recv_buff[_recv_buff_idx++]=_ss.read();
    23f0:	c7 01       	movw	r24, r14
    23f2:	be d1       	rcall	.+892    	; 0x2770 <SoftwareSerial::read()>
    23f4:	f6 01       	movw	r30, r12
    23f6:	20 81       	ld	r18, Z
    23f8:	31 81       	ldd	r19, Z+1	; 0x01
    23fa:	a9 01       	movw	r20, r18
    23fc:	4f 5f       	subi	r20, 0xFF	; 255
    23fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2400:	51 83       	std	Z+1, r21	; 0x01
    2402:	40 83       	st	Z, r20
    2404:	2c 0f       	add	r18, r28
    2406:	3d 1f       	adc	r19, r29
    2408:	f9 01       	movw	r30, r18
    240a:	80 83       	st	Z, r24
    240c:	e6 cf       	rjmp	.-52     	; 0x23da <Gsm_Ard::_wait_for_tcp_start()+0xdc>

0000240e <Gsm_Ard::_send_tcp_data(char*, unsigned int)>:
_ZN7Gsm_Ard14_send_tcp_dataEPcj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:294
int Gsm_Ard::_send_tcp_data(char* data, uint16_t data_len){
    240e:	8f 92       	push	r8
    2410:	9f 92       	push	r9
    2412:	af 92       	push	r10
    2414:	bf 92       	push	r11
    2416:	cf 92       	push	r12
    2418:	df 92       	push	r13
    241a:	ef 92       	push	r14
    241c:	ff 92       	push	r15
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	7c 01       	movw	r14, r24
    2428:	4b 01       	movw	r8, r22
    242a:	5a 01       	movw	r10, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:298
  if(_gsm_state!=GSM_TCP_STATE){
    242c:	fc 01       	movw	r30, r24
    242e:	ea 57       	subi	r30, 0x7A	; 122
    2430:	fe 4f       	sbci	r31, 0xFE	; 254
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	04 97       	sbiw	r24, 0x04	; 4
    2438:	b9 f0       	breq	.+46     	; 0x2468 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x5a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:300
    dbg_print_error(__FILE__, __LINE__, 1);
    243a:	41 e0       	ldi	r20, 0x01	; 1
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	6c e2       	ldi	r22, 0x2C	; 44
    2440:	71 e0       	ldi	r23, 0x01	; 1
    2442:	8b eb       	ldi	r24, 0xBB	; 187
    2444:	91 e0       	ldi	r25, 0x01	; 1
    2446:	63 d1       	rcall	.+710    	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:302
    return 1;
    2448:	c1 e0       	ldi	r28, 0x01	; 1
    244a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:341
}
    244c:	ce 01       	movw	r24, r28
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	bf 90       	pop	r11
    2460:	af 90       	pop	r10
    2462:	9f 90       	pop	r9
    2464:	8f 90       	pop	r8
    2466:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:305
  cmd=new char[AT_CIPSEND_LEN];
    2468:	8a e0       	ldi	r24, 0x0A	; 10
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	66 d5       	rcall	.+2764   	; 0x2f3a <operator new[](unsigned int)>
    246e:	6c 01       	movw	r12, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:307
  strcpy_P(cmd, AT_CIPSEND);
    2470:	6d ea       	ldi	r22, 0xAD	; 173
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	0e 94 20 1c 	call	0x3840	; 0x3840 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:308
  _write_cmd(cmd);
    2478:	b6 01       	movw	r22, r12
    247a:	c7 01       	movw	r24, r14
    247c:	0e 94 0d 08 	call	0x101a	; 0x101a <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:310
  if(_wait_for_tcp_start()){
    2480:	c7 01       	movw	r24, r14
    2482:	3d df       	rcall	.-390    	; 0x22fe <Gsm_Ard::_wait_for_tcp_start()>
    2484:	89 2b       	or	r24, r25
    2486:	09 f0       	breq	.+2      	; 0x248a <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x7c>
    2488:	3a c0       	rjmp	.+116    	; 0x24fe <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xf0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:316
  dbg_print_sock_buffer(__FILE__, __LINE__, "DATA", data, data_len);
    248a:	85 01       	movw	r16, r10
    248c:	94 01       	movw	r18, r8
    248e:	41 e2       	ldi	r20, 0x21	; 33
    2490:	52 e0       	ldi	r21, 0x02	; 2
    2492:	6c e3       	ldi	r22, 0x3C	; 60
    2494:	71 e0       	ldi	r23, 0x01	; 1
    2496:	8b eb       	ldi	r24, 0xBB	; 187
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	ec d0       	rcall	.+472    	; 0x2674 <dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)>
    249c:	e4 01       	movw	r28, r8
    249e:	a8 0c       	add	r10, r8
    24a0:	b9 1c       	adc	r11, r9
    24a2:	87 01       	movw	r16, r14
    24a4:	02 57       	subi	r16, 0x72	; 114
    24a6:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:318
  for(unsigned int i=0;i<data_len;i++){
    24a8:	ac 16       	cp	r10, r28
    24aa:	bd 06       	cpc	r11, r29
    24ac:	21 f0       	breq	.+8      	; 0x24b6 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xa8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:319
    _ss.write(data[i]);
    24ae:	69 91       	ld	r22, Y+
    24b0:	c8 01       	movw	r24, r16
    24b2:	7f d1       	rcall	.+766    	; 0x27b2 <SoftwareSerial::write(unsigned char)>
    24b4:	f9 cf       	rjmp	.-14     	; 0x24a8 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x9a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:322
  _ss.write(SUB_CHAR);
    24b6:	6a e1       	ldi	r22, 0x1A	; 26
    24b8:	c8 01       	movw	r24, r16
    24ba:	7b d1       	rcall	.+758    	; 0x27b2 <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:324
  n=_no_cmd_comp_rsp(AT_CIPSEND_OK, AT_CIPSEND_OK_LEN, 10000);
    24bc:	20 e1       	ldi	r18, 0x10	; 16
    24be:	37 e2       	ldi	r19, 0x27	; 39
    24c0:	47 e0       	ldi	r20, 0x07	; 7
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	65 ea       	ldi	r22, 0xA5	; 165
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	c7 01       	movw	r24, r14
    24ca:	0e 94 01 09 	call	0x1202	; 0x1202 <Gsm_Ard::_no_cmd_comp_rsp(char const*, unsigned int, int)>
    24ce:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:325
  if(n){
    24d0:	89 2b       	or	r24, r25
    24d2:	71 f0       	breq	.+28     	; 0x24f0 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xe2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:326
    err=3+n*10;
    24d4:	2a e0       	ldi	r18, 0x0A	; 10
    24d6:	2c 9f       	mul	r18, r28
    24d8:	c0 01       	movw	r24, r0
    24da:	2d 9f       	mul	r18, r29
    24dc:	90 0d       	add	r25, r0
    24de:	11 24       	eor	r1, r1
    24e0:	ec 01       	movw	r28, r24
    24e2:	23 96       	adiw	r28, 0x03	; 3
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:336
    dbg_print_error(__FILE__, __LINE__, err);
    24e4:	ae 01       	movw	r20, r28
    24e6:	60 e5       	ldi	r22, 0x50	; 80
    24e8:	71 e0       	ldi	r23, 0x01	; 1
    24ea:	8b eb       	ldi	r24, 0xBB	; 187
    24ec:	91 e0       	ldi	r25, 0x01	; 1
    24ee:	0f d1       	rcall	.+542    	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:339
  delete[] cmd;
    24f0:	c1 14       	cp	r12, r1
    24f2:	d1 04       	cpc	r13, r1
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xea>
    24f6:	aa cf       	rjmp	.-172    	; 0x244c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x3e>
    24f8:	c6 01       	movw	r24, r12
    24fa:	20 d5       	rcall	.+2624   	; 0x2f3c <operator delete[](void*)>
    24fc:	a7 cf       	rjmp	.-178    	; 0x244c <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x3e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:311
    err=2;
    24fe:	c2 e0       	ldi	r28, 0x02	; 2
    2500:	d0 e0       	ldi	r29, 0x00	; 0
    2502:	f0 cf       	rjmp	.-32     	; 0x24e4 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xd6>

00002504 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)>:
_ZN7Gsm_Ard15send_socket_msgEPcjPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:913
int Gsm_Ard::send_socket_msg(char* data, uint16_t data_len, uint16_t* rsp_len){
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	ec 01       	movw	r28, r24
    250e:	89 01       	movw	r16, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:916
  n=_send_tcp_data(data, data_len);
    2510:	7e df       	rcall	.-260    	; 0x240e <Gsm_Ard::_send_tcp_data(char*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:917
  if(n){
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	99 f0       	breq	.+38     	; 0x253c <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x38>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:919
    dbg_print_error(__FILE__, __LINE__,  1+10*n);
    2516:	2a e0       	ldi	r18, 0x0A	; 10
    2518:	28 9f       	mul	r18, r24
    251a:	e0 01       	movw	r28, r0
    251c:	29 9f       	mul	r18, r25
    251e:	d0 0d       	add	r29, r0
    2520:	11 24       	eor	r1, r1
    2522:	21 96       	adiw	r28, 0x01	; 1
    2524:	ae 01       	movw	r20, r28
    2526:	67 e9       	ldi	r22, 0x97	; 151
    2528:	73 e0       	ldi	r23, 0x03	; 3
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:927
    dbg_print_error(__FILE__, __LINE__,  2+10*n);
    252a:	8b eb       	ldi	r24, 0xBB	; 187
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	ef d0       	rcall	.+478    	; 0x270e <dbg_print_error(char const*, int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:933
}
    2530:	ce 01       	movw	r24, r28
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:924
  n=_recv_tcp_data(rsp_len);
    253c:	b8 01       	movw	r22, r16
    253e:	ce 01       	movw	r24, r28
    2540:	75 de       	rcall	.-790    	; 0x222c <Gsm_Ard::_recv_tcp_data(unsigned int*)>
    2542:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:925
  if(n){
    2544:	89 2b       	or	r24, r25
    2546:	a1 f3       	breq	.-24     	; 0x2530 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x2c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:927
    dbg_print_error(__FILE__, __LINE__,  2+10*n);
    2548:	2a e0       	ldi	r18, 0x0A	; 10
    254a:	2c 9f       	mul	r18, r28
    254c:	c0 01       	movw	r24, r0
    254e:	2d 9f       	mul	r18, r29
    2550:	90 0d       	add	r25, r0
    2552:	11 24       	eor	r1, r1
    2554:	ec 01       	movw	r28, r24
    2556:	22 96       	adiw	r28, 0x02	; 2
    2558:	ae 01       	movw	r20, r28
    255a:	6f e9       	ldi	r22, 0x9F	; 159
    255c:	73 e0       	ldi	r23, 0x03	; 3
    255e:	e5 cf       	rjmp	.-54     	; 0x252a <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x26>

00002560 <get_time_request_msg(char**)>:
_Z20get_time_request_msgPPc():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:6
#include "socket_bbd.h"
#include <string.h>
#include <Arduino.h>
#include "arduino_cfg.h"

int get_time_request_msg(char** msg){
    2560:	fc 01       	movw	r30, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:9
  uint8_t msg_len=0;
  uint16_t temp_16=htons(SOCKET_HEADER);
  memcpy(*msg, &temp_16, SH_SIZE);
    2562:	a0 81       	ld	r26, Z
    2564:	b1 81       	ldd	r27, Z+1	; 0x01
    2566:	84 e9       	ldi	r24, 0x94	; 148
    2568:	91 e8       	ldi	r25, 0x81	; 129
    256a:	8d 93       	st	X+, r24
    256c:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:10
  memcpy(*msg+SH_SIZE,&ARDUINO_ID, ID_SIZE);
    256e:	a0 81       	ld	r26, Z
    2570:	b1 81       	ldd	r27, Z+1	; 0x01
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	12 96       	adiw	r26, 0x02	; 2
    2576:	8c 93       	st	X, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:11
  memcpy(*msg+SH_SIZE+ID_SIZE, &SYNC_TIME_MSG, TYPE_SIZE);
    2578:	a0 81       	ld	r26, Z
    257a:	b1 81       	ldd	r27, Z+1	; 0x01
    257c:	13 96       	adiw	r26, 0x03	; 3
    257e:	8c 93       	st	X, r24
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:12
  memcpy(*msg+SH_SIZE+ID_SIZE+TYPE_SIZE, &msg_len, T_SIZE_SIZE);
    2580:	01 90       	ld	r0, Z+
    2582:	f0 81       	ld	r31, Z
    2584:	e0 2d       	mov	r30, r0
    2586:	14 82       	std	Z+4, r1	; 0x04
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:14
  return 0;
}
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	08 95       	ret

0000258e <decode_time_rsp_msg(char*, unsigned int, unsigned long*)>:
_Z19decode_time_rsp_msgPcjPm():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:17

int decode_time_rsp_msg(char* msg, uint16_t msg_len, time_t* res){
  if(msg_len!=4){
    258e:	64 30       	cpi	r22, 0x04	; 4
    2590:	71 05       	cpc	r23, r1
    2592:	79 f4       	brne	.+30     	; 0x25b2 <decode_time_rsp_msg(char*, unsigned int, unsigned long*)+0x24>
    2594:	fc 01       	movw	r30, r24
    2596:	60 81       	ld	r22, Z
    2598:	71 81       	ldd	r23, Z+1	; 0x01
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	93 81       	ldd	r25, Z+3	; 0x03
    259e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__bswapsi2>
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:24
  }

  uint32_t curr_time;
  memcpy(&curr_time, msg, msg_len);

  *res=ntohl(curr_time);
    25a2:	fa 01       	movw	r30, r20
    25a4:	60 83       	st	Z, r22
    25a6:	71 83       	std	Z+1, r23	; 0x01
    25a8:	82 83       	std	Z+2, r24	; 0x02
    25aa:	93 83       	std	Z+3, r25	; 0x03
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:26

  return 0;
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:18
    return 1;
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:27
}
    25b6:	08 95       	ret

000025b8 <dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)>:
_Z23dbg_print_serial_bufferPKciS0_S0_j():
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:8
#include "dbg.h"

#ifdef DEBUG

void dbg_print_serial_buffer(const char* file, int line, const char* msg,
    const char* buffer, size_t size){
    25b8:	cf 92       	push	r12
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	6b 01       	movw	r12, r22
    25ca:	ea 01       	movw	r28, r20
    25cc:	79 01       	movw	r14, r18
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:9
  Serial.print(file);
    25ce:	bc 01       	movw	r22, r24
    25d0:	83 ea       	ldi	r24, 0xA3	; 163
    25d2:	94 e0       	ldi	r25, 0x04	; 4
    25d4:	7d d5       	rcall	.+2810   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:10
  Serial.print(":");
    25d6:	63 e1       	ldi	r22, 0x13	; 19
    25d8:	71 e0       	ldi	r23, 0x01	; 1
    25da:	83 ea       	ldi	r24, 0xA3	; 163
    25dc:	94 e0       	ldi	r25, 0x04	; 4
    25de:	78 d5       	rcall	.+2800   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:11
  Serial.println(line);
    25e0:	4a e0       	ldi	r20, 0x0A	; 10
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	b6 01       	movw	r22, r12
    25e6:	83 ea       	ldi	r24, 0xA3	; 163
    25e8:	94 e0       	ldi	r25, 0x04	; 4
    25ea:	2f d6       	rcall	.+3166   	; 0x324a <Print::println(int, int)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:12
  Serial.print(msg);
    25ec:	be 01       	movw	r22, r28
    25ee:	83 ea       	ldi	r24, 0xA3	; 163
    25f0:	94 e0       	ldi	r25, 0x04	; 4
    25f2:	6e d5       	rcall	.+2780   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:13
  Serial.print(" : [");
    25f4:	66 e4       	ldi	r22, 0x46	; 70
    25f6:	72 e0       	ldi	r23, 0x02	; 2
    25f8:	83 ea       	ldi	r24, 0xA3	; 163
    25fa:	94 e0       	ldi	r25, 0x04	; 4
    25fc:	69 d5       	rcall	.+2770   	; 0x30d0 <Print::print(char const*)>
    25fe:	e7 01       	movw	r28, r14
    2600:	0e 0d       	add	r16, r14
    2602:	1f 1d       	adc	r17, r15
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:14
  for(size_t i=0;i<size;i++){
    2604:	c0 17       	cp	r28, r16
    2606:	d1 07       	cpc	r29, r17
    2608:	41 f1       	breq	.+80     	; 0x265a <dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)+0xa2>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:15
    if(!isalpha(buffer[i]) && !isdigit(buffer[i])){
    260a:	d8 80       	ld	r13, Y
    260c:	ed 2c       	mov	r14, r13
    260e:	0d 2c       	mov	r0, r13
    2610:	00 0c       	add	r0, r0
    2612:	ff 08       	sbc	r15, r15
    2614:	c7 01       	movw	r24, r14
    2616:	0e 94 19 1c 	call	0x3832	; 0x3832 <isalpha>
    261a:	89 2b       	or	r24, r25
    261c:	c9 f4       	brne	.+50     	; 0x2650 <dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)+0x98>
    261e:	80 e3       	ldi	r24, 0x30	; 48
    2620:	e8 1a       	sub	r14, r24
    2622:	f1 08       	sbc	r15, r1
    2624:	8a e0       	ldi	r24, 0x0A	; 10
    2626:	e8 16       	cp	r14, r24
    2628:	f1 04       	cpc	r15, r1
    262a:	90 f0       	brcs	.+36     	; 0x2650 <dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)+0x98>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:16
      Serial.print("\\");
    262c:	6b e4       	ldi	r22, 0x4B	; 75
    262e:	72 e0       	ldi	r23, 0x02	; 2
    2630:	83 ea       	ldi	r24, 0xA3	; 163
    2632:	94 e0       	ldi	r25, 0x04	; 4
    2634:	4d d5       	rcall	.+2714   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:17
      Serial.print((uint8_t) buffer[i]);
    2636:	4a e0       	ldi	r20, 0x0A	; 10
    2638:	50 e0       	ldi	r21, 0x00	; 0
    263a:	68 81       	ld	r22, Y
    263c:	83 ea       	ldi	r24, 0xA3	; 163
    263e:	94 e0       	ldi	r25, 0x04	; 4
    2640:	20 d6       	rcall	.+3136   	; 0x3282 <Print::print(unsigned char, int)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:18
      Serial.print("\\");
    2642:	6b e4       	ldi	r22, 0x4B	; 75
    2644:	72 e0       	ldi	r23, 0x02	; 2
    2646:	83 ea       	ldi	r24, 0xA3	; 163
    2648:	94 e0       	ldi	r25, 0x04	; 4
    264a:	42 d5       	rcall	.+2692   	; 0x30d0 <Print::print(char const*)>
    264c:	21 96       	adiw	r28, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:14
  for(size_t i=0;i<size;i++){
    264e:	da cf       	rjmp	.-76     	; 0x2604 <dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)+0x4c>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:21
    }
    else{
      Serial.print(buffer[i]);
    2650:	6d 2d       	mov	r22, r13
    2652:	83 ea       	ldi	r24, 0xA3	; 163
    2654:	94 e0       	ldi	r25, 0x04	; 4
    2656:	43 d5       	rcall	.+2694   	; 0x30de <Print::print(char)>
    2658:	f9 cf       	rjmp	.-14     	; 0x264c <dbg_print_serial_buffer(char const*, int, char const*, char const*, unsigned int)+0x94>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:25
    }

  }
  Serial.println("]");
    265a:	6d e4       	ldi	r22, 0x4D	; 77
    265c:	72 e0       	ldi	r23, 0x02	; 2
    265e:	83 ea       	ldi	r24, 0xA3	; 163
    2660:	94 e0       	ldi	r25, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:26
}
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	ff 90       	pop	r15
    266c:	ef 90       	pop	r14
    266e:	df 90       	pop	r13
    2670:	cf 90       	pop	r12
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:25
  Serial.println("]");
    2672:	3f c5       	rjmp	.+2686   	; 0x30f2 <Print::println(char const*)>

00002674 <dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)>:
_Z21dbg_print_sock_bufferPKciS0_S0_j():
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:29

void dbg_print_sock_buffer(const char* file, int line, const char* msg,
    const char* buffer, size_t size){
    2674:	cf 92       	push	r12
    2676:	df 92       	push	r13
    2678:	ef 92       	push	r14
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	6b 01       	movw	r12, r22
    2686:	7a 01       	movw	r14, r20
    2688:	d2 2f       	mov	r29, r18
    268a:	c3 2f       	mov	r28, r19
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:30
  Serial.print(file);
    268c:	bc 01       	movw	r22, r24
    268e:	83 ea       	ldi	r24, 0xA3	; 163
    2690:	94 e0       	ldi	r25, 0x04	; 4
    2692:	1e d5       	rcall	.+2620   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:31
  Serial.print(":");
    2694:	63 e1       	ldi	r22, 0x13	; 19
    2696:	71 e0       	ldi	r23, 0x01	; 1
    2698:	83 ea       	ldi	r24, 0xA3	; 163
    269a:	94 e0       	ldi	r25, 0x04	; 4
    269c:	19 d5       	rcall	.+2610   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:32
  Serial.println(line);
    269e:	4a e0       	ldi	r20, 0x0A	; 10
    26a0:	50 e0       	ldi	r21, 0x00	; 0
    26a2:	b6 01       	movw	r22, r12
    26a4:	83 ea       	ldi	r24, 0xA3	; 163
    26a6:	94 e0       	ldi	r25, 0x04	; 4
    26a8:	d0 d5       	rcall	.+2976   	; 0x324a <Print::println(int, int)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:33
  Serial.print(msg);
    26aa:	b7 01       	movw	r22, r14
    26ac:	83 ea       	ldi	r24, 0xA3	; 163
    26ae:	94 e0       	ldi	r25, 0x04	; 4
    26b0:	0f d5       	rcall	.+2590   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:34
  Serial.print(" : [");
    26b2:	66 e4       	ldi	r22, 0x46	; 70
    26b4:	72 e0       	ldi	r23, 0x02	; 2
    26b6:	83 ea       	ldi	r24, 0xA3	; 163
    26b8:	94 e0       	ldi	r25, 0x04	; 4
    26ba:	0a d5       	rcall	.+2580   	; 0x30d0 <Print::print(char const*)>
    26bc:	ed 2e       	mov	r14, r29
    26be:	fc 2e       	mov	r15, r28
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:35
  for(size_t i=0;i<size;i++){
    26c0:	d0 e0       	ldi	r29, 0x00	; 0
    26c2:	c0 e0       	ldi	r28, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:37
    Serial.print((uint8_t) buffer[i]);
    if(i<size-1){
    26c4:	68 01       	movw	r12, r16
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	c8 1a       	sub	r12, r24
    26ca:	d1 08       	sbc	r13, r1
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:35
  for(size_t i=0;i<size;i++){
    26cc:	c0 17       	cp	r28, r16
    26ce:	d1 07       	cpc	r29, r17
    26d0:	89 f0       	breq	.+34     	; 0x26f4 <dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)+0x80>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:36
    Serial.print((uint8_t) buffer[i]);
    26d2:	f7 01       	movw	r30, r14
    26d4:	61 91       	ld	r22, Z+
    26d6:	7f 01       	movw	r14, r30
    26d8:	4a e0       	ldi	r20, 0x0A	; 10
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	83 ea       	ldi	r24, 0xA3	; 163
    26de:	94 e0       	ldi	r25, 0x04	; 4
    26e0:	d0 d5       	rcall	.+2976   	; 0x3282 <Print::print(unsigned char, int)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:37
    if(i<size-1){
    26e2:	cc 15       	cp	r28, r12
    26e4:	dd 05       	cpc	r29, r13
    26e6:	20 f4       	brcc	.+8      	; 0x26f0 <dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)+0x7c>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:38
      Serial.print(' ');
    26e8:	60 e2       	ldi	r22, 0x20	; 32
    26ea:	83 ea       	ldi	r24, 0xA3	; 163
    26ec:	94 e0       	ldi	r25, 0x04	; 4
    26ee:	f7 d4       	rcall	.+2542   	; 0x30de <Print::print(char)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:35
  for(size_t i=0;i<size;i++){
    26f0:	21 96       	adiw	r28, 0x01	; 1
    26f2:	ec cf       	rjmp	.-40     	; 0x26cc <dbg_print_sock_buffer(char const*, int, char const*, char const*, unsigned int)+0x58>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:41
    }
  }
  Serial.println("]");
    26f4:	6d e4       	ldi	r22, 0x4D	; 77
    26f6:	72 e0       	ldi	r23, 0x02	; 2
    26f8:	83 ea       	ldi	r24, 0xA3	; 163
    26fa:	94 e0       	ldi	r25, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:42
}
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	df 90       	pop	r13
    270a:	cf 90       	pop	r12
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:41
  Serial.println("]");
    270c:	f2 c4       	rjmp	.+2532   	; 0x30f2 <Print::println(char const*)>

0000270e <dbg_print_error(char const*, int, int)>:
_Z15dbg_print_errorPKcii():
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:44

void dbg_print_error(const char* file, int line, int code){
    270e:	ef 92       	push	r14
    2710:	ff 92       	push	r15
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	7c 01       	movw	r14, r24
    271c:	8b 01       	movw	r16, r22
    271e:	ea 01       	movw	r28, r20
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:45
  Serial.print("ERROR in ");
    2720:	6f e4       	ldi	r22, 0x4F	; 79
    2722:	72 e0       	ldi	r23, 0x02	; 2
    2724:	83 ea       	ldi	r24, 0xA3	; 163
    2726:	94 e0       	ldi	r25, 0x04	; 4
    2728:	d3 d4       	rcall	.+2470   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:46
  Serial.print(file);
    272a:	b7 01       	movw	r22, r14
    272c:	83 ea       	ldi	r24, 0xA3	; 163
    272e:	94 e0       	ldi	r25, 0x04	; 4
    2730:	cf d4       	rcall	.+2462   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:47
  Serial.print(":");
    2732:	63 e1       	ldi	r22, 0x13	; 19
    2734:	71 e0       	ldi	r23, 0x01	; 1
    2736:	83 ea       	ldi	r24, 0xA3	; 163
    2738:	94 e0       	ldi	r25, 0x04	; 4
    273a:	ca d4       	rcall	.+2452   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:48
  Serial.print(line);
    273c:	4a e0       	ldi	r20, 0x0A	; 10
    273e:	50 e0       	ldi	r21, 0x00	; 0
    2740:	b8 01       	movw	r22, r16
    2742:	83 ea       	ldi	r24, 0xA3	; 163
    2744:	94 e0       	ldi	r25, 0x04	; 4
    2746:	7b d5       	rcall	.+2806   	; 0x323e <Print::print(int, int)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:49
  Serial.print(" code ");
    2748:	69 e5       	ldi	r22, 0x59	; 89
    274a:	72 e0       	ldi	r23, 0x02	; 2
    274c:	83 ea       	ldi	r24, 0xA3	; 163
    274e:	94 e0       	ldi	r25, 0x04	; 4
    2750:	bf d4       	rcall	.+2430   	; 0x30d0 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:50
  Serial.println(code);
    2752:	4a e0       	ldi	r20, 0x0A	; 10
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	be 01       	movw	r22, r28
    2758:	83 ea       	ldi	r24, 0xA3	; 163
    275a:	94 e0       	ldi	r25, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:51
}
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
/home/jlr/Documents/bbd/arduino/lib/dbg/dbg.cpp:50
  Serial.println(code);
    2768:	70 c5       	rjmp	.+2784   	; 0x324a <Print::println(int, int)>

0000276a <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	08 95       	ret

00002770 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:394


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    2770:	20 91 98 04 	lds	r18, 0x0498	; 0x800498 <SoftwareSerial::active_object>
    2774:	30 91 99 04 	lds	r19, 0x0499	; 0x800499 <SoftwareSerial::active_object+0x1>
    2778:	28 17       	cp	r18, r24
    277a:	39 07       	cpc	r19, r25
    277c:	b9 f4       	brne	.+46     	; 0x27ac <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:398
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    277e:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <SoftwareSerial::_receive_buffer_head>
    2782:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <SoftwareSerial::_receive_buffer_tail>
    2786:	98 17       	cp	r25, r24
    2788:	89 f0       	breq	.+34     	; 0x27ac <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:402
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    278a:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <SoftwareSerial::_receive_buffer_head>
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	e8 5a       	subi	r30, 0xA8	; 168
    2792:	fb 4f       	sbci	r31, 0xFB	; 251
    2794:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:403
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    2796:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <SoftwareSerial::_receive_buffer_head>
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	2f 5f       	subi	r18, 0xFF	; 255
    279e:	3f 4f       	sbci	r19, 0xFF	; 255
    27a0:	2f 73       	andi	r18, 0x3F	; 63
    27a2:	33 27       	eor	r19, r19
    27a4:	20 93 56 04 	sts	0x0456, r18	; 0x800456 <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:404
  return d;
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:395
    return -1;
    27ac:	8f ef       	ldi	r24, 0xFF	; 255
    27ae:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:405
}
    27b0:	08 95       	ret

000027b2 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:416

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
    27b2:	ef 92       	push	r14
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	dc 01       	movw	r26, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:417
  if (_tx_delay == 0) {
    27c0:	5c 96       	adiw	r26, 0x1c	; 28
    27c2:	ed 90       	ld	r14, X+
    27c4:	fc 90       	ld	r15, X
    27c6:	5d 97       	sbiw	r26, 0x1d	; 29
    27c8:	e1 14       	cp	r14, r1
    27ca:	f1 04       	cpc	r15, r1
    27cc:	79 f4       	brne	.+30     	; 0x27ec <SoftwareSerial::write(unsigned char)+0x3a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:44
    void setWriteError(int err = 1) { write_error = err; }
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	13 96       	adiw	r26, 0x03	; 3
    27d4:	9c 93       	st	X, r25
    27d6:	8e 93       	st	-X, r24
    27d8:	12 97       	sbiw	r26, 0x02	; 2
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:419
    setWriteError();
    return 0;
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:468

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
    27de:	df 91       	pop	r29
    27e0:	cf 91       	pop	r28
    27e2:	1f 91       	pop	r17
    27e4:	0f 91       	pop	r16
    27e6:	ff 90       	pop	r15
    27e8:	ef 90       	pop	r14
    27ea:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:426
  volatile uint8_t *reg = _transmitPortRegister;
    27ec:	51 96       	adiw	r26, 0x11	; 17
    27ee:	ed 91       	ld	r30, X+
    27f0:	fc 91       	ld	r31, X
    27f2:	52 97       	sbiw	r26, 0x12	; 18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:427
  uint8_t reg_mask = _transmitBitMask;
    27f4:	50 96       	adiw	r26, 0x10	; 16
    27f6:	8c 91       	ld	r24, X
    27f8:	50 97       	sbiw	r26, 0x10	; 16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:428
  uint8_t inv_mask = ~_transmitBitMask;
    27fa:	98 2f       	mov	r25, r24
    27fc:	90 95       	com	r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:429
  uint8_t oldSREG = SREG;
    27fe:	0f b7       	in	r16, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:430
  bool inv = _inverse_logic;
    2800:	5e 96       	adiw	r26, 0x1e	; 30
    2802:	2c 91       	ld	r18, X
    2804:	5e 97       	sbiw	r26, 0x1e	; 30
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:433
  if (inv)
    2806:	12 2f       	mov	r17, r18
    2808:	12 70       	andi	r17, 0x02	; 2
    280a:	21 fd       	sbrc	r18, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:434
    b = ~b;
    280c:	60 95       	com	r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:436
  cli();  // turn off interrupts for a clean txmit
    280e:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
    2810:	20 81       	ld	r18, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:439
  if (inv)
    2812:	11 23       	and	r17, r17
    2814:	19 f1       	breq	.+70     	; 0x285c <SoftwareSerial::write(unsigned char)+0xaa>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
    2816:	28 2b       	or	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
    2818:	20 83       	st	Z, r18
/usr/avr/include/util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    281a:	e7 01       	movw	r28, r14
    281c:	21 97       	sbiw	r28, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <SoftwareSerial::write(unsigned char)+0x6a>
    2820:	28 e0       	ldi	r18, 0x08	; 8
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:449
    if (b & 1) // choose bit
    2822:	46 2f       	mov	r20, r22
    2824:	50 e0       	ldi	r21, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:450
      *reg |= reg_mask; // send 1
    2826:	30 81       	ld	r19, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:449
    if (b & 1) // choose bit
    2828:	60 ff       	sbrs	r22, 0
    282a:	1a c0       	rjmp	.+52     	; 0x2860 <SoftwareSerial::write(unsigned char)+0xae>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:450
      *reg |= reg_mask; // send 1
    282c:	38 2b       	or	r19, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
    282e:	30 83       	st	Z, r19
/usr/avr/include/util/delay_basic.h:110
    2830:	e7 01       	movw	r28, r14
    2832:	21 97       	sbiw	r28, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <SoftwareSerial::write(unsigned char)+0x80>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:455
    b >>= 1;
    2836:	ba 01       	movw	r22, r20
    2838:	75 95       	asr	r23
    283a:	67 95       	ror	r22
    283c:	21 50       	subi	r18, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:447
  for (uint8_t i = 8; i > 0; --i)
    283e:	89 f7       	brne	.-30     	; 0x2822 <SoftwareSerial::write(unsigned char)+0x70>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:459
  if (inv)
    2840:	11 23       	and	r17, r17
    2842:	81 f0       	breq	.+32     	; 0x2864 <SoftwareSerial::write(unsigned char)+0xb2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:460
    *reg &= inv_mask;
    2844:	80 81       	ld	r24, Z
    2846:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:462
    *reg |= reg_mask;
    2848:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:464
  SREG = oldSREG; // turn interrupts back on
    284a:	0f bf       	out	0x3f, r16	; 63
/usr/avr/include/util/delay_basic.h:110
    284c:	5c 96       	adiw	r26, 0x1c	; 28
    284e:	8d 91       	ld	r24, X+
    2850:	9c 91       	ld	r25, X
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <SoftwareSerial::write(unsigned char)+0xa0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:467
  return 1;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	c1 cf       	rjmp	.-126    	; 0x27de <SoftwareSerial::write(unsigned char)+0x2c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
    285c:	29 23       	and	r18, r25
    285e:	dc cf       	rjmp	.-72     	; 0x2818 <SoftwareSerial::write(unsigned char)+0x66>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
    2860:	39 23       	and	r19, r25
    2862:	e5 cf       	rjmp	.-54     	; 0x282e <SoftwareSerial::write(unsigned char)+0x7c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:462
    *reg |= reg_mask;
    2864:	90 81       	ld	r25, Z
    2866:	89 2b       	or	r24, r25
    2868:	ef cf       	rjmp	.-34     	; 0x2848 <SoftwareSerial::write(unsigned char)+0x96>

0000286a <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:473

void SoftwareSerial::flush()
{
  // There is no tx buffering, simply return
}
    286a:	08 95       	ret

0000286c <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:477

int SoftwareSerial::peek()
{
  if (!isListening())
    286c:	20 91 98 04 	lds	r18, 0x0498	; 0x800498 <SoftwareSerial::active_object>
    2870:	30 91 99 04 	lds	r19, 0x0499	; 0x800499 <SoftwareSerial::active_object+0x1>
    2874:	28 17       	cp	r18, r24
    2876:	39 07       	cpc	r19, r25
    2878:	71 f4       	brne	.+28     	; 0x2896 <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:481
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    287a:	90 91 56 04 	lds	r25, 0x0456	; 0x800456 <SoftwareSerial::_receive_buffer_head>
    287e:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <SoftwareSerial::_receive_buffer_tail>
    2882:	98 17       	cp	r25, r24
    2884:	41 f0       	breq	.+16     	; 0x2896 <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:485
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    2886:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <SoftwareSerial::_receive_buffer_head>
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	e8 5a       	subi	r30, 0xA8	; 168
    288e:	fb 4f       	sbci	r31, 0xFB	; 251
    2890:	80 81       	ld	r24, Z
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:478
    return -1;
    2896:	8f ef       	ldi	r24, 0xFF	; 255
    2898:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:486
}
    289a:	08 95       	ret

0000289c <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:409
  if (!isListening())
    289c:	20 91 98 04 	lds	r18, 0x0498	; 0x800498 <SoftwareSerial::active_object>
    28a0:	30 91 99 04 	lds	r19, 0x0499	; 0x800499 <SoftwareSerial::active_object+0x1>
    28a4:	28 17       	cp	r18, r24
    28a6:	39 07       	cpc	r19, r25
    28a8:	61 f4       	brne	.+24     	; 0x28c2 <SoftwareSerial::available()+0x26>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:412
  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    28aa:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <SoftwareSerial::_receive_buffer_tail>
    28ae:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <SoftwareSerial::_receive_buffer_head>
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	80 5c       	subi	r24, 0xC0	; 192
    28b6:	9f 4f       	sbci	r25, 0xFF	; 255
    28b8:	82 1b       	sub	r24, r18
    28ba:	91 09       	sbc	r25, r1
    28bc:	60 e4       	ldi	r22, 0x40	; 64
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	23 c6       	rjmp	.+3142   	; 0x3508 <__divmodhi4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:410
    return 0;
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:413
}
    28c6:	08 95       	ret

000028c8 <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:111
  if (active_object == this)
    28c8:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <SoftwareSerial::active_object>
    28cc:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <SoftwareSerial::active_object+0x1>
    28d0:	e8 17       	cp	r30, r24
    28d2:	f9 07       	cpc	r31, r25
    28d4:	69 f4       	brne	.+26     	; 0x28f0 <SoftwareSerial::stopListening()+0x28>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
    28d6:	a3 89       	ldd	r26, Z+19	; 0x13
    28d8:	b4 89       	ldd	r27, Z+20	; 0x14
    28da:	9c 91       	ld	r25, X
    28dc:	85 89       	ldd	r24, Z+21	; 0x15
    28de:	80 95       	com	r24
    28e0:	89 23       	and	r24, r25
    28e2:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:114
    active_object = NULL;
    28e4:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <SoftwareSerial::active_object+0x1>
    28e8:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <SoftwareSerial::active_object>
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:117
  return false;
    28f0:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:118
}
    28f2:	08 95       	ret

000028f4 <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:88
{
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:89
  if (!_rx_delay_stopbit)
    28fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28fe:	89 2b       	or	r24, r25
    2900:	f9 f0       	breq	.+62     	; 0x2940 <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:92
  if (active_object != this)
    2902:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <SoftwareSerial::active_object>
    2906:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <SoftwareSerial::active_object+0x1>
    290a:	8c 17       	cp	r24, r28
    290c:	9d 07       	cpc	r25, r29
    290e:	c1 f0       	breq	.+48     	; 0x2940 <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:94
    if (active_object)
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	09 f0       	breq	.+2      	; 0x2916 <SoftwareSerial::listen()+0x22>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:95
      active_object->stopListening();
    2914:	d9 df       	rcall	.-78     	; 0x28c8 <SoftwareSerial::stopListening()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:97
    _buffer_overflow = false;
    2916:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2918:	8e 7f       	andi	r24, 0xFE	; 254
    291a:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:98
    _receive_buffer_head = _receive_buffer_tail = 0;
    291c:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <SoftwareSerial::_receive_buffer_tail>
    2920:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:99
    active_object = this;
    2924:	d0 93 99 04 	sts	0x0499, r29	; 0x800499 <SoftwareSerial::active_object+0x1>
    2928:	c0 93 98 04 	sts	0x0498, r28	; 0x800498 <SoftwareSerial::active_object>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
    292c:	eb 89       	ldd	r30, Y+19	; 0x13
    292e:	fc 89       	ldd	r31, Y+20	; 0x14
    2930:	80 81       	ld	r24, Z
    2932:	9d 89       	ldd	r25, Y+21	; 0x15
    2934:	89 2b       	or	r24, r25
    2936:	80 83       	st	Z, r24
    2938:	81 e0       	ldi	r24, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:106
}
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:90
    return false;
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	fb cf       	rjmp	.-10     	; 0x293a <SoftwareSerial::listen()+0x46>

00002944 <__vector_3>:
__vector_3():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:229
{
    2944:	1f 92       	push	r1
    2946:	0f 92       	push	r0
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	0f 92       	push	r0
    294c:	11 24       	eor	r1, r1
    294e:	2f 93       	push	r18
    2950:	3f 93       	push	r19
    2952:	4f 93       	push	r20
    2954:	5f 93       	push	r21
    2956:	6f 93       	push	r22
    2958:	7f 93       	push	r23
    295a:	8f 93       	push	r24
    295c:	9f 93       	push	r25
    295e:	af 93       	push	r26
    2960:	bf 93       	push	r27
    2962:	ef 93       	push	r30
    2964:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:221
  if (active_object)
    2966:	e0 91 98 04 	lds	r30, 0x0498	; 0x800498 <SoftwareSerial::active_object>
    296a:	f0 91 99 04 	lds	r31, 0x0499	; 0x800499 <SoftwareSerial::active_object+0x1>
    296e:	30 97       	sbiw	r30, 0x00	; 0
    2970:	49 f0       	breq	.+18     	; 0x2984 <__vector_3+0x40>
    2972:	a6 85       	ldd	r26, Z+14	; 0x0e
    2974:	b7 85       	ldd	r27, Z+15	; 0x0f
    2976:	85 85       	ldd	r24, Z+13	; 0x0d
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2978:	96 8d       	ldd	r25, Z+30	; 0x1e
    297a:	91 ff       	sbrs	r25, 1
    297c:	14 c0       	rjmp	.+40     	; 0x29a6 <__vector_3+0x62>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    297e:	9c 91       	ld	r25, X
    2980:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2982:	a1 f4       	brne	.+40     	; 0x29ac <__vector_3+0x68>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
    2984:	ff 91       	pop	r31
    2986:	ef 91       	pop	r30
    2988:	bf 91       	pop	r27
    298a:	af 91       	pop	r26
    298c:	9f 91       	pop	r25
    298e:	8f 91       	pop	r24
    2990:	7f 91       	pop	r23
    2992:	6f 91       	pop	r22
    2994:	5f 91       	pop	r21
    2996:	4f 91       	pop	r20
    2998:	3f 91       	pop	r19
    299a:	2f 91       	pop	r18
    299c:	0f 90       	pop	r0
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	0f 90       	pop	r0
    29a2:	1f 90       	pop	r1
    29a4:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    29a6:	9c 91       	ld	r25, X
    29a8:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    29aa:	61 f7       	brne	.-40     	; 0x2984 <__vector_3+0x40>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
    29ac:	a3 89       	ldd	r26, Z+19	; 0x13
    29ae:	b4 89       	ldd	r27, Z+20	; 0x14
    29b0:	9c 91       	ld	r25, X
    29b2:	85 89       	ldd	r24, Z+21	; 0x15
    29b4:	80 95       	com	r24
    29b6:	89 23       	and	r24, r25
    29b8:	8c 93       	st	X, r24
/usr/avr/include/util/delay_basic.h:110
    29ba:	86 89       	ldd	r24, Z+22	; 0x16
    29bc:	97 89       	ldd	r25, Z+23	; 0x17
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <__vector_3+0x7a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:160
      tunedDelay(_rx_delay_intrabit);
    29c2:	60 8d       	ldd	r22, Z+24	; 0x18
    29c4:	71 8d       	ldd	r23, Z+25	; 0x19
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    29c6:	a6 85       	ldd	r26, Z+14	; 0x0e
    29c8:	b7 85       	ldd	r27, Z+15	; 0x0f
    29ca:	55 85       	ldd	r21, Z+13	; 0x0d
    29cc:	38 e0       	ldi	r19, 0x08	; 8
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:142
  uint8_t d = 0;
    29ce:	20 e0       	ldi	r18, 0x00	; 0
/usr/avr/include/util/delay_basic.h:110
    29d0:	cb 01       	movw	r24, r22
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <__vector_3+0x8e>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:161
      d >>= 1;
    29d6:	82 2f       	mov	r24, r18
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	95 95       	asr	r25
    29dc:	87 95       	ror	r24
    29de:	28 2f       	mov	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    29e0:	4c 91       	ld	r20, X
    29e2:	45 23       	and	r20, r21
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:163
      if (rx_pin_read())
    29e4:	09 f0       	breq	.+2      	; 0x29e8 <__vector_3+0xa4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:164
        d |= 0x80;
    29e6:	20 68       	ori	r18, 0x80	; 128
    29e8:	31 50       	subi	r19, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:158
    for (uint8_t i=8; i > 0; --i)
    29ea:	91 f7       	brne	.-28     	; 0x29d0 <__vector_3+0x8c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:167
    if (_inverse_logic)
    29ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    29ee:	81 fd       	sbrc	r24, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:168
      d = ~d;
    29f0:	20 95       	com	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:171
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    29f2:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <SoftwareSerial::_receive_buffer_tail>
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	01 96       	adiw	r24, 0x01	; 1
    29fa:	8f 73       	andi	r24, 0x3F	; 63
    29fc:	99 27       	eor	r25, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:172
    if (next != _receive_buffer_head)
    29fe:	30 91 56 04 	lds	r19, 0x0456	; 0x800456 <SoftwareSerial::_receive_buffer_head>
    2a02:	38 17       	cp	r19, r24
    2a04:	99 f0       	breq	.+38     	; 0x2a2c <__vector_3+0xe8>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:175
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    2a06:	a0 91 57 04 	lds	r26, 0x0457	; 0x800457 <SoftwareSerial::_receive_buffer_tail>
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	a8 5a       	subi	r26, 0xA8	; 168
    2a0e:	bb 4f       	sbci	r27, 0xFB	; 251
    2a10:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:176
      _receive_buffer_tail = next;
    2a12:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <SoftwareSerial::_receive_buffer_tail>
/usr/avr/include/util/delay_basic.h:110
    2a16:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a18:	93 8d       	ldd	r25, Z+27	; 0x1b
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <__vector_3+0xd6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
    2a1e:	a3 89       	ldd	r26, Z+19	; 0x13
    2a20:	b4 89       	ldd	r27, Z+20	; 0x14
    2a22:	8c 91       	ld	r24, X
    2a24:	95 89       	ldd	r25, Z+21	; 0x15
    2a26:	89 2b       	or	r24, r25
    2a28:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
    2a2a:	ac cf       	rjmp	.-168    	; 0x2984 <__vector_3+0x40>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:181
      _buffer_overflow = true;
    2a2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a2e:	81 60       	ori	r24, 0x01	; 1
    2a30:	86 8f       	std	Z+30, r24	; 0x1e
    2a32:	f1 cf       	rjmp	.-30     	; 0x2a16 <__vector_3+0xd2>

00002a34 <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:264
SoftwareSerial::~SoftwareSerial()
    2a34:	24 e6       	ldi	r18, 0x64	; 100
    2a36:	32 e0       	ldi	r19, 0x02	; 2
    2a38:	fc 01       	movw	r30, r24
    2a3a:	31 83       	std	Z+1, r19	; 0x01
    2a3c:	20 83       	st	Z, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:387
  stopListening();
    2a3e:	44 cf       	rjmp	.-376    	; 0x28c8 <SoftwareSerial::stopListening()>

00002a40 <SoftwareSerial::setTX(unsigned char)>:
_ZN14SoftwareSerial5setTXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:270
{
    2a40:	1f 93       	push	r17
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	ec 01       	movw	r28, r24
    2a48:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:275
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    2a4a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2a4c:	66 95       	lsr	r22
    2a4e:	61 70       	andi	r22, 0x01	; 1
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	68 27       	eor	r22, r24
    2a54:	81 2f       	mov	r24, r17
    2a56:	43 d2       	rcall	.+1158   	; 0x2ede <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:276
  pinMode(tx, OUTPUT);
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	81 2f       	mov	r24, r17
    2a5c:	04 d2       	rcall	.+1032   	; 0x2e66 <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:277
  _transmitBitMask = digitalPinToBitMask(tx);
    2a5e:	81 2f       	mov	r24, r17
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	fc 01       	movw	r30, r24
    2a64:	e6 56       	subi	r30, 0x66	; 102
    2a66:	fd 4f       	sbci	r31, 0xFD	; 253
    2a68:	e4 91       	lpm	r30, Z
    2a6a:	e8 8b       	std	Y+16, r30	; 0x10
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:278
  uint8_t port = digitalPinToPort(tx);
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	e2 55       	subi	r30, 0x52	; 82
    2a70:	fd 4f       	sbci	r31, 0xFD	; 253
    2a72:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:279
  _transmitPortRegister = portOutputRegister(port);
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	ee 0f       	add	r30, r30
    2a78:	ff 1f       	adc	r31, r31
    2a7a:	e4 53       	subi	r30, 0x34	; 52
    2a7c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a7e:	85 91       	lpm	r24, Z+
    2a80:	94 91       	lpm	r25, Z
    2a82:	9a 8b       	std	Y+18, r25	; 0x12
    2a84:	89 8b       	std	Y+17, r24	; 0x11
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:280
}
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	1f 91       	pop	r17
    2a8c:	08 95       	ret

00002a8e <SoftwareSerial::setRX(unsigned char)>:
_ZN14SoftwareSerial5setRXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:283
{
    2a8e:	1f 93       	push	r17
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	ec 01       	movw	r28, r24
    2a96:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:284
  pinMode(rx, INPUT);
    2a98:	60 e0       	ldi	r22, 0x00	; 0
    2a9a:	81 2f       	mov	r24, r17
    2a9c:	e4 d1       	rcall	.+968    	; 0x2e66 <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:285
  if (!_inverse_logic)
    2a9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aa0:	81 fd       	sbrc	r24, 1
    2aa2:	03 c0       	rjmp	.+6      	; 0x2aaa <SoftwareSerial::setRX(unsigned char)+0x1c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:286
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    2aa4:	61 e0       	ldi	r22, 0x01	; 1
    2aa6:	81 2f       	mov	r24, r17
    2aa8:	1a d2       	rcall	.+1076   	; 0x2ede <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:287
  _receivePin = rx;
    2aaa:	1c 87       	std	Y+12, r17	; 0x0c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:288
  _receiveBitMask = digitalPinToBitMask(rx);
    2aac:	81 2f       	mov	r24, r17
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	e6 56       	subi	r30, 0x66	; 102
    2ab4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab6:	e4 91       	lpm	r30, Z
    2ab8:	ed 87       	std	Y+13, r30	; 0x0d
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:289
  uint8_t port = digitalPinToPort(rx);
    2aba:	fc 01       	movw	r30, r24
    2abc:	e2 55       	subi	r30, 0x52	; 82
    2abe:	fd 4f       	sbci	r31, 0xFD	; 253
    2ac0:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:290
  _receivePortRegister = portInputRegister(port);
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	ee 0f       	add	r30, r30
    2ac6:	ff 1f       	adc	r31, r31
    2ac8:	ee 53       	subi	r30, 0x3E	; 62
    2aca:	fd 4f       	sbci	r31, 0xFD	; 253
    2acc:	85 91       	lpm	r24, Z+
    2ace:	94 91       	lpm	r25, Z
    2ad0:	9f 87       	std	Y+15, r25	; 0x0f
    2ad2:	8e 87       	std	Y+14, r24	; 0x0e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:291
}
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	1f 91       	pop	r17
    2ada:	08 95       	ret

00002adc <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>:
_ZN14SoftwareSerialC2Ehhb():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:249
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    2adc:	1f 93       	push	r17
    2ade:	cf 93       	push	r28
    2ae0:	df 93       	push	r29
    2ae2:	ec 01       	movw	r28, r24
    2ae4:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:46
    Print() : write_error(0) {}
    2ae6:	1b 82       	std	Y+3, r1	; 0x03
    2ae8:	1a 82       	std	Y+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2aea:	88 ee       	ldi	r24, 0xE8	; 232
    2aec:	93 e0       	ldi	r25, 0x03	; 3
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	8c 83       	std	Y+4, r24	; 0x04
    2af4:	9d 83       	std	Y+5, r25	; 0x05
    2af6:	ae 83       	std	Y+6, r26	; 0x06
    2af8:	bf 83       	std	Y+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:255
  _inverse_logic(inverse_logic)
    2afa:	84 e6       	ldi	r24, 0x64	; 100
    2afc:	92 e0       	ldi	r25, 0x02	; 2
    2afe:	99 83       	std	Y+1, r25	; 0x01
    2b00:	88 83       	st	Y, r24
    2b02:	1f 8a       	std	Y+23, r1	; 0x17
    2b04:	1e 8a       	std	Y+22, r1	; 0x16
    2b06:	19 8e       	std	Y+25, r1	; 0x19
    2b08:	18 8e       	std	Y+24, r1	; 0x18
    2b0a:	1b 8e       	std	Y+27, r1	; 0x1b
    2b0c:	1a 8e       	std	Y+26, r1	; 0x1a
    2b0e:	1d 8e       	std	Y+29, r1	; 0x1d
    2b10:	1c 8e       	std	Y+28, r1	; 0x1c
    2b12:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b14:	8e 7f       	andi	r24, 0xFE	; 254
    2b16:	20 fb       	bst	r18, 0
    2b18:	81 f9       	bld	r24, 1
    2b1a:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:257
  setTX(transmitPin);
    2b1c:	64 2f       	mov	r22, r20
    2b1e:	ce 01       	movw	r24, r28
    2b20:	8f df       	rcall	.-226    	; 0x2a40 <SoftwareSerial::setTX(unsigned char)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
    2b22:	61 2f       	mov	r22, r17
    2b24:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:259
}
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
    2b2c:	b0 cf       	rjmp	.-160    	; 0x2a8e <SoftwareSerial::setRX(unsigned char)>

00002b2e <SoftwareSerial::begin(long)>:
_ZN14SoftwareSerial5beginEl():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:305
{
    2b2e:	cf 93       	push	r28
    2b30:	df 93       	push	r29
    2b32:	ec 01       	movw	r28, r24
    2b34:	9a 01       	movw	r18, r20
    2b36:	ab 01       	movw	r20, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:306
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2b38:	1b 8e       	std	Y+27, r1	; 0x1b
    2b3a:	1a 8e       	std	Y+26, r1	; 0x1a
    2b3c:	19 8e       	std	Y+25, r1	; 0x19
    2b3e:	18 8e       	std	Y+24, r1	; 0x18
    2b40:	1f 8a       	std	Y+23, r1	; 0x17
    2b42:	1e 8a       	std	Y+22, r1	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:309
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	79 e0       	ldi	r23, 0x09	; 9
    2b48:	8d e3       	ldi	r24, 0x3D	; 61
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	12 d5       	rcall	.+2596   	; 0x3572 <__divmodsi4>
    2b4e:	f9 01       	movw	r30, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    2b50:	c9 01       	movw	r24, r18
    2b52:	03 97       	sbiw	r24, 0x03	; 3
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2b54:	24 30       	cpi	r18, 0x04	; 4
    2b56:	31 05       	cpc	r19, r1
    2b58:	10 f4       	brcc	.+4      	; 0x2b5e <SoftwareSerial::begin(long)+0x30>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:297
    return 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:316
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2b5e:	9d 8f       	std	Y+29, r25	; 0x1d
    2b60:	8c 8f       	std	Y+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:319
  if (digitalPinToPCICR(_receivePin)) {
    2b62:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b64:	66 31       	cpi	r22, 0x16	; 22
    2b66:	08 f0       	brcs	.+2      	; 0x2b6a <SoftwareSerial::begin(long)+0x3c>
    2b68:	52 c0       	rjmp	.+164    	; 0x2c0e <SoftwareSerial::begin(long)+0xe0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2b6a:	c9 01       	movw	r24, r18
    2b6c:	96 95       	lsr	r25
    2b6e:	87 95       	ror	r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2b70:	84 31       	cpi	r24, 0x14	; 20
    2b72:	91 05       	cpc	r25, r1
    2b74:	08 f4       	brcc	.+2      	; 0x2b78 <SoftwareSerial::begin(long)+0x4a>
    2b76:	4f c0       	rjmp	.+158    	; 0x2c16 <SoftwareSerial::begin(long)+0xe8>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    2b78:	43 97       	sbiw	r24, 0x13	; 19
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2b7a:	9f 8b       	std	Y+23, r25	; 0x17
    2b7c:	8e 8b       	std	Y+22, r24	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    2b7e:	c9 01       	movw	r24, r18
    2b80:	05 97       	sbiw	r24, 0x05	; 5
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2b82:	36 97       	sbiw	r30, 0x06	; 6
    2b84:	10 f4       	brcc	.+4      	; 0x2b8a <SoftwareSerial::begin(long)+0x5c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:297
    return 1;
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:337
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2b8a:	99 8f       	std	Y+25, r25	; 0x19
    2b8c:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2b8e:	c9 01       	movw	r24, r18
    2b90:	88 0f       	add	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	28 0f       	add	r18, r24
    2b96:	39 1f       	adc	r19, r25
    2b98:	36 95       	lsr	r19
    2b9a:	27 95       	ror	r18
    2b9c:	36 95       	lsr	r19
    2b9e:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    2ba0:	2d 30       	cpi	r18, 0x0D	; 13
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	d8 f1       	brcs	.+118    	; 0x2c1c <SoftwareSerial::begin(long)+0xee>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    2ba6:	2c 50       	subi	r18, 0x0C	; 12
    2ba8:	31 09       	sbc	r19, r1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2baa:	3b 8f       	std	Y+27, r19	; 0x1b
    2bac:	2a 8f       	std	Y+26, r18	; 0x1a
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:360
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2bae:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    2bb2:	84 e0       	ldi	r24, 0x04	; 4
    2bb4:	68 30       	cpi	r22, 0x08	; 8
    2bb6:	48 f0       	brcs	.+18     	; 0x2bca <SoftwareSerial::begin(long)+0x9c>
    2bb8:	21 e0       	ldi	r18, 0x01	; 1
    2bba:	6e 30       	cpi	r22, 0x0E	; 14
    2bbc:	08 f4       	brcc	.+2      	; 0x2bc0 <SoftwareSerial::begin(long)+0x92>
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	01 c0       	rjmp	.+2      	; 0x2bc6 <SoftwareSerial::begin(long)+0x98>
    2bc4:	88 0f       	add	r24, r24
    2bc6:	2a 95       	dec	r18
    2bc8:	ea f7       	brpl	.-6      	; 0x2bc4 <SoftwareSerial::begin(long)+0x96>
    2bca:	89 2b       	or	r24, r25
    2bcc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:363
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2bd0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bd2:	2d e6       	ldi	r18, 0x6D	; 109
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	98 30       	cpi	r25, 0x08	; 8
    2bd8:	50 f0       	brcs	.+20     	; 0x2bee <SoftwareSerial::begin(long)+0xc0>
    2bda:	2b e6       	ldi	r18, 0x6B	; 107
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	9e 30       	cpi	r25, 0x0E	; 14
    2be0:	30 f0       	brcs	.+12     	; 0x2bee <SoftwareSerial::begin(long)+0xc0>
    2be2:	2c e6       	ldi	r18, 0x6C	; 108
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	96 31       	cpi	r25, 0x16	; 22
    2be8:	10 f0       	brcs	.+4      	; 0x2bee <SoftwareSerial::begin(long)+0xc0>
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	3c 8b       	std	Y+20, r19	; 0x14
    2bf0:	2b 8b       	std	Y+19, r18	; 0x13
    2bf2:	29 2f       	mov	r18, r25
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2bf6:	98 30       	cpi	r25, 0x08	; 8
    2bf8:	a0 f4       	brcc	.+40     	; 0x2c22 <SoftwareSerial::begin(long)+0xf4>
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <SoftwareSerial::begin(long)+0xd2>
    2bfe:	88 0f       	add	r24, r24
    2c00:	9a 95       	dec	r25
    2c02:	ea f7       	brpl	.-6      	; 0x2bfe <SoftwareSerial::begin(long)+0xd0>
    2c04:	8d 8b       	std	Y+21, r24	; 0x15
/usr/avr/include/util/delay_basic.h:110
    2c06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c08:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <SoftwareSerial::begin(long)+0xdc>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    2c0e:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:375
}
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    2c14:	6f ce       	rjmp	.-802    	; 0x28f4 <SoftwareSerial::listen()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:297
    return 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	af cf       	rjmp	.-162    	; 0x2b7a <SoftwareSerial::begin(long)+0x4c>
    2c1c:	21 e0       	ldi	r18, 0x01	; 1
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	c4 cf       	rjmp	.-120    	; 0x2baa <SoftwareSerial::begin(long)+0x7c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2c22:	9e 30       	cpi	r25, 0x0E	; 14
    2c24:	40 f4       	brcc	.+16     	; 0x2c36 <SoftwareSerial::begin(long)+0x108>
    2c26:	28 50       	subi	r18, 0x08	; 8
    2c28:	31 09       	sbc	r19, r1
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	01 c0       	rjmp	.+2      	; 0x2c30 <SoftwareSerial::begin(long)+0x102>
    2c2e:	88 0f       	add	r24, r24
    2c30:	2a 95       	dec	r18
    2c32:	ea f7       	brpl	.-6      	; 0x2c2e <SoftwareSerial::begin(long)+0x100>
    2c34:	e7 cf       	rjmp	.-50     	; 0x2c04 <SoftwareSerial::begin(long)+0xd6>
    2c36:	2e 50       	subi	r18, 0x0E	; 14
    2c38:	31 09       	sbc	r19, r1
    2c3a:	f7 cf       	rjmp	.-18     	; 0x2c2a <SoftwareSerial::begin(long)+0xfc>

00002c3c <__vector_16>:
__vector_16():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:47
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2c3c:	1f 92       	push	r1
    2c3e:	0f 92       	push	r0
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	0f 92       	push	r0
    2c44:	11 24       	eor	r1, r1
    2c46:	2f 93       	push	r18
    2c48:	3f 93       	push	r19
    2c4a:	8f 93       	push	r24
    2c4c:	9f 93       	push	r25
    2c4e:	af 93       	push	r26
    2c50:	bf 93       	push	r27
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:50
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2c52:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <timer0_millis>
    2c56:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <timer0_millis+0x1>
    2c5a:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <timer0_millis+0x2>
    2c5e:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:51
	unsigned char f = timer0_fract;
    2c62:	30 91 9a 04 	lds	r19, 0x049A	; 0x80049a <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:54

	m += MILLIS_INC;
	f += FRACT_INC;
    2c66:	23 e0       	ldi	r18, 0x03	; 3
    2c68:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:55
	if (f >= FRACT_MAX) {
    2c6a:	2d 37       	cpi	r18, 0x7D	; 125
    2c6c:	58 f5       	brcc	.+86     	; 0x2cc4 <__vector_16+0x88>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:53
	m += MILLIS_INC;
    2c6e:	01 96       	adiw	r24, 0x01	; 1
    2c70:	a1 1d       	adc	r26, r1
    2c72:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:60
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
    2c74:	20 93 9a 04 	sts	0x049A, r18	; 0x80049a <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:61
	timer0_millis = m;
    2c78:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <timer0_millis>
    2c7c:	90 93 9c 04 	sts	0x049C, r25	; 0x80049c <timer0_millis+0x1>
    2c80:	a0 93 9d 04 	sts	0x049D, r26	; 0x80049d <timer0_millis+0x2>
    2c84:	b0 93 9e 04 	sts	0x049E, r27	; 0x80049e <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:62
	timer0_overflow_count++;
    2c88:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <timer0_overflow_count>
    2c8c:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <timer0_overflow_count+0x1>
    2c90:	a0 91 a1 04 	lds	r26, 0x04A1	; 0x8004a1 <timer0_overflow_count+0x2>
    2c94:	b0 91 a2 04 	lds	r27, 0x04A2	; 0x8004a2 <timer0_overflow_count+0x3>
    2c98:	01 96       	adiw	r24, 0x01	; 1
    2c9a:	a1 1d       	adc	r26, r1
    2c9c:	b1 1d       	adc	r27, r1
    2c9e:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <timer0_overflow_count>
    2ca2:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <timer0_overflow_count+0x1>
    2ca6:	a0 93 a1 04 	sts	0x04A1, r26	; 0x8004a1 <timer0_overflow_count+0x2>
    2caa:	b0 93 a2 04 	sts	0x04A2, r27	; 0x8004a2 <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:63
}
    2cae:	bf 91       	pop	r27
    2cb0:	af 91       	pop	r26
    2cb2:	9f 91       	pop	r25
    2cb4:	8f 91       	pop	r24
    2cb6:	3f 91       	pop	r19
    2cb8:	2f 91       	pop	r18
    2cba:	0f 90       	pop	r0
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	0f 90       	pop	r0
    2cc0:	1f 90       	pop	r1
    2cc2:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:56
		f -= FRACT_MAX;
    2cc4:	26 e8       	ldi	r18, 0x86	; 134
    2cc6:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:57
		m += 1;
    2cc8:	02 96       	adiw	r24, 0x02	; 2
    2cca:	a1 1d       	adc	r26, r1
    2ccc:	b1 1d       	adc	r27, r1
    2cce:	d2 cf       	rjmp	.-92     	; 0x2c74 <__vector_16+0x38>

00002cd0 <millis>:
millis():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:68

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2cd0:	2f b7       	in	r18, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2cd2:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:73
	m = timer0_millis;
    2cd4:	60 91 9b 04 	lds	r22, 0x049B	; 0x80049b <timer0_millis>
    2cd8:	70 91 9c 04 	lds	r23, 0x049C	; 0x80049c <timer0_millis+0x1>
    2cdc:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <timer0_millis+0x2>
    2ce0:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:74
	SREG = oldSREG;
    2ce4:	2f bf       	out	0x3f, r18	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:77

	return m;
}
    2ce6:	08 95       	ret

00002ce8 <micros>:
micros():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:81

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2ce8:	3f b7       	in	r19, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:83
	
	cli();
    2cea:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:84
	m = timer0_overflow_count;
    2cec:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <timer0_overflow_count>
    2cf0:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <timer0_overflow_count+0x1>
    2cf4:	a0 91 a1 04 	lds	r26, 0x04A1	; 0x8004a1 <timer0_overflow_count+0x2>
    2cf8:	b0 91 a2 04 	lds	r27, 0x04A2	; 0x8004a2 <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:86
#if defined(TCNT0)
	t = TCNT0;
    2cfc:	26 b5       	in	r18, 0x26	; 38
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:94
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2cfe:	a8 9b       	sbis	0x15, 0	; 21
    2d00:	05 c0       	rjmp	.+10     	; 0x2d0c <micros+0x24>
    2d02:	2f 3f       	cpi	r18, 0xFF	; 255
    2d04:	19 f0       	breq	.+6      	; 0x2d0c <micros+0x24>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:95
		m++;
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	a1 1d       	adc	r26, r1
    2d0a:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:101
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2d0c:	3f bf       	out	0x3f, r19	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:103
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2d0e:	ba 2f       	mov	r27, r26
    2d10:	a9 2f       	mov	r26, r25
    2d12:	98 2f       	mov	r25, r24
    2d14:	88 27       	eor	r24, r24
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	62 0f       	add	r22, r18
    2d1c:	71 1d       	adc	r23, r1
    2d1e:	81 1d       	adc	r24, r1
    2d20:	91 1d       	adc	r25, r1
    2d22:	42 e0       	ldi	r20, 0x02	; 2
    2d24:	66 0f       	add	r22, r22
    2d26:	77 1f       	adc	r23, r23
    2d28:	88 1f       	adc	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	4a 95       	dec	r20
    2d2e:	d1 f7       	brne	.-12     	; 0x2d24 <micros+0x3c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:104
}
    2d30:	08 95       	ret

00002d32 <delay>:
delay():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:107

void delay(unsigned long ms)
{
    2d32:	8f 92       	push	r8
    2d34:	9f 92       	push	r9
    2d36:	af 92       	push	r10
    2d38:	bf 92       	push	r11
    2d3a:	cf 92       	push	r12
    2d3c:	df 92       	push	r13
    2d3e:	ef 92       	push	r14
    2d40:	ff 92       	push	r15
    2d42:	6b 01       	movw	r12, r22
    2d44:	7c 01       	movw	r14, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:108
	uint32_t start = micros();
    2d46:	d0 df       	rcall	.-96     	; 0x2ce8 <micros>
    2d48:	4b 01       	movw	r8, r22
    2d4a:	5c 01       	movw	r10, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:110

	while (ms > 0) {
    2d4c:	c1 14       	cp	r12, r1
    2d4e:	d1 04       	cpc	r13, r1
    2d50:	e1 04       	cpc	r14, r1
    2d52:	f1 04       	cpc	r15, r1
    2d54:	d9 f0       	breq	.+54     	; 0x2d8c <delay+0x5a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:111
		yield();
    2d56:	f0 d0       	rcall	.+480    	; 0x2f38 <yield>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    2d58:	c7 df       	rcall	.-114    	; 0x2ce8 <micros>
    2d5a:	68 19       	sub	r22, r8
    2d5c:	79 09       	sbc	r23, r9
    2d5e:	8a 09       	sbc	r24, r10
    2d60:	9b 09       	sbc	r25, r11
    2d62:	68 3e       	cpi	r22, 0xE8	; 232
    2d64:	73 40       	sbci	r23, 0x03	; 3
    2d66:	81 05       	cpc	r24, r1
    2d68:	91 05       	cpc	r25, r1
    2d6a:	80 f3       	brcs	.-32     	; 0x2d4c <delay+0x1a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:113
			ms--;
    2d6c:	21 e0       	ldi	r18, 0x01	; 1
    2d6e:	c2 1a       	sub	r12, r18
    2d70:	d1 08       	sbc	r13, r1
    2d72:	e1 08       	sbc	r14, r1
    2d74:	f1 08       	sbc	r15, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:114
			start += 1000;
    2d76:	88 ee       	ldi	r24, 0xE8	; 232
    2d78:	88 0e       	add	r8, r24
    2d7a:	83 e0       	ldi	r24, 0x03	; 3
    2d7c:	98 1e       	adc	r9, r24
    2d7e:	a1 1c       	adc	r10, r1
    2d80:	b1 1c       	adc	r11, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    2d82:	c1 14       	cp	r12, r1
    2d84:	d1 04       	cpc	r13, r1
    2d86:	e1 04       	cpc	r14, r1
    2d88:	f1 04       	cpc	r15, r1
    2d8a:	31 f7       	brne	.-52     	; 0x2d58 <delay+0x26>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:117
		}
	}
}
    2d8c:	ff 90       	pop	r15
    2d8e:	ef 90       	pop	r14
    2d90:	df 90       	pop	r13
    2d92:	cf 90       	pop	r12
    2d94:	bf 90       	pop	r11
    2d96:	af 90       	pop	r10
    2d98:	9f 90       	pop	r9
    2d9a:	8f 90       	pop	r8
    2d9c:	08 95       	ret

00002d9e <init>:
init():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:245

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2d9e:	78 94       	sei
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:251
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2da0:	84 b5       	in	r24, 0x24	; 36
    2da2:	82 60       	ori	r24, 0x02	; 2
    2da4:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:252
	sbi(TCCR0A, WGM00);
    2da6:	84 b5       	in	r24, 0x24	; 36
    2da8:	81 60       	ori	r24, 0x01	; 1
    2daa:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:265
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2dac:	85 b5       	in	r24, 0x25	; 37
    2dae:	82 60       	ori	r24, 0x02	; 2
    2db0:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:266
	sbi(TCCR0B, CS00);
    2db2:	85 b5       	in	r24, 0x25	; 37
    2db4:	81 60       	ori	r24, 0x01	; 1
    2db6:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:279

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2db8:	ee e6       	ldi	r30, 0x6E	; 110
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	81 60       	ori	r24, 0x01	; 1
    2dc0:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:290
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2dc2:	e1 e8       	ldi	r30, 0x81	; 129
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:293

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2dc8:	80 81       	ld	r24, Z
    2dca:	82 60       	ori	r24, 0x02	; 2
    2dcc:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:295
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2dce:	80 81       	ld	r24, Z
    2dd0:	81 60       	ori	r24, 0x01	; 1
    2dd2:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:305
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2dd4:	e0 e8       	ldi	r30, 0x80	; 128
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	81 60       	ori	r24, 0x01	; 1
    2ddc:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:312

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2dde:	e1 eb       	ldi	r30, 0xB1	; 177
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	84 60       	ori	r24, 0x04	; 4
    2de6:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:321

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2de8:	e0 eb       	ldi	r30, 0xB0	; 176
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	81 60       	ori	r24, 0x01	; 1
    2df0:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:356
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2df2:	ea e7       	ldi	r30, 0x7A	; 122
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	84 60       	ori	r24, 0x04	; 4
    2dfa:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:357
		sbi(ADCSRA, ADPS1);
    2dfc:	80 81       	ld	r24, Z
    2dfe:	82 60       	ori	r24, 0x02	; 2
    2e00:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:358
		sbi(ADCSRA, ADPS0);
    2e02:	80 81       	ld	r24, Z
    2e04:	81 60       	ori	r24, 0x01	; 1
    2e06:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:381
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2e08:	80 81       	ld	r24, Z
    2e0a:	80 68       	ori	r24, 0x80	; 128
    2e0c:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:390
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2e0e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:392
#endif
}
    2e12:	08 95       	ret

00002e14 <turnOffPWM>:
turnOffPWM():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2e14:	83 30       	cpi	r24, 0x03	; 3
    2e16:	81 f0       	breq	.+32     	; 0x2e38 <turnOffPWM+0x24>
    2e18:	28 f4       	brcc	.+10     	; 0x2e24 <turnOffPWM+0x10>
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	99 f0       	breq	.+38     	; 0x2e44 <turnOffPWM+0x30>
    2e1e:	82 30       	cpi	r24, 0x02	; 2
    2e20:	a9 f0       	breq	.+42     	; 0x2e4c <turnOffPWM+0x38>
    2e22:	08 95       	ret
    2e24:	87 30       	cpi	r24, 0x07	; 7
    2e26:	a9 f0       	breq	.+42     	; 0x2e52 <turnOffPWM+0x3e>
    2e28:	88 30       	cpi	r24, 0x08	; 8
    2e2a:	c9 f0       	breq	.+50     	; 0x2e5e <turnOffPWM+0x4a>
    2e2c:	84 30       	cpi	r24, 0x04	; 4
    2e2e:	b1 f4       	brne	.+44     	; 0x2e5c <turnOffPWM+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2e30:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2e34:	8f 7d       	andi	r24, 0xDF	; 223
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <turnOffPWM+0x2a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:80
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2e38:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2e3c:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2e3e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2e42:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:94
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2e44:	84 b5       	in	r24, 0x24	; 36
    2e46:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:98
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2e48:	84 bd       	out	0x24, r24	; 36
    2e4a:	08 95       	ret
    2e4c:	84 b5       	in	r24, 0x24	; 36
    2e4e:	8f 7d       	andi	r24, 0xDF	; 223
    2e50:	fb cf       	rjmp	.-10     	; 0x2e48 <turnOffPWM+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:101
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2e52:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e56:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2e58:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:136
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    2e5c:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:104
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2e5e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e62:	8f 7d       	andi	r24, 0xDF	; 223
    2e64:	f9 cf       	rjmp	.-14     	; 0x2e58 <turnOffPWM+0x44>

00002e66 <pinMode>:
pinMode():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:30
{
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:31
	uint8_t bit = digitalPinToBitMask(pin);
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	e6 56       	subi	r30, 0x66	; 102
    2e70:	fd 4f       	sbci	r31, 0xFD	; 253
    2e72:	24 91       	lpm	r18, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:32
	uint8_t port = digitalPinToPort(pin);
    2e74:	82 55       	subi	r24, 0x52	; 82
    2e76:	9d 4f       	sbci	r25, 0xFD	; 253
    2e78:	fc 01       	movw	r30, r24
    2e7a:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:35
	if (port == NOT_A_PIN) return;
    2e7c:	88 23       	and	r24, r24
    2e7e:	c9 f0       	breq	.+50     	; 0x2eb2 <pinMode+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:38
	reg = portModeRegister(port);
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	fc 01       	movw	r30, r24
    2e88:	ea 52       	subi	r30, 0x2A	; 42
    2e8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e8c:	a5 91       	lpm	r26, Z+
    2e8e:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:39
	out = portOutputRegister(port);
    2e90:	fc 01       	movw	r30, r24
    2e92:	e4 53       	subi	r30, 0x34	; 52
    2e94:	fd 4f       	sbci	r31, 0xFD	; 253
    2e96:	c5 91       	lpm	r28, Z+
    2e98:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:41
	if (mode == INPUT) { 
    2e9a:	61 11       	cpse	r22, r1
    2e9c:	0d c0       	rjmp	.+26     	; 0x2eb8 <pinMode+0x52>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:42
		uint8_t oldSREG = SREG;
    2e9e:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:43
                cli();
    2ea0:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:44
		*reg &= ~bit;
    2ea2:	8c 91       	ld	r24, X
    2ea4:	20 95       	com	r18
    2ea6:	82 23       	and	r24, r18
    2ea8:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:45
		*out &= ~bit;
    2eaa:	88 81       	ld	r24, Y
    2eac:	28 23       	and	r18, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    2eae:	28 83       	st	Y, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:52
		SREG = oldSREG;
    2eb0:	9f bf       	out	0x3f, r25	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:59
}
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:47
	} else if (mode == INPUT_PULLUP) {
    2eb8:	62 30       	cpi	r22, 0x02	; 2
    2eba:	51 f4       	brne	.+20     	; 0x2ed0 <pinMode+0x6a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:48
		uint8_t oldSREG = SREG;
    2ebc:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:49
                cli();
    2ebe:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:50
		*reg &= ~bit;
    2ec0:	3c 91       	ld	r19, X
    2ec2:	82 2f       	mov	r24, r18
    2ec4:	80 95       	com	r24
    2ec6:	83 23       	and	r24, r19
    2ec8:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    2eca:	e8 81       	ld	r30, Y
    2ecc:	2e 2b       	or	r18, r30
    2ece:	ef cf       	rjmp	.-34     	; 0x2eae <pinMode+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:54
		uint8_t oldSREG = SREG;
    2ed0:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:55
                cli();
    2ed2:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:56
		*reg |= bit;
    2ed4:	ec 91       	ld	r30, X
    2ed6:	2e 2b       	or	r18, r30
    2ed8:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:57
		SREG = oldSREG;
    2eda:	8f bf       	out	0x3f, r24	; 63
    2edc:	ea cf       	rjmp	.-44     	; 0x2eb2 <pinMode+0x4c>

00002ede <digitalWrite>:
digitalWrite():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:139

void digitalWrite(uint8_t pin, uint8_t val)
{
    2ede:	1f 93       	push	r17
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:140
	uint8_t timer = digitalPinToTimer(pin);
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	f9 01       	movw	r30, r18
    2eec:	ea 57       	subi	r30, 0x7A	; 122
    2eee:	fd 4f       	sbci	r31, 0xFD	; 253
    2ef0:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
    2ef2:	f9 01       	movw	r30, r18
    2ef4:	e6 56       	subi	r30, 0x66	; 102
    2ef6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ef8:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
    2efa:	f9 01       	movw	r30, r18
    2efc:	e2 55       	subi	r30, 0x52	; 82
    2efe:	fd 4f       	sbci	r31, 0xFD	; 253
    2f00:	c4 91       	lpm	r28, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:145
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2f02:	cc 23       	and	r28, r28
    2f04:	99 f0       	breq	.+38     	; 0x2f2c <digitalWrite+0x4e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:149

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2f06:	81 11       	cpse	r24, r1
    2f08:	85 df       	rcall	.-246    	; 0x2e14 <turnOffPWM>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:151

	out = portOutputRegister(port);
    2f0a:	ec 2f       	mov	r30, r28
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	ee 0f       	add	r30, r30
    2f10:	ff 1f       	adc	r31, r31
    2f12:	e4 53       	subi	r30, 0x34	; 52
    2f14:	fd 4f       	sbci	r31, 0xFD	; 253
    2f16:	a5 91       	lpm	r26, Z+
    2f18:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:153

	uint8_t oldSREG = SREG;
    2f1a:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:154
	cli();
    2f1c:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157

	if (val == LOW) {
		*out &= ~bit;
    2f1e:	ec 91       	ld	r30, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:156
	if (val == LOW) {
    2f20:	11 11       	cpse	r17, r1
    2f22:	08 c0       	rjmp	.+16     	; 0x2f34 <digitalWrite+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157
		*out &= ~bit;
    2f24:	d0 95       	com	r29
    2f26:	de 23       	and	r29, r30
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
	} else {
		*out |= bit;
    2f28:	dc 93       	st	X, r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:162
	}

	SREG = oldSREG;
    2f2a:	8f bf       	out	0x3f, r24	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:163
}
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
		*out |= bit;
    2f34:	de 2b       	or	r29, r30
    2f36:	f8 cf       	rjmp	.-16     	; 0x2f28 <digitalWrite+0x4a>

00002f38 <yield>:
__empty():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    2f38:	08 95       	ret

00002f3a <operator new[](unsigned int)>:
    2f3a:	58 c3       	rjmp	.+1712   	; 0x35ec <malloc>

00002f3c <operator delete[](void*)>:
    2f3c:	ef c3       	rjmp	.+2014   	; 0x371c <free>

00002f3e <__vector_18>:
__vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2f3e:	1f 92       	push	r1
    2f40:	0f 92       	push	r0
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	0f 92       	push	r0
    2f46:	11 24       	eor	r1, r1
    2f48:	2f 93       	push	r18
    2f4a:	8f 93       	push	r24
    2f4c:	9f 93       	push	r25
    2f4e:	ef 93       	push	r30
    2f50:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2f52:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <Serial+0x10>
    2f56:	f0 91 b4 04 	lds	r31, 0x04B4	; 0x8004b4 <Serial+0x11>
    2f5a:	80 81       	ld	r24, Z
    2f5c:	e0 91 b9 04 	lds	r30, 0x04B9	; 0x8004b9 <Serial+0x16>
    2f60:	f0 91 ba 04 	lds	r31, 0x04BA	; 0x8004ba <Serial+0x17>
    2f64:	82 fd       	sbrc	r24, 2
    2f66:	1b c0       	rjmp	.+54     	; 0x2f9e <__vector_18+0x60>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2f68:	90 81       	ld	r25, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2f6a:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <Serial+0x19>
    2f6e:	8f 5f       	subi	r24, 0xFF	; 255
    2f70:	8f 73       	andi	r24, 0x3F	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2f72:	20 91 bd 04 	lds	r18, 0x04BD	; 0x8004bd <Serial+0x1a>
    2f76:	82 17       	cp	r24, r18
    2f78:	41 f0       	breq	.+16     	; 0x2f8a <__vector_18+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    2f7a:	e0 91 bc 04 	lds	r30, 0x04BC	; 0x8004bc <Serial+0x19>
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	ed 55       	subi	r30, 0x5D	; 93
    2f82:	fb 4f       	sbci	r31, 0xFB	; 251
    2f84:	95 8f       	std	Z+29, r25	; 0x1d
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    2f86:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <Serial+0x19>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
    2f8a:	ff 91       	pop	r31
    2f8c:	ef 91       	pop	r30
    2f8e:	9f 91       	pop	r25
    2f90:	8f 91       	pop	r24
    2f92:	2f 91       	pop	r18
    2f94:	0f 90       	pop	r0
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	0f 90       	pop	r0
    2f9a:	1f 90       	pop	r1
    2f9c:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2f9e:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    2fa0:	f4 cf       	rjmp	.-24     	; 0x2f8a <__vector_18+0x4c>

00002fa2 <__vector_19>:
__vector_19():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2fa2:	1f 92       	push	r1
    2fa4:	0f 92       	push	r0
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	0f 92       	push	r0
    2faa:	11 24       	eor	r1, r1
    2fac:	2f 93       	push	r18
    2fae:	3f 93       	push	r19
    2fb0:	4f 93       	push	r20
    2fb2:	5f 93       	push	r21
    2fb4:	6f 93       	push	r22
    2fb6:	7f 93       	push	r23
    2fb8:	8f 93       	push	r24
    2fba:	9f 93       	push	r25
    2fbc:	af 93       	push	r26
    2fbe:	bf 93       	push	r27
    2fc0:	ef 93       	push	r30
    2fc2:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2fc4:	83 ea       	ldi	r24, 0xA3	; 163
    2fc6:	94 e0       	ldi	r25, 0x04	; 4
    2fc8:	b9 d1       	rcall	.+882    	; 0x333c <HardwareSerial::_tx_udr_empty_irq()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:65
}
    2fca:	ff 91       	pop	r31
    2fcc:	ef 91       	pop	r30
    2fce:	bf 91       	pop	r27
    2fd0:	af 91       	pop	r26
    2fd2:	9f 91       	pop	r25
    2fd4:	8f 91       	pop	r24
    2fd6:	7f 91       	pop	r23
    2fd8:	6f 91       	pop	r22
    2fda:	5f 91       	pop	r21
    2fdc:	4f 91       	pop	r20
    2fde:	3f 91       	pop	r19
    2fe0:	2f 91       	pop	r18
    2fe2:	0f 90       	pop	r0
    2fe4:	0f be       	out	0x3f, r0	; 63
    2fe6:	0f 90       	pop	r0
    2fe8:	1f 90       	pop	r1
    2fea:	18 95       	reti

00002fec <Serial0_available()>:
_Z17Serial0_availablev():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2fec:	83 ea       	ldi	r24, 0xA3	; 163
    2fee:	94 e0       	ldi	r25, 0x04	; 4
    2ff0:	5b d1       	rcall	.+694    	; 0x32a8 <HardwareSerial::available()>
    2ff2:	21 e0       	ldi	r18, 0x01	; 1
    2ff4:	89 2b       	or	r24, r25
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <Serial0_available()+0xe>
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:77
}
    2ffa:	82 2f       	mov	r24, r18
    2ffc:	08 95       	ret

00002ffe <_GLOBAL__sub_I___vector_18>:
_GLOBAL__sub_I___vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:46
    2ffe:	e3 ea       	ldi	r30, 0xA3	; 163
    3000:	f4 e0       	ldi	r31, 0x04	; 4
    3002:	13 82       	std	Z+3, r1	; 0x03
    3004:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:63
    3006:	88 ee       	ldi	r24, 0xE8	; 232
    3008:	93 e0       	ldi	r25, 0x03	; 3
    300a:	a0 e0       	ldi	r26, 0x00	; 0
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	84 83       	std	Z+4, r24	; 0x04
    3010:	95 83       	std	Z+5, r25	; 0x05
    3012:	a6 83       	std	Z+6, r26	; 0x06
    3014:	b7 83       	std	Z+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:95
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3016:	89 e7       	ldi	r24, 0x79	; 121
    3018:	92 e0       	ldi	r25, 0x02	; 2
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	80 83       	st	Z, r24
    301e:	85 ec       	ldi	r24, 0xC5	; 197
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	95 87       	std	Z+13, r25	; 0x0d
    3024:	84 87       	std	Z+12, r24	; 0x0c
    3026:	84 ec       	ldi	r24, 0xC4	; 196
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	97 87       	std	Z+15, r25	; 0x0f
    302c:	86 87       	std	Z+14, r24	; 0x0e
    302e:	80 ec       	ldi	r24, 0xC0	; 192
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	91 8b       	std	Z+17, r25	; 0x11
    3034:	80 8b       	std	Z+16, r24	; 0x10
    3036:	81 ec       	ldi	r24, 0xC1	; 193
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	93 8b       	std	Z+19, r25	; 0x13
    303c:	82 8b       	std	Z+18, r24	; 0x12
    303e:	82 ec       	ldi	r24, 0xC2	; 194
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	95 8b       	std	Z+21, r25	; 0x15
    3044:	84 8b       	std	Z+20, r24	; 0x14
    3046:	86 ec       	ldi	r24, 0xC6	; 198
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	97 8b       	std	Z+23, r25	; 0x17
    304c:	86 8b       	std	Z+22, r24	; 0x16
    304e:	11 8e       	std	Z+25, r1	; 0x19
    3050:	12 8e       	std	Z+26, r1	; 0x1a
    3052:	13 8e       	std	Z+27, r1	; 0x1b
    3054:	14 8e       	std	Z+28, r1	; 0x1c
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:77
    3056:	08 95       	ret

00003058 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    3058:	af 92       	push	r10
    305a:	bf 92       	push	r11
    305c:	cf 92       	push	r12
    305e:	df 92       	push	r13
    3060:	ef 92       	push	r14
    3062:	ff 92       	push	r15
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	6c 01       	movw	r12, r24
    306e:	7b 01       	movw	r14, r22
    3070:	8b 01       	movw	r16, r22
    3072:	04 0f       	add	r16, r20
    3074:	15 1f       	adc	r17, r21
    3076:	eb 01       	movw	r28, r22
    3078:	5e 01       	movw	r10, r28
    307a:	ae 18       	sub	r10, r14
    307c:	bf 08       	sbc	r11, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:37
  size_t n = 0;
  while (size--) {
    307e:	c0 17       	cp	r28, r16
    3080:	d1 07       	cpc	r29, r17
    3082:	59 f0       	breq	.+22     	; 0x309a <Print::write(unsigned char const*, unsigned int)+0x42>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:38
    if (write(*buffer++)) n++;
    3084:	69 91       	ld	r22, Y+
    3086:	d6 01       	movw	r26, r12
    3088:	ed 91       	ld	r30, X+
    308a:	fc 91       	ld	r31, X
    308c:	01 90       	ld	r0, Z+
    308e:	f0 81       	ld	r31, Z
    3090:	e0 2d       	mov	r30, r0
    3092:	c6 01       	movw	r24, r12
    3094:	09 95       	icall
    3096:	89 2b       	or	r24, r25
    3098:	79 f7       	brne	.-34     	; 0x3078 <Print::write(unsigned char const*, unsigned int)+0x20>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:42
    else break;
  }
  return n;
}
    309a:	c5 01       	movw	r24, r10
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	df 90       	pop	r13
    30aa:	cf 90       	pop	r12
    30ac:	bf 90       	pop	r11
    30ae:	af 90       	pop	r10
    30b0:	08 95       	ret

000030b2 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc.part.2():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    30b2:	fb 01       	movw	r30, r22
    30b4:	01 90       	ld	r0, Z+
    30b6:	00 20       	and	r0, r0
    30b8:	e9 f7       	brne	.-6      	; 0x30b4 <Print::write(char const*) [clone .part.2]+0x2>
    30ba:	31 97       	sbiw	r30, 0x01	; 1
    30bc:	af 01       	movw	r20, r30
    30be:	46 1b       	sub	r20, r22
    30c0:	57 0b       	sbc	r21, r23
    30c2:	dc 01       	movw	r26, r24
    30c4:	ed 91       	ld	r30, X+
    30c6:	fc 91       	ld	r31, X
    30c8:	02 80       	ldd	r0, Z+2	; 0x02
    30ca:	f3 81       	ldd	r31, Z+3	; 0x03
    30cc:	e0 2d       	mov	r30, r0
    30ce:	09 94       	ijmp

000030d0 <Print::print(char const*)>:
_ZN5Print5printEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:53
      if (str == NULL) return 0;
    30d0:	61 15       	cp	r22, r1
    30d2:	71 05       	cpc	r23, r1
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <Print::print(char const*)+0x8>
    30d6:	ed cf       	rjmp	.-38     	; 0x30b2 <Print::write(char const*) [clone .part.2]>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:65
}

size_t Print::print(const char str[])
{
  return write(str);
}
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	08 95       	ret

000030de <Print::print(char)>:
_ZN5Print5printEc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:69

size_t Print::print(char c)
{
  return write(c);
    30de:	dc 01       	movw	r26, r24
    30e0:	ed 91       	ld	r30, X+
    30e2:	fc 91       	ld	r31, X
    30e4:	01 90       	ld	r0, Z+
    30e6:	f0 81       	ld	r31, Z
    30e8:	e0 2d       	mov	r30, r0
    30ea:	09 94       	ijmp

000030ec <Print::println()>:
_ZN5Print7printlnEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:127
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    30ec:	62 e7       	ldi	r22, 0x72	; 114
    30ee:	72 e0       	ldi	r23, 0x02	; 2
    30f0:	e0 cf       	rjmp	.-64     	; 0x30b2 <Print::write(char const*) [clone .part.2]>

000030f2 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:139
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    30f2:	0f 93       	push	r16
    30f4:	1f 93       	push	r17
    30f6:	cf 93       	push	r28
    30f8:	df 93       	push	r29
    30fa:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:53
    30fc:	d0 e0       	ldi	r29, 0x00	; 0
    30fe:	c0 e0       	ldi	r28, 0x00	; 0
    3100:	61 15       	cp	r22, r1
    3102:	71 05       	cpc	r23, r1
    3104:	11 f0       	breq	.+4      	; 0x310a <Print::println(char const*)+0x18>
    3106:	d5 df       	rcall	.-86     	; 0x30b2 <Print::write(char const*) [clone .part.2]>
    3108:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:141
  size_t n = print(c);
  n += println();
    310a:	c8 01       	movw	r24, r16
    310c:	ef df       	rcall	.-34     	; 0x30ec <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:143
  return n;
}
    310e:	8c 0f       	add	r24, r28
    3110:	9d 1f       	adc	r25, r29
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	1f 91       	pop	r17
    3118:	0f 91       	pop	r16
    311a:	08 95       	ret

0000311c <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:204
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    311c:	8f 92       	push	r8
    311e:	9f 92       	push	r9
    3120:	af 92       	push	r10
    3122:	bf 92       	push	r11
    3124:	ef 92       	push	r14
    3126:	ff 92       	push	r15
    3128:	0f 93       	push	r16
    312a:	1f 93       	push	r17
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	a1 97       	sbiw	r28, 0x21	; 33
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	7c 01       	movw	r14, r24
    3142:	fa 01       	movw	r30, r20
    3144:	cb 01       	movw	r24, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:208
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3146:	19 a2       	std	Y+33, r1	; 0x21
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:211

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3148:	22 30       	cpi	r18, 0x02	; 2
    314a:	08 f4       	brcc	.+2      	; 0x314e <Print::printNumber(unsigned long, unsigned char)+0x32>
    314c:	2a e0       	ldi	r18, 0x0A	; 10
    314e:	8e 01       	movw	r16, r28
    3150:	0f 5d       	subi	r16, 0xDF	; 223
    3152:	1f 4f       	sbci	r17, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:214

  do {
    char c = n % base;
    3154:	82 2e       	mov	r8, r18
    3156:	91 2c       	mov	r9, r1
    3158:	b1 2c       	mov	r11, r1
    315a:	a1 2c       	mov	r10, r1
    315c:	bf 01       	movw	r22, r30
    315e:	a5 01       	movw	r20, r10
    3160:	94 01       	movw	r18, r8
    3162:	e5 d1       	rcall	.+970    	; 0x352e <__udivmodsi4>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:215
    n /= base;
    3164:	f9 01       	movw	r30, r18
    3166:	ca 01       	movw	r24, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    3168:	6a 30       	cpi	r22, 0x0A	; 10
    316a:	04 f5       	brge	.+64     	; 0x31ac <Print::printNumber(unsigned long, unsigned char)+0x90>
    316c:	60 5d       	subi	r22, 0xD0	; 208
    316e:	d8 01       	movw	r26, r16
    3170:	6e 93       	st	-X, r22
    3172:	8d 01       	movw	r16, r26
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:218
  } while(n);
    3174:	23 2b       	or	r18, r19
    3176:	24 2b       	or	r18, r20
    3178:	25 2b       	or	r18, r21
    317a:	81 f7       	brne	.-32     	; 0x315c <Print::printNumber(unsigned long, unsigned char)+0x40>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:53
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	10 97       	sbiw	r26, 0x00	; 0
    3182:	19 f0       	breq	.+6      	; 0x318a <Print::printNumber(unsigned long, unsigned char)+0x6e>
    3184:	bd 01       	movw	r22, r26
    3186:	c7 01       	movw	r24, r14
    3188:	94 df       	rcall	.-216    	; 0x30b2 <Print::write(char const*) [clone .part.2]>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:221

  return write(str);
}
    318a:	a1 96       	adiw	r28, 0x21	; 33
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	ff 90       	pop	r15
    31a0:	ef 90       	pop	r14
    31a2:	bf 90       	pop	r11
    31a4:	af 90       	pop	r10
    31a6:	9f 90       	pop	r9
    31a8:	8f 90       	pop	r8
    31aa:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    31ac:	69 5c       	subi	r22, 0xC9	; 201
    31ae:	df cf       	rjmp	.-66     	; 0x316e <Print::printNumber(unsigned long, unsigned char)+0x52>

000031b0 <Print::print(long, int)>:
_ZN5Print5printEli():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:88
{
    31b0:	cf 92       	push	r12
    31b2:	df 92       	push	r13
    31b4:	ef 92       	push	r14
    31b6:	ff 92       	push	r15
    31b8:	0f 93       	push	r16
    31ba:	1f 93       	push	r17
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	ec 01       	movw	r28, r24
    31c2:	6a 01       	movw	r12, r20
    31c4:	7b 01       	movw	r14, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:89
  if (base == 0) {
    31c6:	21 15       	cp	r18, r1
    31c8:	31 05       	cpc	r19, r1
    31ca:	79 f4       	brne	.+30     	; 0x31ea <Print::print(long, int)+0x3a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    31cc:	e8 81       	ld	r30, Y
    31ce:	f9 81       	ldd	r31, Y+1	; 0x01
    31d0:	01 90       	ld	r0, Z+
    31d2:	f0 81       	ld	r31, Z
    31d4:	e0 2d       	mov	r30, r0
    31d6:	64 2f       	mov	r22, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	1f 91       	pop	r17
    31de:	0f 91       	pop	r16
    31e0:	ff 90       	pop	r15
    31e2:	ef 90       	pop	r14
    31e4:	df 90       	pop	r13
    31e6:	cf 90       	pop	r12
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    31e8:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:91
  } else if (base == 10) {
    31ea:	2a 30       	cpi	r18, 0x0A	; 10
    31ec:	31 05       	cpc	r19, r1
    31ee:	d9 f4       	brne	.+54     	; 0x3226 <Print::print(long, int)+0x76>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:97
    return printNumber(n, 10);
    31f0:	2a e0       	ldi	r18, 0x0A	; 10
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:92
    if (n < 0) {
    31f2:	f7 fe       	sbrs	r15, 7
    31f4:	18 c0       	rjmp	.+48     	; 0x3226 <Print::print(long, int)+0x76>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:93
      int t = print('-');
    31f6:	6d e2       	ldi	r22, 0x2D	; 45
    31f8:	72 df       	rcall	.-284    	; 0x30de <Print::print(char)>
    31fa:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:94
      n = -n;
    31fc:	44 27       	eor	r20, r20
    31fe:	55 27       	eor	r21, r21
    3200:	ba 01       	movw	r22, r20
    3202:	4c 19       	sub	r20, r12
    3204:	5d 09       	sbc	r21, r13
    3206:	6e 09       	sbc	r22, r14
    3208:	7f 09       	sbc	r23, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:95
      return printNumber(n, 10) + t;
    320a:	2a e0       	ldi	r18, 0x0A	; 10
    320c:	ce 01       	movw	r24, r28
    320e:	86 df       	rcall	.-244    	; 0x311c <Print::printNumber(unsigned long, unsigned char)>
    3210:	80 0f       	add	r24, r16
    3212:	91 1f       	adc	r25, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	1f 91       	pop	r17
    321a:	0f 91       	pop	r16
    321c:	ff 90       	pop	r15
    321e:	ef 90       	pop	r14
    3220:	df 90       	pop	r13
    3222:	cf 90       	pop	r12
    3224:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    3226:	b7 01       	movw	r22, r14
    3228:	a6 01       	movw	r20, r12
    322a:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	1f 91       	pop	r17
    3232:	0f 91       	pop	r16
    3234:	ff 90       	pop	r15
    3236:	ef 90       	pop	r14
    3238:	df 90       	pop	r13
    323a:	cf 90       	pop	r12
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    323c:	6f cf       	rjmp	.-290    	; 0x311c <Print::printNumber(unsigned long, unsigned char)>

0000323e <Print::print(int, int)>:
_ZN5Print5printEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:78
{
    323e:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:79
  return print((long) n, base);
    3240:	ab 01       	movw	r20, r22
    3242:	77 0f       	add	r23, r23
    3244:	66 0b       	sbc	r22, r22
    3246:	77 0b       	sbc	r23, r23
    3248:	b3 cf       	rjmp	.-154    	; 0x31b0 <Print::print(long, int)>

0000324a <Print::println(int, int)>:
_ZN5Print7printlnEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:160
{
    324a:	0f 93       	push	r16
    324c:	1f 93       	push	r17
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:161
  size_t n = print(num, base);
    3254:	f4 df       	rcall	.-24     	; 0x323e <Print::print(int, int)>
    3256:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:162
  n += println();
    3258:	ce 01       	movw	r24, r28
    325a:	48 df       	rcall	.-368    	; 0x30ec <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:164
}
    325c:	80 0f       	add	r24, r16
    325e:	91 1f       	adc	r25, r17
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	08 95       	ret

0000326a <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:105
  if (base == 0) return write(n);
    326a:	21 15       	cp	r18, r1
    326c:	31 05       	cpc	r19, r1
    326e:	41 f4       	brne	.+16     	; 0x3280 <Print::print(unsigned long, int)+0x16>
    3270:	dc 01       	movw	r26, r24
    3272:	ed 91       	ld	r30, X+
    3274:	fc 91       	ld	r31, X
    3276:	01 90       	ld	r0, Z+
    3278:	f0 81       	ld	r31, Z
    327a:	e0 2d       	mov	r30, r0
    327c:	64 2f       	mov	r22, r20
    327e:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:106
  else return printNumber(n, base);
    3280:	4d cf       	rjmp	.-358    	; 0x311c <Print::printNumber(unsigned long, unsigned char)>

00003282 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:73
{
    3282:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:74
  return print((unsigned long) b, base);
    3284:	46 2f       	mov	r20, r22
    3286:	50 e0       	ldi	r21, 0x00	; 0
    3288:	70 e0       	ldi	r23, 0x00	; 0
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	ee cf       	rjmp	.-36     	; 0x326a <Print::print(unsigned long, int)>

0000328e <initVariant>:
initVariant():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    328e:	08 95       	ret

00003290 <main>:
main():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:35
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3290:	86 dd       	rcall	.-1268   	; 0x2d9e <init>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:37

	initVariant();
    3292:	fd df       	rcall	.-6      	; 0x328e <initVariant>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:43

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3294:	0e 94 a0 02 	call	0x540	; 0x540 <setup>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3298:	c1 e9       	ldi	r28, 0x91	; 145
    329a:	d9 e1       	ldi	r29, 0x19	; 25
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:46
		loop();
    329c:	0e 94 9c 01 	call	0x338	; 0x338 <loop>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
		if (serialEventRun) serialEventRun();
    32a0:	20 97       	sbiw	r28, 0x00	; 0
    32a2:	e1 f3       	breq	.-8      	; 0x329c <main+0xc>
    32a4:	3e d0       	rcall	.+124    	; 0x3322 <serialEventRun()>
    32a6:	fa cf       	rjmp	.-12     	; 0x329c <main+0xc>

000032a8 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:153
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    32a8:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:154
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    32aa:	91 8d       	ldd	r25, Z+25	; 0x19
    32ac:	22 8d       	ldd	r18, Z+26	; 0x1a
    32ae:	89 2f       	mov	r24, r25
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	80 5c       	subi	r24, 0xC0	; 192
    32b4:	9f 4f       	sbci	r25, 0xFF	; 255
    32b6:	82 1b       	sub	r24, r18
    32b8:	91 09       	sbc	r25, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:155
}
    32ba:	8f 73       	andi	r24, 0x3F	; 63
    32bc:	99 27       	eor	r25, r25
    32be:	08 95       	ret

000032c0 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:158

int HardwareSerial::peek(void)
{
    32c0:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:159
  if (_rx_buffer_head == _rx_buffer_tail) {
    32c2:	91 8d       	ldd	r25, Z+25	; 0x19
    32c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    32c6:	98 17       	cp	r25, r24
    32c8:	31 f0       	breq	.+12     	; 0x32d6 <HardwareSerial::peek()+0x16>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:162
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    32ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    32cc:	e8 0f       	add	r30, r24
    32ce:	f1 1d       	adc	r31, r1
    32d0:	85 8d       	ldd	r24, Z+29	; 0x1d
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:160
    return -1;
    32d6:	8f ef       	ldi	r24, 0xFF	; 255
    32d8:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:164
  }
}
    32da:	08 95       	ret

000032dc <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
    32dc:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:169
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    32de:	91 8d       	ldd	r25, Z+25	; 0x19
    32e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    32e2:	98 17       	cp	r25, r24
    32e4:	61 f0       	breq	.+24     	; 0x32fe <HardwareSerial::read()+0x22>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:172
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    32e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    32e8:	ae 0f       	add	r26, r30
    32ea:	bf 2f       	mov	r27, r31
    32ec:	b1 1d       	adc	r27, r1
    32ee:	5d 96       	adiw	r26, 0x1d	; 29
    32f0:	8c 91       	ld	r24, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:173
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    32f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    32f4:	9f 5f       	subi	r25, 0xFF	; 255
    32f6:	9f 73       	andi	r25, 0x3F	; 63
    32f8:	92 8f       	std	Z+26, r25	; 0x1a
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:174
    return c;
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:170
    return -1;
    32fe:	8f ef       	ldi	r24, 0xFF	; 255
    3300:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:176
  }
}
    3302:	08 95       	ret

00003304 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:184
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    3304:	fc 01       	movw	r30, r24
    3306:	53 8d       	ldd	r21, Z+27	; 0x1b
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:185
  tx_buffer_index_t tail = _tx_buffer_tail;
    3308:	44 8d       	ldd	r20, Z+28	; 0x1c
    330a:	25 2f       	mov	r18, r21
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	84 2f       	mov	r24, r20
    3310:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:189
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3312:	82 1b       	sub	r24, r18
    3314:	93 0b       	sbc	r25, r19
    3316:	54 17       	cp	r21, r20
    3318:	10 f0       	brcs	.+4      	; 0x331e <HardwareSerial::availableForWrite()+0x1a>
    331a:	cf 96       	adiw	r24, 0x3f	; 63
    331c:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:190
  return tail - head - 1;
    331e:	01 97       	sbiw	r24, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:191
}
    3320:	08 95       	ret

00003322 <serialEventRun()>:
_Z14serialEventRunv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:66
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3322:	86 ef       	ldi	r24, 0xF6	; 246
    3324:	97 e1       	ldi	r25, 0x17	; 23
    3326:	89 2b       	or	r24, r25
    3328:	41 f0       	breq	.+16     	; 0x333a <serialEventRun()+0x18>
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	89 2b       	or	r24, r25
    3330:	21 f0       	breq	.+8      	; 0x333a <serialEventRun()+0x18>
    3332:	5c de       	rcall	.-840    	; 0x2fec <Serial0_available()>
    3334:	81 11       	cpse	r24, r1
    3336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:77
}
    333a:	08 95       	ret

0000333c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:82
{
    333c:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:85
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    333e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3340:	a8 0f       	add	r26, r24
    3342:	b9 2f       	mov	r27, r25
    3344:	b1 1d       	adc	r27, r1
    3346:	a3 5a       	subi	r26, 0xA3	; 163
    3348:	bf 4f       	sbci	r27, 0xFF	; 255
    334a:	2c 91       	ld	r18, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    334c:	84 8d       	ldd	r24, Z+28	; 0x1c
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	01 96       	adiw	r24, 0x01	; 1
    3352:	8f 73       	andi	r24, 0x3F	; 63
    3354:	99 27       	eor	r25, r25
    3356:	84 8f       	std	Z+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:88
  *_udr = c;
    3358:	a6 89       	ldd	r26, Z+22	; 0x16
    335a:	b7 89       	ldd	r27, Z+23	; 0x17
    335c:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:93
  sbi(*_ucsra, TXC0);
    335e:	a0 89       	ldd	r26, Z+16	; 0x10
    3360:	b1 89       	ldd	r27, Z+17	; 0x11
    3362:	8c 91       	ld	r24, X
    3364:	80 64       	ori	r24, 0x40	; 64
    3366:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:95
  if (_tx_buffer_head == _tx_buffer_tail) {
    3368:	93 8d       	ldd	r25, Z+27	; 0x1b
    336a:	84 8d       	ldd	r24, Z+28	; 0x1c
    336c:	98 13       	cpse	r25, r24
    336e:	06 c0       	rjmp	.+12     	; 0x337c <HardwareSerial::_tx_udr_empty_irq()+0x40>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:97
    cbi(*_ucsrb, UDRIE0);
    3370:	02 88       	ldd	r0, Z+18	; 0x12
    3372:	f3 89       	ldd	r31, Z+19	; 0x13
    3374:	e0 2d       	mov	r30, r0
    3376:	80 81       	ld	r24, Z
    3378:	8f 7d       	andi	r24, 0xDF	; 223
    337a:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:99
}
    337c:	08 95       	ret

0000337e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:194

void HardwareSerial::flush()
{
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:198
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    3384:	88 8d       	ldd	r24, Y+24	; 0x18
    3386:	88 23       	and	r24, r24
    3388:	b1 f0       	breq	.+44     	; 0x33b6 <HardwareSerial::flush()+0x38>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:201
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    338a:	aa 89       	ldd	r26, Y+18	; 0x12
    338c:	bb 89       	ldd	r27, Y+19	; 0x13
    338e:	e8 89       	ldd	r30, Y+16	; 0x10
    3390:	f9 89       	ldd	r31, Y+17	; 0x11
    3392:	8c 91       	ld	r24, X
    3394:	85 fd       	sbrc	r24, 5
    3396:	03 c0       	rjmp	.+6      	; 0x339e <HardwareSerial::flush()+0x20>
    3398:	80 81       	ld	r24, Z
    339a:	86 fd       	sbrc	r24, 6
    339c:	0c c0       	rjmp	.+24     	; 0x33b6 <HardwareSerial::flush()+0x38>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:202
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	07 fc       	sbrc	r0, 7
    33a2:	f7 cf       	rjmp	.-18     	; 0x3392 <HardwareSerial::flush()+0x14>
    33a4:	8c 91       	ld	r24, X
    33a6:	85 ff       	sbrs	r24, 5
    33a8:	f2 cf       	rjmp	.-28     	; 0x338e <HardwareSerial::flush()+0x10>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:206
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    33aa:	80 81       	ld	r24, Z
    33ac:	85 ff       	sbrs	r24, 5
    33ae:	ed cf       	rjmp	.-38     	; 0x338a <HardwareSerial::flush()+0xc>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:207
	  _tx_udr_empty_irq();
    33b0:	ce 01       	movw	r24, r28
    33b2:	c4 df       	rcall	.-120    	; 0x333c <HardwareSerial::_tx_udr_empty_irq()>
    33b4:	ea cf       	rjmp	.-44     	; 0x338a <HardwareSerial::flush()+0xc>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:211
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	08 95       	ret

000033bc <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:214

size_t HardwareSerial::write(uint8_t c)
{
    33bc:	ef 92       	push	r14
    33be:	ff 92       	push	r15
    33c0:	0f 93       	push	r16
    33c2:	1f 93       	push	r17
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
    33c8:	ec 01       	movw	r28, r24
    33ca:	f6 2e       	mov	r15, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:215
  _written = true;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:220
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    33d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33d4:	98 13       	cpse	r25, r24
    33d6:	16 c0       	rjmp	.+44     	; 0x3404 <HardwareSerial::write(unsigned char)+0x48>
    33d8:	e8 89       	ldd	r30, Y+16	; 0x10
    33da:	f9 89       	ldd	r31, Y+17	; 0x11
    33dc:	80 81       	ld	r24, Z
    33de:	85 ff       	sbrs	r24, 5
    33e0:	11 c0       	rjmp	.+34     	; 0x3404 <HardwareSerial::write(unsigned char)+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:221
    *_udr = c;
    33e2:	ee 89       	ldd	r30, Y+22	; 0x16
    33e4:	ff 89       	ldd	r31, Y+23	; 0x17
    33e6:	60 83       	st	Z, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
    33e8:	e8 89       	ldd	r30, Y+16	; 0x10
    33ea:	f9 89       	ldd	r31, Y+17	; 0x11
    33ec:	80 81       	ld	r24, Z
    33ee:	80 64       	ori	r24, 0x40	; 64
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:245
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
    33f0:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:248
  
  return 1;
}
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	1f 91       	pop	r17
    33fc:	0f 91       	pop	r16
    33fe:	ff 90       	pop	r15
    3400:	ef 90       	pop	r14
    3402:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:225
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3404:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3406:	10 e0       	ldi	r17, 0x00	; 0
    3408:	0f 5f       	subi	r16, 0xFF	; 255
    340a:	1f 4f       	sbci	r17, 0xFF	; 255
    340c:	0f 73       	andi	r16, 0x3F	; 63
    340e:	11 27       	eor	r17, r17
    3410:	e0 2e       	mov	r14, r16
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:229
  while (i == _tx_buffer_tail) {
    3412:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3414:	8e 11       	cpse	r24, r14
    3416:	0b c0       	rjmp	.+22     	; 0x342e <HardwareSerial::write(unsigned char)+0x72>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:230
    if (bit_is_clear(SREG, SREG_I)) {
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	07 fc       	sbrc	r0, 7
    341c:	fa cf       	rjmp	.-12     	; 0x3412 <HardwareSerial::write(unsigned char)+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:235
      if(bit_is_set(*_ucsra, UDRE0))
    341e:	e8 89       	ldd	r30, Y+16	; 0x10
    3420:	f9 89       	ldd	r31, Y+17	; 0x11
    3422:	80 81       	ld	r24, Z
    3424:	85 ff       	sbrs	r24, 5
    3426:	f5 cf       	rjmp	.-22     	; 0x3412 <HardwareSerial::write(unsigned char)+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:236
	_tx_udr_empty_irq();
    3428:	ce 01       	movw	r24, r28
    342a:	88 df       	rcall	.-240    	; 0x333c <HardwareSerial::_tx_udr_empty_irq()>
    342c:	f2 cf       	rjmp	.-28     	; 0x3412 <HardwareSerial::write(unsigned char)+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:242
  _tx_buffer[_tx_buffer_head] = c;
    342e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3430:	ec 0f       	add	r30, r28
    3432:	fd 2f       	mov	r31, r29
    3434:	f1 1d       	adc	r31, r1
    3436:	e3 5a       	subi	r30, 0xA3	; 163
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	f0 82       	st	Z, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:243
  _tx_buffer_head = i;
    343c:	0b 8f       	std	Y+27, r16	; 0x1b
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:245
  sbi(*_ucsrb, UDRIE0);
    343e:	ea 89       	ldd	r30, Y+18	; 0x12
    3440:	fb 89       	ldd	r31, Y+19	; 0x13
    3442:	80 81       	ld	r24, Z
    3444:	80 62       	ori	r24, 0x20	; 32
    3446:	d4 cf       	rjmp	.-88     	; 0x33f0 <HardwareSerial::write(unsigned char)+0x34>

00003448 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:104
{
    3448:	cf 92       	push	r12
    344a:	df 92       	push	r13
    344c:	ef 92       	push	r14
    344e:	ff 92       	push	r15
    3450:	1f 93       	push	r17
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	ec 01       	movw	r28, r24
    3458:	6a 01       	movw	r12, r20
    345a:	7b 01       	movw	r14, r22
    345c:	12 2f       	mov	r17, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:107
  *_ucsra = 1 << U2X0;
    345e:	e8 89       	ldd	r30, Y+16	; 0x10
    3460:	f9 89       	ldd	r31, Y+17	; 0x11
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3466:	c1 14       	cp	r12, r1
    3468:	81 ee       	ldi	r24, 0xE1	; 225
    346a:	d8 06       	cpc	r13, r24
    346c:	e1 04       	cpc	r14, r1
    346e:	f1 04       	cpc	r15, r1
    3470:	99 f0       	breq	.+38     	; 0x3498 <HardwareSerial::begin(unsigned long, unsigned char)+0x50>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:106
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3472:	60 e0       	ldi	r22, 0x00	; 0
    3474:	79 e0       	ldi	r23, 0x09	; 9
    3476:	8d e3       	ldi	r24, 0x3D	; 61
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	a7 01       	movw	r20, r14
    347c:	96 01       	movw	r18, r12
    347e:	57 d0       	rcall	.+174    	; 0x352e <__udivmodsi4>
    3480:	21 50       	subi	r18, 0x01	; 1
    3482:	31 09       	sbc	r19, r1
    3484:	41 09       	sbc	r20, r1
    3486:	51 09       	sbc	r21, r1
    3488:	56 95       	lsr	r21
    348a:	47 95       	ror	r20
    348c:	37 95       	ror	r19
    348e:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3490:	21 15       	cp	r18, r1
    3492:	80 e1       	ldi	r24, 0x10	; 16
    3494:	38 07       	cpc	r19, r24
    3496:	90 f0       	brcs	.+36     	; 0x34bc <HardwareSerial::begin(unsigned long, unsigned char)+0x74>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:116
    *_ucsra = 0;
    3498:	e8 89       	ldd	r30, Y+16	; 0x10
    349a:	f9 89       	ldd	r31, Y+17	; 0x11
    349c:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    349e:	60 e8       	ldi	r22, 0x80	; 128
    34a0:	74 e8       	ldi	r23, 0x84	; 132
    34a2:	8e e1       	ldi	r24, 0x1E	; 30
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	a7 01       	movw	r20, r14
    34a8:	96 01       	movw	r18, r12
    34aa:	41 d0       	rcall	.+130    	; 0x352e <__udivmodsi4>
    34ac:	21 50       	subi	r18, 0x01	; 1
    34ae:	31 09       	sbc	r19, r1
    34b0:	41 09       	sbc	r20, r1
    34b2:	51 09       	sbc	r21, r1
    34b4:	56 95       	lsr	r21
    34b6:	47 95       	ror	r20
    34b8:	37 95       	ror	r19
    34ba:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:121
  *_ubrrh = baud_setting >> 8;
    34bc:	ec 85       	ldd	r30, Y+12	; 0x0c
    34be:	fd 85       	ldd	r31, Y+13	; 0x0d
    34c0:	30 83       	st	Z, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    34c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    34c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    34c6:	20 83       	st	Z, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:124
  _written = false;
    34c8:	18 8e       	std	Y+24, r1	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:130
  *_ucsrc = config;
    34ca:	ec 89       	ldd	r30, Y+20	; 0x14
    34cc:	fd 89       	ldd	r31, Y+21	; 0x15
    34ce:	10 83       	st	Z, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:132
  sbi(*_ucsrb, RXEN0);
    34d0:	ea 89       	ldd	r30, Y+18	; 0x12
    34d2:	fb 89       	ldd	r31, Y+19	; 0x13
    34d4:	80 81       	ld	r24, Z
    34d6:	80 61       	ori	r24, 0x10	; 16
    34d8:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:133
  sbi(*_ucsrb, TXEN0);
    34da:	ea 89       	ldd	r30, Y+18	; 0x12
    34dc:	fb 89       	ldd	r31, Y+19	; 0x13
    34de:	80 81       	ld	r24, Z
    34e0:	88 60       	ori	r24, 0x08	; 8
    34e2:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:134
  sbi(*_ucsrb, RXCIE0);
    34e4:	ea 89       	ldd	r30, Y+18	; 0x12
    34e6:	fb 89       	ldd	r31, Y+19	; 0x13
    34e8:	80 81       	ld	r24, Z
    34ea:	80 68       	ori	r24, 0x80	; 128
    34ec:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:135
  cbi(*_ucsrb, UDRIE0);
    34ee:	ea 89       	ldd	r30, Y+18	; 0x12
    34f0:	fb 89       	ldd	r31, Y+19	; 0x13
    34f2:	80 81       	ld	r24, Z
    34f4:	8f 7d       	andi	r24, 0xDF	; 223
    34f6:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:136
}
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	1f 91       	pop	r17
    34fe:	ff 90       	pop	r15
    3500:	ef 90       	pop	r14
    3502:	df 90       	pop	r13
    3504:	cf 90       	pop	r12
    3506:	08 95       	ret

00003508 <__divmodhi4>:
    3508:	97 fb       	bst	r25, 7
    350a:	07 2e       	mov	r0, r23
    350c:	16 f4       	brtc	.+4      	; 0x3512 <__divmodhi4+0xa>
    350e:	00 94       	com	r0
    3510:	06 d0       	rcall	.+12     	; 0x351e <__divmodhi4_neg1>
    3512:	77 fd       	sbrc	r23, 7
    3514:	08 d0       	rcall	.+16     	; 0x3526 <__divmodhi4_neg2>
    3516:	50 d0       	rcall	.+160    	; 0x35b8 <__udivmodhi4>
    3518:	07 fc       	sbrc	r0, 7
    351a:	05 d0       	rcall	.+10     	; 0x3526 <__divmodhi4_neg2>
    351c:	3e f4       	brtc	.+14     	; 0x352c <__divmodhi4_exit>

0000351e <__divmodhi4_neg1>:
    351e:	90 95       	com	r25
    3520:	81 95       	neg	r24
    3522:	9f 4f       	sbci	r25, 0xFF	; 255
    3524:	08 95       	ret

00003526 <__divmodhi4_neg2>:
    3526:	70 95       	com	r23
    3528:	61 95       	neg	r22
    352a:	7f 4f       	sbci	r23, 0xFF	; 255

0000352c <__divmodhi4_exit>:
    352c:	08 95       	ret

0000352e <__udivmodsi4>:
    352e:	a1 e2       	ldi	r26, 0x21	; 33
    3530:	1a 2e       	mov	r1, r26
    3532:	aa 1b       	sub	r26, r26
    3534:	bb 1b       	sub	r27, r27
    3536:	fd 01       	movw	r30, r26
    3538:	0d c0       	rjmp	.+26     	; 0x3554 <__udivmodsi4_ep>

0000353a <__udivmodsi4_loop>:
    353a:	aa 1f       	adc	r26, r26
    353c:	bb 1f       	adc	r27, r27
    353e:	ee 1f       	adc	r30, r30
    3540:	ff 1f       	adc	r31, r31
    3542:	a2 17       	cp	r26, r18
    3544:	b3 07       	cpc	r27, r19
    3546:	e4 07       	cpc	r30, r20
    3548:	f5 07       	cpc	r31, r21
    354a:	20 f0       	brcs	.+8      	; 0x3554 <__udivmodsi4_ep>
    354c:	a2 1b       	sub	r26, r18
    354e:	b3 0b       	sbc	r27, r19
    3550:	e4 0b       	sbc	r30, r20
    3552:	f5 0b       	sbc	r31, r21

00003554 <__udivmodsi4_ep>:
    3554:	66 1f       	adc	r22, r22
    3556:	77 1f       	adc	r23, r23
    3558:	88 1f       	adc	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	1a 94       	dec	r1
    355e:	69 f7       	brne	.-38     	; 0x353a <__udivmodsi4_loop>
    3560:	60 95       	com	r22
    3562:	70 95       	com	r23
    3564:	80 95       	com	r24
    3566:	90 95       	com	r25
    3568:	9b 01       	movw	r18, r22
    356a:	ac 01       	movw	r20, r24
    356c:	bd 01       	movw	r22, r26
    356e:	cf 01       	movw	r24, r30
    3570:	08 95       	ret

00003572 <__divmodsi4>:
    3572:	05 2e       	mov	r0, r21
    3574:	97 fb       	bst	r25, 7
    3576:	16 f4       	brtc	.+4      	; 0x357c <__divmodsi4+0xa>
    3578:	00 94       	com	r0
    357a:	0f d0       	rcall	.+30     	; 0x359a <__negsi2>
    357c:	57 fd       	sbrc	r21, 7
    357e:	05 d0       	rcall	.+10     	; 0x358a <__divmodsi4_neg2>
    3580:	d6 df       	rcall	.-84     	; 0x352e <__udivmodsi4>
    3582:	07 fc       	sbrc	r0, 7
    3584:	02 d0       	rcall	.+4      	; 0x358a <__divmodsi4_neg2>
    3586:	46 f4       	brtc	.+16     	; 0x3598 <__divmodsi4_exit>
    3588:	08 c0       	rjmp	.+16     	; 0x359a <__negsi2>

0000358a <__divmodsi4_neg2>:
    358a:	50 95       	com	r21
    358c:	40 95       	com	r20
    358e:	30 95       	com	r19
    3590:	21 95       	neg	r18
    3592:	3f 4f       	sbci	r19, 0xFF	; 255
    3594:	4f 4f       	sbci	r20, 0xFF	; 255
    3596:	5f 4f       	sbci	r21, 0xFF	; 255

00003598 <__divmodsi4_exit>:
    3598:	08 95       	ret

0000359a <__negsi2>:
    359a:	90 95       	com	r25
    359c:	80 95       	com	r24
    359e:	70 95       	com	r23
    35a0:	61 95       	neg	r22
    35a2:	7f 4f       	sbci	r23, 0xFF	; 255
    35a4:	8f 4f       	sbci	r24, 0xFF	; 255
    35a6:	9f 4f       	sbci	r25, 0xFF	; 255
    35a8:	08 95       	ret

000035aa <__bswapsi2>:
    35aa:	69 27       	eor	r22, r25
    35ac:	96 27       	eor	r25, r22
    35ae:	69 27       	eor	r22, r25
    35b0:	78 27       	eor	r23, r24
    35b2:	87 27       	eor	r24, r23
    35b4:	78 27       	eor	r23, r24
    35b6:	08 95       	ret

000035b8 <__udivmodhi4>:
    35b8:	aa 1b       	sub	r26, r26
    35ba:	bb 1b       	sub	r27, r27
    35bc:	51 e1       	ldi	r21, 0x11	; 17
    35be:	07 c0       	rjmp	.+14     	; 0x35ce <__udivmodhi4_ep>

000035c0 <__udivmodhi4_loop>:
    35c0:	aa 1f       	adc	r26, r26
    35c2:	bb 1f       	adc	r27, r27
    35c4:	a6 17       	cp	r26, r22
    35c6:	b7 07       	cpc	r27, r23
    35c8:	10 f0       	brcs	.+4      	; 0x35ce <__udivmodhi4_ep>
    35ca:	a6 1b       	sub	r26, r22
    35cc:	b7 0b       	sbc	r27, r23

000035ce <__udivmodhi4_ep>:
    35ce:	88 1f       	adc	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	5a 95       	dec	r21
    35d4:	a9 f7       	brne	.-22     	; 0x35c0 <__udivmodhi4_loop>
    35d6:	80 95       	com	r24
    35d8:	90 95       	com	r25
    35da:	bc 01       	movw	r22, r24
    35dc:	cd 01       	movw	r24, r26
    35de:	08 95       	ret

000035e0 <__tablejump2__>:
    35e0:	ee 0f       	add	r30, r30
    35e2:	ff 1f       	adc	r31, r31
    35e4:	05 90       	lpm	r0, Z+
    35e6:	f4 91       	lpm	r31, Z
    35e8:	e0 2d       	mov	r30, r0
    35ea:	09 94       	ijmp

000035ec <malloc>:
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	82 30       	cpi	r24, 0x02	; 2
    35f6:	91 05       	cpc	r25, r1
    35f8:	10 f4       	brcc	.+4      	; 0x35fe <malloc+0x12>
    35fa:	82 e0       	ldi	r24, 0x02	; 2
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <__flp>
    3602:	f0 91 43 05 	lds	r31, 0x0543	; 0x800543 <__flp+0x1>
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	a0 e0       	ldi	r26, 0x00	; 0
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	30 97       	sbiw	r30, 0x00	; 0
    3610:	19 f1       	breq	.+70     	; 0x3658 <malloc+0x6c>
    3612:	40 81       	ld	r20, Z
    3614:	51 81       	ldd	r21, Z+1	; 0x01
    3616:	02 81       	ldd	r16, Z+2	; 0x02
    3618:	13 81       	ldd	r17, Z+3	; 0x03
    361a:	48 17       	cp	r20, r24
    361c:	59 07       	cpc	r21, r25
    361e:	c8 f0       	brcs	.+50     	; 0x3652 <malloc+0x66>
    3620:	84 17       	cp	r24, r20
    3622:	95 07       	cpc	r25, r21
    3624:	69 f4       	brne	.+26     	; 0x3640 <malloc+0x54>
    3626:	10 97       	sbiw	r26, 0x00	; 0
    3628:	31 f0       	breq	.+12     	; 0x3636 <malloc+0x4a>
    362a:	12 96       	adiw	r26, 0x02	; 2
    362c:	0c 93       	st	X, r16
    362e:	12 97       	sbiw	r26, 0x02	; 2
    3630:	13 96       	adiw	r26, 0x03	; 3
    3632:	1c 93       	st	X, r17
    3634:	27 c0       	rjmp	.+78     	; 0x3684 <malloc+0x98>
    3636:	00 93 42 05 	sts	0x0542, r16	; 0x800542 <__flp>
    363a:	10 93 43 05 	sts	0x0543, r17	; 0x800543 <__flp+0x1>
    363e:	22 c0       	rjmp	.+68     	; 0x3684 <malloc+0x98>
    3640:	21 15       	cp	r18, r1
    3642:	31 05       	cpc	r19, r1
    3644:	19 f0       	breq	.+6      	; 0x364c <malloc+0x60>
    3646:	42 17       	cp	r20, r18
    3648:	53 07       	cpc	r21, r19
    364a:	18 f4       	brcc	.+6      	; 0x3652 <malloc+0x66>
    364c:	9a 01       	movw	r18, r20
    364e:	bd 01       	movw	r22, r26
    3650:	ef 01       	movw	r28, r30
    3652:	df 01       	movw	r26, r30
    3654:	f8 01       	movw	r30, r16
    3656:	db cf       	rjmp	.-74     	; 0x360e <malloc+0x22>
    3658:	21 15       	cp	r18, r1
    365a:	31 05       	cpc	r19, r1
    365c:	f9 f0       	breq	.+62     	; 0x369c <malloc+0xb0>
    365e:	28 1b       	sub	r18, r24
    3660:	39 0b       	sbc	r19, r25
    3662:	24 30       	cpi	r18, 0x04	; 4
    3664:	31 05       	cpc	r19, r1
    3666:	80 f4       	brcc	.+32     	; 0x3688 <malloc+0x9c>
    3668:	8a 81       	ldd	r24, Y+2	; 0x02
    366a:	9b 81       	ldd	r25, Y+3	; 0x03
    366c:	61 15       	cp	r22, r1
    366e:	71 05       	cpc	r23, r1
    3670:	21 f0       	breq	.+8      	; 0x367a <malloc+0x8e>
    3672:	fb 01       	movw	r30, r22
    3674:	93 83       	std	Z+3, r25	; 0x03
    3676:	82 83       	std	Z+2, r24	; 0x02
    3678:	04 c0       	rjmp	.+8      	; 0x3682 <malloc+0x96>
    367a:	90 93 43 05 	sts	0x0543, r25	; 0x800543 <__flp+0x1>
    367e:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <__flp>
    3682:	fe 01       	movw	r30, r28
    3684:	32 96       	adiw	r30, 0x02	; 2
    3686:	44 c0       	rjmp	.+136    	; 0x3710 <malloc+0x124>
    3688:	fe 01       	movw	r30, r28
    368a:	e2 0f       	add	r30, r18
    368c:	f3 1f       	adc	r31, r19
    368e:	81 93       	st	Z+, r24
    3690:	91 93       	st	Z+, r25
    3692:	22 50       	subi	r18, 0x02	; 2
    3694:	31 09       	sbc	r19, r1
    3696:	39 83       	std	Y+1, r19	; 0x01
    3698:	28 83       	st	Y, r18
    369a:	3a c0       	rjmp	.+116    	; 0x3710 <malloc+0x124>
    369c:	20 91 40 05 	lds	r18, 0x0540	; 0x800540 <__brkval>
    36a0:	30 91 41 05 	lds	r19, 0x0541	; 0x800541 <__brkval+0x1>
    36a4:	23 2b       	or	r18, r19
    36a6:	41 f4       	brne	.+16     	; 0x36b8 <malloc+0xcc>
    36a8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    36ac:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    36b0:	30 93 41 05 	sts	0x0541, r19	; 0x800541 <__brkval+0x1>
    36b4:	20 93 40 05 	sts	0x0540, r18	; 0x800540 <__brkval>
    36b8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__malloc_heap_end>
    36bc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__malloc_heap_end+0x1>
    36c0:	21 15       	cp	r18, r1
    36c2:	31 05       	cpc	r19, r1
    36c4:	41 f4       	brne	.+16     	; 0x36d6 <malloc+0xea>
    36c6:	2d b7       	in	r18, 0x3d	; 61
    36c8:	3e b7       	in	r19, 0x3e	; 62
    36ca:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    36ce:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    36d2:	24 1b       	sub	r18, r20
    36d4:	35 0b       	sbc	r19, r21
    36d6:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <__brkval>
    36da:	f0 91 41 05 	lds	r31, 0x0541	; 0x800541 <__brkval+0x1>
    36de:	e2 17       	cp	r30, r18
    36e0:	f3 07       	cpc	r31, r19
    36e2:	a0 f4       	brcc	.+40     	; 0x370c <malloc+0x120>
    36e4:	2e 1b       	sub	r18, r30
    36e6:	3f 0b       	sbc	r19, r31
    36e8:	28 17       	cp	r18, r24
    36ea:	39 07       	cpc	r19, r25
    36ec:	78 f0       	brcs	.+30     	; 0x370c <malloc+0x120>
    36ee:	ac 01       	movw	r20, r24
    36f0:	4e 5f       	subi	r20, 0xFE	; 254
    36f2:	5f 4f       	sbci	r21, 0xFF	; 255
    36f4:	24 17       	cp	r18, r20
    36f6:	35 07       	cpc	r19, r21
    36f8:	48 f0       	brcs	.+18     	; 0x370c <malloc+0x120>
    36fa:	4e 0f       	add	r20, r30
    36fc:	5f 1f       	adc	r21, r31
    36fe:	50 93 41 05 	sts	0x0541, r21	; 0x800541 <__brkval+0x1>
    3702:	40 93 40 05 	sts	0x0540, r20	; 0x800540 <__brkval>
    3706:	81 93       	st	Z+, r24
    3708:	91 93       	st	Z+, r25
    370a:	02 c0       	rjmp	.+4      	; 0x3710 <malloc+0x124>
    370c:	e0 e0       	ldi	r30, 0x00	; 0
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	cf 01       	movw	r24, r30
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	1f 91       	pop	r17
    3718:	0f 91       	pop	r16
    371a:	08 95       	ret

0000371c <free>:
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	09 f4       	brne	.+2      	; 0x3726 <free+0xa>
    3724:	81 c0       	rjmp	.+258    	; 0x3828 <free+0x10c>
    3726:	fc 01       	movw	r30, r24
    3728:	32 97       	sbiw	r30, 0x02	; 2
    372a:	13 82       	std	Z+3, r1	; 0x03
    372c:	12 82       	std	Z+2, r1	; 0x02
    372e:	a0 91 42 05 	lds	r26, 0x0542	; 0x800542 <__flp>
    3732:	b0 91 43 05 	lds	r27, 0x0543	; 0x800543 <__flp+0x1>
    3736:	10 97       	sbiw	r26, 0x00	; 0
    3738:	81 f4       	brne	.+32     	; 0x375a <free+0x3e>
    373a:	20 81       	ld	r18, Z
    373c:	31 81       	ldd	r19, Z+1	; 0x01
    373e:	82 0f       	add	r24, r18
    3740:	93 1f       	adc	r25, r19
    3742:	20 91 40 05 	lds	r18, 0x0540	; 0x800540 <__brkval>
    3746:	30 91 41 05 	lds	r19, 0x0541	; 0x800541 <__brkval+0x1>
    374a:	28 17       	cp	r18, r24
    374c:	39 07       	cpc	r19, r25
    374e:	51 f5       	brne	.+84     	; 0x37a4 <free+0x88>
    3750:	f0 93 41 05 	sts	0x0541, r31	; 0x800541 <__brkval+0x1>
    3754:	e0 93 40 05 	sts	0x0540, r30	; 0x800540 <__brkval>
    3758:	67 c0       	rjmp	.+206    	; 0x3828 <free+0x10c>
    375a:	ed 01       	movw	r28, r26
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	ce 17       	cp	r28, r30
    3762:	df 07       	cpc	r29, r31
    3764:	40 f4       	brcc	.+16     	; 0x3776 <free+0x5a>
    3766:	4a 81       	ldd	r20, Y+2	; 0x02
    3768:	5b 81       	ldd	r21, Y+3	; 0x03
    376a:	9e 01       	movw	r18, r28
    376c:	41 15       	cp	r20, r1
    376e:	51 05       	cpc	r21, r1
    3770:	f1 f0       	breq	.+60     	; 0x37ae <free+0x92>
    3772:	ea 01       	movw	r28, r20
    3774:	f5 cf       	rjmp	.-22     	; 0x3760 <free+0x44>
    3776:	d3 83       	std	Z+3, r29	; 0x03
    3778:	c2 83       	std	Z+2, r28	; 0x02
    377a:	40 81       	ld	r20, Z
    377c:	51 81       	ldd	r21, Z+1	; 0x01
    377e:	84 0f       	add	r24, r20
    3780:	95 1f       	adc	r25, r21
    3782:	c8 17       	cp	r28, r24
    3784:	d9 07       	cpc	r29, r25
    3786:	59 f4       	brne	.+22     	; 0x379e <free+0x82>
    3788:	88 81       	ld	r24, Y
    378a:	99 81       	ldd	r25, Y+1	; 0x01
    378c:	84 0f       	add	r24, r20
    378e:	95 1f       	adc	r25, r21
    3790:	02 96       	adiw	r24, 0x02	; 2
    3792:	91 83       	std	Z+1, r25	; 0x01
    3794:	80 83       	st	Z, r24
    3796:	8a 81       	ldd	r24, Y+2	; 0x02
    3798:	9b 81       	ldd	r25, Y+3	; 0x03
    379a:	93 83       	std	Z+3, r25	; 0x03
    379c:	82 83       	std	Z+2, r24	; 0x02
    379e:	21 15       	cp	r18, r1
    37a0:	31 05       	cpc	r19, r1
    37a2:	29 f4       	brne	.+10     	; 0x37ae <free+0x92>
    37a4:	f0 93 43 05 	sts	0x0543, r31	; 0x800543 <__flp+0x1>
    37a8:	e0 93 42 05 	sts	0x0542, r30	; 0x800542 <__flp>
    37ac:	3d c0       	rjmp	.+122    	; 0x3828 <free+0x10c>
    37ae:	e9 01       	movw	r28, r18
    37b0:	fb 83       	std	Y+3, r31	; 0x03
    37b2:	ea 83       	std	Y+2, r30	; 0x02
    37b4:	49 91       	ld	r20, Y+
    37b6:	59 91       	ld	r21, Y+
    37b8:	c4 0f       	add	r28, r20
    37ba:	d5 1f       	adc	r29, r21
    37bc:	ec 17       	cp	r30, r28
    37be:	fd 07       	cpc	r31, r29
    37c0:	61 f4       	brne	.+24     	; 0x37da <free+0xbe>
    37c2:	80 81       	ld	r24, Z
    37c4:	91 81       	ldd	r25, Z+1	; 0x01
    37c6:	84 0f       	add	r24, r20
    37c8:	95 1f       	adc	r25, r21
    37ca:	02 96       	adiw	r24, 0x02	; 2
    37cc:	e9 01       	movw	r28, r18
    37ce:	99 83       	std	Y+1, r25	; 0x01
    37d0:	88 83       	st	Y, r24
    37d2:	82 81       	ldd	r24, Z+2	; 0x02
    37d4:	93 81       	ldd	r25, Z+3	; 0x03
    37d6:	9b 83       	std	Y+3, r25	; 0x03
    37d8:	8a 83       	std	Y+2, r24	; 0x02
    37da:	e0 e0       	ldi	r30, 0x00	; 0
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	12 96       	adiw	r26, 0x02	; 2
    37e0:	8d 91       	ld	r24, X+
    37e2:	9c 91       	ld	r25, X
    37e4:	13 97       	sbiw	r26, 0x03	; 3
    37e6:	00 97       	sbiw	r24, 0x00	; 0
    37e8:	19 f0       	breq	.+6      	; 0x37f0 <free+0xd4>
    37ea:	fd 01       	movw	r30, r26
    37ec:	dc 01       	movw	r26, r24
    37ee:	f7 cf       	rjmp	.-18     	; 0x37de <free+0xc2>
    37f0:	8d 91       	ld	r24, X+
    37f2:	9c 91       	ld	r25, X
    37f4:	11 97       	sbiw	r26, 0x01	; 1
    37f6:	9d 01       	movw	r18, r26
    37f8:	2e 5f       	subi	r18, 0xFE	; 254
    37fa:	3f 4f       	sbci	r19, 0xFF	; 255
    37fc:	82 0f       	add	r24, r18
    37fe:	93 1f       	adc	r25, r19
    3800:	20 91 40 05 	lds	r18, 0x0540	; 0x800540 <__brkval>
    3804:	30 91 41 05 	lds	r19, 0x0541	; 0x800541 <__brkval+0x1>
    3808:	28 17       	cp	r18, r24
    380a:	39 07       	cpc	r19, r25
    380c:	69 f4       	brne	.+26     	; 0x3828 <free+0x10c>
    380e:	30 97       	sbiw	r30, 0x00	; 0
    3810:	29 f4       	brne	.+10     	; 0x381c <free+0x100>
    3812:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <__flp+0x1>
    3816:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <__flp>
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <free+0x104>
    381c:	13 82       	std	Z+3, r1	; 0x03
    381e:	12 82       	std	Z+2, r1	; 0x02
    3820:	b0 93 41 05 	sts	0x0541, r27	; 0x800541 <__brkval+0x1>
    3824:	a0 93 40 05 	sts	0x0540, r26	; 0x800540 <__brkval>
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	08 95       	ret

0000382e <isupper>:
    382e:	85 fd       	sbrc	r24, 5
    3830:	34 c0       	rjmp	.+104    	; 0x389a <__ctype_isfalse>

00003832 <isalpha>:
    3832:	80 62       	ori	r24, 0x20	; 32

00003834 <islower>:
    3834:	91 11       	cpse	r25, r1
    3836:	31 c0       	rjmp	.+98     	; 0x389a <__ctype_isfalse>
    3838:	81 56       	subi	r24, 0x61	; 97
    383a:	8a 51       	subi	r24, 0x1A	; 26
    383c:	e0 f7       	brcc	.-8      	; 0x3836 <islower+0x2>
    383e:	08 95       	ret

00003840 <strcpy_P>:
    3840:	fb 01       	movw	r30, r22
    3842:	dc 01       	movw	r26, r24
    3844:	05 90       	lpm	r0, Z+
    3846:	0d 92       	st	X+, r0
    3848:	00 20       	and	r0, r0
    384a:	e1 f7       	brne	.-8      	; 0x3844 <strcpy_P+0x4>
    384c:	08 95       	ret

0000384e <memcpy>:
    384e:	fb 01       	movw	r30, r22
    3850:	dc 01       	movw	r26, r24
    3852:	02 c0       	rjmp	.+4      	; 0x3858 <memcpy+0xa>
    3854:	01 90       	ld	r0, Z+
    3856:	0d 92       	st	X+, r0
    3858:	41 50       	subi	r20, 0x01	; 1
    385a:	50 40       	sbci	r21, 0x00	; 0
    385c:	d8 f7       	brcc	.-10     	; 0x3854 <memcpy+0x6>
    385e:	08 95       	ret

00003860 <strncmp>:
    3860:	fb 01       	movw	r30, r22
    3862:	dc 01       	movw	r26, r24
    3864:	41 50       	subi	r20, 0x01	; 1
    3866:	50 40       	sbci	r21, 0x00	; 0
    3868:	30 f0       	brcs	.+12     	; 0x3876 <strncmp+0x16>
    386a:	8d 91       	ld	r24, X+
    386c:	01 90       	ld	r0, Z+
    386e:	80 19       	sub	r24, r0
    3870:	19 f4       	brne	.+6      	; 0x3878 <strncmp+0x18>
    3872:	00 20       	and	r0, r0
    3874:	b9 f7       	brne	.-18     	; 0x3864 <strncmp+0x4>
    3876:	88 1b       	sub	r24, r24
    3878:	99 0b       	sbc	r25, r25
    387a:	08 95       	ret

0000387c <strncpy>:
    387c:	fb 01       	movw	r30, r22
    387e:	dc 01       	movw	r26, r24
    3880:	41 50       	subi	r20, 0x01	; 1
    3882:	50 40       	sbci	r21, 0x00	; 0
    3884:	48 f0       	brcs	.+18     	; 0x3898 <strncpy+0x1c>
    3886:	01 90       	ld	r0, Z+
    3888:	0d 92       	st	X+, r0
    388a:	00 20       	and	r0, r0
    388c:	c9 f7       	brne	.-14     	; 0x3880 <strncpy+0x4>
    388e:	01 c0       	rjmp	.+2      	; 0x3892 <strncpy+0x16>
    3890:	1d 92       	st	X+, r1
    3892:	41 50       	subi	r20, 0x01	; 1
    3894:	50 40       	sbci	r21, 0x00	; 0
    3896:	e0 f7       	brcc	.-8      	; 0x3890 <strncpy+0x14>
    3898:	08 95       	ret

0000389a <__ctype_isfalse>:
    389a:	99 27       	eor	r25, r25
    389c:	88 27       	eor	r24, r24

0000389e <__ctype_istrue>:
    389e:	08 95       	ret

000038a0 <__do_global_dtors>:
    38a0:	11 e0       	ldi	r17, 0x01	; 1
    38a2:	c2 e7       	ldi	r28, 0x72	; 114
    38a4:	d1 e0       	ldi	r29, 0x01	; 1
    38a6:	03 c0       	rjmp	.+6      	; 0x38ae <__do_global_dtors+0xe>
    38a8:	fe 01       	movw	r30, r28
    38aa:	9a de       	rcall	.-716    	; 0x35e0 <__tablejump2__>
    38ac:	21 96       	adiw	r28, 0x01	; 1
    38ae:	c3 37       	cpi	r28, 0x73	; 115
    38b0:	d1 07       	cpc	r29, r17
    38b2:	d1 f7       	brne	.-12     	; 0x38a8 <__do_global_dtors+0x8>
    38b4:	f8 94       	cli

000038b6 <__stop_program>:
    38b6:	ff cf       	rjmp	.-2      	; 0x38b6 <__stop_program>
