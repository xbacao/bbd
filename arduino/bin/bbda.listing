
bin/bbda.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data         00000168  00800100  00002320  000023b4  2**0  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002320  00000000  00000000  00000094  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  00800268  00800268  0000251c  2**0  ALLOC
  3 .stab         0000861c  00000000  00000000  0000251c  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006f8f  00000000  00000000  0000ab38  2**0  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00011ac7  2**0  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00011aec  2**2  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00011b2c  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00012120  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  000126c2  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000126df  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00800268 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Time.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080014e l     O .data	0000000c monthDays
0080039c l     O .bss	00000004 cacheTime
008003a0 l     O .bss	00000007 tm
00800398 l     O .bss	00000004 sysTime
00800106 l     O .data	00000004 syncInterval
00800390 l     O .bss	00000004 nextSyncTime
0080038e l     O .bss	00000002 Status
00800394 l     O .bss	00000004 prevMillis
00000000 l    df *ABS*	00000000 bbda.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000003e8 l     F .text	00000006 _GLOBAL__sub_I_debug_gsm
000003ee l     F .text	00000006 _GLOBAL__sub_D_debug_gsm
00000000 l    df *ABS*	00000000 gsm_ard.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800225 l     O .data	00000020 _possible_brs
00000000 l    df *ABS*	00000000 SoftwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Print.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring_digital.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000012e6 l     F .text	00000052 turnOffPWM
00000000 l    df *ABS*	00000000 HardwareSerial0.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000176a l     F .text	0000005a _GLOBAL__sub_I___vector_18
00000000 l    df *ABS*	00000000 _clear_bss.o
000000f4 l       .text	00000000 .do_clear_bss_start
000000f2 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 wiring.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008003eb l     O .bss	00000001 timer0_fract
00000000 l    df *ABS*	00000000 hooks.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000140a l     F .text	00000002 __empty
00000000 l    df *ABS*	00000000 WString.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Stream.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 main.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _divmodhi4.o
00001cfa l       .text	00000000 __divmodhi4_neg1
00001d02 l       .text	00000000 __divmodhi4_neg2
00001d08 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
00001d30 l       .text	00000000 __udivmodsi4_ep
00001d16 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
00001d66 l       .text	00000000 __divmodsi4_neg2
00001d74 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 _udivmodhi4.o
00001d9c l       .text	00000000 __udivmodhi4_ep
00001d8e l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 realloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0000231e l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 scheduler.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002206 g     F .text	00000042 __ultoa_ncheck
00000118  w      .text	00000000 __vector_22
0000219e g     F .text	0000000e strcpy
008003f0 g     O .bss	00000004 timer0_overflow_count
00001568 g     F .text	00000054 String::String(int, unsigned char)
00001872 g     F .text	00000020 Print::println(String const&)
00000fd6 g     F .text	00000136 SoftwareSerial::begin(long)
0000140a  w    F .text	00000002 yield
000000b8 g     O .text	0000000a port_to_mode_PGM
00000118  w      .text	00000000 __vector_1
0000186c g     F .text	00000006 Print::println()
000019e0 g     F .text	00000020 Print::println(int, int)
00000850 g     F .text	0000001e Gsm_Ard::Gsm_Ard()
00000da4 g     F .text	00000050 SoftwareSerial::listen()
00000850 g     F .text	0000001e Gsm_Ard::Gsm_Ard()
0000ffa0 g       *ABS*	00000000 __DATA_REGION_LENGTH__
000022d2 g       .text	00000036 .hidden __epilogue_restores__
008003ec g     O .bss	00000004 timer0_millis
0000067e g     F .text	0000000e year(unsigned long)
00001ab8 g     F .text	0000001c HardwareSerial::peek()
000018b2 g     F .text	00000094 Print::printNumber(unsigned long, unsigned char)
00001d86 g       .text	00000028 .hidden __udivmodhi4
000017c4 g     F .text	00000052 Print::write(unsigned char const*, unsigned int)
008003e9 g     O .bss	00000002 SoftwareSerial::active_object
00000068 g       .text	00000000 __trampolines_start
0000152e g     F .text	00000010 String::String(String const&)
00002320 g       .text	00000000 _etext
00001664 g     F .text	00000024 String::concat(char)
00001aa0 g     F .text	00000018 HardwareSerial::available()
00000118  w      .text	00000000 __vector_24
000003f4 g     F .text	00000076 loop
00001b16 g     F .text	00000042 HardwareSerial::_tx_udr_empty_irq()
00000118  w      .text	00000000 __vector_12
00001a86  w    F .text	00000002 initVariant
00001b9a g     F .text	0000008c HardwareSerial::write(unsigned char)
00000118 g       .text	00000000 __bad_interrupt
0000217a g     F .text	00000012 memcpy
00000f84 g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
00002488 g       *ABS*	00000000 __data_load_end
00002248 g     F .text	00000032 __utoa_ncheck
00000118  w      .text	00000000 __vector_6
00001dba g     F .text	00000130 malloc
00001568 g     F .text	00000054 String::String(int, unsigned char)
0000227a g     F .text	00000020 strrev
00800102 g     O .data	00000002 __malloc_heap_start
000021ca g     F .text	00000014 itoa
00000634 g     F .text	0000004a refreshCache(unsigned long)
00001436 g     F .text	00000032 String::changeBuffer(unsigned int)
00000068 g       .text	00000000 __trampolines_end
00001468 g     F .text	00000038 String::reserve(unsigned int)
00000df4 g     F .text	000000e8 __vector_3
000013b0 g     F .text	0000005a digitalWrite
00001816  w    F .text	0000002a Print::write(char const*)
00001338 g     F .text	00000078 pinMode
000021de g     F .text	00000014 __itoa_ncheck
00000090 g     O .text	00000014 digital_pin_to_port_PGM
00000118  w      .text	00000000 __vector_23
00002320 g       *ABS*	00000000 __data_load_start
000000c8 g       .text	00000000 __dtors_end
00800495 g       .bss	00000000 __bss_end
00000ee8 g     F .text	0000004e SoftwareSerial::setTX(unsigned char)
00000c18 g     F .text	00000042 SoftwareSerial::read()
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
00000a20 g     F .text	000001f8 Gsm_Ard::init_gsm_module()
00000118  w      .text	00000000 __vector_25
00800491 g     O .bss	00000002 __brkval
000019d4 g     F .text	0000000c Print::print(int, int)
0000140c g     F .text	00000008 String::~String()
0000152e g     F .text	00000010 String::String(String const&)
00000834 g     F .text	0000000c day()
00001688 g     F .text	00000022 operator+(StringSumHelper const&, String const&)
0000068c g     F .text	00000064 setTime(unsigned long)
00000118  w      .text	00000000 __vector_11
00800269 g     O .bss	00000001 started
000000c8  w      .text	00000000 __init
00800268 g     O .bss	00000001 request_checked
000014a0 g     F .text	0000003c String::copy(char const*, unsigned int)
00002208 g       .text	00000000 __ultoa_common
00000d1c g     F .text	00000030 SoftwareSerial::peek()
0000084c g     F .text	00000004 year()
00001afc  w    F .text	0000001a serialEventRun()
00001b58 g     F .text	00000042 HardwareSerial::flush()
00000118  w      .text	00000000 __vector_13
0000140c g     F .text	00000008 String::~String()
00000118  w      .text	00000000 __vector_17
0000170e g     F .text	0000004a __vector_19
00001892 g     F .text	00000020 Print::println(char const*)
00000118  w      .text	00000000 __vector_7
000015bc g     F .text	00000056 String::String(unsigned long, unsigned char)
000021ca g       .text	00000000 __itoa
00002308 g       .text	00000014 .hidden __do_global_dtors
008003f4 g     O .bss	0000009d Serial
00001504 g     F .text	0000002a String::operator=(String const&)
00800258  w    O .data	00000010 vtable for HardwareSerial
000000ea g       .text	00000010 .hidden __do_clear_bss
0000185e g     F .text	0000000e Print::print(char)
00001758 g     F .text	00000012 Serial0_available()
00810000 g       .stab	00000000 __eeprom_end
00000c5a g     F .text	000000c0 SoftwareSerial::write(unsigned char)
0000007c g     O .text	00000014 digital_pin_to_bit_mask_PGM
000021f2 g       .text	00000000 __ultoa
00001c26 g     F .text	000000be HardwareSerial::begin(unsigned long, unsigned char)
008003a7 g     O .bss	00000001 SoftwareSerial::_receive_buffer_head
00800100 g     O .data	00000002 __malloc_heap_end
00000edc g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
00000000 g       .text	00000000 __vectors
00800268 g       .data	00000000 __data_end
000021ac g     F .text	0000001e strncpy
00000000  w      .text	00000000 __vector_default
00001ce4 g       .text	00000026 .hidden __divmodhi4
00001ffc g     F .text	0000017e realloc
00000df4 g     F .text	000000e8 __vector_5
00001414 g     F .text	00000022 String::invalidate()
00000d4c g     F .text	0000002c SoftwareSerial::available()
000014dc g     F .text	00000028 String::String(char const*)
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00001dae g       .text	0000000c .hidden __tablejump2__
00001270 g     F .text	00000076 init
0080038b g     O .bss	00000001 debug_gsm
008003a9 g     O .bss	00000040 SoftwareSerial::_receive_buffer
000000c2 g       .text	00000000 __ctors_start
008003a8 g     O .bss	00000001 SoftwareSerial::_receive_buffer_tail
000000d4 g       .text	00000016 .hidden __do_copy_data
0080038c g     O .bss	00000002 getTimePtr
00800268 g       .bss	00000000 __bss_start
00001a88 g     F .text	00000018 main
000006f0 g     F .text	00000120 now()
00000df4 g     F .text	000000e8 __vector_4
00001612 g     F .text	00000052 String::concat(char const*, unsigned int)
0000185c g     F .text	00000002 Print::print(char const*)
000011b8 g     F .text	0000004a micros
00001d76 g       .text	00000010 .hidden __negsi2
00000d78 g     F .text	0000002c SoftwareSerial::stopListening()
0080026a g     O .bss	00000121 gsm
0000218c g     F .text	00000012 strcmp
00000000  w      *ABS*	00000000 __heap_end
00001a58 g     F .text	0000002e Stream::readString()
00000118  w      .text	00000000 __vector_9
00001202 g     F .text	0000006e delay
00000118  w      .text	00000000 __vector_2
0000153e g     F .text	0000002a String::operator=(char const*)
00000840 g     F .text	0000000c month()
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000011a g     F .text	00000034 printDigits(int)
0000014e g     F .text	00000074 digitalClockDisplay()
0000046a g     F .text	000001ca breakTime(unsigned long, tmElements_t&)
00000970 g     F .text	000000b0 Gsm_Ard::send_cmd_comp_rsp(String, char const*, int)
000014dc g     F .text	00000028 String::String(char const*)
00000118  w      .text	00000000 __vector_21
00800245  w    O .data	00000010 vtable for SoftwareSerial
00000118  w      .text	00000000 __vector_15
0000081c g     F .text	0000000c minute()
000000ae g     O .text	0000000a port_to_output_PGM
000001c2 g     F .text	00000226 setup
00800495 g       .stab	00000000 __heap_start
000000c6 g       .text	00000000 __dtors_start
000000c6 g       .text	00000000 __ctors_end
00001d4e g       .text	00000028 .hidden __divmodsi4
000008ff  w      *ABS*	00000000 __stack
000000a4 g     O .text	0000000a port_to_input_PGM
00800268 g       .data	00000000 _edata
00000edc g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
00800495 g       .stab	00000000 _end
00000118  w      .text	00000000 __vector_8
000021f2 g     F .text	00000014 ultoa
0000086e g     F .text	00000102 Gsm_Ard::_recv_string(char**, int*, int)
00000828 g     F .text	0000000c second()
00000068 g     O .text	00000014 digital_pin_to_timer_PGM
00002308  w      .text	00000000 .hidden exit
00001946 g     F .text	0000008e Print::print(long, int)
00001ce4 g       .text	00000000 .hidden _div
00001ad4 g     F .text	00000028 HardwareSerial::read()
00800493 g     O .bss	00000002 __flp
00001d0a g       .text	00000044 .hidden __udivmodsi4
00000810 g     F .text	0000000c hour()
00000f36 g     F .text	0000004e SoftwareSerial::setRX(unsigned char)
00000d1a g     F .text	00000002 SoftwareSerial::flush()
000015bc g     F .text	00000056 String::String(unsigned long, unsigned char)
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
00002308 g       .text	00000000 .hidden _exit
00001a00 g     F .text	00000058 Stream::timedRead()
00000118  w      .text	00000000 __vector_14
00000118  w      .text	00000000 __vector_10
00001840 g     F .text	0000001c Print::print(String const&)
0000110c g     F .text	00000094 __vector_16
00800100 g       .data	00000000 __data_start
00000f84 g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
000016aa g     F .text	00000064 __vector_18
00000400 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00800104 g     O .data	00000002 __malloc_margin
00000118  w      .text	00000000 __vector_20
000011a0 g     F .text	00000018 millis
0000224a g       .text	00000000 __utoa_common
0000229a g       .text	00000038 .hidden __prologue_saves__
00001eea g     F .text	00000112 free
000000fa g       .text	00000016 .hidden __do_global_ctors



Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	63 c0       	rjmp	.+198    	; 0xc8 <__dtors_end>
       2:	00 00       	nop
       4:	89 c0       	rjmp	.+274    	; 0x118 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c0       	rjmp	.+270    	; 0x118 <__bad_interrupt>
       a:	00 00       	nop
       c:	f3 c6       	rjmp	.+3558   	; 0xdf4 <__vector_3>
       e:	00 00       	nop
      10:	f1 c6       	rjmp	.+3554   	; 0xdf4 <__vector_3>
      12:	00 00       	nop
      14:	ef c6       	rjmp	.+3550   	; 0xdf4 <__vector_3>
      16:	00 00       	nop
      18:	7f c0       	rjmp	.+254    	; 0x118 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7d c0       	rjmp	.+250    	; 0x118 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7b c0       	rjmp	.+246    	; 0x118 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c0       	rjmp	.+242    	; 0x118 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c0       	rjmp	.+238    	; 0x118 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	75 c0       	rjmp	.+234    	; 0x118 <__bad_interrupt>
      2e:	00 00       	nop
      30:	73 c0       	rjmp	.+230    	; 0x118 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c0       	rjmp	.+226    	; 0x118 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c0       	rjmp	.+222    	; 0x118 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c0       	rjmp	.+218    	; 0x118 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_16>
      44:	69 c0       	rjmp	.+210    	; 0x118 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_18>
      4c:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__vector_19>
      50:	63 c0       	rjmp	.+198    	; 0x118 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c0       	rjmp	.+194    	; 0x118 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c0       	rjmp	.+190    	; 0x118 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5d c0       	rjmp	.+186    	; 0x118 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5b c0       	rjmp	.+182    	; 0x118 <__bad_interrupt>
      62:	00 00       	nop
      64:	59 c0       	rjmp	.+178    	; 0x118 <__bad_interrupt>
	...

00000068 <digital_pin_to_timer_PGM>:
__trampolines_start():
      68:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      78:	00 00 00 00                                         ....

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
__ctors_start():
      c2:	f4 01       	movw	r30, r8
      c4:	b5 0b       	sbc	r27, r21

000000c6 <__ctors_end>:
__dtors_start():
      c6:	f7 01       	movw	r30, r14

000000c8 <__dtors_end>:
__dtors_end():
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
__do_copy_data():
      d4:	12 e0       	ldi	r17, 0x02	; 2
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e0 e2       	ldi	r30, 0x20	; 32
      dc:	f3 e2       	ldi	r31, 0x23	; 35
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a8 36       	cpi	r26, 0x68	; 104
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
__do_clear_bss():
      ea:	24 e0       	ldi	r18, 0x04	; 4
      ec:	a8 e6       	ldi	r26, 0x68	; 104
      ee:	b2 e0       	ldi	r27, 0x02	; 2
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a5 39       	cpi	r26, 0x95	; 149
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
__do_global_ctors():
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <main>
     114:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__do_global_dtors>

00000118 <__bad_interrupt>:
__vector_22():
     118:	73 cf       	rjmp	.-282    	; 0x0 <__vectors>

0000011a <printDigits(int)>:
_Z11printDigitsi():
bin/bbda.cpp:436
  Serial.print(" ");
  Serial.print(year());
  Serial.println();
}

void printDigits(int digits){
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	ec 01       	movw	r28, r24
bin/bbda.cpp:438
  // utility function for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
     120:	61 e3       	ldi	r22, 0x31	; 49
     122:	71 e0       	ldi	r23, 0x01	; 1
     124:	84 ef       	ldi	r24, 0xF4	; 244
     126:	93 e0       	ldi	r25, 0x03	; 3
     128:	0e 94 2e 0c 	call	0x185c	; 0x185c <Print::print(char const*)>
bin/bbda.cpp:439
  if(digits < 10)
     12c:	ca 30       	cpi	r28, 0x0A	; 10
     12e:	d1 05       	cpc	r29, r1
     130:	2c f4       	brge	.+10     	; 0x13c <printDigits(int)+0x22>
bin/bbda.cpp:440
    Serial.print('0');
     132:	60 e3       	ldi	r22, 0x30	; 48
     134:	84 ef       	ldi	r24, 0xF4	; 244
     136:	93 e0       	ldi	r25, 0x03	; 3
     138:	0e 94 2f 0c 	call	0x185e	; 0x185e <Print::print(char)>
bin/bbda.cpp:441
  Serial.print(digits);
     13c:	4a e0       	ldi	r20, 0x0A	; 10
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	be 01       	movw	r22, r28
     142:	84 ef       	ldi	r24, 0xF4	; 244
     144:	93 e0       	ldi	r25, 0x03	; 3
bin/bbda.cpp:442
}
     146:	df 91       	pop	r29
     148:	cf 91       	pop	r28
bin/bbda.cpp:441
  Serial.print(digits);
     14a:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <Print::print(int, int)>

0000014e <digitalClockDisplay()>:
_Z19digitalClockDisplayv():
bin/bbda.cpp:422
void digitalClockDisplay(){
     14e:	60 d3       	rcall	.+1728   	; 0x810 <hour()>
     150:	4a e0       	ldi	r20, 0x0A	; 10
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	bc 01       	movw	r22, r24
     156:	84 ef       	ldi	r24, 0xF4	; 244
     158:	93 e0       	ldi	r25, 0x03	; 3
     15a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Print::print(int, int)>
     15e:	5e d3       	rcall	.+1724   	; 0x81c <minute()>
     160:	dc df       	rcall	.-72     	; 0x11a <printDigits(int)>
     162:	62 d3       	rcall	.+1732   	; 0x828 <second()>
     164:	da df       	rcall	.-76     	; 0x11a <printDigits(int)>
     166:	6a ef       	ldi	r22, 0xFA	; 250
     168:	71 e0       	ldi	r23, 0x01	; 1
     16a:	84 ef       	ldi	r24, 0xF4	; 244
     16c:	93 e0       	ldi	r25, 0x03	; 3
     16e:	0e 94 2e 0c 	call	0x185c	; 0x185c <Print::print(char const*)>
     172:	60 d3       	rcall	.+1728   	; 0x834 <day()>
     174:	4a e0       	ldi	r20, 0x0A	; 10
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	bc 01       	movw	r22, r24
     17a:	84 ef       	ldi	r24, 0xF4	; 244
     17c:	93 e0       	ldi	r25, 0x03	; 3
     17e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Print::print(int, int)>
     182:	6a ef       	ldi	r22, 0xFA	; 250
     184:	71 e0       	ldi	r23, 0x01	; 1
     186:	84 ef       	ldi	r24, 0xF4	; 244
     188:	93 e0       	ldi	r25, 0x03	; 3
     18a:	0e 94 2e 0c 	call	0x185c	; 0x185c <Print::print(char const*)>
     18e:	58 d3       	rcall	.+1712   	; 0x840 <month()>
     190:	4a e0       	ldi	r20, 0x0A	; 10
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	bc 01       	movw	r22, r24
     196:	84 ef       	ldi	r24, 0xF4	; 244
     198:	93 e0       	ldi	r25, 0x03	; 3
     19a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Print::print(int, int)>
     19e:	6a ef       	ldi	r22, 0xFA	; 250
     1a0:	71 e0       	ldi	r23, 0x01	; 1
     1a2:	84 ef       	ldi	r24, 0xF4	; 244
     1a4:	93 e0       	ldi	r25, 0x03	; 3
     1a6:	0e 94 2e 0c 	call	0x185c	; 0x185c <Print::print(char const*)>
     1aa:	50 d3       	rcall	.+1696   	; 0x84c <year()>
     1ac:	4a e0       	ldi	r20, 0x0A	; 10
     1ae:	50 e0       	ldi	r21, 0x00	; 0
     1b0:	bc 01       	movw	r22, r24
     1b2:	84 ef       	ldi	r24, 0xF4	; 244
     1b4:	93 e0       	ldi	r25, 0x03	; 3
     1b6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Print::print(int, int)>
     1ba:	84 ef       	ldi	r24, 0xF4	; 244
     1bc:	93 e0       	ldi	r25, 0x03	; 3
     1be:	0c 94 36 0c 	jmp	0x186c	; 0x186c <Print::println()>

000001c2 <setup>:
setup():
bin/bbda.cpp:38
{
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	c7 52       	subi	r28, 0x27	; 39
     1ce:	d1 40       	sbci	r29, 0x01	; 1
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	f8 94       	cli
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	cd bf       	out	0x3d, r28	; 61
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     1da:	26 e0       	ldi	r18, 0x06	; 6
     1dc:	40 e8       	ldi	r20, 0x80	; 128
     1de:	55 e2       	ldi	r21, 0x25	; 37
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	84 ef       	ldi	r24, 0xF4	; 244
     1e6:	93 e0       	ldi	r25, 0x03	; 3
     1e8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <HardwareSerial::begin(unsigned long, unsigned char)>
bin/bbda.cpp:47
  gsm=Gsm_Ard();
     1ec:	ce 01       	movw	r24, r28
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	2f d3       	rcall	.+1630   	; 0x850 <Gsm_Ard::Gsm_Ard()>
     1f2:	de 01       	movw	r26, r28
     1f4:	11 96       	adiw	r26, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:20
#define PIN "0048"

#define CR_CHAR   0x13
#define NL_CHAR   0x10

#define DEBUG_GSM
     1f6:	ea e6       	ldi	r30, 0x6A	; 106
     1f8:	f2 e0       	ldi	r31, 0x02	; 2
     1fa:	8d 91       	ld	r24, X+
     1fc:	81 93       	st	Z+, r24
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	ea 36       	cpi	r30, 0x6A	; 106
     202:	f8 07       	cpc	r31, r24
     204:	d1 f7       	brne	.-12     	; 0x1fa <setup+0x38>
     206:	cf 5f       	subi	r28, 0xFF	; 255
     208:	de 4f       	sbci	r29, 0xFE	; 254
     20a:	88 81       	ld	r24, Y
     20c:	99 81       	ldd	r25, Y+1	; 0x01
     20e:	c1 50       	subi	r28, 0x01	; 1
     210:	d1 40       	sbci	r29, 0x01	; 1
     212:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <gsm+0x101>
     216:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <gsm+0x100>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:34
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
     21a:	cb 5f       	subi	r28, 0xFB	; 251
     21c:	de 4f       	sbci	r29, 0xFE	; 254
     21e:	88 81       	ld	r24, Y
     220:	99 81       	ldd	r25, Y+1	; 0x01
     222:	c5 50       	subi	r28, 0x05	; 5
     224:	d1 40       	sbci	r29, 0x01	; 1
     226:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <gsm+0x105>
     22a:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <gsm+0x104>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     22e:	c9 5f       	subi	r28, 0xF9	; 249
     230:	de 4f       	sbci	r29, 0xFE	; 254
     232:	88 81       	ld	r24, Y
     234:	99 81       	ldd	r25, Y+1	; 0x01
     236:	aa 81       	ldd	r26, Y+2	; 0x02
     238:	bb 81       	ldd	r27, Y+3	; 0x03
     23a:	c7 50       	subi	r28, 0x07	; 7
     23c:	d1 40       	sbci	r29, 0x01	; 1
     23e:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <gsm+0x106>
     242:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <gsm+0x107>
     246:	a0 93 72 03 	sts	0x0372, r26	; 0x800372 <gsm+0x108>
     24a:	b0 93 73 03 	sts	0x0373, r27	; 0x800373 <gsm+0x109>
     24e:	c5 5f       	subi	r28, 0xF5	; 245
     250:	de 4f       	sbci	r29, 0xFE	; 254
     252:	88 81       	ld	r24, Y
     254:	99 81       	ldd	r25, Y+1	; 0x01
     256:	aa 81       	ldd	r26, Y+2	; 0x02
     258:	bb 81       	ldd	r27, Y+3	; 0x03
     25a:	cb 50       	subi	r28, 0x0B	; 11
     25c:	d1 40       	sbci	r29, 0x01	; 1
     25e:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <gsm+0x10a>
     262:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <gsm+0x10b>
     266:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <gsm+0x10c>
     26a:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <gsm+0x10d>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:50

#ifndef GCC_VERSION
#define GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
#endif

class SoftwareSerial : public Stream
     26e:	c1 5f       	subi	r28, 0xF1	; 241
     270:	de 4f       	sbci	r29, 0xFE	; 254
     272:	88 81       	ld	r24, Y
     274:	cf 50       	subi	r28, 0x0F	; 15
     276:	d1 40       	sbci	r29, 0x01	; 1
     278:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <gsm+0x10e>
     27c:	c0 5f       	subi	r28, 0xF0	; 240
     27e:	de 4f       	sbci	r29, 0xFE	; 254
     280:	88 81       	ld	r24, Y
     282:	c0 51       	subi	r28, 0x10	; 16
     284:	d1 40       	sbci	r29, 0x01	; 1
     286:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <gsm+0x10f>
     28a:	cf 5e       	subi	r28, 0xEF	; 239
     28c:	de 4f       	sbci	r29, 0xFE	; 254
     28e:	88 81       	ld	r24, Y
     290:	99 81       	ldd	r25, Y+1	; 0x01
     292:	c1 51       	subi	r28, 0x11	; 17
     294:	d1 40       	sbci	r29, 0x01	; 1
     296:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <gsm+0x111>
     29a:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <gsm+0x110>
     29e:	cd 5e       	subi	r28, 0xED	; 237
     2a0:	de 4f       	sbci	r29, 0xFE	; 254
     2a2:	88 81       	ld	r24, Y
     2a4:	c3 51       	subi	r28, 0x13	; 19
     2a6:	d1 40       	sbci	r29, 0x01	; 1
     2a8:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <gsm+0x112>
     2ac:	cc 5e       	subi	r28, 0xEC	; 236
     2ae:	de 4f       	sbci	r29, 0xFE	; 254
     2b0:	88 81       	ld	r24, Y
     2b2:	99 81       	ldd	r25, Y+1	; 0x01
     2b4:	c4 51       	subi	r28, 0x14	; 20
     2b6:	d1 40       	sbci	r29, 0x01	; 1
     2b8:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <gsm+0x114>
     2bc:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <gsm+0x113>
     2c0:	ca 5e       	subi	r28, 0xEA	; 234
     2c2:	de 4f       	sbci	r29, 0xFE	; 254
     2c4:	88 81       	ld	r24, Y
     2c6:	99 81       	ldd	r25, Y+1	; 0x01
     2c8:	c6 51       	subi	r28, 0x16	; 22
     2ca:	d1 40       	sbci	r29, 0x01	; 1
     2cc:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <gsm+0x116>
     2d0:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <gsm+0x115>
     2d4:	c8 5e       	subi	r28, 0xE8	; 232
     2d6:	de 4f       	sbci	r29, 0xFE	; 254
     2d8:	88 81       	ld	r24, Y
     2da:	c8 51       	subi	r28, 0x18	; 24
     2dc:	d1 40       	sbci	r29, 0x01	; 1
     2de:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <gsm+0x117>
     2e2:	c7 5e       	subi	r28, 0xE7	; 231
     2e4:	de 4f       	sbci	r29, 0xFE	; 254
     2e6:	88 81       	ld	r24, Y
     2e8:	99 81       	ldd	r25, Y+1	; 0x01
     2ea:	c9 51       	subi	r28, 0x19	; 25
     2ec:	d1 40       	sbci	r29, 0x01	; 1
     2ee:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <gsm+0x119>
     2f2:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <gsm+0x118>
     2f6:	c5 5e       	subi	r28, 0xE5	; 229
     2f8:	de 4f       	sbci	r29, 0xFE	; 254
     2fa:	88 81       	ld	r24, Y
     2fc:	99 81       	ldd	r25, Y+1	; 0x01
     2fe:	cb 51       	subi	r28, 0x1B	; 27
     300:	d1 40       	sbci	r29, 0x01	; 1
     302:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <gsm+0x11b>
     306:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <gsm+0x11a>
     30a:	c3 5e       	subi	r28, 0xE3	; 227
     30c:	de 4f       	sbci	r29, 0xFE	; 254
     30e:	88 81       	ld	r24, Y
     310:	99 81       	ldd	r25, Y+1	; 0x01
     312:	cd 51       	subi	r28, 0x1D	; 29
     314:	d1 40       	sbci	r29, 0x01	; 1
     316:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <gsm+0x11d>
     31a:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <gsm+0x11c>
     31e:	c1 5e       	subi	r28, 0xE1	; 225
     320:	de 4f       	sbci	r29, 0xFE	; 254
     322:	88 81       	ld	r24, Y
     324:	99 81       	ldd	r25, Y+1	; 0x01
     326:	cf 51       	subi	r28, 0x1F	; 31
     328:	d1 40       	sbci	r29, 0x01	; 1
     32a:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <gsm+0x11f>
     32e:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <gsm+0x11e>
     332:	cf 5d       	subi	r28, 0xDF	; 223
     334:	de 4f       	sbci	r29, 0xFE	; 254
     336:	98 81       	ld	r25, Y
     338:	c1 52       	subi	r28, 0x21	; 33
     33a:	d1 40       	sbci	r29, 0x01	; 1
     33c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <gsm+0x120>
     340:	90 fb       	bst	r25, 0
     342:	80 f9       	bld	r24, 0
     344:	96 95       	lsr	r25
     346:	91 70       	andi	r25, 0x01	; 1
     348:	90 fb       	bst	r25, 0
     34a:	81 f9       	bld	r24, 1
     34c:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <gsm+0x120>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:20
     350:	ce 01       	movw	r24, r28
     352:	8d 5f       	subi	r24, 0xFD	; 253
     354:	9e 4f       	sbci	r25, 0xFE	; 254
     356:	c2 d5       	rcall	.+2948   	; 0xedc <SoftwareSerial::~SoftwareSerial()>
bin/bbda.cpp:50
  Serial.println("GSM Shield init");
     358:	6a e0       	ldi	r22, 0x0A	; 10
     35a:	71 e0       	ldi	r23, 0x01	; 1
     35c:	84 ef       	ldi	r24, 0xF4	; 244
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	0e 94 49 0c 	call	0x1892	; 0x1892 <Print::println(char const*)>
bin/bbda.cpp:52
  n=gsm.init_gsm_module();
     364:	8a e6       	ldi	r24, 0x6A	; 106
     366:	92 e0       	ldi	r25, 0x02	; 2
     368:	5b d3       	rcall	.+1718   	; 0xa20 <Gsm_Ard::init_gsm_module()>
bin/bbda.cpp:53
  if(n){
     36a:	00 97       	sbiw	r24, 0x00	; 0
     36c:	11 f1       	breq	.+68     	; 0x3b2 <setup+0x1f0>
bin/bbda.cpp:54
    Serial.println("ERROR: init gsm module :"+String(n));
     36e:	4a e0       	ldi	r20, 0x0A	; 10
     370:	bc 01       	movw	r22, r24
     372:	ce 01       	movw	r24, r28
     374:	8e 5d       	subi	r24, 0xDE	; 222
     376:	9e 4f       	sbci	r25, 0xFE	; 254
     378:	0e 94 b4 0a 	call	0x1568	; 0x1568 <String::String(int, unsigned char)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.h:217

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     37c:	6a e1       	ldi	r22, 0x1A	; 26
     37e:	71 e0       	ldi	r23, 0x01	; 1
     380:	ce 01       	movw	r24, r28
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <String::String(char const*)>
bin/bbda.cpp:54
     388:	be 01       	movw	r22, r28
     38a:	6e 5d       	subi	r22, 0xDE	; 222
     38c:	7e 4f       	sbci	r23, 0xFE	; 254
     38e:	ce 01       	movw	r24, r28
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	0e 94 44 0b 	call	0x1688	; 0x1688 <operator+(StringSumHelper const&, String const&)>
     396:	bc 01       	movw	r22, r24
     398:	84 ef       	ldi	r24, 0xF4	; 244
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	0e 94 39 0c 	call	0x1872	; 0x1872 <Print::println(String const&)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.h:213
class StringSumHelper : public String
     3a0:	ce 01       	movw	r24, r28
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	0e 94 06 0a 	call	0x140c	; 0x140c <String::~String()>
bin/bbda.cpp:54
     3a8:	ce 01       	movw	r24, r28
     3aa:	8e 5d       	subi	r24, 0xDE	; 222
     3ac:	9e 4f       	sbci	r25, 0xFE	; 254
     3ae:	0e 94 06 0a 	call	0x140c	; 0x140c <String::~String()>
bin/bbda.cpp:65
      started=true;
     3b2:	11 e0       	ldi	r17, 0x01	; 1
     3b4:	10 93 69 02 	sts	0x0269, r17	; 0x800269 <started>
bin/bbda.cpp:69
      Serial.println("CLOCK");
     3b8:	63 e3       	ldi	r22, 0x33	; 51
     3ba:	71 e0       	ldi	r23, 0x01	; 1
     3bc:	84 ef       	ldi	r24, 0xF4	; 244
     3be:	93 e0       	ldi	r25, 0x03	; 3
     3c0:	0e 94 49 0c 	call	0x1892	; 0x1892 <Print::println(char const*)>
bin/bbda.cpp:70
      digitalClockDisplay();
     3c4:	c4 de       	rcall	.-632    	; 0x14e <digitalClockDisplay()>
bin/bbda.cpp:73
  } while(!started);
     3c6:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <started>
     3ca:	88 23       	and	r24, r24
     3cc:	99 f3       	breq	.-26     	; 0x3b4 <setup+0x1f2>
bin/bbda.cpp:74
  debug_gsm = true;
     3ce:	10 93 8b 03 	sts	0x038B, r17	; 0x80038b <debug_gsm>
bin/bbda.cpp:76
}
     3d2:	c9 5d       	subi	r28, 0xD9	; 217
     3d4:	de 4f       	sbci	r29, 0xFE	; 254
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	08 95       	ret

000003e8 <_GLOBAL__sub_I_debug_gsm>:
_GLOBAL__sub_I_debug_gsm():
bin/bbda.cpp:27
Gsm_Ard gsm;
     3e8:	8a e6       	ldi	r24, 0x6A	; 106
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	31 c2       	rjmp	.+1122   	; 0x850 <Gsm_Ard::Gsm_Ard()>

000003ee <_GLOBAL__sub_D_debug_gsm>:
_GLOBAL__sub_D_debug_gsm():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:20
     3ee:	8c e6       	ldi	r24, 0x6C	; 108
     3f0:	93 e0       	ldi	r25, 0x03	; 3
     3f2:	74 c5       	rjmp	.+2792   	; 0xedc <SoftwareSerial::~SoftwareSerial()>

000003f4 <loop>:
loop():
bin/bbda.cpp:79
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <loop+0x6>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <loop+0x8>
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <loop+0xa>
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
bin/bbda.cpp:80
  if(debug_gsm){
     402:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <debug_gsm>
     406:	88 23       	and	r24, r24
     408:	b9 f0       	breq	.+46     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
bin/bbda.cpp:81
    if(Serial.available()>0){
     40a:	84 ef       	ldi	r24, 0xF4	; 244
     40c:	93 e0       	ldi	r25, 0x03	; 3
     40e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <HardwareSerial::available()>
     412:	18 16       	cp	r1, r24
     414:	19 06       	cpc	r1, r25
     416:	84 f4       	brge	.+32     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
bin/bbda.cpp:82
      String str = Serial.readString();
     418:	64 ef       	ldi	r22, 0xF4	; 244
     41a:	73 e0       	ldi	r23, 0x03	; 3
     41c:	ce 01       	movw	r24, r28
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <Stream::readString()>
bin/bbda.cpp:83
      Serial.println(str);
     424:	be 01       	movw	r22, r28
     426:	6f 5f       	subi	r22, 0xFF	; 255
     428:	7f 4f       	sbci	r23, 0xFF	; 255
     42a:	84 ef       	ldi	r24, 0xF4	; 244
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	0e 94 39 0c 	call	0x1872	; 0x1872 <Print::println(String const&)>
bin/bbda.cpp:82
      String str = Serial.readString();
     432:	ce 01       	movw	r24, r28
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	ea d7       	rcall	.+4052   	; 0x140c <String::~String()>
bin/bbda.cpp:89
  if(!request_checked && minute()%REQUEST_CHECK_MULT == 0){
     438:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     43c:	81 11       	cpse	r24, r1
     43e:	13 c0       	rjmp	.+38     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
     440:	ed d1       	rcall	.+986    	; 0x81c <minute()>
bin/bbda.cpp:90
    Serial.println("iM CHEGKING REQUESTS");
     442:	69 e3       	ldi	r22, 0x39	; 57
     444:	71 e0       	ldi	r23, 0x01	; 1
     446:	84 ef       	ldi	r24, 0xF4	; 244
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	0e 94 49 0c 	call	0x1892	; 0x1892 <Print::println(char const*)>
bin/bbda.cpp:93
    request_checked = true;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <__data_end>
bin/bbda.cpp:102
}
     454:	26 96       	adiw	r28, 0x06	; 6
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
bin/bbda.cpp:98
    if(minute()%REQUEST_CHECK_MULT != 0 && request_checked){
     464:	08 95       	ret
     466:	da d1       	rcall	.+948    	; 0x81c <minute()>
     468:	f5 cf       	rjmp	.-22     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>

0000046a <breakTime(unsigned long, tmElements_t&)>:
_Z9breakTimemR12tmElements_t():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:151
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
     46a:	6f 92       	push	r6
     46c:	7f 92       	push	r7
     46e:	8f 92       	push	r8
     470:	9f 92       	push	r9
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	6b 01       	movw	r12, r22
     488:	7c 01       	movw	r14, r24
     48a:	ea 01       	movw	r28, r20
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:162
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     48c:	8c e3       	ldi	r24, 0x3C	; 60
     48e:	88 2e       	mov	r8, r24
     490:	91 2c       	mov	r9, r1
     492:	a1 2c       	mov	r10, r1
     494:	b1 2c       	mov	r11, r1
     496:	c7 01       	movw	r24, r14
     498:	b6 01       	movw	r22, r12
     49a:	a5 01       	movw	r20, r10
     49c:	94 01       	movw	r18, r8
     49e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__udivmodsi4>
     4a2:	68 83       	st	Y, r22
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:164
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     4a4:	ca 01       	movw	r24, r20
     4a6:	b9 01       	movw	r22, r18
     4a8:	a5 01       	movw	r20, r10
     4aa:	94 01       	movw	r18, r8
     4ac:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__udivmodsi4>
     4b0:	69 83       	std	Y+1, r22	; 0x01
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:165
  time /= 60; // now it is hours
     4b2:	c7 01       	movw	r24, r14
     4b4:	b6 01       	movw	r22, r12
     4b6:	20 e1       	ldi	r18, 0x10	; 16
     4b8:	3e e0       	ldi	r19, 0x0E	; 14
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__udivmodsi4>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:166
  tm.Hour = time % 24;
     4c2:	ca 01       	movw	r24, r20
     4c4:	b9 01       	movw	r22, r18
     4c6:	28 e1       	ldi	r18, 0x18	; 24
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__udivmodsi4>
     4d2:	6a 83       	std	Y+2, r22	; 0x02
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:167
  time /= 24; // now it is days
     4d4:	c7 01       	movw	r24, r14
     4d6:	b6 01       	movw	r22, r12
     4d8:	20 e8       	ldi	r18, 0x80	; 128
     4da:	31 e5       	ldi	r19, 0x51	; 81
     4dc:	41 e0       	ldi	r20, 0x01	; 1
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__udivmodsi4>
     4e4:	69 01       	movw	r12, r18
     4e6:	7a 01       	movw	r14, r20
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:168
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     4e8:	ca 01       	movw	r24, r20
     4ea:	b9 01       	movw	r22, r18
     4ec:	6c 5f       	subi	r22, 0xFC	; 252
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	8f 4f       	sbci	r24, 0xFF	; 255
     4f2:	9f 4f       	sbci	r25, 0xFF	; 255
     4f4:	27 e0       	ldi	r18, 0x07	; 7
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__udivmodsi4>
     500:	6f 5f       	subi	r22, 0xFF	; 255
     502:	6b 83       	std	Y+3, r22	; 0x03
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:171
  
  year = 0;  
  days = 0;
     504:	81 2c       	mov	r8, r1
     506:	91 2c       	mov	r9, r1
     508:	54 01       	movw	r10, r8
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:170
  year = 0;  
     50a:	40 e0       	ldi	r20, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:172
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     50c:	94 e6       	ldi	r25, 0x64	; 100
     50e:	69 2e       	mov	r6, r25
     510:	71 2c       	mov	r7, r1
     512:	00 e9       	ldi	r16, 0x90	; 144
     514:	11 e0       	ldi	r17, 0x01	; 1
     516:	24 2f       	mov	r18, r20
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	2e 54       	subi	r18, 0x4E	; 78
     51c:	38 4f       	sbci	r19, 0xF8	; 248
     51e:	f9 01       	movw	r30, r18
     520:	e3 70       	andi	r30, 0x03	; 3
     522:	ff 27       	eor	r31, r31
     524:	30 97       	sbiw	r30, 0x00	; 0
     526:	f9 f4       	brne	.+62     	; 0x566 <breakTime(unsigned long, tmElements_t&)+0xfc>
     528:	c9 01       	movw	r24, r18
     52a:	b3 01       	movw	r22, r6
     52c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     530:	89 2b       	or	r24, r25
     532:	31 f4       	brne	.+12     	; 0x540 <breakTime(unsigned long, tmElements_t&)+0xd6>
     534:	c9 01       	movw	r24, r18
     536:	b8 01       	movw	r22, r16
     538:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     53c:	89 2b       	or	r24, r25
     53e:	99 f4       	brne	.+38     	; 0x566 <breakTime(unsigned long, tmElements_t&)+0xfc>
     540:	8e e6       	ldi	r24, 0x6E	; 110
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	a0 e0       	ldi	r26, 0x00	; 0
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	88 0e       	add	r8, r24
     54a:	99 1e       	adc	r9, r25
     54c:	aa 1e       	adc	r10, r26
     54e:	bb 1e       	adc	r11, r27
     550:	d5 01       	movw	r26, r10
     552:	c4 01       	movw	r24, r8
     554:	aa 27       	eor	r26, r26
     556:	bb 27       	eor	r27, r27
     558:	c8 16       	cp	r12, r24
     55a:	d9 06       	cpc	r13, r25
     55c:	ea 06       	cpc	r14, r26
     55e:	fb 06       	cpc	r15, r27
     560:	38 f0       	brcs	.+14     	; 0x570 <breakTime(unsigned long, tmElements_t&)+0x106>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:173
    year++;
     562:	4f 5f       	subi	r20, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:172
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     564:	d8 cf       	rjmp	.-80     	; 0x516 <breakTime(unsigned long, tmElements_t&)+0xac>
     566:	8d e6       	ldi	r24, 0x6D	; 109
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	a0 e0       	ldi	r26, 0x00	; 0
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	ec cf       	rjmp	.-40     	; 0x548 <breakTime(unsigned long, tmElements_t&)+0xde>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:175
  }
  tm.Year = year; // year is offset from 1970 
     570:	4e 83       	std	Y+6, r20	; 0x06
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:177
  
  days -= LEAP_YEAR(year) ? 366 : 365;
     572:	30 97       	sbiw	r30, 0x00	; 0
     574:	09 f0       	breq	.+2      	; 0x578 <breakTime(unsigned long, tmElements_t&)+0x10e>
     576:	4c c0       	rjmp	.+152    	; 0x610 <breakTime(unsigned long, tmElements_t&)+0x1a6>
     578:	c9 01       	movw	r24, r18
     57a:	64 e6       	ldi	r22, 0x64	; 100
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     582:	89 2b       	or	r24, r25
     584:	39 f4       	brne	.+14     	; 0x594 <breakTime(unsigned long, tmElements_t&)+0x12a>
     586:	c9 01       	movw	r24, r18
     588:	60 e9       	ldi	r22, 0x90	; 144
     58a:	71 e0       	ldi	r23, 0x01	; 1
     58c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     590:	89 2b       	or	r24, r25
     592:	f1 f5       	brne	.+124    	; 0x610 <breakTime(unsigned long, tmElements_t&)+0x1a6>
     594:	8e e6       	ldi	r24, 0x6E	; 110
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	88 1a       	sub	r8, r24
     59e:	99 0a       	sbc	r9, r25
     5a0:	aa 0a       	sbc	r10, r26
     5a2:	bb 0a       	sbc	r11, r27
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:178
  time  -= days; // now it is days in this year, starting at 0
     5a4:	c8 18       	sub	r12, r8
     5a6:	d9 08       	sbc	r13, r9
     5a8:	ea 08       	sbc	r14, r10
     5aa:	fb 08       	sbc	r15, r11
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:185
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
     5ac:	c9 01       	movw	r24, r18
     5ae:	64 e6       	ldi	r22, 0x64	; 100
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     5b6:	8c 01       	movw	r16, r24
     5b8:	c9 01       	movw	r24, r18
     5ba:	60 e9       	ldi	r22, 0x90	; 144
     5bc:	71 e0       	ldi	r23, 0x01	; 1
     5be:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__divmodhi4>
     5c2:	ae e4       	ldi	r26, 0x4E	; 78
     5c4:	b1 e0       	ldi	r27, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:183
  for (month=0; month<12; month++) {
     5c6:	20 e0       	ldi	r18, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:191
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
     5c8:	4c 91       	ld	r20, X
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:194
    }
    
    if (time >= monthLength) {
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	11 96       	adiw	r26, 0x01	; 1
     5d2:	c4 16       	cp	r12, r20
     5d4:	d5 06       	cpc	r13, r21
     5d6:	e6 06       	cpc	r14, r22
     5d8:	f7 06       	cpc	r15, r23
     5da:	38 f0       	brcs	.+14     	; 0x5ea <breakTime(unsigned long, tmElements_t&)+0x180>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:195
      time -= monthLength;
     5dc:	c4 1a       	sub	r12, r20
     5de:	d5 0a       	sbc	r13, r21
     5e0:	e6 0a       	sbc	r14, r22
     5e2:	f7 0a       	sbc	r15, r23
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:183
  for (month=0; month<12; month++) {
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	2c 30       	cpi	r18, 0x0C	; 12
     5e8:	c1 f4       	brne	.+48     	; 0x61a <breakTime(unsigned long, tmElements_t&)+0x1b0>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:200
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	2d 83       	std	Y+5, r18	; 0x05
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:201
  tm.Day = time + 1;     // day of month
     5ee:	c3 94       	inc	r12
     5f0:	cc 82       	std	Y+4, r12	; 0x04
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:202
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	bf 90       	pop	r11
     604:	af 90       	pop	r10
     606:	9f 90       	pop	r9
     608:	8f 90       	pop	r8
     60a:	7f 90       	pop	r7
     60c:	6f 90       	pop	r6
     60e:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:177
  days -= LEAP_YEAR(year) ? 366 : 365;
     610:	8d e6       	ldi	r24, 0x6D	; 109
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	a0 e0       	ldi	r26, 0x00	; 0
     616:	b0 e0       	ldi	r27, 0x00	; 0
     618:	c1 cf       	rjmp	.-126    	; 0x59c <breakTime(unsigned long, tmElements_t&)+0x132>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:184
    if (month==1) { // february
     61a:	21 30       	cpi	r18, 0x01	; 1
     61c:	a9 f6       	brne	.-86     	; 0x5c8 <breakTime(unsigned long, tmElements_t&)+0x15e>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:185
      if (LEAP_YEAR(year)) {
     61e:	30 97       	sbiw	r30, 0x00	; 0
     620:	39 f4       	brne	.+14     	; 0x630 <breakTime(unsigned long, tmElements_t&)+0x1c6>
     622:	01 15       	cp	r16, r1
     624:	11 05       	cpc	r17, r1
     626:	11 f4       	brne	.+4      	; 0x62c <breakTime(unsigned long, tmElements_t&)+0x1c2>
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	11 f4       	brne	.+4      	; 0x630 <breakTime(unsigned long, tmElements_t&)+0x1c6>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:186
        monthLength=29;
     62c:	4d e1       	ldi	r20, 0x1D	; 29
     62e:	cd cf       	rjmp	.-102    	; 0x5ca <breakTime(unsigned long, tmElements_t&)+0x160>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:188
        monthLength=28;
     630:	4c e1       	ldi	r20, 0x1C	; 28
     632:	cb cf       	rjmp	.-106    	; 0x5ca <breakTime(unsigned long, tmElements_t&)+0x160>

00000634 <refreshCache(unsigned long)>:
_Z12refreshCachem():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:42
void refreshCache(time_t t) {
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	6b 01       	movw	r12, r22
     63e:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:43
  if (t != cacheTime) {
     640:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <cacheTime>
     644:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <cacheTime+0x1>
     648:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <cacheTime+0x2>
     64c:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <cacheTime+0x3>
     650:	8c 15       	cp	r24, r12
     652:	9d 05       	cpc	r25, r13
     654:	ae 05       	cpc	r26, r14
     656:	bf 05       	cpc	r27, r15
     658:	69 f0       	breq	.+26     	; 0x674 <refreshCache(unsigned long)+0x40>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:44
    breakTime(t, tm); 
     65a:	40 ea       	ldi	r20, 0xA0	; 160
     65c:	53 e0       	ldi	r21, 0x03	; 3
     65e:	c7 01       	movw	r24, r14
     660:	b6 01       	movw	r22, r12
     662:	03 df       	rcall	.-506    	; 0x46a <breakTime(unsigned long, tmElements_t&)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:45
    cacheTime = t; 
     664:	c0 92 9c 03 	sts	0x039C, r12	; 0x80039c <cacheTime>
     668:	d0 92 9d 03 	sts	0x039D, r13	; 0x80039d <cacheTime+0x1>
     66c:	e0 92 9e 03 	sts	0x039E, r14	; 0x80039e <cacheTime+0x2>
     670:	f0 92 9f 03 	sts	0x039F, r15	; 0x80039f <cacheTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:47
}
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	cf 90       	pop	r12
     67c:	08 95       	ret

0000067e <year(unsigned long)>:
_Z4yearm():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:137
int year(time_t t) { // the year for the given time
     67e:	da df       	rcall	.-76     	; 0x634 <refreshCache(unsigned long)>
     680:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <tm+0x6>
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	8e 54       	subi	r24, 0x4E	; 78
     688:	98 4f       	sbci	r25, 0xF8	; 248
     68a:	08 95       	ret

0000068c <setTime(unsigned long)>:
_Z7setTimem():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:274
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:280
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
     690:	60 93 98 03 	sts	0x0398, r22	; 0x800398 <sysTime>
     694:	70 93 99 03 	sts	0x0399, r23	; 0x800399 <sysTime+0x1>
     698:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <sysTime+0x2>
     69c:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:281
  nextSyncTime = (uint32_t)t + syncInterval;
     6a0:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <syncInterval>
     6a4:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <syncInterval+0x1>
     6a8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <syncInterval+0x2>
     6ac:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <syncInterval+0x3>
     6b0:	dc 01       	movw	r26, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	80 0f       	add	r24, r16
     6b6:	91 1f       	adc	r25, r17
     6b8:	a2 1f       	adc	r26, r18
     6ba:	b3 1f       	adc	r27, r19
     6bc:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <nextSyncTime>
     6c0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <nextSyncTime+0x1>
     6c4:	a0 93 92 03 	sts	0x0392, r26	; 0x800392 <nextSyncTime+0x2>
     6c8:	b0 93 93 03 	sts	0x0393, r27	; 0x800393 <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:282
  Status = timeSet;
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <Status+0x1>
     6d4:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <Status>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:283
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     6d8:	63 d5       	rcall	.+2758   	; 0x11a0 <millis>
     6da:	60 93 94 03 	sts	0x0394, r22	; 0x800394 <prevMillis>
     6de:	70 93 95 03 	sts	0x0395, r23	; 0x800395 <prevMillis+0x1>
     6e2:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <prevMillis+0x2>
     6e6:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:284
} 
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <now()>:
_Z3nowv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:250
time_t now() {
     6f0:	cf 92       	push	r12
     6f2:	df 92       	push	r13
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     6fa:	1f 93       	push	r17
     6fc:	51 d5       	rcall	.+2722   	; 0x11a0 <millis>
     6fe:	c0 90 94 03 	lds	r12, 0x0394	; 0x800394 <prevMillis>
     702:	d0 90 95 03 	lds	r13, 0x0395	; 0x800395 <prevMillis+0x1>
     706:	e0 90 96 03 	lds	r14, 0x0396	; 0x800396 <prevMillis+0x2>
     70a:	f0 90 97 03 	lds	r15, 0x0397	; 0x800397 <prevMillis+0x3>
     70e:	8b 01       	movw	r16, r22
     710:	9c 01       	movw	r18, r24
     712:	0c 19       	sub	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	2e 09       	sbc	r18, r14
     718:	3f 09       	sbc	r19, r15
     71a:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <sysTime>
     71e:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <sysTime+0x1>
     722:	a0 91 9a 03 	lds	r26, 0x039A	; 0x80039a <sysTime+0x2>
     726:	b0 91 9b 03 	lds	r27, 0x039B	; 0x80039b <sysTime+0x3>
     72a:	08 3e       	cpi	r16, 0xE8	; 232
     72c:	13 40       	sbci	r17, 0x03	; 3
     72e:	21 05       	cpc	r18, r1
     730:	31 05       	cpc	r19, r1
     732:	d0 f0       	brcs	.+52     	; 0x768 <now()+0x78>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:254
    sysTime++;
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	a1 1d       	adc	r26, r1
     738:	b1 1d       	adc	r27, r1
     73a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <sysTime>
     73e:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <sysTime+0x1>
     742:	a0 93 9a 03 	sts	0x039A, r26	; 0x80039a <sysTime+0x2>
     746:	b0 93 9b 03 	sts	0x039B, r27	; 0x80039b <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:255
    prevMillis += 1000;	
     74a:	b7 01       	movw	r22, r14
     74c:	a6 01       	movw	r20, r12
     74e:	48 51       	subi	r20, 0x18	; 24
     750:	5c 4f       	sbci	r21, 0xFC	; 252
     752:	6f 4f       	sbci	r22, 0xFF	; 255
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	40 93 94 03 	sts	0x0394, r20	; 0x800394 <prevMillis>
     75a:	50 93 95 03 	sts	0x0395, r21	; 0x800395 <prevMillis+0x1>
     75e:	60 93 96 03 	sts	0x0396, r22	; 0x800396 <prevMillis+0x2>
     762:	70 93 97 03 	sts	0x0397, r23	; 0x800397 <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     766:	ca cf       	rjmp	.-108    	; 0x6fc <now()+0xc>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:260
  if (nextSyncTime <= sysTime) {
     768:	40 91 90 03 	lds	r20, 0x0390	; 0x800390 <nextSyncTime>
     76c:	50 91 91 03 	lds	r21, 0x0391	; 0x800391 <nextSyncTime+0x1>
     770:	60 91 92 03 	lds	r22, 0x0392	; 0x800392 <nextSyncTime+0x2>
     774:	70 91 93 03 	lds	r23, 0x0393	; 0x800393 <nextSyncTime+0x3>
     778:	84 17       	cp	r24, r20
     77a:	95 07       	cpc	r25, r21
     77c:	a6 07       	cpc	r26, r22
     77e:	b7 07       	cpc	r27, r23
     780:	68 f0       	brcs	.+26     	; 0x79c <now()+0xac>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:261
    if (getTimePtr != 0) {
     782:	e0 91 8c 03 	lds	r30, 0x038C	; 0x80038c <getTimePtr>
     786:	f0 91 8d 03 	lds	r31, 0x038D	; 0x80038d <getTimePtr+0x1>
     78a:	30 97       	sbiw	r30, 0x00	; 0
     78c:	39 f0       	breq	.+14     	; 0x79c <now()+0xac>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:262
      time_t t = getTimePtr();
     78e:	09 95       	icall
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:263
      if (t != 0) {
     790:	61 15       	cp	r22, r1
     792:	71 05       	cpc	r23, r1
     794:	81 05       	cpc	r24, r1
     796:	91 05       	cpc	r25, r1
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:264
        setTime(t);
     798:	81 f0       	breq	.+32     	; 0x7ba <now()+0xca>
     79a:	78 df       	rcall	.-272    	; 0x68c <setTime(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:271
  return (time_t)sysTime;
     79c:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <sysTime>
     7a0:	70 91 99 03 	lds	r23, 0x0399	; 0x800399 <sysTime+0x1>
     7a4:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <sysTime+0x2>
     7a8:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:272
}
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:266
        nextSyncTime = sysTime + syncInterval;
     7ba:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <sysTime>
     7be:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <sysTime+0x1>
     7c2:	a0 91 9a 03 	lds	r26, 0x039A	; 0x80039a <sysTime+0x2>
     7c6:	b0 91 9b 03 	lds	r27, 0x039B	; 0x80039b <sysTime+0x3>
     7ca:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <syncInterval>
     7ce:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <syncInterval+0x1>
     7d2:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <syncInterval+0x2>
     7d6:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <syncInterval+0x3>
     7da:	84 0f       	add	r24, r20
     7dc:	95 1f       	adc	r25, r21
     7de:	a6 1f       	adc	r26, r22
     7e0:	b7 1f       	adc	r27, r23
     7e2:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <nextSyncTime>
     7e6:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <nextSyncTime+0x1>
     7ea:	a0 93 92 03 	sts	0x0392, r26	; 0x800392 <nextSyncTime+0x2>
     7ee:	b0 93 93 03 	sts	0x0393, r27	; 0x800393 <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:267
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <Status>
     7fa:	30 91 8f 03 	lds	r19, 0x038F	; 0x80038f <Status+0x1>
     7fe:	23 2b       	or	r18, r19
     800:	11 f4       	brne	.+4      	; 0x806 <now()+0x116>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <Status+0x1>
     80a:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <Status>
     80e:	c6 cf       	rjmp	.-116    	; 0x79c <now()+0xac>

00000810 <hour()>:
_Z4hourv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:54
  refreshCache(t);
     810:	6f df       	rcall	.-290    	; 0x6f0 <now()>
     812:	10 df       	rcall	.-480    	; 0x634 <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:55
  return tm.Hour;  
     814:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <tm+0x2>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:51
}
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	08 95       	ret

0000081c <minute()>:
_Z6minutev():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:93
  refreshCache(t);
     81c:	69 df       	rcall	.-302    	; 0x6f0 <now()>
     81e:	0a df       	rcall	.-492    	; 0x634 <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:94
  return tm.Minute;  
     820:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <tm+0x1>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:90
}
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	08 95       	ret

00000828 <second()>:
_Z6secondv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:102
  refreshCache(t);
     828:	63 df       	rcall	.-314    	; 0x6f0 <now()>
     82a:	04 df       	rcall	.-504    	; 0x634 <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:103
  return tm.Second;
     82c:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <tm>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:99
}
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	08 95       	ret

00000834 <day()>:
_Z3dayv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:111
  refreshCache(t);
     834:	5d df       	rcall	.-326    	; 0x6f0 <now()>
     836:	fe de       	rcall	.-516    	; 0x634 <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:112
  return tm.Day;
     838:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <tm+0x4>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:108
}
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	08 95       	ret

00000840 <month()>:
_Z5monthv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:129
  refreshCache(t);
     840:	57 df       	rcall	.-338    	; 0x6f0 <now()>
     842:	f8 de       	rcall	.-528    	; 0x634 <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:130
  return tm.Month;
     844:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <tm+0x5>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:126
}
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	08 95       	ret

0000084c <year()>:
_Z4yearv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:134
  return year(now()); 
     84c:	51 df       	rcall	.-350    	; 0x6f0 <now()>
     84e:	17 cf       	rjmp	.-466    	; 0x67e <year(unsigned long)>

00000850 <Gsm_Ard::Gsm_Ard()>:
_ZN7Gsm_ArdC2Ev():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:7

using namespace std;

static unsigned long int _possible_brs[8]={1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200};

Gsm_Ard::Gsm_Ard(){
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	ec 01       	movw	r28, r24
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	48 e0       	ldi	r20, 0x08	; 8
     85a:	67 e0       	ldi	r22, 0x07	; 7
     85c:	8e 5f       	subi	r24, 0xFE	; 254
     85e:	9e 4f       	sbci	r25, 0xFE	; 254
     860:	91 d3       	rcall	.+1826   	; 0xf84 <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:8
  _buff_idx=0;
     862:	d3 95       	inc	r29
     864:	19 82       	std	Y+1, r1	; 0x01
     866:	18 82       	st	Y, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:9
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <Gsm_Ard::_recv_string(char**, int*, int)>:
_ZN7Gsm_Ard12_recv_stringEPPcPii():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:87
  ret values:
  0 -> success
  1 -> buffer full before transmission ends
  2 -> transmission not fully received
*/
int Gsm_Ard::_recv_string(char** rsp, int* rsp_len, int wait_period){
     86e:	9f 92       	push	r9
     870:	af 92       	push	r10
     872:	bf 92       	push	r11
     874:	cf 92       	push	r12
     876:	df 92       	push	r13
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	8c 01       	movw	r16, r24
     886:	6b 01       	movw	r12, r22
     888:	5a 01       	movw	r10, r20
     88a:	e9 01       	movw	r28, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:90
  char temp;

  if(!_ss.available()){
     88c:	7c 01       	movw	r14, r24
     88e:	2e ef       	ldi	r18, 0xFE	; 254
     890:	e2 1a       	sub	r14, r18
     892:	f2 0a       	sbc	r15, r18
     894:	c7 01       	movw	r24, r14
     896:	5a d2       	rcall	.+1204   	; 0xd4c <SoftwareSerial::available()>
     898:	89 2b       	or	r24, r25
     89a:	29 f4       	brne	.+10     	; 0x8a6 <Gsm_Ard::_recv_string(char**, int*, int)+0x38>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:91
    delay(wait_period);
     89c:	be 01       	movw	r22, r28
     89e:	dd 0f       	add	r29, r29
     8a0:	88 0b       	sbc	r24, r24
     8a2:	99 0b       	sbc	r25, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:93
  }
  if(!_ss.available()){
     8a4:	ae d4       	rcall	.+2396   	; 0x1202 <delay>
     8a6:	c7 01       	movw	r24, r14
     8a8:	51 d2       	rcall	.+1186   	; 0xd4c <SoftwareSerial::available()>
     8aa:	89 2b       	or	r24, r25
     8ac:	99 f4       	brne	.+38     	; 0x8d4 <Gsm_Ard::_recv_string(char**, int*, int)+0x66>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:95
    #ifdef DEBUG_GSM
    Serial.println("DB: ERROR, NO RESPONSE RECEIVED!");
     8ae:	6a e5       	ldi	r22, 0x5A	; 90
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	84 ef       	ldi	r24, 0xF4	; 244
     8b4:	93 e0       	ldi	r25, 0x03	; 3
     8b6:	ed d7       	rcall	.+4058   	; 0x1892 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:97
    #endif
    return 2;
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:123
  strncpy(*rsp, _recv_buff,*rsp_len);
  // recv_str=String(_recv_buff);
  // Serial.println("RECVED STR:"+recv_str);

  return 0;
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	9f 90       	pop	r9
     8d2:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:100
  _buff_idx=0;
     8d4:	e8 01       	movw	r28, r16
     8d6:	d3 95       	inc	r29
     8d8:	19 82       	std	Y+1, r1	; 0x01
     8da:	18 82       	st	Y, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:101
  memset(_recv_buff, 0, RECV_BUFF_LEN);
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	f8 01       	movw	r30, r16
     8e2:	9c 01       	movw	r18, r24
     8e4:	11 92       	st	Z+, r1
     8e6:	21 50       	subi	r18, 0x01	; 1
     8e8:	30 40       	sbci	r19, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:102
  while(_ss.available() && _buff_idx<RECV_BUFF_LEN){
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <Gsm_Ard::_recv_string(char**, int*, int)+0x76>
     8ec:	c7 01       	movw	r24, r14
     8ee:	2e d2       	rcall	.+1116   	; 0xd4c <SoftwareSerial::available()>
     8f0:	89 2b       	or	r24, r25
     8f2:	31 f0       	breq	.+12     	; 0x900 <__stack+0x1>
     8f4:	88 81       	ld	r24, Y
     8f6:	99 81       	ldd	r25, Y+1	; 0x01
     8f8:	8f 3f       	cpi	r24, 0xFF	; 255
     8fa:	91 05       	cpc	r25, r1
     8fc:	d9 f0       	breq	.+54     	; 0x934 <__stack+0x35>
     8fe:	d4 f0       	brlt	.+52     	; 0x934 <__stack+0x35>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:109
  if(_buff_idx==RECV_BUFF_LEN){
     900:	48 81       	ld	r20, Y
     902:	59 81       	ldd	r21, Y+1	; 0x01
     904:	41 15       	cp	r20, r1
     906:	f1 e0       	ldi	r31, 0x01	; 1
     908:	5f 07       	cpc	r21, r31
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:111
    Serial.println("DB: ERROR, RECV BUFFER FULL");
     90a:	41 f4       	brne	.+16     	; 0x91c <__stack+0x1d>
     90c:	6b e7       	ldi	r22, 0x7B	; 123
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	84 ef       	ldi	r24, 0xF4	; 244
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	be d7       	rcall	.+3964   	; 0x1892 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:113
    return 1;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	d0 cf       	rjmp	.-96     	; 0x8bc <Gsm_Ard::_recv_string(char**, int*, int)+0x4e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:117
  *rsp_len=_buff_idx;
     91c:	f5 01       	movw	r30, r10
     91e:	51 83       	std	Z+1, r21	; 0x01
     920:	40 83       	st	Z, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:118
  strncpy(*rsp, _recv_buff,*rsp_len);
     922:	b8 01       	movw	r22, r16
     924:	f6 01       	movw	r30, r12
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:122
  return 0;
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:103
    temp=_ss.read();
     932:	c4 cf       	rjmp	.-120    	; 0x8bc <Gsm_Ard::_recv_string(char**, int*, int)+0x4e>
     934:	c7 01       	movw	r24, r14
     936:	70 d1       	rcall	.+736    	; 0xc18 <SoftwareSerial::read()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:104
    Serial.print("DB: ---");
     938:	98 2e       	mov	r9, r24
     93a:	67 e9       	ldi	r22, 0x97	; 151
     93c:	71 e0       	ldi	r23, 0x01	; 1
     93e:	84 ef       	ldi	r24, 0xF4	; 244
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	8c d7       	rcall	.+3864   	; 0x185c <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:105
    Serial.println((int) temp);
     944:	69 2d       	mov	r22, r9
     946:	09 2c       	mov	r0, r9
     948:	00 0c       	add	r0, r0
     94a:	77 0b       	sbc	r23, r23
     94c:	4a e0       	ldi	r20, 0x0A	; 10
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	84 ef       	ldi	r24, 0xF4	; 244
     952:	93 e0       	ldi	r25, 0x03	; 3
     954:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <Print::println(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:106
    _recv_buff[_buff_idx++]=temp;
     958:	88 81       	ld	r24, Y
     95a:	99 81       	ldd	r25, Y+1	; 0x01
     95c:	9c 01       	movw	r18, r24
     95e:	2f 5f       	subi	r18, 0xFF	; 255
     960:	3f 4f       	sbci	r19, 0xFF	; 255
     962:	39 83       	std	Y+1, r19	; 0x01
     964:	28 83       	st	Y, r18
     966:	80 0f       	add	r24, r16
     968:	91 1f       	adc	r25, r17
     96a:	fc 01       	movw	r30, r24
     96c:	90 82       	st	Z, r9
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:102
  while(_ss.available() && _buff_idx<RECV_BUFF_LEN){
     96e:	be cf       	rjmp	.-132    	; 0x8ec <Gsm_Ard::_recv_string(char**, int*, int)+0x7e>

00000970 <Gsm_Ard::send_cmd_comp_rsp(String, char const*, int)>:
_ZN7Gsm_Ard17send_cmd_comp_rspE6StringPKci():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:69
int Gsm_Ard::send_cmd_comp_rsp(String cmd, const char* exp_rsp, int recv_wait_period){
     970:	cf 92       	push	r12
     972:	df 92       	push	r13
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	60 97       	sbiw	r28, 0x10	; 16
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	8c 01       	movw	r16, r24
     992:	7a 01       	movw	r14, r20
     994:	69 01       	movw	r12, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:73
    _ss.println(cmd);
     996:	8e 5f       	subi	r24, 0xFE	; 254
     998:	9e 4f       	sbci	r25, 0xFE	; 254
     99a:	6b d7       	rcall	.+3798   	; 0x1872 <Print::println(String const&)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:74
    n=_recv_string(&rsp, &rsp_len,recv_wait_period);
     99c:	96 01       	movw	r18, r12
     99e:	ae 01       	movw	r20, r28
     9a0:	41 5f       	subi	r20, 0xF1	; 241
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	be 01       	movw	r22, r28
     9a6:	63 5f       	subi	r22, 0xF3	; 243
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	c8 01       	movw	r24, r16
     9ac:	60 df       	rcall	.-320    	; 0x86e <Gsm_Ard::_recv_string(char**, int*, int)>
     9ae:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:75
    Serial.println("RECV_STRING N:"+String(n));
     9b0:	4a e0       	ldi	r20, 0x0A	; 10
     9b2:	bc 01       	movw	r22, r24
     9b4:	ce 01       	movw	r24, r28
     9b6:	07 96       	adiw	r24, 0x07	; 7
     9b8:	d7 d5       	rcall	.+2990   	; 0x1568 <String::String(int, unsigned char)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.h:217
	StringSumHelper(const char *p) : String(p) {}
     9ba:	6f e9       	ldi	r22, 0x9F	; 159
     9bc:	71 e0       	ldi	r23, 0x01	; 1
     9be:	ce 01       	movw	r24, r28
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	8c d5       	rcall	.+2840   	; 0x14dc <String::String(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:75
     9c4:	be 01       	movw	r22, r28
     9c6:	69 5f       	subi	r22, 0xF9	; 249
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	5c d6       	rcall	.+3256   	; 0x1688 <operator+(StringSumHelper const&, String const&)>
     9d0:	bc 01       	movw	r22, r24
     9d2:	84 ef       	ldi	r24, 0xF4	; 244
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:213
     9d4:	93 e0       	ldi	r25, 0x03	; 3
     9d6:	4d d7       	rcall	.+3738   	; 0x1872 <Print::println(String const&)>
     9d8:	ce 01       	movw	r24, r28
     9da:	01 96       	adiw	r24, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:75
    Serial.println("RECV_STRING N:"+String(n));
     9dc:	17 d5       	rcall	.+2606   	; 0x140c <String::~String()>
     9de:	ce 01       	movw	r24, r28
     9e0:	07 96       	adiw	r24, 0x07	; 7
     9e2:	14 d5       	rcall	.+2600   	; 0x140c <String::~String()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:76
    if(!n && strcmp(rsp,exp_rsp)) return 0;
     9e4:	01 2b       	or	r16, r17
     9e6:	d1 f4       	brne	.+52     	; 0xa1c <Gsm_Ard::send_cmd_comp_rsp(String, char const*, int)+0xac>
     9e8:	b7 01       	movw	r22, r14
     9ea:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ec:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ee:	0e 94 c6 10 	call	0x218c	; 0x218c <strcmp>
     9f2:	21 e0       	ldi	r18, 0x01	; 1
     9f4:	89 2b       	or	r24, r25
     9f6:	09 f0       	breq	.+2      	; 0x9fa <Gsm_Ard::send_cmd_comp_rsp(String, char const*, int)+0x8a>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:79
}
     9fa:	82 2f       	mov	r24, r18
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	60 96       	adiw	r28, 0x10	; 16
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:76
    if(!n && strcmp(rsp,exp_rsp)) return 0;
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	ed cf       	rjmp	.-38     	; 0x9fa <Gsm_Ard::send_cmd_comp_rsp(String, char const*, int)+0x8a>

00000a20 <Gsm_Ard::init_gsm_module()>:
_ZN7Gsm_Ard15init_gsm_moduleEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:11
int Gsm_Ard::init_gsm_module(){
     a20:	4f 92       	push	r4
     a22:	5f 92       	push	r5
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	62 97       	sbiw	r28, 0x12	; 18
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:15
  Serial.println("DB: Setting baudrate");
     a4e:	6e ea       	ldi	r22, 0xAE	; 174
     a50:	71 e0       	ldi	r23, 0x01	; 1
     a52:	84 ef       	ldi	r24, 0xF4	; 244
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	1d d7       	rcall	.+3642   	; 0x1892 <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:18
  Serial.println("DB: Trying  default baudrate "+String(DEFAULT_SS_BAUDRATE));
     a58:	4a e0       	ldi	r20, 0x0A	; 10
     a5a:	60 e8       	ldi	r22, 0x80	; 128
     a5c:	75 e2       	ldi	r23, 0x25	; 37
     a5e:	ce 01       	movw	r24, r28
     a60:	07 96       	adiw	r24, 0x07	; 7
     a62:	82 d5       	rcall	.+2820   	; 0x1568 <String::String(int, unsigned char)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.h:217
     a64:	63 ec       	ldi	r22, 0xC3	; 195
     a66:	71 e0       	ldi	r23, 0x01	; 1
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	37 d5       	rcall	.+2670   	; 0x14dc <String::String(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:18
     a6e:	be 01       	movw	r22, r28
     a70:	69 5f       	subi	r22, 0xF9	; 249
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	07 d6       	rcall	.+3086   	; 0x1688 <operator+(StringSumHelper const&, String const&)>
     a7a:	bc 01       	movw	r22, r24
     a7c:	84 ef       	ldi	r24, 0xF4	; 244
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:213
     a7e:	93 e0       	ldi	r25, 0x03	; 3
     a80:	f8 d6       	rcall	.+3568   	; 0x1872 <Print::println(String const&)>
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:18
  Serial.println("DB: Trying  default baudrate "+String(DEFAULT_SS_BAUDRATE));
     a86:	c2 d4       	rcall	.+2436   	; 0x140c <String::~String()>
     a88:	ce 01       	movw	r24, r28
     a8a:	07 96       	adiw	r24, 0x07	; 7
     a8c:	bf d4       	rcall	.+2430   	; 0x140c <String::~String()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:20
  _ss.begin(DEFAULT_SS_BAUDRATE);
     a8e:	68 01       	movw	r12, r16
     a90:	8e ef       	ldi	r24, 0xFE	; 254
     a92:	c8 1a       	sub	r12, r24
     a94:	d8 0a       	sbc	r13, r24
     a96:	40 e8       	ldi	r20, 0x80	; 128
     a98:	55 e2       	ldi	r21, 0x25	; 37
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	c6 01       	movw	r24, r12
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:21
  n=send_cmd_comp_rsp("AT","OK",5000);
     aa0:	9a d2       	rcall	.+1332   	; 0xfd6 <SoftwareSerial::begin(long)>
     aa2:	61 ee       	ldi	r22, 0xE1	; 225
     aa4:	71 e0       	ldi	r23, 0x01	; 1
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	18 d5       	rcall	.+2608   	; 0x14dc <String::String(char const*)>
     aac:	28 e8       	ldi	r18, 0x88	; 136
     aae:	33 e1       	ldi	r19, 0x13	; 19
     ab0:	44 ee       	ldi	r20, 0xE4	; 228
     ab2:	51 e0       	ldi	r21, 0x01	; 1
     ab4:	be 01       	movw	r22, r28
     ab6:	6f 5f       	subi	r22, 0xFF	; 255
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	c8 01       	movw	r24, r16
     abc:	59 df       	rcall	.-334    	; 0x970 <Gsm_Ard::send_cmd_comp_rsp(String, char const*, int)>
     abe:	5c 01       	movw	r10, r24
     ac0:	ce 01       	movw	r24, r28
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	a3 d4       	rcall	.+2374   	; 0x140c <String::~String()>
     ac6:	85 e2       	ldi	r24, 0x25	; 37
     ac8:	e8 2e       	mov	r14, r24
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	f8 2e       	mov	r15, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:23
  for(i=0;i<8 && !suc;i++){
     ace:	a1 14       	cp	r10, r1
     ad0:	b1 04       	cpc	r11, r1
     ad2:	09 f4       	brne	.+2      	; 0xad6 <Gsm_Ard::init_gsm_module()+0xb6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:25
    Serial.println("DB: Trying baudrate "+String(_possible_brs[i]));
     ad4:	42 c0       	rjmp	.+132    	; 0xb5a <Gsm_Ard::init_gsm_module()+0x13a>
     ad6:	f7 01       	movw	r30, r14
     ad8:	41 90       	ld	r4, Z+
     ada:	51 90       	ld	r5, Z+
     adc:	61 90       	ld	r6, Z+
     ade:	71 90       	ld	r7, Z+
     ae0:	7f 01       	movw	r14, r30
     ae2:	2a e0       	ldi	r18, 0x0A	; 10
     ae4:	b3 01       	movw	r22, r6
     ae6:	a2 01       	movw	r20, r4
     ae8:	ce 01       	movw	r24, r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:217
     aea:	07 96       	adiw	r24, 0x07	; 7
     aec:	67 d5       	rcall	.+2766   	; 0x15bc <String::String(unsigned long, unsigned char)>
     aee:	67 ee       	ldi	r22, 0xE7	; 231
     af0:	71 e0       	ldi	r23, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:25
    Serial.println("DB: Trying baudrate "+String(_possible_brs[i]));
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	f2 d4       	rcall	.+2532   	; 0x14dc <String::String(char const*)>
     af8:	be 01       	movw	r22, r28
     afa:	69 5f       	subi	r22, 0xF9	; 249
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	c2 d5       	rcall	.+2948   	; 0x1688 <operator+(StringSumHelper const&, String const&)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:213
     b04:	bc 01       	movw	r22, r24
     b06:	84 ef       	ldi	r24, 0xF4	; 244
     b08:	93 e0       	ldi	r25, 0x03	; 3
     b0a:	b3 d6       	rcall	.+3430   	; 0x1872 <Print::println(String const&)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:25
    Serial.println("DB: Trying baudrate "+String(_possible_brs[i]));
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	7d d4       	rcall	.+2298   	; 0x140c <String::~String()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:27
    _ss.begin(_possible_brs[i]);
     b12:	ce 01       	movw	r24, r28
     b14:	07 96       	adiw	r24, 0x07	; 7
     b16:	7a d4       	rcall	.+2292   	; 0x140c <String::~String()>
     b18:	b3 01       	movw	r22, r6
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:28
    n=send_cmd_comp_rsp("AT", "OK",5000);
     b1a:	a2 01       	movw	r20, r4
     b1c:	c6 01       	movw	r24, r12
     b1e:	5b d2       	rcall	.+1206   	; 0xfd6 <SoftwareSerial::begin(long)>
     b20:	61 ee       	ldi	r22, 0xE1	; 225
     b22:	71 e0       	ldi	r23, 0x01	; 1
     b24:	ce 01       	movw	r24, r28
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	d9 d4       	rcall	.+2482   	; 0x14dc <String::String(char const*)>
     b2a:	28 e8       	ldi	r18, 0x88	; 136
     b2c:	33 e1       	ldi	r19, 0x13	; 19
     b2e:	44 ee       	ldi	r20, 0xE4	; 228
     b30:	51 e0       	ldi	r21, 0x01	; 1
     b32:	be 01       	movw	r22, r28
     b34:	6f 5f       	subi	r22, 0xFF	; 255
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	c8 01       	movw	r24, r16
     b3a:	1a df       	rcall	.-460    	; 0x970 <Gsm_Ard::send_cmd_comp_rsp(String, char const*, int)>
     b3c:	3c 01       	movw	r6, r24
     b3e:	ce 01       	movw	r24, r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:29
    if(!n){
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	64 d4       	rcall	.+2248   	; 0x140c <String::~String()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:23
  for(i=0;i<8 && !suc;i++){
     b44:	67 28       	or	r6, r7
     b46:	49 f0       	breq	.+18     	; 0xb5a <Gsm_Ard::init_gsm_module()+0x13a>
     b48:	f5 e4       	ldi	r31, 0x45	; 69
     b4a:	ef 16       	cp	r14, r31
     b4c:	f2 e0       	ldi	r31, 0x02	; 2
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:35
    return 1;
     b4e:	ff 06       	cpc	r15, r31
     b50:	09 f0       	breq	.+2      	; 0xb54 <Gsm_Ard::init_gsm_module()+0x134>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:38
  Serial.println("DB: Setting PIN");
     b52:	bd cf       	rjmp	.-134    	; 0xace <Gsm_Ard::init_gsm_module()+0xae>
     b54:	01 e0       	ldi	r16, 0x01	; 1
     b56:	10 e0       	ldi	r17, 0x00	; 0
     b58:	43 c0       	rjmp	.+134    	; 0xbe0 <Gsm_Ard::init_gsm_module()+0x1c0>
     b5a:	6c ef       	ldi	r22, 0xFC	; 252
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:40
  n=send_cmd_comp_rsp("AT+CPIN="+String(PIN), "OK",5000);
     b5c:	71 e0       	ldi	r23, 0x01	; 1
     b5e:	84 ef       	ldi	r24, 0xF4	; 244
     b60:	93 e0       	ldi	r25, 0x03	; 3
     b62:	97 d6       	rcall	.+3374   	; 0x1892 <Print::println(char const*)>
     b64:	6c e0       	ldi	r22, 0x0C	; 12
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:217
     b66:	72 e0       	ldi	r23, 0x02	; 2
     b68:	ce 01       	movw	r24, r28
     b6a:	0d 96       	adiw	r24, 0x0d	; 13
     b6c:	b7 d4       	rcall	.+2414   	; 0x14dc <String::String(char const*)>
     b6e:	61 e1       	ldi	r22, 0x11	; 17
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:40
  n=send_cmd_comp_rsp("AT+CPIN="+String(PIN), "OK",5000);
     b70:	72 e0       	ldi	r23, 0x02	; 2
     b72:	ce 01       	movw	r24, r28
     b74:	07 96       	adiw	r24, 0x07	; 7
     b76:	b2 d4       	rcall	.+2404   	; 0x14dc <String::String(char const*)>
     b78:	be 01       	movw	r22, r28
     b7a:	63 5f       	subi	r22, 0xF3	; 243
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	ce 01       	movw	r24, r28
     b80:	07 96       	adiw	r24, 0x07	; 7
     b82:	82 d5       	rcall	.+2820   	; 0x1688 <operator+(StringSumHelper const&, String const&)>
     b84:	bc 01       	movw	r22, r24
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	d1 d4       	rcall	.+2466   	; 0x152e <String::String(String const&)>
     b8c:	28 e8       	ldi	r18, 0x88	; 136
     b8e:	33 e1       	ldi	r19, 0x13	; 19
     b90:	44 ee       	ldi	r20, 0xE4	; 228
     b92:	51 e0       	ldi	r21, 0x01	; 1
     b94:	be 01       	movw	r22, r28
     b96:	6f 5f       	subi	r22, 0xFF	; 255
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	c8 01       	movw	r24, r16
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:213
     b9c:	e9 de       	rcall	.-558    	; 0x970 <Gsm_Ard::send_cmd_comp_rsp(String, char const*, int)>
     b9e:	7c 01       	movw	r14, r24
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:40
  n=send_cmd_comp_rsp("AT+CPIN="+String(PIN), "OK",5000);
     ba4:	33 d4       	rcall	.+2150   	; 0x140c <String::~String()>
     ba6:	ce 01       	movw	r24, r28
     ba8:	07 96       	adiw	r24, 0x07	; 7
     baa:	30 d4       	rcall	.+2144   	; 0x140c <String::~String()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:41
  if(n){
     bac:	ce 01       	movw	r24, r28
     bae:	0d 96       	adiw	r24, 0x0d	; 13
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:44
  n=send_cmd_comp_rsp("AT+CGATT=1", "OK", 500);
     bb0:	2d d4       	rcall	.+2138   	; 0x140c <String::~String()>
     bb2:	ef 28       	or	r14, r15
     bb4:	59 f5       	brne	.+86     	; 0xc0c <Gsm_Ard::init_gsm_module()+0x1ec>
     bb6:	6a e1       	ldi	r22, 0x1A	; 26
     bb8:	72 e0       	ldi	r23, 0x02	; 2
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	8e d4       	rcall	.+2332   	; 0x14dc <String::String(char const*)>
     bc0:	24 ef       	ldi	r18, 0xF4	; 244
     bc2:	31 e0       	ldi	r19, 0x01	; 1
     bc4:	44 ee       	ldi	r20, 0xE4	; 228
     bc6:	51 e0       	ldi	r21, 0x01	; 1
     bc8:	be 01       	movw	r22, r28
     bca:	6f 5f       	subi	r22, 0xFF	; 255
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	c8 01       	movw	r24, r16
     bd0:	cf de       	rcall	.-610    	; 0x970 <Gsm_Ard::send_cmd_comp_rsp(String, char const*, int)>
     bd2:	8c 01       	movw	r16, r24
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	19 d4       	rcall	.+2098   	; 0x140c <String::~String()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:45
  if(n){
     bda:	01 15       	cp	r16, r1
     bdc:	11 05       	cpc	r17, r1
     bde:	c9 f4       	brne	.+50     	; 0xc12 <Gsm_Ard::init_gsm_module()+0x1f2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:49
}
     be0:	c8 01       	movw	r24, r16
     be2:	62 96       	adiw	r28, 0x12	; 18
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	df 90       	pop	r13
     bfc:	cf 90       	pop	r12
     bfe:	bf 90       	pop	r11
     c00:	af 90       	pop	r10
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
     c0a:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:42
    return 2;
     c0c:	02 e0       	ldi	r16, 0x02	; 2
     c0e:	10 e0       	ldi	r17, 0x00	; 0
     c10:	e7 cf       	rjmp	.-50     	; 0xbe0 <Gsm_Ard::init_gsm_module()+0x1c0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:46
    return 3;
     c12:	03 e0       	ldi	r16, 0x03	; 3
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	e4 cf       	rjmp	.-56     	; 0xbe0 <Gsm_Ard::init_gsm_module()+0x1c0>

00000c18 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:394


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
     c18:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <SoftwareSerial::active_object>
     c1c:	30 91 ea 03 	lds	r19, 0x03EA	; 0x8003ea <SoftwareSerial::active_object+0x1>
     c20:	28 17       	cp	r18, r24
     c22:	39 07       	cpc	r19, r25
     c24:	b9 f4       	brne	.+46     	; 0xc54 <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:398
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     c26:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <SoftwareSerial::_receive_buffer_head>
     c2a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <SoftwareSerial::_receive_buffer_tail>
     c2e:	98 17       	cp	r25, r24
     c30:	89 f0       	breq	.+34     	; 0xc54 <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:402
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
     c32:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <SoftwareSerial::_receive_buffer_head>
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	e7 55       	subi	r30, 0x57	; 87
     c3a:	fc 4f       	sbci	r31, 0xFC	; 252
     c3c:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:403
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
     c3e:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <SoftwareSerial::_receive_buffer_head>
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	2f 5f       	subi	r18, 0xFF	; 255
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	2f 73       	andi	r18, 0x3F	; 63
     c4a:	33 27       	eor	r19, r19
     c4c:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:404
  return d;
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:395
    return -1;
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:405
}
     c58:	08 95       	ret

00000c5a <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:416

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	dc 01       	movw	r26, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:417
  if (_tx_delay == 0) {
     c66:	5c 96       	adiw	r26, 0x1c	; 28
     c68:	4d 91       	ld	r20, X+
     c6a:	5c 91       	ld	r21, X
     c6c:	5d 97       	sbiw	r26, 0x1d	; 29
     c6e:	41 15       	cp	r20, r1
     c70:	51 05       	cpc	r21, r1
     c72:	71 f4       	brne	.+28     	; 0xc90 <SoftwareSerial::write(unsigned char)+0x36>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:41
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	13 96       	adiw	r26, 0x03	; 3
     c7a:	9c 93       	st	X, r25
     c7c:	8e 93       	st	-X, r24
     c7e:	12 97       	sbiw	r26, 0x02	; 2
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:419
    setWriteError();
    return 0;
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:468

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:426
  volatile uint8_t *reg = _transmitPortRegister;
     c90:	51 96       	adiw	r26, 0x11	; 17
     c92:	ed 91       	ld	r30, X+
     c94:	fc 91       	ld	r31, X
     c96:	52 97       	sbiw	r26, 0x12	; 18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:427
  uint8_t reg_mask = _transmitBitMask;
     c98:	50 96       	adiw	r26, 0x10	; 16
     c9a:	8c 91       	ld	r24, X
     c9c:	50 97       	sbiw	r26, 0x10	; 16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:428
  uint8_t inv_mask = ~_transmitBitMask;
     c9e:	98 2f       	mov	r25, r24
     ca0:	90 95       	com	r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:429
  uint8_t oldSREG = SREG;
     ca2:	1f b7       	in	r17, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:430
  bool inv = _inverse_logic;
     ca4:	5e 96       	adiw	r26, 0x1e	; 30
     ca6:	2c 91       	ld	r18, X
     ca8:	5e 97       	sbiw	r26, 0x1e	; 30
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:433
  if (inv)
     caa:	02 2f       	mov	r16, r18
     cac:	02 70       	andi	r16, 0x02	; 2
     cae:	21 fd       	sbrc	r18, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:434
    b = ~b;
     cb0:	60 95       	com	r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:436
  cli();  // turn off interrupts for a clean txmit
     cb2:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
     cb4:	20 81       	ld	r18, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:439
  if (inv)
     cb6:	00 23       	and	r16, r16
     cb8:	c1 f0       	breq	.+48     	; 0xcea <SoftwareSerial::write(unsigned char)+0x90>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
     cba:	28 2b       	or	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
     cbc:	20 83       	st	Z, r18
/usr/avr/include/util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     cbe:	ea 01       	movw	r28, r20
     cc0:	21 97       	sbiw	r28, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <SoftwareSerial::write(unsigned char)+0x66>
     cc4:	39 e0       	ldi	r19, 0x09	; 9
     cc6:	f3 2e       	mov	r15, r19
     cc8:	fa 94       	dec	r15
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:447
  for (uint8_t i = 8; i > 0; --i)
     cca:	ff 20       	and	r15, r15
     ccc:	99 f0       	breq	.+38     	; 0xcf4 <SoftwareSerial::write(unsigned char)+0x9a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:449
    if (b & 1) // choose bit
     cce:	26 2f       	mov	r18, r22
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	60 ff       	sbrs	r22, 0
     cd4:	0c c0       	rjmp	.+24     	; 0xcee <SoftwareSerial::write(unsigned char)+0x94>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:450
      *reg |= reg_mask; // send 1
     cd6:	60 81       	ld	r22, Z
     cd8:	68 2b       	or	r22, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
     cda:	60 83       	st	Z, r22
/usr/avr/include/util/delay_basic.h:110
     cdc:	ea 01       	movw	r28, r20
     cde:	21 97       	sbiw	r28, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <SoftwareSerial::write(unsigned char)+0x84>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:455
    b >>= 1;
     ce2:	b9 01       	movw	r22, r18
     ce4:	75 95       	asr	r23
     ce6:	67 95       	ror	r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:447
  for (uint8_t i = 8; i > 0; --i)
     ce8:	ef cf       	rjmp	.-34     	; 0xcc8 <SoftwareSerial::write(unsigned char)+0x6e>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
     cea:	29 23       	and	r18, r25
     cec:	e7 cf       	rjmp	.-50     	; 0xcbc <SoftwareSerial::write(unsigned char)+0x62>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
     cee:	60 81       	ld	r22, Z
     cf0:	69 23       	and	r22, r25
     cf2:	f3 cf       	rjmp	.-26     	; 0xcda <SoftwareSerial::write(unsigned char)+0x80>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:459
  if (inv)
     cf4:	00 23       	and	r16, r16
     cf6:	69 f0       	breq	.+26     	; 0xd12 <SoftwareSerial::write(unsigned char)+0xb8>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:460
    *reg &= inv_mask;
     cf8:	80 81       	ld	r24, Z
     cfa:	98 23       	and	r25, r24
     cfc:	90 83       	st	Z, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:464
  SREG = oldSREG; // turn interrupts back on
     cfe:	1f bf       	out	0x3f, r17	; 63
/usr/avr/include/util/delay_basic.h:110
     d00:	5c 96       	adiw	r26, 0x1c	; 28
     d02:	8d 91       	ld	r24, X+
     d04:	9c 91       	ld	r25, X
     d06:	5d 97       	sbiw	r26, 0x1d	; 29
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <SoftwareSerial::write(unsigned char)+0xae>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:467
  return 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	b9 cf       	rjmp	.-142    	; 0xc84 <SoftwareSerial::write(unsigned char)+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:462
    *reg |= reg_mask;
     d12:	90 81       	ld	r25, Z
     d14:	89 2b       	or	r24, r25
     d16:	80 83       	st	Z, r24
     d18:	f2 cf       	rjmp	.-28     	; 0xcfe <SoftwareSerial::write(unsigned char)+0xa4>

00000d1a <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:471

void SoftwareSerial::flush()
{
     d1a:	08 95       	ret

00000d1c <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:477
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
     d1c:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <SoftwareSerial::active_object>
     d20:	30 91 ea 03 	lds	r19, 0x03EA	; 0x8003ea <SoftwareSerial::active_object+0x1>
     d24:	28 17       	cp	r18, r24
     d26:	39 07       	cpc	r19, r25
     d28:	71 f4       	brne	.+28     	; 0xd46 <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:481
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
     d2a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <SoftwareSerial::_receive_buffer_head>
     d2e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <SoftwareSerial::_receive_buffer_tail>
     d32:	98 17       	cp	r25, r24
     d34:	41 f0       	breq	.+16     	; 0xd46 <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:485
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
     d36:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <SoftwareSerial::_receive_buffer_head>
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	e7 55       	subi	r30, 0x57	; 87
     d3e:	fc 4f       	sbci	r31, 0xFC	; 252
     d40:	80 81       	ld	r24, Z
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:478
    return -1;
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:486
}
     d4a:	08 95       	ret

00000d4c <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:409
  if (!isListening())
     d4c:	20 91 e9 03 	lds	r18, 0x03E9	; 0x8003e9 <SoftwareSerial::active_object>
     d50:	30 91 ea 03 	lds	r19, 0x03EA	; 0x8003ea <SoftwareSerial::active_object+0x1>
     d54:	28 17       	cp	r18, r24
     d56:	39 07       	cpc	r19, r25
     d58:	61 f4       	brne	.+24     	; 0xd72 <SoftwareSerial::available()+0x26>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:412
  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
     d5a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <SoftwareSerial::_receive_buffer_tail>
     d5e:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <SoftwareSerial::_receive_buffer_head>
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	80 5c       	subi	r24, 0xC0	; 192
     d66:	9f 4f       	sbci	r25, 0xFF	; 255
     d68:	82 1b       	sub	r24, r18
     d6a:	91 09       	sbc	r25, r1
     d6c:	60 e4       	ldi	r22, 0x40	; 64
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	b9 c7       	rjmp	.+3954   	; 0x1ce4 <__divmodhi4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:410
    return 0;
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:413
}
     d76:	08 95       	ret

00000d78 <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:111
  if (active_object == this)
     d78:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <SoftwareSerial::active_object>
     d7c:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <SoftwareSerial::active_object+0x1>
     d80:	e8 17       	cp	r30, r24
     d82:	f9 07       	cpc	r31, r25
     d84:	69 f4       	brne	.+26     	; 0xda0 <SoftwareSerial::stopListening()+0x28>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
     d86:	a3 89       	ldd	r26, Z+19	; 0x13
     d88:	b4 89       	ldd	r27, Z+20	; 0x14
     d8a:	9c 91       	ld	r25, X
     d8c:	85 89       	ldd	r24, Z+21	; 0x15
     d8e:	80 95       	com	r24
     d90:	89 23       	and	r24, r25
     d92:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:114
    active_object = NULL;
     d94:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <SoftwareSerial::active_object+0x1>
     d98:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <SoftwareSerial::active_object>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:117
  return false;
     da0:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:118
}
     da2:	08 95       	ret

00000da4 <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:88
{
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:89
  if (!_rx_delay_stopbit)
     daa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dac:	9b 8d       	ldd	r25, Y+27	; 0x1b
     dae:	89 2b       	or	r24, r25
     db0:	f9 f0       	breq	.+62     	; 0xdf0 <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:92
  if (active_object != this)
     db2:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <SoftwareSerial::active_object>
     db6:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <SoftwareSerial::active_object+0x1>
     dba:	c8 17       	cp	r28, r24
     dbc:	d9 07       	cpc	r29, r25
     dbe:	c1 f0       	breq	.+48     	; 0xdf0 <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:94
    if (active_object)
     dc0:	00 97       	sbiw	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:95
      active_object->stopListening();
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <SoftwareSerial::listen()+0x22>
     dc4:	d9 df       	rcall	.-78     	; 0xd78 <SoftwareSerial::stopListening()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:97
    _buffer_overflow = false;
     dc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dc8:	8e 7f       	andi	r24, 0xFE	; 254
     dca:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:98
    _receive_buffer_head = _receive_buffer_tail = 0;
     dcc:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <SoftwareSerial::_receive_buffer_tail>
     dd0:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:99
    active_object = this;
     dd4:	d0 93 ea 03 	sts	0x03EA, r29	; 0x8003ea <SoftwareSerial::active_object+0x1>
     dd8:	c0 93 e9 03 	sts	0x03E9, r28	; 0x8003e9 <SoftwareSerial::active_object>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
     ddc:	eb 89       	ldd	r30, Y+19	; 0x13
     dde:	fc 89       	ldd	r31, Y+20	; 0x14
     de0:	80 81       	ld	r24, Z
     de2:	9d 89       	ldd	r25, Y+21	; 0x15
     de4:	89 2b       	or	r24, r25
     de6:	80 83       	st	Z, r24
     de8:	81 e0       	ldi	r24, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:106
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:90
    return false;
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	fb cf       	rjmp	.-10     	; 0xdea <SoftwareSerial::listen()+0x46>

00000df4 <__vector_3>:
__vector_3():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:229
{
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	ef 93       	push	r30
     e10:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:221
  if (active_object)
     e12:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <SoftwareSerial::active_object>
     e16:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <SoftwareSerial::active_object+0x1>
     e1a:	30 97       	sbiw	r30, 0x00	; 0
     e1c:	49 f0       	breq	.+18     	; 0xe30 <__vector_3+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     e1e:	86 8d       	ldd	r24, Z+30	; 0x1e
     e20:	a6 85       	ldd	r26, Z+14	; 0x0e
     e22:	b7 85       	ldd	r27, Z+15	; 0x0f
     e24:	95 85       	ldd	r25, Z+13	; 0x0d
     e26:	81 ff       	sbrs	r24, 1
     e28:	12 c0       	rjmp	.+36     	; 0xe4e <__vector_3+0x5a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
     e2a:	8c 91       	ld	r24, X
     e2c:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     e2e:	91 f4       	brne	.+36     	; 0xe54 <__vector_3+0x60>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
     e30:	ff 91       	pop	r31
     e32:	ef 91       	pop	r30
     e34:	bf 91       	pop	r27
     e36:	af 91       	pop	r26
     e38:	9f 91       	pop	r25
     e3a:	8f 91       	pop	r24
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
     e4e:	8c 91       	ld	r24, X
     e50:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
     e52:	71 f7       	brne	.-36     	; 0xe30 <__vector_3+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
     e54:	a3 89       	ldd	r26, Z+19	; 0x13
     e56:	b4 89       	ldd	r27, Z+20	; 0x14
     e58:	9c 91       	ld	r25, X
     e5a:	85 89       	ldd	r24, Z+21	; 0x15
     e5c:	80 95       	com	r24
     e5e:	89 23       	and	r24, r25
     e60:	8c 93       	st	X, r24
/usr/avr/include/util/delay_basic.h:110
     e62:	86 89       	ldd	r24, Z+22	; 0x16
     e64:	97 89       	ldd	r25, Z+23	; 0x17
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <__vector_3+0x72>
     e6a:	39 e0       	ldi	r19, 0x09	; 9
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:142
  uint8_t d = 0;
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	31 50       	subi	r19, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:158
    for (uint8_t i=8; i > 0; --i)
     e70:	89 f0       	breq	.+34     	; 0xe94 <__vector_3+0xa0>
/usr/avr/include/util/delay_basic.h:110
     e72:	80 8d       	ldd	r24, Z+24	; 0x18
     e74:	91 8d       	ldd	r25, Z+25	; 0x19
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <__vector_3+0x82>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:161
      d >>= 1;
     e7a:	82 2f       	mov	r24, r18
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	95 95       	asr	r25
     e80:	87 95       	ror	r24
     e82:	28 2f       	mov	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
     e84:	a6 85       	ldd	r26, Z+14	; 0x0e
     e86:	b7 85       	ldd	r27, Z+15	; 0x0f
     e88:	4c 91       	ld	r20, X
     e8a:	55 85       	ldd	r21, Z+13	; 0x0d
     e8c:	45 23       	and	r20, r21
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:163
      if (rx_pin_read())
     e8e:	79 f3       	breq	.-34     	; 0xe6e <__vector_3+0x7a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:164
        d |= 0x80;
     e90:	20 68       	ori	r18, 0x80	; 128
     e92:	ed cf       	rjmp	.-38     	; 0xe6e <__vector_3+0x7a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:167
    if (_inverse_logic)
     e94:	86 8d       	ldd	r24, Z+30	; 0x1e
     e96:	81 fd       	sbrc	r24, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:168
      d = ~d;
     e98:	20 95       	com	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:171
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
     e9a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <SoftwareSerial::_receive_buffer_tail>
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	8f 73       	andi	r24, 0x3F	; 63
     ea4:	99 27       	eor	r25, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:172
    if (next != _receive_buffer_head)
     ea6:	30 91 a7 03 	lds	r19, 0x03A7	; 0x8003a7 <SoftwareSerial::_receive_buffer_head>
     eaa:	38 17       	cp	r19, r24
     eac:	99 f0       	breq	.+38     	; 0xed4 <__vector_3+0xe0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:175
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
     eae:	a0 91 a8 03 	lds	r26, 0x03A8	; 0x8003a8 <SoftwareSerial::_receive_buffer_tail>
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	a7 55       	subi	r26, 0x57	; 87
     eb6:	bc 4f       	sbci	r27, 0xFC	; 252
     eb8:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:176
      _receive_buffer_tail = next;
     eba:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <SoftwareSerial::_receive_buffer_tail>
/usr/avr/include/util/delay_basic.h:110
     ebe:	82 8d       	ldd	r24, Z+26	; 0x1a
     ec0:	93 8d       	ldd	r25, Z+27	; 0x1b
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <__vector_3+0xce>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
     ec6:	a3 89       	ldd	r26, Z+19	; 0x13
     ec8:	b4 89       	ldd	r27, Z+20	; 0x14
     eca:	8c 91       	ld	r24, X
     ecc:	95 89       	ldd	r25, Z+21	; 0x15
     ece:	89 2b       	or	r24, r25
     ed0:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
     ed2:	ae cf       	rjmp	.-164    	; 0xe30 <__vector_3+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:181
      _buffer_overflow = true;
     ed4:	86 8d       	ldd	r24, Z+30	; 0x1e
     ed6:	81 60       	ori	r24, 0x01	; 1
     ed8:	86 8f       	std	Z+30, r24	; 0x1e
     eda:	f1 cf       	rjmp	.-30     	; 0xebe <__vector_3+0xca>

00000edc <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:264
SoftwareSerial::~SoftwareSerial()
     edc:	29 e4       	ldi	r18, 0x49	; 73
     ede:	32 e0       	ldi	r19, 0x02	; 2
     ee0:	fc 01       	movw	r30, r24
     ee2:	31 83       	std	Z+1, r19	; 0x01
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:387
  stopListening();
     ee4:	20 83       	st	Z, r18
     ee6:	48 cf       	rjmp	.-368    	; 0xd78 <SoftwareSerial::stopListening()>

00000ee8 <SoftwareSerial::setTX(unsigned char)>:
_ZN14SoftwareSerial5setTXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:270
{
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	ec 01       	movw	r28, r24
     ef0:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:275
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
     ef2:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ef4:	66 95       	lsr	r22
     ef6:	61 70       	andi	r22, 0x01	; 1
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	68 27       	eor	r22, r24
     efc:	81 2f       	mov	r24, r17
     efe:	58 d2       	rcall	.+1200   	; 0x13b0 <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:276
  pinMode(tx, OUTPUT);
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	81 2f       	mov	r24, r17
     f04:	19 d2       	rcall	.+1074   	; 0x1338 <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:277
  _transmitBitMask = digitalPinToBitMask(tx);
     f06:	81 2f       	mov	r24, r17
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	fc 01       	movw	r30, r24
     f0c:	e4 58       	subi	r30, 0x84	; 132
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	e4 91       	lpm	r30, Z
     f12:	e8 8b       	std	Y+16, r30	; 0x10
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:278
  uint8_t port = digitalPinToPort(tx);
     f14:	fc 01       	movw	r30, r24
     f16:	e0 57       	subi	r30, 0x70	; 112
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:279
  _transmitPortRegister = portOutputRegister(port);
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	e2 55       	subi	r30, 0x52	; 82
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	85 91       	lpm	r24, Z+
     f28:	94 91       	lpm	r25, Z
     f2a:	9a 8b       	std	Y+18, r25	; 0x12
     f2c:	89 8b       	std	Y+17, r24	; 0x11
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:280
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	08 95       	ret

00000f36 <SoftwareSerial::setRX(unsigned char)>:
_ZN14SoftwareSerial5setRXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:283
{
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	ec 01       	movw	r28, r24
     f3e:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:284
  pinMode(rx, INPUT);
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	81 2f       	mov	r24, r17
     f44:	f9 d1       	rcall	.+1010   	; 0x1338 <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:285
  if (!_inverse_logic)
     f46:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f48:	81 fd       	sbrc	r24, 1
     f4a:	03 c0       	rjmp	.+6      	; 0xf52 <SoftwareSerial::setRX(unsigned char)+0x1c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:286
    digitalWrite(rx, HIGH);  // pullup for normal logic!
     f4c:	61 e0       	ldi	r22, 0x01	; 1
     f4e:	81 2f       	mov	r24, r17
     f50:	2f d2       	rcall	.+1118   	; 0x13b0 <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:287
  _receivePin = rx;
     f52:	1c 87       	std	Y+12, r17	; 0x0c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:288
  _receiveBitMask = digitalPinToBitMask(rx);
     f54:	81 2f       	mov	r24, r17
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	fc 01       	movw	r30, r24
     f5a:	e4 58       	subi	r30, 0x84	; 132
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	e4 91       	lpm	r30, Z
     f60:	ed 87       	std	Y+13, r30	; 0x0d
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:289
  uint8_t port = digitalPinToPort(rx);
     f62:	fc 01       	movw	r30, r24
     f64:	e0 57       	subi	r30, 0x70	; 112
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:290
  _receivePortRegister = portInputRegister(port);
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	ec 55       	subi	r30, 0x5C	; 92
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	85 91       	lpm	r24, Z+
     f76:	94 91       	lpm	r25, Z
     f78:	9f 87       	std	Y+15, r25	; 0x0f
     f7a:	8e 87       	std	Y+14, r24	; 0x0e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:291
}
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	1f 91       	pop	r17
     f82:	08 95       	ret

00000f84 <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>:
_ZN14SoftwareSerialC2Ehhb():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:249
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	ec 01       	movw	r28, r24
     f8c:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:43
  public:
    Print() : write_error(0) {}
     f8e:	1b 82       	std	Y+3, r1	; 0x03
     f90:	1a 82       	std	Y+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     f92:	88 ee       	ldi	r24, 0xE8	; 232
     f94:	93 e0       	ldi	r25, 0x03	; 3
     f96:	a0 e0       	ldi	r26, 0x00	; 0
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	8c 83       	std	Y+4, r24	; 0x04
     f9c:	9d 83       	std	Y+5, r25	; 0x05
     f9e:	ae 83       	std	Y+6, r26	; 0x06
     fa0:	bf 83       	std	Y+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:255
  _inverse_logic(inverse_logic)
     fa2:	89 e4       	ldi	r24, 0x49	; 73
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	99 83       	std	Y+1, r25	; 0x01
     fa8:	88 83       	st	Y, r24
     faa:	1f 8a       	std	Y+23, r1	; 0x17
     fac:	1e 8a       	std	Y+22, r1	; 0x16
     fae:	19 8e       	std	Y+25, r1	; 0x19
     fb0:	18 8e       	std	Y+24, r1	; 0x18
     fb2:	1b 8e       	std	Y+27, r1	; 0x1b
     fb4:	1a 8e       	std	Y+26, r1	; 0x1a
     fb6:	1d 8e       	std	Y+29, r1	; 0x1d
     fb8:	1c 8e       	std	Y+28, r1	; 0x1c
     fba:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fbc:	8e 7f       	andi	r24, 0xFE	; 254
     fbe:	20 fb       	bst	r18, 0
     fc0:	81 f9       	bld	r24, 1
     fc2:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:257
  setTX(transmitPin);
     fc4:	64 2f       	mov	r22, r20
     fc6:	ce 01       	movw	r24, r28
     fc8:	8f df       	rcall	.-226    	; 0xee8 <SoftwareSerial::setTX(unsigned char)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
     fca:	61 2f       	mov	r22, r17
     fcc:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:259
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
     fd2:	1f 91       	pop	r17
     fd4:	b0 cf       	rjmp	.-160    	; 0xf36 <SoftwareSerial::setRX(unsigned char)>

00000fd6 <SoftwareSerial::begin(long)>:
_ZN14SoftwareSerial5beginEl():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:305
{
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
     fdc:	9a 01       	movw	r18, r20
     fde:	ab 01       	movw	r20, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:306
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     fe0:	1b 8e       	std	Y+27, r1	; 0x1b
     fe2:	1a 8e       	std	Y+26, r1	; 0x1a
     fe4:	19 8e       	std	Y+25, r1	; 0x19
     fe6:	18 8e       	std	Y+24, r1	; 0x18
     fe8:	1f 8a       	std	Y+23, r1	; 0x17
     fea:	1e 8a       	std	Y+22, r1	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:309
  uint16_t bit_delay = (F_CPU / speed) / 4;
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	79 e0       	ldi	r23, 0x09	; 9
     ff0:	8d e3       	ldi	r24, 0x3D	; 61
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	ac d6       	rcall	.+3416   	; 0x1d4e <__divmodsi4>
     ff6:	f9 01       	movw	r30, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
     ff8:	24 30       	cpi	r18, 0x04	; 4
     ffa:	31 05       	cpc	r19, r1
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <SoftwareSerial::begin(long)+0x2a>
     ffe:	60 c0       	rjmp	.+192    	; 0x10c0 <SoftwareSerial::begin(long)+0xea>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    1000:	c9 01       	movw	r24, r18
    1002:	03 97       	sbiw	r24, 0x03	; 3
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:316
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    1004:	9d 8f       	std	Y+29, r25	; 0x1d
    1006:	8c 8f       	std	Y+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:319
  if (digitalPinToPCICR(_receivePin)) {
    1008:	6c 85       	ldd	r22, Y+12	; 0x0c
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	66 31       	cpi	r22, 0x16	; 22
    100e:	71 05       	cpc	r23, r1
    1010:	0c f0       	brlt	.+2      	; 0x1014 <SoftwareSerial::begin(long)+0x3e>
    1012:	52 c0       	rjmp	.+164    	; 0x10b8 <SoftwareSerial::begin(long)+0xe2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1014:	c9 01       	movw	r24, r18
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    101a:	84 31       	cpi	r24, 0x14	; 20
    101c:	91 05       	cpc	r25, r1
    101e:	08 f4       	brcc	.+2      	; 0x1022 <SoftwareSerial::begin(long)+0x4c>
    1020:	52 c0       	rjmp	.+164    	; 0x10c6 <SoftwareSerial::begin(long)+0xf0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    1022:	43 97       	sbiw	r24, 0x13	; 19
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    1024:	9f 8b       	std	Y+23, r25	; 0x17
    1026:	8e 8b       	std	Y+22, r24	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    1028:	36 97       	sbiw	r30, 0x06	; 6
    102a:	08 f4       	brcc	.+2      	; 0x102e <SoftwareSerial::begin(long)+0x58>
    102c:	4f c0       	rjmp	.+158    	; 0x10cc <SoftwareSerial::begin(long)+0xf6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    102e:	c9 01       	movw	r24, r18
    1030:	05 97       	sbiw	r24, 0x05	; 5
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:337
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    1032:	99 8f       	std	Y+25, r25	; 0x19
    1034:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1036:	c9 01       	movw	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	28 0f       	add	r18, r24
    103e:	39 1f       	adc	r19, r25
    1040:	36 95       	lsr	r19
    1042:	27 95       	ror	r18
    1044:	36 95       	lsr	r19
    1046:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    1048:	2d 30       	cpi	r18, 0x0D	; 13
    104a:	31 05       	cpc	r19, r1
    104c:	08 f4       	brcc	.+2      	; 0x1050 <SoftwareSerial::begin(long)+0x7a>
    104e:	41 c0       	rjmp	.+130    	; 0x10d2 <SoftwareSerial::begin(long)+0xfc>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    1050:	2c 50       	subi	r18, 0x0C	; 12
    1052:	31 09       	sbc	r19, r1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1054:	3b 8f       	std	Y+27, r19	; 0x1b
    1056:	2a 8f       	std	Y+26, r18	; 0x1a
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:360
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1058:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    105c:	68 30       	cpi	r22, 0x08	; 8
    105e:	71 05       	cpc	r23, r1
    1060:	dc f1       	brlt	.+118    	; 0x10d8 <SoftwareSerial::begin(long)+0x102>
    1062:	31 e0       	ldi	r19, 0x01	; 1
    1064:	6e 30       	cpi	r22, 0x0E	; 14
    1066:	71 05       	cpc	r23, r1
    1068:	0c f4       	brge	.+2      	; 0x106c <SoftwareSerial::begin(long)+0x96>
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <SoftwareSerial::begin(long)+0x9e>
    1072:	88 0f       	add	r24, r24
    1074:	3a 95       	dec	r19
    1076:	ea f7       	brpl	.-6      	; 0x1072 <SoftwareSerial::begin(long)+0x9c>
    1078:	82 2b       	or	r24, r18
    107a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:363
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    107e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1080:	84 2f       	mov	r24, r20
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	88 30       	cpi	r24, 0x08	; 8
    1086:	91 05       	cpc	r25, r1
    1088:	54 f1       	brlt	.+84     	; 0x10de <SoftwareSerial::begin(long)+0x108>
    108a:	8e 30       	cpi	r24, 0x0E	; 14
    108c:	91 05       	cpc	r25, r1
    108e:	54 f1       	brlt	.+84     	; 0x10e4 <SoftwareSerial::begin(long)+0x10e>
    1090:	86 31       	cpi	r24, 0x16	; 22
    1092:	91 05       	cpc	r25, r1
    1094:	54 f1       	brlt	.+84     	; 0x10ea <SoftwareSerial::begin(long)+0x114>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3c 8b       	std	Y+20, r19	; 0x14
    109c:	2b 8b       	std	Y+19, r18	; 0x13
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    109e:	88 30       	cpi	r24, 0x08	; 8
    10a0:	91 05       	cpc	r25, r1
    10a2:	34 f5       	brge	.+76     	; 0x10f0 <SoftwareSerial::begin(long)+0x11a>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <SoftwareSerial::begin(long)+0xd4>
    10a8:	88 0f       	add	r24, r24
    10aa:	4a 95       	dec	r20
    10ac:	ea f7       	brpl	.-6      	; 0x10a8 <SoftwareSerial::begin(long)+0xd2>
    10ae:	8d 8b       	std	Y+21, r24	; 0x15
/usr/avr/include/util/delay_basic.h:110
    10b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <SoftwareSerial::begin(long)+0xde>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    10b8:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:375
}
    10ba:	df 91       	pop	r29
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    10bc:	cf 91       	pop	r28
    10be:	72 ce       	rjmp	.-796    	; 0xda4 <SoftwareSerial::listen()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:297
    return 1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9f cf       	rjmp	.-194    	; 0x1004 <SoftwareSerial::begin(long)+0x2e>
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	ac cf       	rjmp	.-168    	; 0x1024 <SoftwareSerial::begin(long)+0x4e>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	b0 cf       	rjmp	.-160    	; 0x1032 <SoftwareSerial::begin(long)+0x5c>
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	be cf       	rjmp	.-132    	; 0x1054 <SoftwareSerial::begin(long)+0x7e>
    10d8:	84 e0       	ldi	r24, 0x04	; 4
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	cd cf       	rjmp	.-102    	; 0x1078 <SoftwareSerial::begin(long)+0xa2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:363
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    10de:	2d e6       	ldi	r18, 0x6D	; 109
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	db cf       	rjmp	.-74     	; 0x109a <SoftwareSerial::begin(long)+0xc4>
    10e4:	2b e6       	ldi	r18, 0x6B	; 107
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	d8 cf       	rjmp	.-80     	; 0x109a <SoftwareSerial::begin(long)+0xc4>
    10ea:	2c e6       	ldi	r18, 0x6C	; 108
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	d5 cf       	rjmp	.-86     	; 0x109a <SoftwareSerial::begin(long)+0xc4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    10f0:	9c 01       	movw	r18, r24
    10f2:	0e 97       	sbiw	r24, 0x0e	; 14
    10f4:	44 f4       	brge	.+16     	; 0x1106 <SoftwareSerial::begin(long)+0x130>
    10f6:	28 50       	subi	r18, 0x08	; 8
    10f8:	31 09       	sbc	r19, r1
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <SoftwareSerial::begin(long)+0x12a>
    10fe:	88 0f       	add	r24, r24
    1100:	2a 95       	dec	r18
    1102:	ea f7       	brpl	.-6      	; 0x10fe <SoftwareSerial::begin(long)+0x128>
    1104:	d4 cf       	rjmp	.-88     	; 0x10ae <SoftwareSerial::begin(long)+0xd8>
    1106:	2e 50       	subi	r18, 0x0E	; 14
    1108:	31 09       	sbc	r19, r1
    110a:	f7 cf       	rjmp	.-18     	; 0x10fa <SoftwareSerial::begin(long)+0x124>

0000110c <__vector_16>:
__vector_16():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:47
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	8f 93       	push	r24
    111c:	9f 93       	push	r25
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:50
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1122:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <timer0_millis>
    1126:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <timer0_millis+0x1>
    112a:	a0 91 ee 03 	lds	r26, 0x03EE	; 0x8003ee <timer0_millis+0x2>
    112e:	b0 91 ef 03 	lds	r27, 0x03EF	; 0x8003ef <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:51
	unsigned char f = timer0_fract;
    1132:	30 91 eb 03 	lds	r19, 0x03EB	; 0x8003eb <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:54

	m += MILLIS_INC;
	f += FRACT_INC;
    1136:	23 e0       	ldi	r18, 0x03	; 3
    1138:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:55
	if (f >= FRACT_MAX) {
    113a:	2d 37       	cpi	r18, 0x7D	; 125
    113c:	58 f5       	brcc	.+86     	; 0x1194 <__vector_16+0x88>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:53
	m += MILLIS_INC;
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	a1 1d       	adc	r26, r1
    1142:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:60
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
    1144:	20 93 eb 03 	sts	0x03EB, r18	; 0x8003eb <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:61
	timer0_millis = m;
    1148:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <timer0_millis>
    114c:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <timer0_millis+0x1>
    1150:	a0 93 ee 03 	sts	0x03EE, r26	; 0x8003ee <timer0_millis+0x2>
    1154:	b0 93 ef 03 	sts	0x03EF, r27	; 0x8003ef <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:62
	timer0_overflow_count++;
    1158:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <timer0_overflow_count>
    115c:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <timer0_overflow_count+0x1>
    1160:	a0 91 f2 03 	lds	r26, 0x03F2	; 0x8003f2 <timer0_overflow_count+0x2>
    1164:	b0 91 f3 03 	lds	r27, 0x03F3	; 0x8003f3 <timer0_overflow_count+0x3>
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	a1 1d       	adc	r26, r1
    116c:	b1 1d       	adc	r27, r1
    116e:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <timer0_overflow_count>
    1172:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <timer0_overflow_count+0x1>
    1176:	a0 93 f2 03 	sts	0x03F2, r26	; 0x8003f2 <timer0_overflow_count+0x2>
    117a:	b0 93 f3 03 	sts	0x03F3, r27	; 0x8003f3 <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:63
}
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	3f 91       	pop	r19
    1188:	2f 91       	pop	r18
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:56
		f -= FRACT_MAX;
    1194:	26 e8       	ldi	r18, 0x86	; 134
    1196:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:57
		m += 1;
    1198:	02 96       	adiw	r24, 0x02	; 2
    119a:	a1 1d       	adc	r26, r1
    119c:	b1 1d       	adc	r27, r1
    119e:	d2 cf       	rjmp	.-92     	; 0x1144 <__vector_16+0x38>

000011a0 <millis>:
millis():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:68

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    11a0:	2f b7       	in	r18, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    11a2:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:73
	m = timer0_millis;
    11a4:	60 91 ec 03 	lds	r22, 0x03EC	; 0x8003ec <timer0_millis>
    11a8:	70 91 ed 03 	lds	r23, 0x03ED	; 0x8003ed <timer0_millis+0x1>
    11ac:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <timer0_millis+0x2>
    11b0:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:74
	SREG = oldSREG;
    11b4:	2f bf       	out	0x3f, r18	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:77

	return m;
}
    11b6:	08 95       	ret

000011b8 <micros>:
micros():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:81

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    11b8:	3f b7       	in	r19, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:83
	
	cli();
    11ba:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:84
	m = timer0_overflow_count;
    11bc:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <timer0_overflow_count>
    11c0:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <timer0_overflow_count+0x1>
    11c4:	a0 91 f2 03 	lds	r26, 0x03F2	; 0x8003f2 <timer0_overflow_count+0x2>
    11c8:	b0 91 f3 03 	lds	r27, 0x03F3	; 0x8003f3 <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:86
#if defined(TCNT0)
	t = TCNT0;
    11cc:	26 b5       	in	r18, 0x26	; 38
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:94
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    11ce:	a8 9b       	sbis	0x15, 0	; 21
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <micros+0x24>
    11d2:	2f 3f       	cpi	r18, 0xFF	; 255
    11d4:	19 f0       	breq	.+6      	; 0x11dc <micros+0x24>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:95
		m++;
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	a1 1d       	adc	r26, r1
    11da:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:101
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    11dc:	3f bf       	out	0x3f, r19	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:103
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    11de:	ba 2f       	mov	r27, r26
    11e0:	a9 2f       	mov	r26, r25
    11e2:	98 2f       	mov	r25, r24
    11e4:	88 27       	eor	r24, r24
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	62 0f       	add	r22, r18
    11ec:	71 1d       	adc	r23, r1
    11ee:	81 1d       	adc	r24, r1
    11f0:	91 1d       	adc	r25, r1
    11f2:	42 e0       	ldi	r20, 0x02	; 2
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	88 1f       	adc	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	4a 95       	dec	r20
    11fe:	d1 f7       	brne	.-12     	; 0x11f4 <micros+0x3c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:104
}
    1200:	08 95       	ret

00001202 <delay>:
delay():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:107

void delay(unsigned long ms)
{
    1202:	8f 92       	push	r8
    1204:	9f 92       	push	r9
    1206:	af 92       	push	r10
    1208:	bf 92       	push	r11
    120a:	cf 92       	push	r12
    120c:	df 92       	push	r13
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	6b 01       	movw	r12, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:108
	uint32_t start = micros();
    1214:	7c 01       	movw	r14, r24
    1216:	d0 df       	rcall	.-96     	; 0x11b8 <micros>
    1218:	4b 01       	movw	r8, r22
    121a:	5c 01       	movw	r10, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:110

	while (ms > 0) {
    121c:	c1 14       	cp	r12, r1
    121e:	d1 04       	cpc	r13, r1
    1220:	e1 04       	cpc	r14, r1
    1222:	f1 04       	cpc	r15, r1
    1224:	49 f4       	brne	.+18     	; 0x1238 <delay+0x36>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:117
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	9f 90       	pop	r9
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:111
		yield();
    1234:	8f 90       	pop	r8
    1236:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    1238:	e8 d0       	rcall	.+464    	; 0x140a <yield>
    123a:	be df       	rcall	.-132    	; 0x11b8 <micros>
    123c:	68 19       	sub	r22, r8
    123e:	79 09       	sbc	r23, r9
    1240:	8a 09       	sbc	r24, r10
    1242:	9b 09       	sbc	r25, r11
    1244:	68 3e       	cpi	r22, 0xE8	; 232
    1246:	73 40       	sbci	r23, 0x03	; 3
    1248:	81 05       	cpc	r24, r1
    124a:	91 05       	cpc	r25, r1
    124c:	38 f3       	brcs	.-50     	; 0x121c <delay+0x1a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:113
			ms--;
    124e:	21 e0       	ldi	r18, 0x01	; 1
    1250:	c2 1a       	sub	r12, r18
    1252:	d1 08       	sbc	r13, r1
    1254:	e1 08       	sbc	r14, r1
    1256:	f1 08       	sbc	r15, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:114
			start += 1000;
    1258:	88 ee       	ldi	r24, 0xE8	; 232
    125a:	88 0e       	add	r8, r24
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	98 1e       	adc	r9, r24
    1260:	a1 1c       	adc	r10, r1
    1262:	b1 1c       	adc	r11, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    1264:	c1 14       	cp	r12, r1
    1266:	d1 04       	cpc	r13, r1
    1268:	e1 04       	cpc	r14, r1
    126a:	f1 04       	cpc	r15, r1
    126c:	31 f7       	brne	.-52     	; 0x123a <delay+0x38>
    126e:	d6 cf       	rjmp	.-84     	; 0x121c <delay+0x1a>

00001270 <init>:
init():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:245

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1270:	78 94       	sei
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:251
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1272:	84 b5       	in	r24, 0x24	; 36
    1274:	82 60       	ori	r24, 0x02	; 2
    1276:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:252
	sbi(TCCR0A, WGM00);
    1278:	84 b5       	in	r24, 0x24	; 36
    127a:	81 60       	ori	r24, 0x01	; 1
    127c:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:265
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    127e:	85 b5       	in	r24, 0x25	; 37
    1280:	82 60       	ori	r24, 0x02	; 2
    1282:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:266
	sbi(TCCR0B, CS00);
    1284:	85 b5       	in	r24, 0x25	; 37
    1286:	81 60       	ori	r24, 0x01	; 1
    1288:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:279

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    128a:	ee e6       	ldi	r30, 0x6E	; 110
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:290
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1294:	e1 e8       	ldi	r30, 0x81	; 129
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:293

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    129a:	80 81       	ld	r24, Z
    129c:	82 60       	ori	r24, 0x02	; 2
    129e:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:295
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    12a0:	80 81       	ld	r24, Z
    12a2:	81 60       	ori	r24, 0x01	; 1
    12a4:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:305
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12a6:	e0 e8       	ldi	r30, 0x80	; 128
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	81 60       	ori	r24, 0x01	; 1
    12ae:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:312

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    12b0:	e1 eb       	ldi	r30, 0xB1	; 177
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	84 60       	ori	r24, 0x04	; 4
    12b8:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:321

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    12ba:	e0 eb       	ldi	r30, 0xB0	; 176
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	81 60       	ori	r24, 0x01	; 1
    12c2:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:356
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    12c4:	ea e7       	ldi	r30, 0x7A	; 122
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	84 60       	ori	r24, 0x04	; 4
    12cc:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:357
		sbi(ADCSRA, ADPS1);
    12ce:	80 81       	ld	r24, Z
    12d0:	82 60       	ori	r24, 0x02	; 2
    12d2:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:358
		sbi(ADCSRA, ADPS0);
    12d4:	80 81       	ld	r24, Z
    12d6:	81 60       	ori	r24, 0x01	; 1
    12d8:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:381
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    12da:	80 81       	ld	r24, Z
    12dc:	80 68       	ori	r24, 0x80	; 128
    12de:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:390
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    12e0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12e4:	08 95       	ret

000012e6 <turnOffPWM>:
turnOffPWM():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    12e6:	83 30       	cpi	r24, 0x03	; 3
    12e8:	81 f0       	breq	.+32     	; 0x130a <turnOffPWM+0x24>
    12ea:	28 f4       	brcc	.+10     	; 0x12f6 <turnOffPWM+0x10>
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	99 f0       	breq	.+38     	; 0x1316 <turnOffPWM+0x30>
    12f0:	82 30       	cpi	r24, 0x02	; 2
    12f2:	a9 f0       	breq	.+42     	; 0x131e <turnOffPWM+0x38>
    12f4:	08 95       	ret
    12f6:	87 30       	cpi	r24, 0x07	; 7
    12f8:	a9 f0       	breq	.+42     	; 0x1324 <turnOffPWM+0x3e>
    12fa:	88 30       	cpi	r24, 0x08	; 8
    12fc:	c9 f0       	breq	.+50     	; 0x1330 <turnOffPWM+0x4a>
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	b1 f4       	brne	.+44     	; 0x132e <turnOffPWM+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1302:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1306:	8f 7d       	andi	r24, 0xDF	; 223
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <turnOffPWM+0x2a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:80
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    130a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    130e:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1310:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1314:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:94
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1316:	84 b5       	in	r24, 0x24	; 36
    1318:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:98
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    131a:	84 bd       	out	0x24, r24	; 36
    131c:	08 95       	ret
    131e:	84 b5       	in	r24, 0x24	; 36
    1320:	8f 7d       	andi	r24, 0xDF	; 223
    1322:	fb cf       	rjmp	.-10     	; 0x131a <turnOffPWM+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:101
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1324:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1328:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    132a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    132e:	08 95       	ret
    1330:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1334:	8f 7d       	andi	r24, 0xDF	; 223
    1336:	f9 cf       	rjmp	.-14     	; 0x132a <turnOffPWM+0x44>

00001338 <pinMode>:
pinMode():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:30
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:31
	uint8_t bit = digitalPinToBitMask(pin);
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	fc 01       	movw	r30, r24
    1340:	e4 58       	subi	r30, 0x84	; 132
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	24 91       	lpm	r18, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:32
	uint8_t port = digitalPinToPort(pin);
    1346:	80 57       	subi	r24, 0x70	; 112
    1348:	9f 4f       	sbci	r25, 0xFF	; 255
    134a:	fc 01       	movw	r30, r24
    134c:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:35
	if (port == NOT_A_PIN) return;
    134e:	88 23       	and	r24, r24
    1350:	c9 f0       	breq	.+50     	; 0x1384 <pinMode+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:38
	reg = portModeRegister(port);
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	fc 01       	movw	r30, r24
    135a:	e8 54       	subi	r30, 0x48	; 72
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	a5 91       	lpm	r26, Z+
    1360:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:39
	out = portOutputRegister(port);
    1362:	fc 01       	movw	r30, r24
    1364:	e2 55       	subi	r30, 0x52	; 82
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	c5 91       	lpm	r28, Z+
    136a:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:41
	if (mode == INPUT) { 
    136c:	61 11       	cpse	r22, r1
    136e:	0d c0       	rjmp	.+26     	; 0x138a <pinMode+0x52>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:42
		uint8_t oldSREG = SREG;
    1370:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:43
                cli();
    1372:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:44
		*reg &= ~bit;
    1374:	8c 91       	ld	r24, X
    1376:	20 95       	com	r18
    1378:	82 23       	and	r24, r18
    137a:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:45
		*out &= ~bit;
    137c:	88 81       	ld	r24, Y
    137e:	28 23       	and	r18, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    1380:	28 83       	st	Y, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:52
		SREG = oldSREG;
    1382:	9f bf       	out	0x3f, r25	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:59
}
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:47
	} else if (mode == INPUT_PULLUP) {
    138a:	62 30       	cpi	r22, 0x02	; 2
    138c:	51 f4       	brne	.+20     	; 0x13a2 <pinMode+0x6a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:48
		uint8_t oldSREG = SREG;
    138e:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:49
                cli();
    1390:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:50
		*reg &= ~bit;
    1392:	3c 91       	ld	r19, X
    1394:	82 2f       	mov	r24, r18
    1396:	80 95       	com	r24
    1398:	83 23       	and	r24, r19
    139a:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    139c:	e8 81       	ld	r30, Y
    139e:	2e 2b       	or	r18, r30
    13a0:	ef cf       	rjmp	.-34     	; 0x1380 <pinMode+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:54
		uint8_t oldSREG = SREG;
    13a2:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:55
                cli();
    13a4:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:56
		*reg |= bit;
    13a6:	ec 91       	ld	r30, X
    13a8:	2e 2b       	or	r18, r30
    13aa:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:57
		SREG = oldSREG;
    13ac:	8f bf       	out	0x3f, r24	; 63
    13ae:	ea cf       	rjmp	.-44     	; 0x1384 <pinMode+0x4c>

000013b0 <digitalWrite>:
digitalWrite():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:139
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:140
	uint8_t timer = digitalPinToTimer(pin);
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	f9 01       	movw	r30, r18
    13be:	e8 59       	subi	r30, 0x98	; 152
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
    13c4:	f9 01       	movw	r30, r18
    13c6:	e4 58       	subi	r30, 0x84	; 132
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
    13cc:	f9 01       	movw	r30, r18
    13ce:	e0 57       	subi	r30, 0x70	; 112
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	c4 91       	lpm	r28, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:145
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    13d4:	cc 23       	and	r28, r28
    13d6:	99 f0       	breq	.+38     	; 0x13fe <digitalWrite+0x4e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:149

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13d8:	81 11       	cpse	r24, r1
    13da:	85 df       	rcall	.-246    	; 0x12e6 <turnOffPWM>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:151

	out = portOutputRegister(port);
    13dc:	ec 2f       	mov	r30, r28
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	e2 55       	subi	r30, 0x52	; 82
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	a5 91       	lpm	r26, Z+
    13ea:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:153

	uint8_t oldSREG = SREG;
    13ec:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:154
	cli();
    13ee:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157

	if (val == LOW) {
		*out &= ~bit;
    13f0:	ec 91       	ld	r30, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:156
	if (val == LOW) {
    13f2:	11 11       	cpse	r17, r1
    13f4:	08 c0       	rjmp	.+16     	; 0x1406 <digitalWrite+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157
		*out &= ~bit;
    13f6:	d0 95       	com	r29
    13f8:	de 23       	and	r29, r30
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
	} else {
		*out |= bit;
    13fa:	dc 93       	st	X, r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:162
	}

	SREG = oldSREG;
    13fc:	8f bf       	out	0x3f, r24	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:163
}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
		*out |= bit;
    1406:	de 2b       	or	r29, r30
    1408:	f8 cf       	rjmp	.-16     	; 0x13fa <digitalWrite+0x4a>

0000140a <yield>:
__empty():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/hooks.c:28
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    140a:	08 95       	ret

0000140c <String::~String()>:
_ZN6StringD2Ev():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:124
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
    140c:	fc 01       	movw	r30, r24
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	6b c5       	rjmp	.+2774   	; 0x1eea <free>

00001414 <String::invalidate()>:
_ZN6String10invalidateEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:139
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:140
	if (buffer) free(buffer);
    141a:	88 81       	ld	r24, Y
    141c:	99 81       	ldd	r25, Y+1	; 0x01
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	09 f0       	breq	.+2      	; 0x1424 <String::invalidate()+0x10>
    1422:	63 d5       	rcall	.+2758   	; 0x1eea <free>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:141
	buffer = NULL;
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	18 82       	st	Y, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:142
	capacity = len = 0;
    1428:	1d 82       	std	Y+5, r1	; 0x05
    142a:	1c 82       	std	Y+4, r1	; 0x04
    142c:	1b 82       	std	Y+3, r1	; 0x03
    142e:	1a 82       	std	Y+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:143
}
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:156
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ec 01       	movw	r28, r24
    1440:	8b 01       	movw	r16, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:157
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1442:	6f 5f       	subi	r22, 0xFF	; 255
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	88 81       	ld	r24, Y
    1448:	99 81       	ldd	r25, Y+1	; 0x01
    144a:	d8 d5       	rcall	.+2992   	; 0x1ffc <realloc>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:158
	if (newbuffer) {
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	51 f0       	breq	.+20     	; 0x1464 <String::changeBuffer(unsigned int)+0x2e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:159
		buffer = newbuffer;
    1450:	99 83       	std	Y+1, r25	; 0x01
    1452:	88 83       	st	Y, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:160
		capacity = maxStrLen;
    1454:	1b 83       	std	Y+3, r17	; 0x03
    1456:	0a 83       	std	Y+2, r16	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:161
		return 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:164
	}
	return 0;
}
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:163
	return 0;
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	f9 cf       	rjmp	.-14     	; 0x145a <String::changeBuffer(unsigned int)+0x24>

00001468 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:146
{
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:147
	if (buffer && capacity >= size) return 1;
    146e:	88 81       	ld	r24, Y
    1470:	99 81       	ldd	r25, Y+1	; 0x01
    1472:	89 2b       	or	r24, r25
    1474:	49 f0       	breq	.+18     	; 0x1488 <String::reserve(unsigned int)+0x20>
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	86 17       	cp	r24, r22
    147c:	97 07       	cpc	r25, r23
    147e:	20 f0       	brcs	.+8      	; 0x1488 <String::reserve(unsigned int)+0x20>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:149
		if (len == 0) buffer[0] = 0;
    1480:	81 e0       	ldi	r24, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:153
}
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:148
	if (changeBuffer(size)) {
    1488:	ce 01       	movw	r24, r28
    148a:	d5 df       	rcall	.-86     	; 0x1436 <String::changeBuffer(unsigned int)>
    148c:	88 23       	and	r24, r24
    148e:	c9 f3       	breq	.-14     	; 0x1482 <String::reserve(unsigned int)+0x1a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:149
		if (len == 0) buffer[0] = 0;
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	89 2b       	or	r24, r25
    1496:	a1 f7       	brne	.-24     	; 0x1480 <String::reserve(unsigned int)+0x18>
    1498:	e8 81       	ld	r30, Y
    149a:	f9 81       	ldd	r31, Y+1	; 0x01
    149c:	10 82       	st	Z, r1
    149e:	f0 cf       	rjmp	.-32     	; 0x1480 <String::reserve(unsigned int)+0x18>

000014a0 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:171
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	ec 01       	movw	r28, r24
    14ae:	7b 01       	movw	r14, r22
    14b0:	8a 01       	movw	r16, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:172
	if (!reserve(length)) {
    14b2:	ba 01       	movw	r22, r20
    14b4:	d9 df       	rcall	.-78     	; 0x1468 <String::reserve(unsigned int)>
    14b6:	81 11       	cpse	r24, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:173
		invalidate();
    14b8:	0a c0       	rjmp	.+20     	; 0x14ce <String::copy(char const*, unsigned int)+0x2e>
    14ba:	ce 01       	movw	r24, r28
    14bc:	ab df       	rcall	.-170    	; 0x1414 <String::invalidate()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:179
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    14be:	ce 01       	movw	r24, r28
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:176
	len = length;
    14ce:	1d 83       	std	Y+5, r17	; 0x05
    14d0:	0c 83       	std	Y+4, r16	; 0x04
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:177
	strcpy(buffer, cstr);
    14d2:	b7 01       	movw	r22, r14
    14d4:	88 81       	ld	r24, Y
    14d6:	99 81       	ldd	r25, Y+1	; 0x01
    14d8:	62 d6       	rcall	.+3268   	; 0x219e <strcpy>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:178
	return *this;
    14da:	f1 cf       	rjmp	.-30     	; 0x14be <String::copy(char const*, unsigned int)+0x1e>

000014dc <String::String(char const*)>:
_ZN6StringC2EPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:133
	buffer = NULL;
    14dc:	fc 01       	movw	r30, r24
    14de:	11 82       	std	Z+1, r1	; 0x01
    14e0:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:134
	capacity = 0;
    14e2:	13 82       	std	Z+3, r1	; 0x03
    14e4:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:135
	len = 0;
    14e6:	15 82       	std	Z+5, r1	; 0x05
    14e8:	14 82       	std	Z+4, r1	; 0x04
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:31
	if (cstr) copy(cstr, strlen(cstr));
    14ea:	61 15       	cp	r22, r1
    14ec:	71 05       	cpc	r23, r1
    14ee:	49 f0       	breq	.+18     	; 0x1502 <String::String(char const*)+0x26>
    14f0:	fb 01       	movw	r30, r22
    14f2:	01 90       	ld	r0, Z+
    14f4:	00 20       	and	r0, r0
    14f6:	e9 f7       	brne	.-6      	; 0x14f2 <String::String(char const*)+0x16>
    14f8:	31 97       	sbiw	r30, 0x01	; 1
    14fa:	af 01       	movw	r20, r30
    14fc:	46 1b       	sub	r20, r22
    14fe:	57 0b       	sbc	r21, r23
    1500:	cf cf       	rjmp	.-98     	; 0x14a0 <String::copy(char const*, unsigned int)>
    1502:	08 95       	ret

00001504 <String::operator=(String const&)>:
_ZN6StringaSERKS_():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:215
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	ec 01       	movw	r28, r24
    150a:	fb 01       	movw	r30, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:216
	if (this == &rhs) return *this;
    150c:	86 17       	cp	r24, r22
    150e:	97 07       	cpc	r25, r23
    1510:	41 f0       	breq	.+16     	; 0x1522 <String::operator=(String const&)+0x1e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:218
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	61 15       	cp	r22, r1
    1518:	71 05       	cpc	r23, r1
    151a:	39 f0       	breq	.+14     	; 0x152a <String::operator=(String const&)+0x26>
    151c:	44 81       	ldd	r20, Z+4	; 0x04
    151e:	55 81       	ldd	r21, Z+5	; 0x05
    1520:	bf df       	rcall	.-130    	; 0x14a0 <String::copy(char const*, unsigned int)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:222
	else invalidate();
	
	return *this;
}
    1522:	ce 01       	movw	r24, r28
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:219
	else invalidate();
    1528:	08 95       	ret
    152a:	74 df       	rcall	.-280    	; 0x1414 <String::invalidate()>
    152c:	fa cf       	rjmp	.-12     	; 0x1522 <String::operator=(String const&)+0x1e>

0000152e <String::String(String const&)>:
_ZN6StringC2ERKS_():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:133
	buffer = NULL;
    152e:	fc 01       	movw	r30, r24
    1530:	11 82       	std	Z+1, r1	; 0x01
    1532:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:134
	capacity = 0;
    1534:	13 82       	std	Z+3, r1	; 0x03
    1536:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:135
	len = 0;
    1538:	15 82       	std	Z+5, r1	; 0x05
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:37
	*this = value;
    153a:	14 82       	std	Z+4, r1	; 0x04
    153c:	e3 cf       	rjmp	.-58     	; 0x1504 <String::operator=(String const&)>

0000153e <String::operator=(char const*)>:
_ZN6StringaSEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:239
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:240
	if (cstr) copy(cstr, strlen(cstr));
    1544:	61 15       	cp	r22, r1
    1546:	71 05       	cpc	r23, r1
    1548:	69 f0       	breq	.+26     	; 0x1564 <String::operator=(char const*)+0x26>
    154a:	fb 01       	movw	r30, r22
    154c:	01 90       	ld	r0, Z+
    154e:	00 20       	and	r0, r0
    1550:	e9 f7       	brne	.-6      	; 0x154c <String::operator=(char const*)+0xe>
    1552:	31 97       	sbiw	r30, 0x01	; 1
    1554:	af 01       	movw	r20, r30
    1556:	46 1b       	sub	r20, r22
    1558:	57 0b       	sbc	r21, r23
    155a:	a2 df       	rcall	.-188    	; 0x14a0 <String::copy(char const*, unsigned int)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:244
	else invalidate();
	
	return *this;
}
    155c:	ce 01       	movw	r24, r28
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:241
	else invalidate();
    1562:	08 95       	ret
    1564:	57 df       	rcall	.-338    	; 0x1414 <String::invalidate()>
    1566:	fa cf       	rjmp	.-12     	; 0x155c <String::operator=(char const*)+0x1e>

00001568 <String::String(int, unsigned char)>:
_ZN6StringC2Eih():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:76
String::String(int value, unsigned char base)
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	62 97       	sbiw	r28, 0x12	; 18
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	8c 01       	movw	r16, r24
    1582:	cb 01       	movw	r24, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:133
	buffer = NULL;
    1584:	f8 01       	movw	r30, r16
    1586:	11 82       	std	Z+1, r1	; 0x01
    1588:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:134
	capacity = 0;
    158a:	13 82       	std	Z+3, r1	; 0x03
    158c:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:135
	len = 0;
    158e:	15 82       	std	Z+5, r1	; 0x05
    1590:	14 82       	std	Z+4, r1	; 0x04
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:80
	itoa(value, buf, base);
    1592:	50 e0       	ldi	r21, 0x00	; 0
/usr/avr/include/stdlib.h:424
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
    1594:	be 01       	movw	r22, r28
    1596:	6f 5f       	subi	r22, 0xFF	; 255
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	17 d6       	rcall	.+3118   	; 0x21ca <itoa>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:81
	*this = buf;
    159c:	be 01       	movw	r22, r28
    159e:	6f 5f       	subi	r22, 0xFF	; 255
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	c8 01       	movw	r24, r16
    15a4:	cc df       	rcall	.-104    	; 0x153e <String::operator=(char const*)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:82
}
    15a6:	62 96       	adiw	r28, 0x12	; 18
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	08 95       	ret

000015bc <String::String(unsigned long, unsigned char)>:
_ZN6StringC2Emh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:100
String::String(unsigned long value, unsigned char base)
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	a1 97       	sbiw	r28, 0x21	; 33
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	8c 01       	movw	r16, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	ba 01       	movw	r22, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:133
	buffer = NULL;
    15da:	f8 01       	movw	r30, r16
    15dc:	11 82       	std	Z+1, r1	; 0x01
    15de:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:134
	capacity = 0;
    15e0:	13 82       	std	Z+3, r1	; 0x03
    15e2:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:135
	len = 0;
    15e4:	15 82       	std	Z+5, r1	; 0x05
    15e6:	14 82       	std	Z+4, r1	; 0x04
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:104
	ultoa(value, buf, base);
    15e8:	30 e0       	ldi	r19, 0x00	; 0
/usr/avr/include/stdlib.h:554
extern __inline__ __ATTR_GNU_INLINE__
char *ultoa (unsigned long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ultoa (unsigned long, char *, int);
	return __ultoa (__val, __s, __radix);
    15ea:	ae 01       	movw	r20, r28
    15ec:	4f 5f       	subi	r20, 0xFF	; 255
    15ee:	5f 4f       	sbci	r21, 0xFF	; 255
    15f0:	00 d6       	rcall	.+3072   	; 0x21f2 <ultoa>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:105
	*this = buf;
    15f2:	be 01       	movw	r22, r28
    15f4:	6f 5f       	subi	r22, 0xFF	; 255
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	c8 01       	movw	r24, r16
    15fa:	a1 df       	rcall	.-190    	; 0x153e <String::operator=(char const*)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:106
}
    15fc:	a1 96       	adiw	r28, 0x21	; 33
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:264
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	ec 01       	movw	r28, r24
    1620:	7b 01       	movw	r14, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:266
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    1622:	67 2b       	or	r22, r23
    1624:	41 f4       	brne	.+16     	; 0x1636 <String::concat(char const*, unsigned int)+0x24>
    1626:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:272
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:267
	if (length == 0) return 1;
    1636:	41 15       	cp	r20, r1
    1638:	51 05       	cpc	r21, r1
    163a:	91 f0       	breq	.+36     	; 0x1660 <String::concat(char const*, unsigned int)+0x4e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:265
	unsigned int newlen = len + length;
    163c:	0c 81       	ldd	r16, Y+4	; 0x04
    163e:	1d 81       	ldd	r17, Y+5	; 0x05
    1640:	04 0f       	add	r16, r20
    1642:	15 1f       	adc	r17, r21
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:268
	if (!reserve(newlen)) return 0;
    1644:	b8 01       	movw	r22, r16
    1646:	10 df       	rcall	.-480    	; 0x1468 <String::reserve(unsigned int)>
    1648:	88 23       	and	r24, r24
    164a:	69 f3       	breq	.-38     	; 0x1626 <String::concat(char const*, unsigned int)+0x14>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:269
	strcpy(buffer + len, cstr);
    164c:	28 81       	ld	r18, Y
    164e:	39 81       	ldd	r19, Y+1	; 0x01
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	9d 81       	ldd	r25, Y+5	; 0x05
    1654:	b7 01       	movw	r22, r14
    1656:	82 0f       	add	r24, r18
    1658:	93 1f       	adc	r25, r19
    165a:	a1 d5       	rcall	.+2882   	; 0x219e <strcpy>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:270
	len = newlen;
    165c:	1d 83       	std	Y+5, r17	; 0x05
    165e:	0c 83       	std	Y+4, r16	; 0x04
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:267
	if (length == 0) return 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	e2 cf       	rjmp	.-60     	; 0x1628 <String::concat(char const*, unsigned int)+0x16>

00001664 <String::concat(char)>:
_ZN6String6concatEc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:281
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
{
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	00 d0       	rcall	.+0      	; 0x166a <String::concat(char)+0x6>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:283
	char buf[2];
	buf[0] = c;
    166e:	69 83       	std	Y+1, r22	; 0x01
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:284
	buf[1] = 0;
    1670:	1a 82       	std	Y+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:285
	return concat(buf, 1);
    1672:	41 e0       	ldi	r20, 0x01	; 1
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	be 01       	movw	r22, r28
    1678:	6f 5f       	subi	r22, 0xFF	; 255
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	ca df       	rcall	.-108    	; 0x1612 <String::concat(char const*, unsigned int)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:286
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:354
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:356
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    168e:	fb 01       	movw	r30, r22
    1690:	44 81       	ldd	r20, Z+4	; 0x04
    1692:	55 81       	ldd	r21, Z+5	; 0x05
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	bc df       	rcall	.-136    	; 0x1612 <String::concat(char const*, unsigned int)>
    169a:	81 11       	cpse	r24, r1
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <operator+(StringSumHelper const&, String const&)+0x1a>
    169e:	ce 01       	movw	r24, r28
    16a0:	b9 de       	rcall	.-654    	; 0x1414 <String::invalidate()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/WString.cpp:358
	return a;
}
    16a2:	ce 01       	movw	r24, r28
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <__vector_18>:
__vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	2f 93       	push	r18
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	ef 93       	push	r30
    16bc:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    16be:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <Serial+0x10>
    16c2:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <Serial+0x11>
    16c6:	80 81       	ld	r24, Z
    16c8:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <Serial+0x16>
    16cc:	f0 91 0b 04 	lds	r31, 0x040B	; 0x80040b <Serial+0x17>
    16d0:	82 fd       	sbrc	r24, 2
    16d2:	1b c0       	rjmp	.+54     	; 0x170a <__vector_18+0x60>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    16d4:	90 81       	ld	r25, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    16d6:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <Serial+0x19>
    16da:	8f 5f       	subi	r24, 0xFF	; 255
    16dc:	8f 73       	andi	r24, 0x3F	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    16de:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <Serial+0x1a>
    16e2:	82 17       	cp	r24, r18
    16e4:	41 f0       	breq	.+16     	; 0x16f6 <__vector_18+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    16e6:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <Serial+0x19>
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	ec 50       	subi	r30, 0x0C	; 12
    16ee:	fc 4f       	sbci	r31, 0xFC	; 252
    16f0:	95 8f       	std	Z+29, r25	; 0x1d
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    16f2:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <Serial+0x19>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
    16f6:	ff 91       	pop	r31
    16f8:	ef 91       	pop	r30
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    170a:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    170c:	f4 cf       	rjmp	.-24     	; 0x16f6 <__vector_18+0x4c>

0000170e <__vector_19>:
__vector_19():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    170e:	1f 92       	push	r1
    1710:	0f 92       	push	r0
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	0f 92       	push	r0
    1716:	11 24       	eor	r1, r1
    1718:	2f 93       	push	r18
    171a:	3f 93       	push	r19
    171c:	4f 93       	push	r20
    171e:	5f 93       	push	r21
    1720:	6f 93       	push	r22
    1722:	7f 93       	push	r23
    1724:	8f 93       	push	r24
    1726:	9f 93       	push	r25
    1728:	af 93       	push	r26
    172a:	bf 93       	push	r27
    172c:	ef 93       	push	r30
    172e:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    1730:	84 ef       	ldi	r24, 0xF4	; 244
    1732:	93 e0       	ldi	r25, 0x03	; 3
    1734:	f0 d1       	rcall	.+992    	; 0x1b16 <HardwareSerial::_tx_udr_empty_irq()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:65
}
    1736:	ff 91       	pop	r31
    1738:	ef 91       	pop	r30
    173a:	bf 91       	pop	r27
    173c:	af 91       	pop	r26
    173e:	9f 91       	pop	r25
    1740:	8f 91       	pop	r24
    1742:	7f 91       	pop	r23
    1744:	6f 91       	pop	r22
    1746:	5f 91       	pop	r21
    1748:	4f 91       	pop	r20
    174a:	3f 91       	pop	r19
    174c:	2f 91       	pop	r18
    174e:	0f 90       	pop	r0
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	0f 90       	pop	r0
    1754:	1f 90       	pop	r1
    1756:	18 95       	reti

00001758 <Serial0_available()>:
_Z17Serial0_availablev():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1758:	84 ef       	ldi	r24, 0xF4	; 244
    175a:	93 e0       	ldi	r25, 0x03	; 3
    175c:	a1 d1       	rcall	.+834    	; 0x1aa0 <HardwareSerial::available()>
    175e:	21 e0       	ldi	r18, 0x01	; 1
    1760:	89 2b       	or	r24, r25
    1762:	09 f4       	brne	.+2      	; 0x1766 <Serial0_available()+0xe>
    1764:	20 e0       	ldi	r18, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:77
}
    1766:	82 2f       	mov	r24, r18
    1768:	08 95       	ret

0000176a <_GLOBAL__sub_I___vector_18>:
_GLOBAL__sub_I___vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:43
    176a:	e4 ef       	ldi	r30, 0xF4	; 244
    176c:	f3 e0       	ldi	r31, 0x03	; 3
    176e:	13 82       	std	Z+3, r1	; 0x03
    1770:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:64
    1772:	88 ee       	ldi	r24, 0xE8	; 232
    1774:	93 e0       	ldi	r25, 0x03	; 3
    1776:	a0 e0       	ldi	r26, 0x00	; 0
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	84 83       	std	Z+4, r24	; 0x04
    177c:	95 83       	std	Z+5, r25	; 0x05
    177e:	a6 83       	std	Z+6, r26	; 0x06
    1780:	b7 83       	std	Z+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:95
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1782:	8c e5       	ldi	r24, 0x5C	; 92
    1784:	92 e0       	ldi	r25, 0x02	; 2
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
    178a:	85 ec       	ldi	r24, 0xC5	; 197
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	95 87       	std	Z+13, r25	; 0x0d
    1790:	84 87       	std	Z+12, r24	; 0x0c
    1792:	84 ec       	ldi	r24, 0xC4	; 196
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	97 87       	std	Z+15, r25	; 0x0f
    1798:	86 87       	std	Z+14, r24	; 0x0e
    179a:	80 ec       	ldi	r24, 0xC0	; 192
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	91 8b       	std	Z+17, r25	; 0x11
    17a0:	80 8b       	std	Z+16, r24	; 0x10
    17a2:	81 ec       	ldi	r24, 0xC1	; 193
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	93 8b       	std	Z+19, r25	; 0x13
    17a8:	82 8b       	std	Z+18, r24	; 0x12
    17aa:	82 ec       	ldi	r24, 0xC2	; 194
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	95 8b       	std	Z+21, r25	; 0x15
    17b0:	84 8b       	std	Z+20, r24	; 0x14
    17b2:	86 ec       	ldi	r24, 0xC6	; 198
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	97 8b       	std	Z+23, r25	; 0x17
    17b8:	86 8b       	std	Z+22, r24	; 0x16
    17ba:	11 8e       	std	Z+25, r1	; 0x19
    17bc:	12 8e       	std	Z+26, r1	; 0x1a
    17be:	13 8e       	std	Z+27, r1	; 0x1b
    17c0:	14 8e       	std	Z+28, r1	; 0x1c
    17c2:	08 95       	ret

000017c4 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	7c 01       	movw	r14, r24
    17d6:	6a 01       	movw	r12, r20
    17d8:	8b 01       	movw	r16, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:36
  size_t n = 0;
    17da:	c0 e0       	ldi	r28, 0x00	; 0
    17dc:	d0 e0       	ldi	r29, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:37
  while (size--) {
    17de:	cc 15       	cp	r28, r12
    17e0:	dd 05       	cpc	r29, r13
    17e2:	79 f0       	breq	.+30     	; 0x1802 <Print::write(unsigned char const*, unsigned int)+0x3e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:38
    if (write(*buffer++)) n++;
    17e4:	d8 01       	movw	r26, r16
    17e6:	6d 91       	ld	r22, X+
    17e8:	8d 01       	movw	r16, r26
    17ea:	d7 01       	movw	r26, r14
    17ec:	ed 91       	ld	r30, X+
    17ee:	fc 91       	ld	r31, X
    17f0:	01 90       	ld	r0, Z+
    17f2:	f0 81       	ld	r31, Z
    17f4:	e0 2d       	mov	r30, r0
    17f6:	c7 01       	movw	r24, r14
    17f8:	09 95       	icall
    17fa:	89 2b       	or	r24, r25
    17fc:	11 f0       	breq	.+4      	; 0x1802 <Print::write(unsigned char const*, unsigned int)+0x3e>
    17fe:	21 96       	adiw	r28, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:37
  while (size--) {
    1800:	ee cf       	rjmp	.-36     	; 0x17de <Print::write(unsigned char const*, unsigned int)+0x1a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:42
    else break;
  }
  return n;
}
    1802:	ce 01       	movw	r24, r28
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	08 95       	ret

00001816 <Print::write(char const*)>:
_ZN5Print5writeEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:50
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1816:	61 15       	cp	r22, r1
    1818:	71 05       	cpc	r23, r1
    181a:	79 f0       	breq	.+30     	; 0x183a <Print::write(char const*)+0x24>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:51
      return write((const uint8_t *)str, strlen(str));
    181c:	fb 01       	movw	r30, r22
    181e:	01 90       	ld	r0, Z+
    1820:	00 20       	and	r0, r0
    1822:	e9 f7       	brne	.-6      	; 0x181e <Print::write(char const*)+0x8>
    1824:	31 97       	sbiw	r30, 0x01	; 1
    1826:	af 01       	movw	r20, r30
    1828:	46 1b       	sub	r20, r22
    182a:	57 0b       	sbc	r21, r23
    182c:	dc 01       	movw	r26, r24
    182e:	ed 91       	ld	r30, X+
    1830:	fc 91       	ld	r31, X
    1832:	02 80       	ldd	r0, Z+2	; 0x02
    1834:	f3 81       	ldd	r31, Z+3	; 0x03
    1836:	e0 2d       	mov	r30, r0
    1838:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:52
    }
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	08 95       	ret

00001840 <Print::print(String const&)>:
_ZN5Print5printERK6String():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:55
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    1840:	db 01       	movw	r26, r22
    1842:	14 96       	adiw	r26, 0x04	; 4
    1844:	4d 91       	ld	r20, X+
    1846:	5c 91       	ld	r21, X
    1848:	15 97       	sbiw	r26, 0x05	; 5
    184a:	6d 91       	ld	r22, X+
    184c:	7c 91       	ld	r23, X
    184e:	dc 01       	movw	r26, r24
    1850:	ed 91       	ld	r30, X+
    1852:	fc 91       	ld	r31, X
    1854:	02 80       	ldd	r0, Z+2	; 0x02
    1856:	f3 81       	ldd	r31, Z+3	; 0x03
    1858:	e0 2d       	mov	r30, r0
    185a:	09 94       	ijmp

0000185c <Print::print(char const*)>:
_ZN5Print5printEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:63
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    185c:	dc cf       	rjmp	.-72     	; 0x1816 <Print::write(char const*)>

0000185e <Print::print(char)>:
_ZN5Print5printEc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    185e:	dc 01       	movw	r26, r24
    1860:	ed 91       	ld	r30, X+
    1862:	fc 91       	ld	r31, X
    1864:	01 90       	ld	r0, Z+
    1866:	f0 81       	ld	r31, Z
    1868:	e0 2d       	mov	r30, r0
    186a:	09 94       	ijmp

0000186c <Print::println()>:
_ZN5Print7printlnEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:128
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    186c:	65 e5       	ldi	r22, 0x55	; 85
    186e:	72 e0       	ldi	r23, 0x02	; 2
    1870:	d2 cf       	rjmp	.-92     	; 0x1816 <Print::write(char const*)>

00001872 <Print::println(String const&)>:
_ZN5Print7printlnERK6String():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:132
}

size_t Print::println(const String &s)
{
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:133
  size_t n = print(s);
    187a:	ec 01       	movw	r28, r24
    187c:	e1 df       	rcall	.-62     	; 0x1840 <Print::print(String const&)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:134
  n += println();
    187e:	8c 01       	movw	r16, r24
    1880:	ce 01       	movw	r24, r28
    1882:	f4 df       	rcall	.-24     	; 0x186c <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:136
  return n;
}
    1884:	80 0f       	add	r24, r16
    1886:	91 1f       	adc	r25, r17
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	08 95       	ret

00001892 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:139

size_t Print::println(const char c[])
{
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:64
  return write(str);
    189a:	ec 01       	movw	r28, r24
    189c:	bc df       	rcall	.-136    	; 0x1816 <Print::write(char const*)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:141
  size_t n = print(c);
  n += println();
    189e:	8c 01       	movw	r16, r24
    18a0:	ce 01       	movw	r24, r28
    18a2:	e4 df       	rcall	.-56     	; 0x186c <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:143
  return n;
}
    18a4:	80 0f       	add	r24, r16
    18a6:	91 1f       	adc	r25, r17
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	08 95       	ret

000018b2 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:204
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    18b2:	8f 92       	push	r8
    18b4:	9f 92       	push	r9
    18b6:	af 92       	push	r10
    18b8:	bf 92       	push	r11
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	cf 93       	push	r28
    18c4:	df 93       	push	r29
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	a1 97       	sbiw	r28, 0x21	; 33
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	7c 01       	movw	r14, r24
    18d8:	fa 01       	movw	r30, r20
    18da:	cb 01       	movw	r24, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:208
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    18dc:	19 a2       	std	Y+33, r1	; 0x21
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:211

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    18de:	42 2f       	mov	r20, r18
    18e0:	50 e0       	ldi	r21, 0x00	; 0
    18e2:	42 30       	cpi	r20, 0x02	; 2
    18e4:	51 05       	cpc	r21, r1
    18e6:	0c f4       	brge	.+2      	; 0x18ea <Print::printNumber(unsigned long, unsigned char)+0x38>
    18e8:	2a e0       	ldi	r18, 0x0A	; 10
    18ea:	8e 01       	movw	r16, r28
    18ec:	0f 5d       	subi	r16, 0xDF	; 223
    18ee:	1f 4f       	sbci	r17, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:214

  do {
    char c = n % base;
    18f0:	82 2e       	mov	r8, r18
    18f2:	91 2c       	mov	r9, r1
    18f4:	a1 2c       	mov	r10, r1
    18f6:	b1 2c       	mov	r11, r1
    18f8:	bf 01       	movw	r22, r30
    18fa:	a5 01       	movw	r20, r10
    18fc:	94 01       	movw	r18, r8
    18fe:	05 d2       	rcall	.+1034   	; 0x1d0a <__udivmodsi4>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:215
    n /= base;
    1900:	f9 01       	movw	r30, r18
    1902:	ca 01       	movw	r24, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1904:	01 50       	subi	r16, 0x01	; 1
    1906:	11 09       	sbc	r17, r1
    1908:	6a 30       	cpi	r22, 0x0A	; 10
    190a:	dc f4       	brge	.+54     	; 0x1942 <Print::printNumber(unsigned long, unsigned char)+0x90>
    190c:	60 5d       	subi	r22, 0xD0	; 208
    190e:	d8 01       	movw	r26, r16
    1910:	6c 93       	st	X, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:218
  } while(n);
    1912:	23 2b       	or	r18, r19
    1914:	24 2b       	or	r18, r20
    1916:	25 2b       	or	r18, r21
    1918:	79 f7       	brne	.-34     	; 0x18f8 <Print::printNumber(unsigned long, unsigned char)+0x46>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:220

  return write(str);
    191a:	b8 01       	movw	r22, r16
    191c:	c7 01       	movw	r24, r14
    191e:	7b df       	rcall	.-266    	; 0x1816 <Print::write(char const*)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:221
}
    1920:	a1 96       	adiw	r28, 0x21	; 33
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	bf 90       	pop	r11
    193a:	af 90       	pop	r10
    193c:	9f 90       	pop	r9
    193e:	8f 90       	pop	r8
    1940:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1942:	69 5c       	subi	r22, 0xC9	; 201
    1944:	e4 cf       	rjmp	.-56     	; 0x190e <Print::printNumber(unsigned long, unsigned char)+0x5c>

00001946 <Print::print(long, int)>:
_ZN5Print5printEli():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:88
{
    1946:	cf 92       	push	r12
    1948:	df 92       	push	r13
    194a:	ef 92       	push	r14
    194c:	ff 92       	push	r15
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
    1958:	6a 01       	movw	r12, r20
    195a:	7b 01       	movw	r14, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:89
  if (base == 0) {
    195c:	21 15       	cp	r18, r1
    195e:	31 05       	cpc	r19, r1
    1960:	79 f4       	brne	.+30     	; 0x1980 <Print::print(long, int)+0x3a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    1962:	e8 81       	ld	r30, Y
    1964:	f9 81       	ldd	r31, Y+1	; 0x01
    1966:	01 90       	ld	r0, Z+
    1968:	f0 81       	ld	r31, Z
    196a:	e0 2d       	mov	r30, r0
    196c:	64 2f       	mov	r22, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	df 90       	pop	r13
    197c:	cf 90       	pop	r12
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    197e:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:91
  } else if (base == 10) {
    1980:	2a 30       	cpi	r18, 0x0A	; 10
    1982:	31 05       	cpc	r19, r1
    1984:	d9 f4       	brne	.+54     	; 0x19bc <Print::print(long, int)+0x76>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:92
    if (n < 0) {
    1986:	77 ff       	sbrs	r23, 7
    1988:	18 c0       	rjmp	.+48     	; 0x19ba <Print::print(long, int)+0x74>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:93
      int t = print('-');
    198a:	6d e2       	ldi	r22, 0x2D	; 45
    198c:	68 df       	rcall	.-304    	; 0x185e <Print::print(char)>
    198e:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:94
      n = -n;
    1990:	44 27       	eor	r20, r20
    1992:	55 27       	eor	r21, r21
    1994:	ba 01       	movw	r22, r20
    1996:	4c 19       	sub	r20, r12
    1998:	5d 09       	sbc	r21, r13
    199a:	6e 09       	sbc	r22, r14
    199c:	7f 09       	sbc	r23, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:95
      return printNumber(n, 10) + t;
    199e:	2a e0       	ldi	r18, 0x0A	; 10
    19a0:	ce 01       	movw	r24, r28
    19a2:	87 df       	rcall	.-242    	; 0x18b2 <Print::printNumber(unsigned long, unsigned char)>
    19a4:	80 0f       	add	r24, r16
    19a6:	91 1f       	adc	r25, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:97
    return printNumber(n, 10);
    19ba:	2a e0       	ldi	r18, 0x0A	; 10
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    19bc:	b7 01       	movw	r22, r14
    19be:	a6 01       	movw	r20, r12
    19c0:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    19d0:	cf 90       	pop	r12
    19d2:	6f cf       	rjmp	.-290    	; 0x18b2 <Print::printNumber(unsigned long, unsigned char)>

000019d4 <Print::print(int, int)>:
_ZN5Print5printEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:78
{
    19d4:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:79
  return print((long) n, base);
    19d6:	ab 01       	movw	r20, r22
    19d8:	77 0f       	add	r23, r23
    19da:	66 0b       	sbc	r22, r22
    19dc:	77 0b       	sbc	r23, r23
    19de:	b3 cf       	rjmp	.-154    	; 0x1946 <Print::print(long, int)>

000019e0 <Print::println(int, int)>:
_ZN5Print7printlnEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:160
{
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:161
  size_t n = print(num, base);
    19e8:	ec 01       	movw	r28, r24
    19ea:	f4 df       	rcall	.-24     	; 0x19d4 <Print::print(int, int)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:162
  n += println();
    19ec:	8c 01       	movw	r16, r24
    19ee:	ce 01       	movw	r24, r28
    19f0:	3d df       	rcall	.-390    	; 0x186c <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:164
}
    19f2:	80 0f       	add	r24, r16
    19f4:	91 1f       	adc	r25, r17
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <Stream::timedRead()>:
_ZN6Stream9timedReadEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:32

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// private method to read stream with timeout
int Stream::timedRead()
{
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:34
  int c;
  _startMillis = millis();
    1a08:	ec 01       	movw	r28, r24
    1a0a:	ca db       	rcall	.-2156   	; 0x11a0 <millis>
    1a0c:	68 87       	std	Y+8, r22	; 0x08
    1a0e:	79 87       	std	Y+9, r23	; 0x09
    1a10:	8a 87       	std	Y+10, r24	; 0x0a
    1a12:	9b 87       	std	Y+11, r25	; 0x0b
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:36
  do {
    c = read();
    1a14:	e8 81       	ld	r30, Y
    1a16:	f9 81       	ldd	r31, Y+1	; 0x01
    1a18:	06 80       	ldd	r0, Z+6	; 0x06
    1a1a:	f7 81       	ldd	r31, Z+7	; 0x07
    1a1c:	e0 2d       	mov	r30, r0
    1a1e:	ce 01       	movw	r24, r28
    1a20:	09 95       	icall
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:37
    if (c >= 0) return c;
    1a22:	97 ff       	sbrs	r25, 7
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:38
  } while(millis() - _startMillis < _timeout);
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <Stream::timedRead()+0x4e>
    1a26:	bc db       	rcall	.-2184   	; 0x11a0 <millis>
    1a28:	08 85       	ldd	r16, Y+8	; 0x08
    1a2a:	19 85       	ldd	r17, Y+9	; 0x09
    1a2c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a2e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a30:	60 1b       	sub	r22, r16
    1a32:	71 0b       	sbc	r23, r17
    1a34:	82 0b       	sbc	r24, r18
    1a36:	93 0b       	sbc	r25, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:35
  do {
    1a38:	0c 81       	ldd	r16, Y+4	; 0x04
    1a3a:	1d 81       	ldd	r17, Y+5	; 0x05
    1a3c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a3e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a40:	60 17       	cp	r22, r16
    1a42:	71 07       	cpc	r23, r17
    1a44:	82 07       	cpc	r24, r18
    1a46:	93 07       	cpc	r25, r19
    1a48:	28 f3       	brcs	.-54     	; 0x1a14 <Stream::timedRead()+0x14>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:39
  return -1;     // -1 indicates timeout
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:40
}
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <Stream::readString()>:
_ZN6Stream10readStringEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:233
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
    1a58:	0f 93       	push	r16
    1a5a:	1f 93       	push	r17
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	ec 01       	movw	r28, r24
    1a62:	8b 01       	movw	r16, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:234
  String ret;
    1a64:	67 e5       	ldi	r22, 0x57	; 87
    1a66:	72 e0       	ldi	r23, 0x02	; 2
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:235
  int c = timedRead();
    1a68:	39 dd       	rcall	.-1422   	; 0x14dc <String::String(char const*)>
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	c9 df       	rcall	.-110    	; 0x1a00 <Stream::timedRead()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:236
  while (c >= 0)
    1a6e:	97 fd       	sbrc	r25, 7
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:115
{
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <Stream::readString()+0x22>
    1a72:	68 2f       	mov	r22, r24
    1a74:	ce 01       	movw	r24, r28
    1a76:	f6 dd       	rcall	.-1044   	; 0x1664 <String::concat(char)>
    1a78:	f8 cf       	rjmp	.-16     	; 0x1a6a <Stream::readString()+0x12>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.cpp:242
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	08 95       	ret

00001a86 <initVariant>:
    1a86:	08 95       	ret

00001a88 <main>:
main():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:37

int main(void)
{
	init();

	initVariant();
    1a88:	f3 db       	rcall	.-2074   	; 0x1270 <init>
    1a8a:	fd df       	rcall	.-6      	; 0x1a86 <initVariant>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:43

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1a8c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <setup>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1a90:	ce e7       	ldi	r28, 0x7E	; 126
    1a92:	dd e0       	ldi	r29, 0x0D	; 13
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:46
		loop();
    1a94:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <loop>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
		if (serialEventRun) serialEventRun();
    1a98:	20 97       	sbiw	r28, 0x00	; 0
    1a9a:	e1 f3       	breq	.-8      	; 0x1a94 <main+0xc>
    1a9c:	2f d0       	rcall	.+94     	; 0x1afc <serialEventRun()>
    1a9e:	fa cf       	rjmp	.-12     	; 0x1a94 <main+0xc>

00001aa0 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:153
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1aa0:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:154
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1aa2:	91 8d       	ldd	r25, Z+25	; 0x19
    1aa4:	22 8d       	ldd	r18, Z+26	; 0x1a
    1aa6:	89 2f       	mov	r24, r25
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	80 5c       	subi	r24, 0xC0	; 192
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	82 1b       	sub	r24, r18
    1ab0:	91 09       	sbc	r25, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:155
}
    1ab2:	8f 73       	andi	r24, 0x3F	; 63
    1ab4:	99 27       	eor	r25, r25
    1ab6:	08 95       	ret

00001ab8 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:158

int HardwareSerial::peek(void)
{
    1ab8:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:159
  if (_rx_buffer_head == _rx_buffer_tail) {
    1aba:	91 8d       	ldd	r25, Z+25	; 0x19
    1abc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1abe:	98 17       	cp	r25, r24
    1ac0:	31 f0       	breq	.+12     	; 0x1ace <HardwareSerial::peek()+0x16>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:162
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1ac2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ac4:	e8 0f       	add	r30, r24
    1ac6:	f1 1d       	adc	r31, r1
    1ac8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:160
    return -1;
    1ace:	8f ef       	ldi	r24, 0xFF	; 255
    1ad0:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:164
  }
}
    1ad2:	08 95       	ret

00001ad4 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
    1ad4:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:169
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1ad6:	91 8d       	ldd	r25, Z+25	; 0x19
    1ad8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ada:	98 17       	cp	r25, r24
    1adc:	61 f0       	breq	.+24     	; 0x1af6 <HardwareSerial::read()+0x22>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:172
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1ade:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ae0:	df 01       	movw	r26, r30
    1ae2:	a8 0f       	add	r26, r24
    1ae4:	b1 1d       	adc	r27, r1
    1ae6:	5d 96       	adiw	r26, 0x1d	; 29
    1ae8:	8c 91       	ld	r24, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:173
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1aea:	92 8d       	ldd	r25, Z+26	; 0x1a
    1aec:	9f 5f       	subi	r25, 0xFF	; 255
    1aee:	9f 73       	andi	r25, 0x3F	; 63
    1af0:	92 8f       	std	Z+26, r25	; 0x1a
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:174
    return c;
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:170
    return -1;
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:176
  }
}
    1afa:	08 95       	ret

00001afc <serialEventRun()>:
_Z14serialEventRunv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:66
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1afc:	8c ea       	ldi	r24, 0xAC	; 172
    1afe:	9b e0       	ldi	r25, 0x0B	; 11
    1b00:	89 2b       	or	r24, r25
    1b02:	41 f0       	breq	.+16     	; 0x1b14 <serialEventRun()+0x18>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	89 2b       	or	r24, r25
    1b0a:	21 f0       	breq	.+8      	; 0x1b14 <serialEventRun()+0x18>
    1b0c:	25 de       	rcall	.-950    	; 0x1758 <Serial0_available()>
    1b0e:	81 11       	cpse	r24, r1
    1b10:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1b14:	08 95       	ret

00001b16 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:82
{
    1b16:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:85
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1b18:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b1a:	df 01       	movw	r26, r30
    1b1c:	a8 0f       	add	r26, r24
    1b1e:	b1 1d       	adc	r27, r1
    1b20:	a3 5a       	subi	r26, 0xA3	; 163
    1b22:	bf 4f       	sbci	r27, 0xFF	; 255
    1b24:	2c 91       	ld	r18, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1b26:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	8f 73       	andi	r24, 0x3F	; 63
    1b2e:	99 27       	eor	r25, r25
    1b30:	84 8f       	std	Z+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:88
  *_udr = c;
    1b32:	a6 89       	ldd	r26, Z+22	; 0x16
    1b34:	b7 89       	ldd	r27, Z+23	; 0x17
    1b36:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:93
  sbi(*_ucsra, TXC0);
    1b38:	a0 89       	ldd	r26, Z+16	; 0x10
    1b3a:	b1 89       	ldd	r27, Z+17	; 0x11
    1b3c:	8c 91       	ld	r24, X
    1b3e:	80 64       	ori	r24, 0x40	; 64
    1b40:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:95
  if (_tx_buffer_head == _tx_buffer_tail) {
    1b42:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b44:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b46:	98 13       	cpse	r25, r24
    1b48:	06 c0       	rjmp	.+12     	; 0x1b56 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:97
    cbi(*_ucsrb, UDRIE0);
    1b4a:	02 88       	ldd	r0, Z+18	; 0x12
    1b4c:	f3 89       	ldd	r31, Z+19	; 0x13
    1b4e:	e0 2d       	mov	r30, r0
    1b50:	80 81       	ld	r24, Z
    1b52:	8f 7d       	andi	r24, 0xDF	; 223
    1b54:	80 83       	st	Z, r24
    1b56:	08 95       	ret

00001b58 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:194
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:198
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1b5e:	88 8d       	ldd	r24, Y+24	; 0x18
    1b60:	88 23       	and	r24, r24
    1b62:	51 f0       	breq	.+20     	; 0x1b78 <HardwareSerial::flush()+0x20>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:201
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b64:	ea 89       	ldd	r30, Y+18	; 0x12
    1b66:	fb 89       	ldd	r31, Y+19	; 0x13
    1b68:	80 81       	ld	r24, Z
    1b6a:	85 fd       	sbrc	r24, 5
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <HardwareSerial::flush()+0x26>
    1b6e:	a8 89       	ldd	r26, Y+16	; 0x10
    1b70:	b9 89       	ldd	r27, Y+17	; 0x11
    1b72:	8c 91       	ld	r24, X
    1b74:	86 ff       	sbrs	r24, 6
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <HardwareSerial::flush()+0x26>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:211
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:202
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	07 fc       	sbrc	r0, 7
    1b82:	f2 cf       	rjmp	.-28     	; 0x1b68 <HardwareSerial::flush()+0x10>
    1b84:	80 81       	ld	r24, Z
    1b86:	85 ff       	sbrs	r24, 5
    1b88:	ef cf       	rjmp	.-34     	; 0x1b68 <HardwareSerial::flush()+0x10>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:206
	if (bit_is_set(*_ucsra, UDRE0))
    1b8a:	e8 89       	ldd	r30, Y+16	; 0x10
    1b8c:	f9 89       	ldd	r31, Y+17	; 0x11
    1b8e:	80 81       	ld	r24, Z
    1b90:	85 ff       	sbrs	r24, 5
    1b92:	e8 cf       	rjmp	.-48     	; 0x1b64 <HardwareSerial::flush()+0xc>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:207
	  _tx_udr_empty_irq();
    1b94:	ce 01       	movw	r24, r28
    1b96:	bf df       	rcall	.-130    	; 0x1b16 <HardwareSerial::_tx_udr_empty_irq()>
    1b98:	e5 cf       	rjmp	.-54     	; 0x1b64 <HardwareSerial::flush()+0xc>

00001b9a <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:214

size_t HardwareSerial::write(uint8_t c)
{
    1b9a:	ef 92       	push	r14
    1b9c:	ff 92       	push	r15
    1b9e:	0f 93       	push	r16
    1ba0:	1f 93       	push	r17
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	ec 01       	movw	r28, r24
    1ba8:	f6 2e       	mov	r15, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:215
  _written = true;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:220
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1bae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bb2:	98 13       	cpse	r25, r24
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <HardwareSerial::write(unsigned char)+0x26>
    1bb6:	e8 89       	ldd	r30, Y+16	; 0x10
    1bb8:	f9 89       	ldd	r31, Y+17	; 0x11
    1bba:	80 81       	ld	r24, Z
    1bbc:	85 fd       	sbrc	r24, 5
    1bbe:	2b c0       	rjmp	.+86     	; 0x1c16 <HardwareSerial::write(unsigned char)+0x7c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:225
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1bc0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1bc2:	10 e0       	ldi	r17, 0x00	; 0
    1bc4:	0f 5f       	subi	r16, 0xFF	; 255
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	0f 73       	andi	r16, 0x3F	; 63
    1bca:	11 27       	eor	r17, r17
    1bcc:	e0 2e       	mov	r14, r16
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:229
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1bce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bd0:	e8 12       	cpse	r14, r24
    1bd2:	0b c0       	rjmp	.+22     	; 0x1bea <HardwareSerial::write(unsigned char)+0x50>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:230
    if (bit_is_clear(SREG, SREG_I)) {
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	07 fc       	sbrc	r0, 7
    1bd8:	fa cf       	rjmp	.-12     	; 0x1bce <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:235
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1bda:	e8 89       	ldd	r30, Y+16	; 0x10
    1bdc:	f9 89       	ldd	r31, Y+17	; 0x11
    1bde:	80 81       	ld	r24, Z
    1be0:	85 ff       	sbrs	r24, 5
    1be2:	f5 cf       	rjmp	.-22     	; 0x1bce <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:236
	_tx_udr_empty_irq();
    1be4:	ce 01       	movw	r24, r28
    1be6:	97 df       	rcall	.-210    	; 0x1b16 <HardwareSerial::_tx_udr_empty_irq()>
    1be8:	f2 cf       	rjmp	.-28     	; 0x1bce <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:242
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bec:	fe 01       	movw	r30, r28
    1bee:	e8 0f       	add	r30, r24
    1bf0:	f1 1d       	adc	r31, r1
    1bf2:	e3 5a       	subi	r30, 0xA3	; 163
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	f0 82       	st	Z, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:243
  _tx_buffer_head = i;
    1bf8:	0b 8f       	std	Y+27, r16	; 0x1b
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:245
	
  sbi(*_ucsrb, UDRIE0);
    1bfa:	ea 89       	ldd	r30, Y+18	; 0x12
    1bfc:	fb 89       	ldd	r31, Y+19	; 0x13
    1bfe:	80 81       	ld	r24, Z
    1c00:	80 62       	ori	r24, 0x20	; 32
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
    1c02:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:248
  
  return 1;
}
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:221
    *_udr = c;
    1c16:	ee 89       	ldd	r30, Y+22	; 0x16
    1c18:	ff 89       	ldd	r31, Y+23	; 0x17
    1c1a:	60 83       	st	Z, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
    1c1c:	e8 89       	ldd	r30, Y+16	; 0x10
    1c1e:	f9 89       	ldd	r31, Y+17	; 0x11
    1c20:	80 81       	ld	r24, Z
    1c22:	80 64       	ori	r24, 0x40	; 64
    1c24:	ee cf       	rjmp	.-36     	; 0x1c02 <HardwareSerial::write(unsigned char)+0x68>

00001c26 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:104
{
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	ec 01       	movw	r28, r24
    1c36:	6a 01       	movw	r12, r20
    1c38:	7b 01       	movw	r14, r22
    1c3a:	12 2f       	mov	r17, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:107
  *_ucsra = 1 << U2X0;
    1c3c:	e8 89       	ldd	r30, Y+16	; 0x10
    1c3e:	f9 89       	ldd	r31, Y+17	; 0x11
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c44:	41 15       	cp	r20, r1
    1c46:	51 4e       	sbci	r21, 0xE1	; 225
    1c48:	61 05       	cpc	r22, r1
    1c4a:	71 05       	cpc	r23, r1
    1c4c:	99 f0       	breq	.+38     	; 0x1c74 <HardwareSerial::begin(unsigned long, unsigned char)+0x4e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:106
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	79 e0       	ldi	r23, 0x09	; 9
    1c52:	8d e3       	ldi	r24, 0x3D	; 61
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a7 01       	movw	r20, r14
    1c58:	96 01       	movw	r18, r12
    1c5a:	57 d0       	rcall	.+174    	; 0x1d0a <__udivmodsi4>
    1c5c:	21 50       	subi	r18, 0x01	; 1
    1c5e:	31 09       	sbc	r19, r1
    1c60:	41 09       	sbc	r20, r1
    1c62:	51 09       	sbc	r21, r1
    1c64:	56 95       	lsr	r21
    1c66:	47 95       	ror	r20
    1c68:	37 95       	ror	r19
    1c6a:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1c6c:	21 15       	cp	r18, r1
    1c6e:	80 e1       	ldi	r24, 0x10	; 16
    1c70:	38 07       	cpc	r19, r24
    1c72:	90 f0       	brcs	.+36     	; 0x1c98 <HardwareSerial::begin(unsigned long, unsigned char)+0x72>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:116
    *_ucsra = 0;
    1c74:	e8 89       	ldd	r30, Y+16	; 0x10
    1c76:	f9 89       	ldd	r31, Y+17	; 0x11
    1c78:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1c7a:	60 e8       	ldi	r22, 0x80	; 128
    1c7c:	74 e8       	ldi	r23, 0x84	; 132
    1c7e:	8e e1       	ldi	r24, 0x1E	; 30
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a7 01       	movw	r20, r14
    1c84:	96 01       	movw	r18, r12
    1c86:	41 d0       	rcall	.+130    	; 0x1d0a <__udivmodsi4>
    1c88:	21 50       	subi	r18, 0x01	; 1
    1c8a:	31 09       	sbc	r19, r1
    1c8c:	41 09       	sbc	r20, r1
    1c8e:	51 09       	sbc	r21, r1
    1c90:	56 95       	lsr	r21
    1c92:	47 95       	ror	r20
    1c94:	37 95       	ror	r19
    1c96:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:121
  *_ubrrh = baud_setting >> 8;
    1c98:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c9a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c9c:	30 83       	st	Z, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    1c9e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ca0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ca2:	20 83       	st	Z, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:124
  _written = false;
    1ca4:	18 8e       	std	Y+24, r1	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:130
  *_ucsrc = config;
    1ca6:	ec 89       	ldd	r30, Y+20	; 0x14
    1ca8:	fd 89       	ldd	r31, Y+21	; 0x15
    1caa:	10 83       	st	Z, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:132
  sbi(*_ucsrb, RXEN0);
    1cac:	ea 89       	ldd	r30, Y+18	; 0x12
    1cae:	fb 89       	ldd	r31, Y+19	; 0x13
    1cb0:	80 81       	ld	r24, Z
    1cb2:	80 61       	ori	r24, 0x10	; 16
    1cb4:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:133
  sbi(*_ucsrb, TXEN0);
    1cb6:	ea 89       	ldd	r30, Y+18	; 0x12
    1cb8:	fb 89       	ldd	r31, Y+19	; 0x13
    1cba:	80 81       	ld	r24, Z
    1cbc:	88 60       	ori	r24, 0x08	; 8
    1cbe:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:134
  sbi(*_ucsrb, RXCIE0);
    1cc0:	ea 89       	ldd	r30, Y+18	; 0x12
    1cc2:	fb 89       	ldd	r31, Y+19	; 0x13
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 68       	ori	r24, 0x80	; 128
    1cc8:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:135
  cbi(*_ucsrb, UDRIE0);
    1cca:	ea 89       	ldd	r30, Y+18	; 0x12
    1ccc:	fb 89       	ldd	r31, Y+19	; 0x13
    1cce:	80 81       	ld	r24, Z
    1cd0:	8f 7d       	andi	r24, 0xDF	; 223
    1cd2:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:136
}
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	df 90       	pop	r13
    1ce0:	cf 90       	pop	r12
    1ce2:	08 95       	ret

00001ce4 <__divmodhi4>:
    1ce4:	97 fb       	bst	r25, 7
    1ce6:	07 2e       	mov	r0, r23
    1ce8:	16 f4       	brtc	.+4      	; 0x1cee <__divmodhi4+0xa>
    1cea:	00 94       	com	r0
    1cec:	06 d0       	rcall	.+12     	; 0x1cfa <__divmodhi4_neg1>
    1cee:	77 fd       	sbrc	r23, 7
    1cf0:	08 d0       	rcall	.+16     	; 0x1d02 <__divmodhi4_neg2>
    1cf2:	49 d0       	rcall	.+146    	; 0x1d86 <__udivmodhi4>
    1cf4:	07 fc       	sbrc	r0, 7
    1cf6:	05 d0       	rcall	.+10     	; 0x1d02 <__divmodhi4_neg2>
    1cf8:	3e f4       	brtc	.+14     	; 0x1d08 <__divmodhi4_exit>

00001cfa <__divmodhi4_neg1>:
    1cfa:	90 95       	com	r25
    1cfc:	81 95       	neg	r24
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	08 95       	ret

00001d02 <__divmodhi4_neg2>:
    1d02:	70 95       	com	r23
    1d04:	61 95       	neg	r22
    1d06:	7f 4f       	sbci	r23, 0xFF	; 255

00001d08 <__divmodhi4_exit>:
    1d08:	08 95       	ret

00001d0a <__udivmodsi4>:
    1d0a:	a1 e2       	ldi	r26, 0x21	; 33
    1d0c:	1a 2e       	mov	r1, r26
    1d0e:	aa 1b       	sub	r26, r26
    1d10:	bb 1b       	sub	r27, r27
    1d12:	fd 01       	movw	r30, r26
    1d14:	0d c0       	rjmp	.+26     	; 0x1d30 <__udivmodsi4_ep>

00001d16 <__udivmodsi4_loop>:
    1d16:	aa 1f       	adc	r26, r26
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	ee 1f       	adc	r30, r30
    1d1c:	ff 1f       	adc	r31, r31
    1d1e:	a2 17       	cp	r26, r18
    1d20:	b3 07       	cpc	r27, r19
    1d22:	e4 07       	cpc	r30, r20
    1d24:	f5 07       	cpc	r31, r21
    1d26:	20 f0       	brcs	.+8      	; 0x1d30 <__udivmodsi4_ep>
    1d28:	a2 1b       	sub	r26, r18
    1d2a:	b3 0b       	sbc	r27, r19
    1d2c:	e4 0b       	sbc	r30, r20
    1d2e:	f5 0b       	sbc	r31, r21

00001d30 <__udivmodsi4_ep>:
    1d30:	66 1f       	adc	r22, r22
    1d32:	77 1f       	adc	r23, r23
    1d34:	88 1f       	adc	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	1a 94       	dec	r1
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <__udivmodsi4_loop>
    1d3c:	60 95       	com	r22
    1d3e:	70 95       	com	r23
    1d40:	80 95       	com	r24
    1d42:	90 95       	com	r25
    1d44:	9b 01       	movw	r18, r22
    1d46:	ac 01       	movw	r20, r24
    1d48:	bd 01       	movw	r22, r26
    1d4a:	cf 01       	movw	r24, r30
    1d4c:	08 95       	ret

00001d4e <__divmodsi4>:
    1d4e:	05 2e       	mov	r0, r21
    1d50:	97 fb       	bst	r25, 7
    1d52:	16 f4       	brtc	.+4      	; 0x1d58 <__divmodsi4+0xa>
    1d54:	00 94       	com	r0
    1d56:	0f d0       	rcall	.+30     	; 0x1d76 <__negsi2>
    1d58:	57 fd       	sbrc	r21, 7
    1d5a:	05 d0       	rcall	.+10     	; 0x1d66 <__divmodsi4_neg2>
    1d5c:	d6 df       	rcall	.-84     	; 0x1d0a <__udivmodsi4>
    1d5e:	07 fc       	sbrc	r0, 7
    1d60:	02 d0       	rcall	.+4      	; 0x1d66 <__divmodsi4_neg2>
    1d62:	46 f4       	brtc	.+16     	; 0x1d74 <__divmodsi4_exit>
    1d64:	08 c0       	rjmp	.+16     	; 0x1d76 <__negsi2>

00001d66 <__divmodsi4_neg2>:
    1d66:	50 95       	com	r21
    1d68:	40 95       	com	r20
    1d6a:	30 95       	com	r19
    1d6c:	21 95       	neg	r18
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	4f 4f       	sbci	r20, 0xFF	; 255
    1d72:	5f 4f       	sbci	r21, 0xFF	; 255

00001d74 <__divmodsi4_exit>:
    1d74:	08 95       	ret

00001d76 <__negsi2>:
    1d76:	90 95       	com	r25
    1d78:	80 95       	com	r24
    1d7a:	70 95       	com	r23
    1d7c:	61 95       	neg	r22
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	8f 4f       	sbci	r24, 0xFF	; 255
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	08 95       	ret

00001d86 <__udivmodhi4>:
    1d86:	aa 1b       	sub	r26, r26
    1d88:	bb 1b       	sub	r27, r27
    1d8a:	51 e1       	ldi	r21, 0x11	; 17
    1d8c:	07 c0       	rjmp	.+14     	; 0x1d9c <__udivmodhi4_ep>

00001d8e <__udivmodhi4_loop>:
    1d8e:	aa 1f       	adc	r26, r26
    1d90:	bb 1f       	adc	r27, r27
    1d92:	a6 17       	cp	r26, r22
    1d94:	b7 07       	cpc	r27, r23
    1d96:	10 f0       	brcs	.+4      	; 0x1d9c <__udivmodhi4_ep>
    1d98:	a6 1b       	sub	r26, r22
    1d9a:	b7 0b       	sbc	r27, r23

00001d9c <__udivmodhi4_ep>:
    1d9c:	88 1f       	adc	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	5a 95       	dec	r21
    1da2:	a9 f7       	brne	.-22     	; 0x1d8e <__udivmodhi4_loop>
    1da4:	80 95       	com	r24
    1da6:	90 95       	com	r25
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	08 95       	ret

00001dae <__tablejump2__>:
    1dae:	ee 0f       	add	r30, r30
    1db0:	ff 1f       	adc	r31, r31
    1db2:	05 90       	lpm	r0, Z+
    1db4:	f4 91       	lpm	r31, Z
    1db6:	e0 2d       	mov	r30, r0
    1db8:	09 94       	ijmp

00001dba <malloc>:
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	82 30       	cpi	r24, 0x02	; 2
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	10 f4       	brcc	.+4      	; 0x1dcc <malloc+0x12>
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <__flp>
    1dd0:	f0 91 94 04 	lds	r31, 0x0494	; 0x800494 <__flp+0x1>
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	a0 e0       	ldi	r26, 0x00	; 0
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	30 97       	sbiw	r30, 0x00	; 0
    1dde:	19 f1       	breq	.+70     	; 0x1e26 <malloc+0x6c>
    1de0:	40 81       	ld	r20, Z
    1de2:	51 81       	ldd	r21, Z+1	; 0x01
    1de4:	02 81       	ldd	r16, Z+2	; 0x02
    1de6:	13 81       	ldd	r17, Z+3	; 0x03
    1de8:	48 17       	cp	r20, r24
    1dea:	59 07       	cpc	r21, r25
    1dec:	c8 f0       	brcs	.+50     	; 0x1e20 <malloc+0x66>
    1dee:	84 17       	cp	r24, r20
    1df0:	95 07       	cpc	r25, r21
    1df2:	69 f4       	brne	.+26     	; 0x1e0e <malloc+0x54>
    1df4:	10 97       	sbiw	r26, 0x00	; 0
    1df6:	31 f0       	breq	.+12     	; 0x1e04 <malloc+0x4a>
    1df8:	12 96       	adiw	r26, 0x02	; 2
    1dfa:	0c 93       	st	X, r16
    1dfc:	12 97       	sbiw	r26, 0x02	; 2
    1dfe:	13 96       	adiw	r26, 0x03	; 3
    1e00:	1c 93       	st	X, r17
    1e02:	27 c0       	rjmp	.+78     	; 0x1e52 <malloc+0x98>
    1e04:	00 93 93 04 	sts	0x0493, r16	; 0x800493 <__flp>
    1e08:	10 93 94 04 	sts	0x0494, r17	; 0x800494 <__flp+0x1>
    1e0c:	22 c0       	rjmp	.+68     	; 0x1e52 <malloc+0x98>
    1e0e:	21 15       	cp	r18, r1
    1e10:	31 05       	cpc	r19, r1
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <malloc+0x60>
    1e14:	42 17       	cp	r20, r18
    1e16:	53 07       	cpc	r21, r19
    1e18:	18 f4       	brcc	.+6      	; 0x1e20 <malloc+0x66>
    1e1a:	9a 01       	movw	r18, r20
    1e1c:	bd 01       	movw	r22, r26
    1e1e:	ef 01       	movw	r28, r30
    1e20:	df 01       	movw	r26, r30
    1e22:	f8 01       	movw	r30, r16
    1e24:	db cf       	rjmp	.-74     	; 0x1ddc <malloc+0x22>
    1e26:	21 15       	cp	r18, r1
    1e28:	31 05       	cpc	r19, r1
    1e2a:	f9 f0       	breq	.+62     	; 0x1e6a <malloc+0xb0>
    1e2c:	28 1b       	sub	r18, r24
    1e2e:	39 0b       	sbc	r19, r25
    1e30:	24 30       	cpi	r18, 0x04	; 4
    1e32:	31 05       	cpc	r19, r1
    1e34:	80 f4       	brcc	.+32     	; 0x1e56 <malloc+0x9c>
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3a:	61 15       	cp	r22, r1
    1e3c:	71 05       	cpc	r23, r1
    1e3e:	21 f0       	breq	.+8      	; 0x1e48 <malloc+0x8e>
    1e40:	fb 01       	movw	r30, r22
    1e42:	93 83       	std	Z+3, r25	; 0x03
    1e44:	82 83       	std	Z+2, r24	; 0x02
    1e46:	04 c0       	rjmp	.+8      	; 0x1e50 <malloc+0x96>
    1e48:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <__flp+0x1>
    1e4c:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <__flp>
    1e50:	fe 01       	movw	r30, r28
    1e52:	32 96       	adiw	r30, 0x02	; 2
    1e54:	44 c0       	rjmp	.+136    	; 0x1ede <malloc+0x124>
    1e56:	fe 01       	movw	r30, r28
    1e58:	e2 0f       	add	r30, r18
    1e5a:	f3 1f       	adc	r31, r19
    1e5c:	81 93       	st	Z+, r24
    1e5e:	91 93       	st	Z+, r25
    1e60:	22 50       	subi	r18, 0x02	; 2
    1e62:	31 09       	sbc	r19, r1
    1e64:	39 83       	std	Y+1, r19	; 0x01
    1e66:	28 83       	st	Y, r18
    1e68:	3a c0       	rjmp	.+116    	; 0x1ede <malloc+0x124>
    1e6a:	20 91 91 04 	lds	r18, 0x0491	; 0x800491 <__brkval>
    1e6e:	30 91 92 04 	lds	r19, 0x0492	; 0x800492 <__brkval+0x1>
    1e72:	23 2b       	or	r18, r19
    1e74:	41 f4       	brne	.+16     	; 0x1e86 <malloc+0xcc>
    1e76:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1e7a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1e7e:	30 93 92 04 	sts	0x0492, r19	; 0x800492 <__brkval+0x1>
    1e82:	20 93 91 04 	sts	0x0491, r18	; 0x800491 <__brkval>
    1e86:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__malloc_heap_end>
    1e8a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__malloc_heap_end+0x1>
    1e8e:	21 15       	cp	r18, r1
    1e90:	31 05       	cpc	r19, r1
    1e92:	41 f4       	brne	.+16     	; 0x1ea4 <malloc+0xea>
    1e94:	2d b7       	in	r18, 0x3d	; 61
    1e96:	3e b7       	in	r19, 0x3e	; 62
    1e98:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1e9c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1ea0:	24 1b       	sub	r18, r20
    1ea2:	35 0b       	sbc	r19, r21
    1ea4:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <__brkval>
    1ea8:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <__brkval+0x1>
    1eac:	e2 17       	cp	r30, r18
    1eae:	f3 07       	cpc	r31, r19
    1eb0:	a0 f4       	brcc	.+40     	; 0x1eda <malloc+0x120>
    1eb2:	2e 1b       	sub	r18, r30
    1eb4:	3f 0b       	sbc	r19, r31
    1eb6:	28 17       	cp	r18, r24
    1eb8:	39 07       	cpc	r19, r25
    1eba:	78 f0       	brcs	.+30     	; 0x1eda <malloc+0x120>
    1ebc:	ac 01       	movw	r20, r24
    1ebe:	4e 5f       	subi	r20, 0xFE	; 254
    1ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec2:	24 17       	cp	r18, r20
    1ec4:	35 07       	cpc	r19, r21
    1ec6:	48 f0       	brcs	.+18     	; 0x1eda <malloc+0x120>
    1ec8:	4e 0f       	add	r20, r30
    1eca:	5f 1f       	adc	r21, r31
    1ecc:	50 93 92 04 	sts	0x0492, r21	; 0x800492 <__brkval+0x1>
    1ed0:	40 93 91 04 	sts	0x0491, r20	; 0x800491 <__brkval>
    1ed4:	81 93       	st	Z+, r24
    1ed6:	91 93       	st	Z+, r25
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <malloc+0x124>
    1eda:	e0 e0       	ldi	r30, 0x00	; 0
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	cf 01       	movw	r24, r30
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	08 95       	ret

00001eea <free>:
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <free+0xa>
    1ef2:	81 c0       	rjmp	.+258    	; 0x1ff6 <free+0x10c>
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	32 97       	sbiw	r30, 0x02	; 2
    1ef8:	13 82       	std	Z+3, r1	; 0x03
    1efa:	12 82       	std	Z+2, r1	; 0x02
    1efc:	a0 91 93 04 	lds	r26, 0x0493	; 0x800493 <__flp>
    1f00:	b0 91 94 04 	lds	r27, 0x0494	; 0x800494 <__flp+0x1>
    1f04:	10 97       	sbiw	r26, 0x00	; 0
    1f06:	81 f4       	brne	.+32     	; 0x1f28 <free+0x3e>
    1f08:	20 81       	ld	r18, Z
    1f0a:	31 81       	ldd	r19, Z+1	; 0x01
    1f0c:	82 0f       	add	r24, r18
    1f0e:	93 1f       	adc	r25, r19
    1f10:	20 91 91 04 	lds	r18, 0x0491	; 0x800491 <__brkval>
    1f14:	30 91 92 04 	lds	r19, 0x0492	; 0x800492 <__brkval+0x1>
    1f18:	28 17       	cp	r18, r24
    1f1a:	39 07       	cpc	r19, r25
    1f1c:	51 f5       	brne	.+84     	; 0x1f72 <free+0x88>
    1f1e:	f0 93 92 04 	sts	0x0492, r31	; 0x800492 <__brkval+0x1>
    1f22:	e0 93 91 04 	sts	0x0491, r30	; 0x800491 <__brkval>
    1f26:	67 c0       	rjmp	.+206    	; 0x1ff6 <free+0x10c>
    1f28:	ed 01       	movw	r28, r26
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	ce 17       	cp	r28, r30
    1f30:	df 07       	cpc	r29, r31
    1f32:	40 f4       	brcc	.+16     	; 0x1f44 <free+0x5a>
    1f34:	4a 81       	ldd	r20, Y+2	; 0x02
    1f36:	5b 81       	ldd	r21, Y+3	; 0x03
    1f38:	9e 01       	movw	r18, r28
    1f3a:	41 15       	cp	r20, r1
    1f3c:	51 05       	cpc	r21, r1
    1f3e:	f1 f0       	breq	.+60     	; 0x1f7c <free+0x92>
    1f40:	ea 01       	movw	r28, r20
    1f42:	f5 cf       	rjmp	.-22     	; 0x1f2e <free+0x44>
    1f44:	d3 83       	std	Z+3, r29	; 0x03
    1f46:	c2 83       	std	Z+2, r28	; 0x02
    1f48:	40 81       	ld	r20, Z
    1f4a:	51 81       	ldd	r21, Z+1	; 0x01
    1f4c:	84 0f       	add	r24, r20
    1f4e:	95 1f       	adc	r25, r21
    1f50:	c8 17       	cp	r28, r24
    1f52:	d9 07       	cpc	r29, r25
    1f54:	59 f4       	brne	.+22     	; 0x1f6c <free+0x82>
    1f56:	88 81       	ld	r24, Y
    1f58:	99 81       	ldd	r25, Y+1	; 0x01
    1f5a:	84 0f       	add	r24, r20
    1f5c:	95 1f       	adc	r25, r21
    1f5e:	02 96       	adiw	r24, 0x02	; 2
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	80 83       	st	Z, r24
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	93 83       	std	Z+3, r25	; 0x03
    1f6a:	82 83       	std	Z+2, r24	; 0x02
    1f6c:	21 15       	cp	r18, r1
    1f6e:	31 05       	cpc	r19, r1
    1f70:	29 f4       	brne	.+10     	; 0x1f7c <free+0x92>
    1f72:	f0 93 94 04 	sts	0x0494, r31	; 0x800494 <__flp+0x1>
    1f76:	e0 93 93 04 	sts	0x0493, r30	; 0x800493 <__flp>
    1f7a:	3d c0       	rjmp	.+122    	; 0x1ff6 <free+0x10c>
    1f7c:	e9 01       	movw	r28, r18
    1f7e:	fb 83       	std	Y+3, r31	; 0x03
    1f80:	ea 83       	std	Y+2, r30	; 0x02
    1f82:	49 91       	ld	r20, Y+
    1f84:	59 91       	ld	r21, Y+
    1f86:	c4 0f       	add	r28, r20
    1f88:	d5 1f       	adc	r29, r21
    1f8a:	ec 17       	cp	r30, r28
    1f8c:	fd 07       	cpc	r31, r29
    1f8e:	61 f4       	brne	.+24     	; 0x1fa8 <free+0xbe>
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	84 0f       	add	r24, r20
    1f96:	95 1f       	adc	r25, r21
    1f98:	02 96       	adiw	r24, 0x02	; 2
    1f9a:	e9 01       	movw	r28, r18
    1f9c:	99 83       	std	Y+1, r25	; 0x01
    1f9e:	88 83       	st	Y, r24
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	9b 83       	std	Y+3, r25	; 0x03
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
    1fa8:	e0 e0       	ldi	r30, 0x00	; 0
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	12 96       	adiw	r26, 0x02	; 2
    1fae:	8d 91       	ld	r24, X+
    1fb0:	9c 91       	ld	r25, X
    1fb2:	13 97       	sbiw	r26, 0x03	; 3
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <free+0xd4>
    1fb8:	fd 01       	movw	r30, r26
    1fba:	dc 01       	movw	r26, r24
    1fbc:	f7 cf       	rjmp	.-18     	; 0x1fac <free+0xc2>
    1fbe:	8d 91       	ld	r24, X+
    1fc0:	9c 91       	ld	r25, X
    1fc2:	11 97       	sbiw	r26, 0x01	; 1
    1fc4:	9d 01       	movw	r18, r26
    1fc6:	2e 5f       	subi	r18, 0xFE	; 254
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	82 0f       	add	r24, r18
    1fcc:	93 1f       	adc	r25, r19
    1fce:	20 91 91 04 	lds	r18, 0x0491	; 0x800491 <__brkval>
    1fd2:	30 91 92 04 	lds	r19, 0x0492	; 0x800492 <__brkval+0x1>
    1fd6:	28 17       	cp	r18, r24
    1fd8:	39 07       	cpc	r19, r25
    1fda:	69 f4       	brne	.+26     	; 0x1ff6 <free+0x10c>
    1fdc:	30 97       	sbiw	r30, 0x00	; 0
    1fde:	29 f4       	brne	.+10     	; 0x1fea <free+0x100>
    1fe0:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <__flp+0x1>
    1fe4:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <__flp>
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <free+0x104>
    1fea:	13 82       	std	Z+3, r1	; 0x03
    1fec:	12 82       	std	Z+2, r1	; 0x02
    1fee:	b0 93 92 04 	sts	0x0492, r27	; 0x800492 <__brkval+0x1>
    1ff2:	a0 93 91 04 	sts	0x0491, r26	; 0x800491 <__brkval>
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	08 95       	ret

00001ffc <realloc>:
    1ffc:	a0 e0       	ldi	r26, 0x00	; 0
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e3 e0       	ldi	r30, 0x03	; 3
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	4e c1       	rjmp	.+668    	; 0x22a2 <__prologue_saves__+0x8>
    2006:	ec 01       	movw	r28, r24
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	19 f4       	brne	.+6      	; 0x2012 <realloc+0x16>
    200c:	cb 01       	movw	r24, r22
    200e:	d5 de       	rcall	.-598    	; 0x1dba <malloc>
    2010:	b0 c0       	rjmp	.+352    	; 0x2172 <realloc+0x176>
    2012:	fc 01       	movw	r30, r24
    2014:	e6 0f       	add	r30, r22
    2016:	f7 1f       	adc	r31, r23
    2018:	9c 01       	movw	r18, r24
    201a:	22 50       	subi	r18, 0x02	; 2
    201c:	31 09       	sbc	r19, r1
    201e:	e2 17       	cp	r30, r18
    2020:	f3 07       	cpc	r31, r19
    2022:	08 f4       	brcc	.+2      	; 0x2026 <realloc+0x2a>
    2024:	a4 c0       	rjmp	.+328    	; 0x216e <realloc+0x172>
    2026:	d9 01       	movw	r26, r18
    2028:	0d 91       	ld	r16, X+
    202a:	1c 91       	ld	r17, X
    202c:	11 97       	sbiw	r26, 0x01	; 1
    202e:	06 17       	cp	r16, r22
    2030:	17 07       	cpc	r17, r23
    2032:	a8 f0       	brcs	.+42     	; 0x205e <realloc+0x62>
    2034:	05 30       	cpi	r16, 0x05	; 5
    2036:	11 05       	cpc	r17, r1
    2038:	08 f4       	brcc	.+2      	; 0x203c <realloc+0x40>
    203a:	97 c0       	rjmp	.+302    	; 0x216a <realloc+0x16e>
    203c:	c8 01       	movw	r24, r16
    203e:	04 97       	sbiw	r24, 0x04	; 4
    2040:	86 17       	cp	r24, r22
    2042:	97 07       	cpc	r25, r23
    2044:	08 f4       	brcc	.+2      	; 0x2048 <realloc+0x4c>
    2046:	91 c0       	rjmp	.+290    	; 0x216a <realloc+0x16e>
    2048:	02 50       	subi	r16, 0x02	; 2
    204a:	11 09       	sbc	r17, r1
    204c:	06 1b       	sub	r16, r22
    204e:	17 0b       	sbc	r17, r23
    2050:	01 93       	st	Z+, r16
    2052:	11 93       	st	Z+, r17
    2054:	6d 93       	st	X+, r22
    2056:	7c 93       	st	X, r23
    2058:	cf 01       	movw	r24, r30
    205a:	47 df       	rcall	.-370    	; 0x1eea <free>
    205c:	86 c0       	rjmp	.+268    	; 0x216a <realloc+0x16e>
    205e:	5b 01       	movw	r10, r22
    2060:	a0 1a       	sub	r10, r16
    2062:	b1 0a       	sbc	r11, r17
    2064:	4c 01       	movw	r8, r24
    2066:	80 0e       	add	r8, r16
    2068:	91 1e       	adc	r9, r17
    206a:	a0 91 93 04 	lds	r26, 0x0493	; 0x800493 <__flp>
    206e:	b0 91 94 04 	lds	r27, 0x0494	; 0x800494 <__flp+0x1>
    2072:	61 2c       	mov	r6, r1
    2074:	71 2c       	mov	r7, r1
    2076:	e1 2c       	mov	r14, r1
    2078:	f1 2c       	mov	r15, r1
    207a:	10 97       	sbiw	r26, 0x00	; 0
    207c:	09 f4       	brne	.+2      	; 0x2080 <realloc+0x84>
    207e:	46 c0       	rjmp	.+140    	; 0x210c <realloc+0x110>
    2080:	8d 91       	ld	r24, X+
    2082:	9c 91       	ld	r25, X
    2084:	11 97       	sbiw	r26, 0x01	; 1
    2086:	a8 15       	cp	r26, r8
    2088:	b9 05       	cpc	r27, r9
    208a:	b1 f5       	brne	.+108    	; 0x20f8 <realloc+0xfc>
    208c:	6c 01       	movw	r12, r24
    208e:	42 e0       	ldi	r20, 0x02	; 2
    2090:	c4 0e       	add	r12, r20
    2092:	d1 1c       	adc	r13, r1
    2094:	ca 14       	cp	r12, r10
    2096:	db 04       	cpc	r13, r11
    2098:	78 f1       	brcs	.+94     	; 0x20f8 <realloc+0xfc>
    209a:	4c 01       	movw	r8, r24
    209c:	8a 18       	sub	r8, r10
    209e:	9b 08       	sbc	r9, r11
    20a0:	64 01       	movw	r12, r8
    20a2:	42 e0       	ldi	r20, 0x02	; 2
    20a4:	c4 0e       	add	r12, r20
    20a6:	d1 1c       	adc	r13, r1
    20a8:	12 96       	adiw	r26, 0x02	; 2
    20aa:	bc 90       	ld	r11, X
    20ac:	12 97       	sbiw	r26, 0x02	; 2
    20ae:	13 96       	adiw	r26, 0x03	; 3
    20b0:	ac 91       	ld	r26, X
    20b2:	b5 e0       	ldi	r27, 0x05	; 5
    20b4:	cb 16       	cp	r12, r27
    20b6:	d1 04       	cpc	r13, r1
    20b8:	40 f0       	brcs	.+16     	; 0x20ca <realloc+0xce>
    20ba:	b2 82       	std	Z+2, r11	; 0x02
    20bc:	a3 83       	std	Z+3, r26	; 0x03
    20be:	91 82       	std	Z+1, r9	; 0x01
    20c0:	80 82       	st	Z, r8
    20c2:	d9 01       	movw	r26, r18
    20c4:	6d 93       	st	X+, r22
    20c6:	7c 93       	st	X, r23
    20c8:	09 c0       	rjmp	.+18     	; 0x20dc <realloc+0xe0>
    20ca:	0e 5f       	subi	r16, 0xFE	; 254
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	80 0f       	add	r24, r16
    20d0:	91 1f       	adc	r25, r17
    20d2:	f9 01       	movw	r30, r18
    20d4:	91 83       	std	Z+1, r25	; 0x01
    20d6:	80 83       	st	Z, r24
    20d8:	eb 2d       	mov	r30, r11
    20da:	fa 2f       	mov	r31, r26
    20dc:	e1 14       	cp	r14, r1
    20de:	f1 04       	cpc	r15, r1
    20e0:	31 f0       	breq	.+12     	; 0x20ee <realloc+0xf2>
    20e2:	d7 01       	movw	r26, r14
    20e4:	13 96       	adiw	r26, 0x03	; 3
    20e6:	fc 93       	st	X, r31
    20e8:	ee 93       	st	-X, r30
    20ea:	12 97       	sbiw	r26, 0x02	; 2
    20ec:	3e c0       	rjmp	.+124    	; 0x216a <realloc+0x16e>
    20ee:	f0 93 94 04 	sts	0x0494, r31	; 0x800494 <__flp+0x1>
    20f2:	e0 93 93 04 	sts	0x0493, r30	; 0x800493 <__flp>
    20f6:	39 c0       	rjmp	.+114    	; 0x216a <realloc+0x16e>
    20f8:	68 16       	cp	r6, r24
    20fa:	79 06       	cpc	r7, r25
    20fc:	08 f4       	brcc	.+2      	; 0x2100 <realloc+0x104>
    20fe:	3c 01       	movw	r6, r24
    2100:	7d 01       	movw	r14, r26
    2102:	12 96       	adiw	r26, 0x02	; 2
    2104:	0d 90       	ld	r0, X+
    2106:	bc 91       	ld	r27, X
    2108:	a0 2d       	mov	r26, r0
    210a:	b7 cf       	rjmp	.-146    	; 0x207a <realloc+0x7e>
    210c:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <__brkval>
    2110:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <__brkval+0x1>
    2114:	88 16       	cp	r8, r24
    2116:	99 06       	cpc	r9, r25
    2118:	e1 f4       	brne	.+56     	; 0x2152 <realloc+0x156>
    211a:	66 16       	cp	r6, r22
    211c:	77 06       	cpc	r7, r23
    211e:	c8 f4       	brcc	.+50     	; 0x2152 <realloc+0x156>
    2120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__malloc_heap_end>
    2124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__malloc_heap_end+0x1>
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	41 f4       	brne	.+16     	; 0x213c <realloc+0x140>
    212c:	8d b7       	in	r24, 0x3d	; 61
    212e:	9e b7       	in	r25, 0x3e	; 62
    2130:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2134:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2138:	84 1b       	sub	r24, r20
    213a:	95 0b       	sbc	r25, r21
    213c:	e8 17       	cp	r30, r24
    213e:	f9 07       	cpc	r31, r25
    2140:	b0 f4       	brcc	.+44     	; 0x216e <realloc+0x172>
    2142:	f0 93 92 04 	sts	0x0492, r31	; 0x800492 <__brkval+0x1>
    2146:	e0 93 91 04 	sts	0x0491, r30	; 0x800491 <__brkval>
    214a:	f9 01       	movw	r30, r18
    214c:	71 83       	std	Z+1, r23	; 0x01
    214e:	60 83       	st	Z, r22
    2150:	0c c0       	rjmp	.+24     	; 0x216a <realloc+0x16e>
    2152:	cb 01       	movw	r24, r22
    2154:	32 de       	rcall	.-924    	; 0x1dba <malloc>
    2156:	7c 01       	movw	r14, r24
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	49 f0       	breq	.+18     	; 0x216e <realloc+0x172>
    215c:	a8 01       	movw	r20, r16
    215e:	be 01       	movw	r22, r28
    2160:	0c d0       	rcall	.+24     	; 0x217a <memcpy>
    2162:	ce 01       	movw	r24, r28
    2164:	c2 de       	rcall	.-636    	; 0x1eea <free>
    2166:	c7 01       	movw	r24, r14
    2168:	04 c0       	rjmp	.+8      	; 0x2172 <realloc+0x176>
    216a:	ce 01       	movw	r24, r28
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <realloc+0x176>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	ee e0       	ldi	r30, 0x0E	; 14
    2178:	b0 c0       	rjmp	.+352    	; 0x22da <__epilogue_restores__+0x8>

0000217a <memcpy>:
    217a:	fb 01       	movw	r30, r22
    217c:	dc 01       	movw	r26, r24
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <memcpy+0xa>
    2180:	01 90       	ld	r0, Z+
    2182:	0d 92       	st	X+, r0
    2184:	41 50       	subi	r20, 0x01	; 1
    2186:	50 40       	sbci	r21, 0x00	; 0
    2188:	d8 f7       	brcc	.-10     	; 0x2180 <memcpy+0x6>
    218a:	08 95       	ret

0000218c <strcmp>:
    218c:	fb 01       	movw	r30, r22
    218e:	dc 01       	movw	r26, r24
    2190:	8d 91       	ld	r24, X+
    2192:	01 90       	ld	r0, Z+
    2194:	80 19       	sub	r24, r0
    2196:	01 10       	cpse	r0, r1
    2198:	d9 f3       	breq	.-10     	; 0x2190 <strcmp+0x4>
    219a:	99 0b       	sbc	r25, r25
    219c:	08 95       	ret

0000219e <strcpy>:
    219e:	fb 01       	movw	r30, r22
    21a0:	dc 01       	movw	r26, r24
    21a2:	01 90       	ld	r0, Z+
    21a4:	0d 92       	st	X+, r0
    21a6:	00 20       	and	r0, r0
    21a8:	e1 f7       	brne	.-8      	; 0x21a2 <strcpy+0x4>
    21aa:	08 95       	ret

000021ac <strncpy>:
    21ac:	fb 01       	movw	r30, r22
    21ae:	dc 01       	movw	r26, r24
    21b0:	41 50       	subi	r20, 0x01	; 1
    21b2:	50 40       	sbci	r21, 0x00	; 0
    21b4:	48 f0       	brcs	.+18     	; 0x21c8 <strncpy+0x1c>
    21b6:	01 90       	ld	r0, Z+
    21b8:	0d 92       	st	X+, r0
    21ba:	00 20       	and	r0, r0
    21bc:	c9 f7       	brne	.-14     	; 0x21b0 <strncpy+0x4>
    21be:	01 c0       	rjmp	.+2      	; 0x21c2 <strncpy+0x16>
    21c0:	1d 92       	st	X+, r1
    21c2:	41 50       	subi	r20, 0x01	; 1
    21c4:	50 40       	sbci	r21, 0x00	; 0
    21c6:	e0 f7       	brcc	.-8      	; 0x21c0 <strncpy+0x14>
    21c8:	08 95       	ret

000021ca <itoa>:
    21ca:	45 32       	cpi	r20, 0x25	; 37
    21cc:	51 05       	cpc	r21, r1
    21ce:	18 f4       	brcc	.+6      	; 0x21d6 <itoa+0xc>
    21d0:	42 30       	cpi	r20, 0x02	; 2
    21d2:	08 f0       	brcs	.+2      	; 0x21d6 <itoa+0xc>
    21d4:	04 c0       	rjmp	.+8      	; 0x21de <__itoa_ncheck>
    21d6:	fb 01       	movw	r30, r22
    21d8:	10 82       	st	Z, r1
    21da:	cb 01       	movw	r24, r22
    21dc:	08 95       	ret

000021de <__itoa_ncheck>:
    21de:	bb 27       	eor	r27, r27
    21e0:	4a 30       	cpi	r20, 0x0A	; 10
    21e2:	31 f4       	brne	.+12     	; 0x21f0 <__itoa_ncheck+0x12>
    21e4:	99 23       	and	r25, r25
    21e6:	22 f4       	brpl	.+8      	; 0x21f0 <__itoa_ncheck+0x12>
    21e8:	bd e2       	ldi	r27, 0x2D	; 45
    21ea:	90 95       	com	r25
    21ec:	81 95       	neg	r24
    21ee:	9f 4f       	sbci	r25, 0xFF	; 255
    21f0:	2c c0       	rjmp	.+88     	; 0x224a <__utoa_common>

000021f2 <ultoa>:
    21f2:	25 32       	cpi	r18, 0x25	; 37
    21f4:	31 05       	cpc	r19, r1
    21f6:	18 f4       	brcc	.+6      	; 0x21fe <ultoa+0xc>
    21f8:	22 30       	cpi	r18, 0x02	; 2
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <ultoa+0xc>
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <__ultoa_ncheck>
    21fe:	fa 01       	movw	r30, r20
    2200:	10 82       	st	Z, r1
    2202:	ca 01       	movw	r24, r20
    2204:	08 95       	ret

00002206 <__ultoa_ncheck>:
    2206:	bb 27       	eor	r27, r27

00002208 <__ultoa_common>:
    2208:	fa 01       	movw	r30, r20
    220a:	a6 2f       	mov	r26, r22
    220c:	62 17       	cp	r22, r18
    220e:	71 05       	cpc	r23, r1
    2210:	81 05       	cpc	r24, r1
    2212:	91 05       	cpc	r25, r1
    2214:	33 0b       	sbc	r19, r19
    2216:	30 fb       	bst	r19, 0
    2218:	66 f0       	brts	.+24     	; 0x2232 <__ultoa_common+0x2a>
    221a:	aa 27       	eor	r26, r26
    221c:	66 0f       	add	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	88 1f       	adc	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	aa 1f       	adc	r26, r26
    2226:	a2 17       	cp	r26, r18
    2228:	10 f0       	brcs	.+4      	; 0x222e <__ultoa_common+0x26>
    222a:	a2 1b       	sub	r26, r18
    222c:	63 95       	inc	r22
    222e:	38 50       	subi	r19, 0x08	; 8
    2230:	a9 f7       	brne	.-22     	; 0x221c <__ultoa_common+0x14>
    2232:	a0 5d       	subi	r26, 0xD0	; 208
    2234:	aa 33       	cpi	r26, 0x3A	; 58
    2236:	08 f0       	brcs	.+2      	; 0x223a <__ultoa_common+0x32>
    2238:	a9 5d       	subi	r26, 0xD9	; 217
    223a:	a1 93       	st	Z+, r26
    223c:	36 f7       	brtc	.-52     	; 0x220a <__ultoa_common+0x2>
    223e:	b1 11       	cpse	r27, r1
    2240:	b1 93       	st	Z+, r27
    2242:	10 82       	st	Z, r1
    2244:	ca 01       	movw	r24, r20
    2246:	19 c0       	rjmp	.+50     	; 0x227a <strrev>

00002248 <__utoa_ncheck>:
    2248:	bb 27       	eor	r27, r27

0000224a <__utoa_common>:
    224a:	fb 01       	movw	r30, r22
    224c:	55 27       	eor	r21, r21
    224e:	aa 27       	eor	r26, r26
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	aa 1f       	adc	r26, r26
    2256:	a4 17       	cp	r26, r20
    2258:	10 f0       	brcs	.+4      	; 0x225e <__utoa_common+0x14>
    225a:	a4 1b       	sub	r26, r20
    225c:	83 95       	inc	r24
    225e:	50 51       	subi	r21, 0x10	; 16
    2260:	b9 f7       	brne	.-18     	; 0x2250 <__utoa_common+0x6>
    2262:	a0 5d       	subi	r26, 0xD0	; 208
    2264:	aa 33       	cpi	r26, 0x3A	; 58
    2266:	08 f0       	brcs	.+2      	; 0x226a <__utoa_common+0x20>
    2268:	a9 5d       	subi	r26, 0xD9	; 217
    226a:	a1 93       	st	Z+, r26
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	79 f7       	brne	.-34     	; 0x224e <__utoa_common+0x4>
    2270:	b1 11       	cpse	r27, r1
    2272:	b1 93       	st	Z+, r27
    2274:	11 92       	st	Z+, r1
    2276:	cb 01       	movw	r24, r22
    2278:	00 c0       	rjmp	.+0      	; 0x227a <strrev>

0000227a <strrev>:
    227a:	dc 01       	movw	r26, r24
    227c:	fc 01       	movw	r30, r24
    227e:	67 2f       	mov	r22, r23
    2280:	71 91       	ld	r23, Z+
    2282:	77 23       	and	r23, r23
    2284:	e1 f7       	brne	.-8      	; 0x227e <strrev+0x4>
    2286:	32 97       	sbiw	r30, 0x02	; 2
    2288:	04 c0       	rjmp	.+8      	; 0x2292 <strrev+0x18>
    228a:	7c 91       	ld	r23, X
    228c:	6d 93       	st	X+, r22
    228e:	70 83       	st	Z, r23
    2290:	62 91       	ld	r22, -Z
    2292:	ae 17       	cp	r26, r30
    2294:	bf 07       	cpc	r27, r31
    2296:	c8 f3       	brcs	.-14     	; 0x228a <strrev+0x10>
    2298:	08 95       	ret

0000229a <__prologue_saves__>:
    229a:	2f 92       	push	r2
    229c:	3f 92       	push	r3
    229e:	4f 92       	push	r4
    22a0:	5f 92       	push	r5
    22a2:	6f 92       	push	r6
    22a4:	7f 92       	push	r7
    22a6:	8f 92       	push	r8
    22a8:	9f 92       	push	r9
    22aa:	af 92       	push	r10
    22ac:	bf 92       	push	r11
    22ae:	cf 92       	push	r12
    22b0:	df 92       	push	r13
    22b2:	ef 92       	push	r14
    22b4:	ff 92       	push	r15
    22b6:	0f 93       	push	r16
    22b8:	1f 93       	push	r17
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	ca 1b       	sub	r28, r26
    22c4:	db 0b       	sbc	r29, r27
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	09 94       	ijmp

000022d2 <__epilogue_restores__>:
    22d2:	2a 88       	ldd	r2, Y+18	; 0x12
    22d4:	39 88       	ldd	r3, Y+17	; 0x11
    22d6:	48 88       	ldd	r4, Y+16	; 0x10
    22d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    22da:	6e 84       	ldd	r6, Y+14	; 0x0e
    22dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    22de:	8c 84       	ldd	r8, Y+12	; 0x0c
    22e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    22e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    22e4:	b9 84       	ldd	r11, Y+9	; 0x09
    22e6:	c8 84       	ldd	r12, Y+8	; 0x08
    22e8:	df 80       	ldd	r13, Y+7	; 0x07
    22ea:	ee 80       	ldd	r14, Y+6	; 0x06
    22ec:	fd 80       	ldd	r15, Y+5	; 0x05
    22ee:	0c 81       	ldd	r16, Y+4	; 0x04
    22f0:	1b 81       	ldd	r17, Y+3	; 0x03
    22f2:	aa 81       	ldd	r26, Y+2	; 0x02
    22f4:	b9 81       	ldd	r27, Y+1	; 0x01
    22f6:	ce 0f       	add	r28, r30
    22f8:	d1 1d       	adc	r29, r1
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	ed 01       	movw	r28, r26
    2306:	08 95       	ret

00002308 <__do_global_dtors>:
    2308:	10 e0       	ldi	r17, 0x00	; 0
    230a:	c3 e6       	ldi	r28, 0x63	; 99
    230c:	d0 e0       	ldi	r29, 0x00	; 0
    230e:	03 c0       	rjmp	.+6      	; 0x2316 <__do_global_dtors+0xe>
    2310:	fe 01       	movw	r30, r28
    2312:	4d dd       	rcall	.-1382   	; 0x1dae <__tablejump2__>
    2314:	21 96       	adiw	r28, 0x01	; 1
    2316:	c4 36       	cpi	r28, 0x64	; 100
    2318:	d1 07       	cpc	r29, r17
    231a:	d1 f7       	brne	.-12     	; 0x2310 <__do_global_dtors+0x8>
    231c:	f8 94       	cli

0000231e <__stop_program>:
    231e:	ff cf       	rjmp	.-2      	; 0x231e <__stop_program>
