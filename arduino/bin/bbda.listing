
bin/bbda.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data         000001b8  00800100  000031b6  0000324a  2**0  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031b6  00000000  00000000  00000094  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b7  008002b8  008002b8  00003402  2**0  ALLOC
  3 .stab         00009864  00000000  00000000  00003404  2**2  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006ae2  00000000  00000000  0000cc68  2**0  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  0001374a  2**0  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001376c  2**2  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000137ac  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00013da0  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  00014342  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  0001435f  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
008002b8 l    d  .bss	00000000 .bss
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Time.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800199 l     O .data	0000000c monthDays
00800476 l     O .bss	00000004 cacheTime
0080047a l     O .bss	00000007 tm
00800472 l     O .bss	00000004 sysTime
00800106 l     O .data	00000004 syncInterval
0080046a l     O .bss	00000004 nextSyncTime
00800468 l     O .bss	00000002 Status
0080046e l     O .bss	00000004 prevMillis
00000000 l    df *ABS*	00000000 bbda.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000007b4 l     F .text	00000006 _GLOBAL__sub_I_timeSynced
000007ba l     F .text	00000008 _GLOBAL__sub_D_timeSynced
00000000 l    df *ABS*	00000000 gsm_ard.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001ab l     O .text	00000009 AT_CIFSR
0000007d l     O .text	00000006 AT_ERROR
00000143 l     O .text	0000000e AT_CIPSERVER_R
00000135 l     O .text	0000000e AT_CIPSERVER_RESP
00000126 l     O .text	0000000f AT_CIPSERVER_SET
00000083 l     O .text	00000003 AT_OK
00000101 l     O .text	00000025 AT_CSTT
000000f8 l     O .text	00000009 AT_CIICR
00000071 l     O .text	0000000c AT_CIPCLOSE
00000068 l     O .text	00000009 AT_CIPCLOSE_OK
00000238 l     O .text	00000003 AT
00800275 l     O .data	00000020 _POSSIBLE_BRS
0000022f l     O .text	00000009 AT_CPIN_R
00000222 l     O .text	0000000d AT_CPIN_READY
00000213 l     O .text	0000000f AT_CPIN_SIM_PIN
00000206 l     O .text	0000000d AT_CPIN_SET
000001fc l     O .text	0000000a AT_CIURC_R
000001f2 l     O .text	0000000a AT_CIURC_0
000001e8 l     O .text	0000000a AT_CIURC_1
000001dd l     O .text	0000000b AT_CIURC_SET
000001d3 l     O .text	0000000a AT_CGATT_R
000001c9 l     O .text	0000000a AT_CGATT_0
000001bf l     O .text	0000000a AT_CGATT_1
000001b4 l     O .text	0000000b AT_CGATT_SET
0000019f l     O .text	0000000c AT_CIPMODE_R
00000193 l     O .text	0000000c AT_CIPMODE_0
00000187 l     O .text	0000000c AT_CIPMODE_1
0000017a l     O .text	0000000d AT_CIPMODE
00000151 l     O .text	00000029 AT_CGDCONT
000000ed l     O .text	0000000b AT_CIPMUX_R
000000e2 l     O .text	0000000b AT_CIPMUX_0
000000d7 l     O .text	0000000b AT_CIPMUX_1
000000cb l     O .text	0000000c AT_CIPMUX_SET
000000a6 l     O .text	00000025 AT_CIPSTART_SET
0000009b l     O .text	0000000b AT_CONNECT_OK
00000090 l     O .text	0000000b AT_CIPSEND
0000008e l     O .text	00000002 AT_CIPSEND_PROMPT
00000086 l     O .text	00000008 AT_CIPSEND_OK
00000000 l    df *ABS*	00000000 SoftwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 Print.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring_digital.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000277c l     F .text	00000052 turnOffPWM
00000000 l    df *ABS*	00000000 HardwareSerial0.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002962 l     F .text	0000005a _GLOBAL__sub_I___vector_18
00000000 l    df *ABS*	00000000 _clear_bss.o
000002c8 l       .text	00000000 .do_clear_bss_start
000002c6 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 socket_bbd.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 wiring.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008004c5 l     O .bss	00000001 timer0_fract
00000000 l    df *ABS*	00000000 hooks.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000028a0 l     F .text	00000002 __empty
00000000 l    df *ABS*	00000000 new.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 main.cpp
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _divmodhi4.o
00002e54 l       .text	00000000 __divmodhi4_neg1
00002e5c l       .text	00000000 __divmodhi4_neg2
00002e62 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
00002e8a l       .text	00000000 __udivmodsi4_ep
00002e70 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
00002ec0 l       .text	00000000 __divmodsi4_neg2
00002ece l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 _udivmodhi4.o
00002ef6 l       .text	00000000 __udivmodhi4_ep
00002ee8 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _exit.o
000031b4 l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 scheduler.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002ec  w      .text	00000000 __vector_22
008004ca g     O .bss	00000004 timer0_overflow_count
0000114e g     F .text	00000206 Gsm_Ard::_recv_socket(int)
00002bde g     F .text	00000002 operator new[](unsigned int)
0000246c g     F .text	00000136 SoftwareSerial::begin(long)
000028a0  w    F .text	00000002 yield
0000028b g     O .text	0000000a port_to_mode_PGM
000002ec  w      .text	00000000 __vector_1
00002a48 g     F .text	00000006 Print::println()
00002b9c g     F .text	00000020 Print::println(int, int)
00002016 g     F .text	0000006a Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)
00000c1a g     F .text	0000003a Gsm_Ard::Gsm_Ard()
0000223a g     F .text	00000050 SoftwareSerial::listen()
00000c1a g     F .text	0000003a Gsm_Ard::Gsm_Ard()
0000ffa0 g       *ABS*	00000000 __DATA_REGION_LENGTH__
008004c6 g     O .bss	00000004 timer0_millis
000009d6 g     F .text	0000000e year(unsigned long)
00002c12 g     F .text	0000001c HardwareSerial::peek()
00002a6e g     F .text	00000094 Print::printNumber(unsigned long, unsigned char)
00002ee0 g       .text	00000028 .hidden __udivmodhi4
000029bc g     F .text	00000052 Print::write(unsigned char const*, unsigned int)
00000c54 g     F .text	00000110 Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)
008004c3 g     O .bss	00000002 SoftwareSerial::active_object
00001cd2 g     F .text	000001b0 Gsm_Ard::_connect_tcp_socket()
00000068 g       .text	00000000 __trampolines_start
000031b6 g       .text	00000000 _etext
0000139e g     F .text	00000130 Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)
00002bfa g     F .text	00000018 HardwareSerial::available()
000002ec  w      .text	00000000 __vector_24
000002ee g     F .text	00000002 loop
00002c70 g     F .text	00000042 HardwareSerial::_tx_udr_empty_irq()
000002ec  w      .text	00000000 __vector_12
00002be0  w    F .text	00000002 initVariant
00002cf4 g     F .text	0000008c HardwareSerial::write(unsigned char)
000002ec g       .text	00000000 __bad_interrupt
0000241a g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
0000336e g       *ABS*	00000000 __data_load_end
000002ec  w      .text	00000000 __vector_6
00002f14 g     F .text	00000130 malloc
000010a2 g     F .text	000000ac Gsm_Ard::_recv_tcp_data(unsigned int*)
00800102 g     O .data	00000002 __malloc_heap_start
0000098c g     F .text	0000004a refreshCache(unsigned long)
00000068 g       .text	00000000 __trampolines_end
0000228a g     F .text	000000e8 __vector_3
00002846 g     F .text	0000005a digitalWrite
00002a0e  w    F .text	0000002a Print::write(char const*)
000027ce g     F .text	00000078 pinMode
00000263 g     O .text	00000014 digital_pin_to_port_PGM
000002ec  w      .text	00000000 __vector_23
000031b6 g       *ABS*	00000000 __data_load_start
0000029c g       .text	00000000 __dtors_end
0080056f g       .bss	00000000 __bss_end
0000237e g     F .text	0000004e SoftwareSerial::setTX(unsigned char)
000020ae g     F .text	00000042 SoftwareSerial::read()
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
0000188a g     F .text	00000448 Gsm_Ard::init_gsm_module()
000002ec  w      .text	00000000 __vector_25
0080056b g     O .bss	00000002 __brkval
00000e2a g     F .text	00000040 Gsm_Ard::_get_rsp(char**)
00002b90 g     F .text	0000000c Print::print(int, int)
00000bf6 g     F .text	00000024 Gsm_Ard::_clear_sock_buff()
00000b90 g     F .text	0000000c day()
000009e4 g     F .text	00000066 setTime(unsigned long)
000002ec  w      .text	00000000 __vector_11
008002b8 g     O .bss	00000001 started
0000029c  w      .text	00000000 __init
000021b2 g     F .text	00000030 SoftwareSerial::peek()
00000eb4 g     F .text	000001ee Gsm_Ard::_recv_string(int, int)
00000ba8 g     F .text	00000004 year()
00002c56  w    F .text	0000001a serialEventRun()
00002cb2 g     F .text	00000042 HardwareSerial::flush()
000002ec  w      .text	00000000 __vector_13
00002080 g     F .text	0000002e get_time_request_msg(char**)
000002ec  w      .text	00000000 __vector_17
00002906 g     F .text	0000004a __vector_19
00002a4e g     F .text	00000020 Print::println(char const*)
000002ec  w      .text	00000000 __vector_7
0000319e g       .text	00000014 .hidden __do_global_dtors
008004ce g     O .bss	0000009d Serial
008002a8  w    O .data	00000010 vtable for HardwareSerial
000002be g       .text	00000010 .hidden __do_clear_bss
00002a3a g     F .text	0000000e Print::print(char)
00002950 g     F .text	00000012 Serial0_available()
00810000 g       .stab	00000000 __eeprom_end
000020f0 g     F .text	000000c0 SoftwareSerial::write(unsigned char)
0000024f g     O .text	00000014 digital_pin_to_bit_mask_PGM
00002d80 g     F .text	000000be HardwareSerial::begin(unsigned long, unsigned char)
00800481 g     O .bss	00000001 SoftwareSerial::_receive_buffer_head
00800100 g     O .data	00000002 __malloc_heap_end
00002372 g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
00000e6a g     F .text	0000000c Gsm_Ard::get_gsm_state()
00000000 g       .text	00000000 __vectors
00003164 g     F .text	0000001c strncmp
008002b8 g       .data	00000000 __data_end
0000172c g     F .text	0000015e Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)
00003180 g     F .text	0000001e strncpy
00000000  w      .text	00000000 __vector_default
00002e3e g       .text	00000026 .hidden __divmodhi4
0000228a g     F .text	000000e8 __vector_5
000021e2 g     F .text	0000002c SoftwareSerial::available()
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00002f08 g       .text	0000000c .hidden __tablejump2__
00002706 g     F .text	00000076 init
000002f0 g     F .text	00000100 syncTimeWithServer()
00800483 g     O .bss	00000040 SoftwareSerial::_receive_buffer
00000296 g       .text	00000000 __ctors_start
00001354 g     F .text	0000004a Gsm_Ard::_write_cmd(char const*)
00800482 g     O .bss	00000001 SoftwareSerial::_receive_buffer_tail
000002a8 g       .text	00000016 .hidden __do_copy_data
00800466 g     O .bss	00000002 getTimePtr
008002b8 g       .bss	00000000 __bss_start
00002be2 g     F .text	00000018 main
00000bac g     F .text	00000006 Gsm_Ard::dettachGPRS()
00000a4a g     F .text	00000122 now()
0000228a g     F .text	000000e8 __vector_4
00002bd4 g     F .text	0000000a Print::print(unsigned int, int)
00002a38 g     F .text	00000002 Print::print(char const*)
0000264e g     F .text	0000004a micros
00002ed0 g       .text	00000010 .hidden __negsi2
000016b2 g     F .text	0000007a Gsm_Ard::_disconnect_tcp_socket()
0000220e g     F .text	0000002c SoftwareSerial::stopListening()
008002b9 g     O .bss	000001ad gsm
00000000  w      *ABS*	00000000 __heap_end
000002ec  w      .text	00000000 __vector_9
00002698 g     F .text	0000006e delay
000014ce g     F .text	000001e4 Gsm_Ard::attachGPRS()
000002ec  w      .text	00000000 __vector_2
00000b9c g     F .text	0000000c month()
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
000003f0 g     F .text	00000034 printDigits(int)
00000bd2 g     F .text	00000024 Gsm_Ard::_clear_rsp_buff()
00000424 g     F .text	00000074 digitalClockDisplay()
000007c2 g     F .text	000001ca breakTime(unsigned long, tmElements_t&)
00000bb2 g     F .text	00000020 Gsm_Ard::_clear_recv_buff()
000002ec  w      .text	00000000 __vector_21
00800295  w    O .data	00000010 vtable for SoftwareSerial
000002ec  w      .text	00000000 __vector_15
00000b78 g     F .text	0000000c minute()
00000281 g     O .text	0000000a port_to_output_PGM
00002bbc g     F .text	00000018 Print::print(unsigned long, int)
00000498 g     F .text	0000031c setup
0080056f g       .stab	00000000 __heap_start
0000029a g       .text	00000000 __dtors_start
0000029a g       .text	00000000 __ctors_end
00002ea8 g       .text	00000028 .hidden __divmodsi4
000008ff  w      *ABS*	00000000 __stack
00000277 g     O .text	0000000a port_to_input_PGM
00000e76 g     F .text	0000003e Gsm_Ard::get_socket_rsp(char**)
008002b8 g       .data	00000000 _edata
00002372 g     F .text	0000000c SoftwareSerial::~SoftwareSerial()
0080056f g       .stab	00000000 _end
000002ec  w      .text	00000000 __vector_8
00000b84 g     F .text	0000000c second()
0000023b g     O .text	00000014 digital_pin_to_timer_PGM
00003156 g     F .text	0000000e strcpy_P
00000d64 g     F .text	000000c6 Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)
0000319e  w      .text	00000000 .hidden exit
00002b02 g     F .text	0000008e Print::print(long, int)
00002e3e g       .text	00000000 .hidden _div
00002c2e g     F .text	00000028 HardwareSerial::read()
0080056d g     O .bss	00000002 __flp
00002e64 g       .text	00000044 .hidden __udivmodsi4
00000b6c g     F .text	0000000c hour()
00001e82 g     F .text	00000194 Gsm_Ard::_send_tcp_data(char*, unsigned int)
000023cc g     F .text	0000004e SoftwareSerial::setRX(unsigned char)
000021b0 g     F .text	00000002 SoftwareSerial::flush()
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0000319e g       .text	00000000 .hidden _exit
000002ec  w      .text	00000000 __vector_14
000002ec  w      .text	00000000 __vector_10
000025a2 g     F .text	00000094 __vector_16
00800100 g       .data	00000000 __data_start
0000241a g     F .text	00000052 SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)
000028a2 g     F .text	00000064 __vector_18
00000400 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00800104 g     O .data	00000002 __malloc_margin
000002ec  w      .text	00000000 __vector_20
00002636 g     F .text	00000018 millis
00003044 g     F .text	00000112 free
000002ce g       .text	00000016 .hidden __do_global_ctors



Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	4d c1       	rjmp	.+666    	; 0x29c <__dtors_end>
       2:	00 00       	nop
       4:	73 c1       	rjmp	.+742    	; 0x2ec <__bad_interrupt>
       6:	00 00       	nop
       8:	71 c1       	rjmp	.+738    	; 0x2ec <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 45 11 	jmp	0x228a	; 0x228a <__vector_3>
      10:	0c 94 45 11 	jmp	0x228a	; 0x228a <__vector_3>
      14:	0c 94 45 11 	jmp	0x228a	; 0x228a <__vector_3>
      18:	69 c1       	rjmp	.+722    	; 0x2ec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	67 c1       	rjmp	.+718    	; 0x2ec <__bad_interrupt>
      1e:	00 00       	nop
      20:	65 c1       	rjmp	.+714    	; 0x2ec <__bad_interrupt>
      22:	00 00       	nop
      24:	63 c1       	rjmp	.+710    	; 0x2ec <__bad_interrupt>
      26:	00 00       	nop
      28:	61 c1       	rjmp	.+706    	; 0x2ec <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5f c1       	rjmp	.+702    	; 0x2ec <__bad_interrupt>
      2e:	00 00       	nop
      30:	5d c1       	rjmp	.+698    	; 0x2ec <__bad_interrupt>
      32:	00 00       	nop
      34:	5b c1       	rjmp	.+694    	; 0x2ec <__bad_interrupt>
      36:	00 00       	nop
      38:	59 c1       	rjmp	.+690    	; 0x2ec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	57 c1       	rjmp	.+686    	; 0x2ec <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__vector_16>
      44:	53 c1       	rjmp	.+678    	; 0x2ec <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <__vector_18>
      4c:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__vector_19>
      50:	4d c1       	rjmp	.+666    	; 0x2ec <__bad_interrupt>
      52:	00 00       	nop
      54:	4b c1       	rjmp	.+662    	; 0x2ec <__bad_interrupt>
      56:	00 00       	nop
      58:	49 c1       	rjmp	.+658    	; 0x2ec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	47 c1       	rjmp	.+654    	; 0x2ec <__bad_interrupt>
      5e:	00 00       	nop
      60:	45 c1       	rjmp	.+650    	; 0x2ec <__bad_interrupt>
      62:	00 00       	nop
      64:	43 c1       	rjmp	.+646    	; 0x2ec <__bad_interrupt>
	...

00000068 <__trampolines_end>:
__trampolines_start():
      68:	43 4c       	sbci	r20, 0xC3	; 195
      6a:	4f 53       	subi	r20, 0x3F	; 63
      6c:	45 20       	and	r4, r5
      6e:	4f 4b       	sbci	r20, 0xBF	; 191
	...

00000071 <AT_CIPCLOSE>:
      71:	41 54 2b 43 49 50 43 4c 4f 53 45 00                 AT+CIPCLOSE.

0000007d <AT_ERROR>:
      7d:	45 52 52 4f 52 00                                   ERROR.

00000083 <AT_OK>:
      83:	4f 4b 00                                            OK.

00000086 <AT_CIPSEND_OK>:
      86:	53 45 4e 44 20 4f 4b 00                             SEND OK.

0000008e <AT_CIPSEND_PROMPT>:
      8e:	3e 00                                               >.

00000090 <AT_CIPSEND>:
      90:	41 54 2b 43 49 50 53 45 4e 44 00                    AT+CIPSEND.

0000009b <AT_CONNECT_OK>:
      9b:	43 4f 4e 4e 45 43 54 20 4f 4b 00                    CONNECT OK.

000000a6 <AT_CIPSTART_SET>:
      a6:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 54 43 50     AT+CIPSTART="TCP
      b6:	22 2c 22 31 37 38 2e 36 32 2e 36 2e 34 34 22 2c     ","178.62.6.44",
      c6:	37 37 37 37 00                                      7777.

000000cb <AT_CIPMUX_SET>:
      cb:	41 54 2b 43 49 50 4d 55 58 3d 30 00                 AT+CIPMUX=0.

000000d7 <AT_CIPMUX_1>:
      d7:	2b 43 49 50 4d 55 58 3a 20 31 00                    +CIPMUX: 1.

000000e2 <AT_CIPMUX_0>:
      e2:	2b 43 49 50 4d 55 58 3a 20 30 00                    +CIPMUX: 0.

000000ed <AT_CIPMUX_R>:
      ed:	41 54 2b 43 49 50 4d 55 58 3f 00                    AT+CIPMUX?.

000000f8 <AT_CIICR>:
      f8:	41 54 2b 43 49 49 43 52 00                          AT+CIICR.

00000101 <AT_CSTT>:
     101:	41 54 2b 43 53 54 54 3d 22 69 6e 74 65 72 6e 65     AT+CSTT="interne
     111:	74 2e 76 6f 64 61 66 6f 6e 65 2e 70 74 22 2c 22     t.vodafone.pt","
     121:	22 2c 22 22 00                                      ","".

00000126 <AT_CIPSERVER_SET>:
     126:	41 54 2b 43 49 50 53 45 52 56 45 52 3d 30 00        AT+CIPSERVER=0.

00000135 <AT_CIPSERVER_RESP>:
     135:	2b 43 49 50 53 45 52 56 45 52 3a 20 30 00           +CIPSERVER: 0.

00000143 <AT_CIPSERVER_R>:
     143:	41 54 2b 43 49 50 53 45 52 56 45 52 3f 00           AT+CIPSERVER?.

00000151 <AT_CGDCONT>:
     151:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     161:	22 2c 22 69 6e 74 65 72 6e 65 74 2e 76 6f 64 61     ","internet.voda
     171:	66 6f 6e 65 2e 70 74 22 00                          fone.pt".

0000017a <AT_CIPMODE>:
     17a:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 00              AT+CIPMODE=0.

00000187 <AT_CIPMODE_1>:
     187:	2b 43 49 50 4d 4f 44 45 3a 20 31 00                 +CIPMODE: 1.

00000193 <AT_CIPMODE_0>:
     193:	2b 43 49 50 4d 4f 44 45 3a 20 30 00                 +CIPMODE: 0.

0000019f <AT_CIPMODE_R>:
     19f:	41 54 2b 43 49 50 4d 4f 44 45 3f 00                 AT+CIPMODE?.

000001ab <AT_CIFSR>:
     1ab:	41 54 2b 43 49 46 53 52 00                          AT+CIFSR.

000001b4 <AT_CGATT_SET>:
     1b4:	41 54 2b 43 47 41 54 54 3d 31 00                    AT+CGATT=1.

000001bf <AT_CGATT_1>:
     1bf:	2b 43 47 41 54 54 3a 20 31 00                       +CGATT: 1.

000001c9 <AT_CGATT_0>:
     1c9:	2b 43 47 41 54 54 3a 20 30 00                       +CGATT: 0.

000001d3 <AT_CGATT_R>:
     1d3:	41 54 2b 43 47 41 54 54 3f 00                       AT+CGATT?.

000001dd <AT_CIURC_SET>:
     1dd:	41 54 2b 43 49 55 52 43 3d 30 00                    AT+CIURC=0.

000001e8 <AT_CIURC_1>:
     1e8:	2b 43 49 55 52 43 3a 20 30 00                       +CIURC: 0.

000001f2 <AT_CIURC_0>:
     1f2:	2b 43 49 55 52 43 3a 20 31 00                       +CIURC: 1.

000001fc <AT_CIURC_R>:
     1fc:	41 54 2b 43 49 55 52 43 3f 00                       AT+CIURC?.

00000206 <AT_CPIN_SET>:
     206:	41 54 2b 43 50 49 4e 3d 30 30 34 38 00              AT+CPIN=0048.

00000213 <AT_CPIN_SIM_PIN>:
     213:	2b 43 50 49 4e 3a 20 53 49 4d 20 50 49 4e 00        +CPIN: SIM PIN.

00000222 <AT_CPIN_READY>:
     222:	2b 43 50 49 4e 3a 20 52 45 41 44 59 00              +CPIN: READY.

0000022f <AT_CPIN_R>:
     22f:	41 54 2b 43 50 49 4e 3f 00                          AT+CPIN?.

00000238 <AT>:
     238:	41 54 00                                            AT.

0000023b <digital_pin_to_timer_PGM>:
     23b:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     24b:	00 00 00 00                                         ....

0000024f <digital_pin_to_bit_mask_PGM>:
     24f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     25f:	04 08 10 20                                         ... 

00000263 <digital_pin_to_port_PGM>:
     263:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     273:	03 03 03 03                                         ....

00000277 <port_to_input_PGM>:
     277:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000281 <port_to_output_PGM>:
     281:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000028b <port_to_mode_PGM>:
     28b:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

00000296 <__ctors_start>:
__ctors_start():
     296:	da 03       	fmulsu	r21, r18
     298:	b1 14       	cp	r11, r1

0000029a <__ctors_end>:
__dtors_start():
     29a:	dd 03       	fmulsu	r21, r21

0000029c <__dtors_end>:
__dtors_end():
     29c:	11 24       	eor	r1, r1
     29e:	1f be       	out	0x3f, r1	; 63
     2a0:	cf ef       	ldi	r28, 0xFF	; 255
     2a2:	d8 e0       	ldi	r29, 0x08	; 8
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	cd bf       	out	0x3d, r28	; 61

000002a8 <__do_copy_data>:
__do_copy_data():
     2a8:	12 e0       	ldi	r17, 0x02	; 2
     2aa:	a0 e0       	ldi	r26, 0x00	; 0
     2ac:	b1 e0       	ldi	r27, 0x01	; 1
     2ae:	e6 eb       	ldi	r30, 0xB6	; 182
     2b0:	f1 e3       	ldi	r31, 0x31	; 49
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__do_copy_data+0x10>
     2b4:	05 90       	lpm	r0, Z+
     2b6:	0d 92       	st	X+, r0
     2b8:	a8 3b       	cpi	r26, 0xB8	; 184
     2ba:	b1 07       	cpc	r27, r17
     2bc:	d9 f7       	brne	.-10     	; 0x2b4 <__do_copy_data+0xc>

000002be <__do_clear_bss>:
__do_clear_bss():
     2be:	25 e0       	ldi	r18, 0x05	; 5
     2c0:	a8 eb       	ldi	r26, 0xB8	; 184
     2c2:	b2 e0       	ldi	r27, 0x02	; 2
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	af 36       	cpi	r26, 0x6F	; 111
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>

000002ce <__do_global_ctors>:
__do_global_ctors():
     2ce:	11 e0       	ldi	r17, 0x01	; 1
     2d0:	cd e4       	ldi	r28, 0x4D	; 77
     2d2:	d1 e0       	ldi	r29, 0x01	; 1
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <__do_global_ctors+0x10>
     2d6:	21 97       	sbiw	r28, 0x01	; 1
     2d8:	fe 01       	movw	r30, r28
     2da:	0e 94 84 17 	call	0x2f08	; 0x2f08 <__tablejump2__>
     2de:	cb 34       	cpi	r28, 0x4B	; 75
     2e0:	d1 07       	cpc	r29, r17
     2e2:	c9 f7       	brne	.-14     	; 0x2d6 <__do_global_ctors+0x8>
     2e4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <main>
     2e8:	0c 94 cf 18 	jmp	0x319e	; 0x319e <__do_global_dtors>

000002ec <__bad_interrupt>:
__vector_22():
     2ec:	89 ce       	rjmp	.-750    	; 0x0 <__vectors>

000002ee <loop>:
loop():
bin/bbda.cpp:84
  } while(!started);

}

void loop()
{
     2ee:	08 95       	ret

000002f0 <syncTimeWithServer()>:
_Z18syncTimeWithServerv():
bin/bbda.cpp:149
  -2    bad http response
  -3    error setting new time
  -4    error detaching gprs
  -10   gprs module not active
*/
int syncTimeWithServer(){
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <syncTimeWithServer()+0xe>
     2fe:	00 d0       	rcall	.+0      	; 0x300 <syncTimeWithServer()+0x10>
     300:	00 d0       	rcall	.+0      	; 0x302 <syncTimeWithServer()+0x12>
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
bin/bbda.cpp:153
  int n;
  unsigned int rsp_len;

  if(gsm.get_gsm_state()!=GSM_IP_STATE || !started){
     306:	89 eb       	ldi	r24, 0xB9	; 185
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	af d5       	rcall	.+2910   	; 0xe6a <Gsm_Ard::get_gsm_state()>
     30c:	04 97       	sbiw	r24, 0x04	; 4
     30e:	21 f4       	brne	.+8      	; 0x318 <syncTimeWithServer()+0x28>
     310:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end>
     314:	81 11       	cpse	r24, r1
     316:	41 c0       	rjmp	.+130    	; 0x39a <syncTimeWithServer()+0xaa>
bin/bbda.cpp:154
    return 1;
     318:	01 e0       	ldi	r16, 0x01	; 1
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	5b c0       	rjmp	.+182    	; 0x3d4 <syncTimeWithServer()+0xe4>
bin/bbda.cpp:169
  n=gsm.send_socket_msg(msg, REQUEST_TIME_MSG_SIZE, &rsp_len);
  if(n){
    return 30000+n;
  }

  char* rsp = new char[rsp_len];
     31e:	8d 81       	ldd	r24, Y+5	; 0x05
     320:	9e 81       	ldd	r25, Y+6	; 0x06
     322:	0e 94 ef 15 	call	0x2bde	; 0x2bde <operator new[](unsigned int)>
     326:	9a 83       	std	Y+2, r25	; 0x02
     328:	89 83       	std	Y+1, r24	; 0x01
bin/bbda.cpp:170
  n=gsm.get_socket_rsp(&rsp);
     32a:	be 01       	movw	r22, r28
     32c:	6f 5f       	subi	r22, 0xFF	; 255
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	89 eb       	ldi	r24, 0xB9	; 185
     332:	92 e0       	ldi	r25, 0x02	; 2
     334:	a0 d5       	rcall	.+2880   	; 0xe76 <Gsm_Ard::get_socket_rsp(char**)>
     336:	8c 01       	movw	r16, r24
bin/bbda.cpp:171
  if(n){
     338:	89 2b       	or	r24, r25
     33a:	19 f0       	breq	.+6      	; 0x342 <syncTimeWithServer()+0x52>
bin/bbda.cpp:172
    return 40000+n;
     33c:	00 5c       	subi	r16, 0xC0	; 192
     33e:	13 46       	sbci	r17, 0x63	; 99
     340:	49 c0       	rjmp	.+146    	; 0x3d4 <syncTimeWithServer()+0xe4>
bin/bbda.cpp:175
  }

  Serial.print("SOCKET RSP:");
     342:	6a e0       	ldi	r22, 0x0A	; 10
     344:	71 e0       	ldi	r23, 0x01	; 1
     346:	8e ec       	ldi	r24, 0xCE	; 206
     348:	94 e0       	ldi	r25, 0x04	; 4
     34a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
bin/bbda.cpp:176
  for(unsigned int i=0;i<rsp_len;i++){
     34e:	e1 2c       	mov	r14, r1
     350:	f1 2c       	mov	r15, r1
     352:	8d 81       	ldd	r24, Y+5	; 0x05
     354:	9e 81       	ldd	r25, Y+6	; 0x06
     356:	e8 16       	cp	r14, r24
     358:	f9 06       	cpc	r15, r25
     35a:	b8 f4       	brcc	.+46     	; 0x38a <syncTimeWithServer()+0x9a>
bin/bbda.cpp:177
    Serial.print((unsigned int) rsp[i]);
     35c:	e9 81       	ldd	r30, Y+1	; 0x01
     35e:	fa 81       	ldd	r31, Y+2	; 0x02
     360:	ee 0d       	add	r30, r14
     362:	ff 1d       	adc	r31, r15
     364:	60 81       	ld	r22, Z
     366:	06 2e       	mov	r0, r22
     368:	00 0c       	add	r0, r0
     36a:	77 0b       	sbc	r23, r23
     36c:	4a e0       	ldi	r20, 0x0A	; 10
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	8e ec       	ldi	r24, 0xCE	; 206
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <Print::print(unsigned int, int)>
bin/bbda.cpp:178
    Serial.print(' ');
     378:	60 e2       	ldi	r22, 0x20	; 32
     37a:	8e ec       	ldi	r24, 0xCE	; 206
     37c:	94 e0       	ldi	r25, 0x04	; 4
     37e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <Print::print(char)>
bin/bbda.cpp:176
  for(unsigned int i=0;i<rsp_len;i++){
     382:	8f ef       	ldi	r24, 0xFF	; 255
     384:	e8 1a       	sub	r14, r24
     386:	f8 0a       	sbc	r15, r24
     388:	e4 cf       	rjmp	.-56     	; 0x352 <syncTimeWithServer()+0x62>
bin/bbda.cpp:180
  }
  Serial.println();
     38a:	8e ec       	ldi	r24, 0xCE	; 206
     38c:	94 e0       	ldi	r25, 0x04	; 4
     38e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <Print::println()>
     392:	20 c0       	rjmp	.+64     	; 0x3d4 <syncTimeWithServer()+0xe4>
bin/bbda.cpp:160
    return 2;
     394:	02 e0       	ldi	r16, 0x02	; 2
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	1d c0       	rjmp	.+58     	; 0x3d4 <syncTimeWithServer()+0xe4>
bin/bbda.cpp:157
  char * msg = new char[REQUEST_TIME_MSG_SIZE];
     39a:	89 e0       	ldi	r24, 0x09	; 9
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <operator new[](unsigned int)>
     3a2:	9c 83       	std	Y+4, r25	; 0x04
     3a4:	8b 83       	std	Y+3, r24	; 0x03
bin/bbda.cpp:158
  n=get_time_request_msg(&msg);
     3a6:	ce 01       	movw	r24, r28
     3a8:	03 96       	adiw	r24, 0x03	; 3
     3aa:	0e 94 40 10 	call	0x2080	; 0x2080 <get_time_request_msg(char**)>
bin/bbda.cpp:159
  if(n){
     3ae:	89 2b       	or	r24, r25
     3b0:	89 f7       	brne	.-30     	; 0x394 <syncTimeWithServer()+0xa4>
bin/bbda.cpp:164
  n=gsm.send_socket_msg(msg, REQUEST_TIME_MSG_SIZE, &rsp_len);
     3b2:	6b 81       	ldd	r22, Y+3	; 0x03
     3b4:	7c 81       	ldd	r23, Y+4	; 0x04
     3b6:	9e 01       	movw	r18, r28
     3b8:	2b 5f       	subi	r18, 0xFB	; 251
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255
     3bc:	49 e0       	ldi	r20, 0x09	; 9
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	89 eb       	ldi	r24, 0xB9	; 185
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 0b 10 	call	0x2016	; 0x2016 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)>
bin/bbda.cpp:165
  if(n){
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	09 f4       	brne	.+2      	; 0x3ce <syncTimeWithServer()+0xde>
     3cc:	a8 cf       	rjmp	.-176    	; 0x31e <syncTimeWithServer()+0x2e>
bin/bbda.cpp:166
    return 30000+n;
     3ce:	8c 01       	movw	r16, r24
     3d0:	00 5d       	subi	r16, 0xD0	; 208
     3d2:	1a 48       	sbci	r17, 0x8A	; 138
bin/bbda.cpp:183

  return 0;
}
     3d4:	c8 01       	movw	r24, r16
     3d6:	26 96       	adiw	r28, 0x06	; 6
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	08 95       	ret

000003f0 <printDigits(int)>:
_Z11printDigitsi():
bin/bbda.cpp:443
  Serial.print(" ");
  Serial.print(year());
  Serial.println();
}

void printDigits(int digits){
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	ec 01       	movw	r28, r24
bin/bbda.cpp:445
  // utility function for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
     3f6:	64 e1       	ldi	r22, 0x14	; 20
     3f8:	71 e0       	ldi	r23, 0x01	; 1
     3fa:	8e ec       	ldi	r24, 0xCE	; 206
     3fc:	94 e0       	ldi	r25, 0x04	; 4
     3fe:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
bin/bbda.cpp:446
  if(digits < 10)
     402:	ca 30       	cpi	r28, 0x0A	; 10
     404:	d1 05       	cpc	r29, r1
     406:	2c f4       	brge	.+10     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
bin/bbda.cpp:447
    Serial.print('0');
     408:	60 e3       	ldi	r22, 0x30	; 48
     40a:	8e ec       	ldi	r24, 0xCE	; 206
     40c:	94 e0       	ldi	r25, 0x04	; 4
     40e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <Print::print(char)>
bin/bbda.cpp:448
  Serial.print(digits);
     412:	4a e0       	ldi	r20, 0x0A	; 10
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	be 01       	movw	r22, r28
     418:	8e ec       	ldi	r24, 0xCE	; 206
     41a:	94 e0       	ldi	r25, 0x04	; 4
bin/bbda.cpp:449
}
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
bin/bbda.cpp:448
  Serial.print(digits);
     420:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <Print::print(int, int)>

00000424 <digitalClockDisplay()>:
_Z19digitalClockDisplayv():
bin/bbda.cpp:429
void digitalClockDisplay(){
     424:	a3 d3       	rcall	.+1862   	; 0xb6c <hour()>
     426:	4a e0       	ldi	r20, 0x0A	; 10
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	bc 01       	movw	r22, r24
     42c:	8e ec       	ldi	r24, 0xCE	; 206
     42e:	94 e0       	ldi	r25, 0x04	; 4
     430:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <Print::print(int, int)>
     434:	a1 d3       	rcall	.+1858   	; 0xb78 <minute()>
     436:	dc df       	rcall	.-72     	; 0x3f0 <printDigits(int)>
     438:	a5 d3       	rcall	.+1866   	; 0xb84 <second()>
     43a:	da df       	rcall	.-76     	; 0x3f0 <printDigits(int)>
     43c:	6c e4       	ldi	r22, 0x4C	; 76
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	8e ec       	ldi	r24, 0xCE	; 206
     442:	94 e0       	ldi	r25, 0x04	; 4
     444:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
     448:	a3 d3       	rcall	.+1862   	; 0xb90 <day()>
     44a:	4a e0       	ldi	r20, 0x0A	; 10
     44c:	50 e0       	ldi	r21, 0x00	; 0
     44e:	bc 01       	movw	r22, r24
     450:	8e ec       	ldi	r24, 0xCE	; 206
     452:	94 e0       	ldi	r25, 0x04	; 4
     454:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <Print::print(int, int)>
     458:	6c e4       	ldi	r22, 0x4C	; 76
     45a:	71 e0       	ldi	r23, 0x01	; 1
     45c:	8e ec       	ldi	r24, 0xCE	; 206
     45e:	94 e0       	ldi	r25, 0x04	; 4
     460:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
     464:	9b d3       	rcall	.+1846   	; 0xb9c <month()>
     466:	4a e0       	ldi	r20, 0x0A	; 10
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	bc 01       	movw	r22, r24
     46c:	8e ec       	ldi	r24, 0xCE	; 206
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <Print::print(int, int)>
     474:	6c e4       	ldi	r22, 0x4C	; 76
     476:	71 e0       	ldi	r23, 0x01	; 1
     478:	8e ec       	ldi	r24, 0xCE	; 206
     47a:	94 e0       	ldi	r25, 0x04	; 4
     47c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
     480:	93 d3       	rcall	.+1830   	; 0xba8 <year()>
     482:	4a e0       	ldi	r20, 0x0A	; 10
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	bc 01       	movw	r22, r24
     488:	8e ec       	ldi	r24, 0xCE	; 206
     48a:	94 e0       	ldi	r25, 0x04	; 4
     48c:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <Print::print(int, int)>
     490:	8e ec       	ldi	r24, 0xCE	; 206
     492:	94 e0       	ldi	r25, 0x04	; 4
     494:	0c 94 24 15 	jmp	0x2a48	; 0x2a48 <Print::println()>

00000498 <setup>:
setup():
bin/bbda.cpp:32
{
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	cd 5a       	subi	r28, 0xAD	; 173
     4a8:	d1 40       	sbci	r29, 0x01	; 1
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     4b4:	26 e0       	ldi	r18, 0x06	; 6
     4b6:	40 e8       	ldi	r20, 0x80	; 128
     4b8:	55 e2       	ldi	r21, 0x25	; 37
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	8e ec       	ldi	r24, 0xCE	; 206
     4c0:	94 e0       	ldi	r25, 0x04	; 4
     4c2:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <HardwareSerial::begin(unsigned long, unsigned char)>
bin/bbda.cpp:40
  gsm=Gsm_Ard();
     4c6:	ce 01       	movw	r24, r28
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	a7 d3       	rcall	.+1870   	; 0xc1a <Gsm_Ard::Gsm_Ard()>
     4cc:	fe 01       	movw	r30, r28
     4ce:	31 96       	adiw	r30, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:29

#define DEBUG_STATES

enum GSM_STATE{GSM_OFF_STATE, GSM_ON_STATE, GSM_PIN_STATE, GSM_GPRS_STATE, GSM_IP_STATE, GSM_TCP_STATE};
enum BUFF_STATE{BUFF_READY, BUFF_USED};

     4d0:	a9 eb       	ldi	r26, 0xB9	; 185
     4d2:	b2 e0       	ldi	r27, 0x02	; 2
     4d4:	81 91       	ld	r24, Z+
     4d6:	8d 93       	st	X+, r24
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	a9 33       	cpi	r26, 0x39	; 57
     4dc:	b8 07       	cpc	r27, r24
     4de:	d1 f7       	brne	.-12     	; 0x4d4 <setup+0x3c>
     4e0:	de 01       	movw	r26, r28
     4e2:	af 57       	subi	r26, 0x7F	; 127
     4e4:	bf 4f       	sbci	r27, 0xFF	; 255
     4e6:	e9 e3       	ldi	r30, 0x39	; 57
     4e8:	f3 e0       	ldi	r31, 0x03	; 3
     4ea:	8d 91       	ld	r24, X+
     4ec:	81 93       	st	Z+, r24
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	e9 3b       	cpi	r30, 0xB9	; 185
     4f2:	f8 07       	cpc	r31, r24
     4f4:	d1 f7       	brne	.-12     	; 0x4ea <setup+0x52>
     4f6:	de 01       	movw	r26, r28
     4f8:	af 5f       	subi	r26, 0xFF	; 255
     4fa:	be 4f       	sbci	r27, 0xFE	; 254
     4fc:	e9 eb       	ldi	r30, 0xB9	; 185
     4fe:	f3 e0       	ldi	r31, 0x03	; 3
     500:	8d 91       	ld	r24, X+
     502:	81 93       	st	Z+, r24
     504:	84 e0       	ldi	r24, 0x04	; 4
     506:	e9 33       	cpi	r30, 0x39	; 57
     508:	f8 07       	cpc	r31, r24
     50a:	d1 f7       	brne	.-12     	; 0x500 <setup+0x68>
     50c:	cf 57       	subi	r28, 0x7F	; 127
     50e:	de 4f       	sbci	r29, 0xFE	; 254
     510:	88 81       	ld	r24, Y
     512:	99 81       	ldd	r25, Y+1	; 0x01
     514:	c1 58       	subi	r28, 0x81	; 129
     516:	d1 40       	sbci	r29, 0x01	; 1
     518:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <gsm+0x181>
     51c:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <gsm+0x180>
     520:	cd 57       	subi	r28, 0x7D	; 125
     522:	de 4f       	sbci	r29, 0xFE	; 254
     524:	88 81       	ld	r24, Y
     526:	99 81       	ldd	r25, Y+1	; 0x01
     528:	c3 58       	subi	r28, 0x83	; 131
     52a:	d1 40       	sbci	r29, 0x01	; 1
     52c:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <gsm+0x183>
     530:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <gsm+0x182>
     534:	cb 57       	subi	r28, 0x7B	; 123
     536:	de 4f       	sbci	r29, 0xFE	; 254
     538:	88 81       	ld	r24, Y
     53a:	99 81       	ldd	r25, Y+1	; 0x01
     53c:	c5 58       	subi	r28, 0x85	; 133
     53e:	d1 40       	sbci	r29, 0x01	; 1
     540:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <gsm+0x185>
     544:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <gsm+0x184>
     548:	c9 57       	subi	r28, 0x79	; 121
     54a:	de 4f       	sbci	r29, 0xFE	; 254
     54c:	88 81       	ld	r24, Y
     54e:	99 81       	ldd	r25, Y+1	; 0x01
     550:	c7 58       	subi	r28, 0x87	; 135
     552:	d1 40       	sbci	r29, 0x01	; 1
     554:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <gsm+0x187>
     558:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <gsm+0x186>
     55c:	c7 57       	subi	r28, 0x77	; 119
     55e:	de 4f       	sbci	r29, 0xFE	; 254
     560:	88 81       	ld	r24, Y
     562:	99 81       	ldd	r25, Y+1	; 0x01
     564:	c9 58       	subi	r28, 0x89	; 137
     566:	d1 40       	sbci	r29, 0x01	; 1
     568:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <gsm+0x189>
     56c:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <gsm+0x188>
     570:	c5 57       	subi	r28, 0x75	; 117
     572:	de 4f       	sbci	r29, 0xFE	; 254
     574:	88 81       	ld	r24, Y
     576:	99 81       	ldd	r25, Y+1	; 0x01
     578:	cb 58       	subi	r28, 0x8B	; 139
     57a:	d1 40       	sbci	r29, 0x01	; 1
     57c:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <gsm+0x18b>
     580:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <gsm+0x18a>
     584:	c3 57       	subi	r28, 0x73	; 115
     586:	de 4f       	sbci	r29, 0xFE	; 254
     588:	88 81       	ld	r24, Y
     58a:	99 81       	ldd	r25, Y+1	; 0x01
     58c:	cd 58       	subi	r28, 0x8D	; 141
     58e:	d1 40       	sbci	r29, 0x01	; 1
     590:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <gsm+0x18d>
     594:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <gsm+0x18c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:34
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
     598:	cf 56       	subi	r28, 0x6F	; 111
     59a:	de 4f       	sbci	r29, 0xFE	; 254
     59c:	88 81       	ld	r24, Y
     59e:	99 81       	ldd	r25, Y+1	; 0x01
     5a0:	c1 59       	subi	r28, 0x91	; 145
     5a2:	d1 40       	sbci	r29, 0x01	; 1
     5a4:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <gsm+0x191>
     5a8:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <gsm+0x190>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:49
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     5ac:	cd 56       	subi	r28, 0x6D	; 109
     5ae:	de 4f       	sbci	r29, 0xFE	; 254
     5b0:	88 81       	ld	r24, Y
     5b2:	99 81       	ldd	r25, Y+1	; 0x01
     5b4:	aa 81       	ldd	r26, Y+2	; 0x02
     5b6:	bb 81       	ldd	r27, Y+3	; 0x03
     5b8:	c3 59       	subi	r28, 0x93	; 147
     5ba:	d1 40       	sbci	r29, 0x01	; 1
     5bc:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <gsm+0x192>
     5c0:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <gsm+0x193>
     5c4:	a0 93 4d 04 	sts	0x044D, r26	; 0x80044d <gsm+0x194>
     5c8:	b0 93 4e 04 	sts	0x044E, r27	; 0x80044e <gsm+0x195>
     5cc:	c9 56       	subi	r28, 0x69	; 105
     5ce:	de 4f       	sbci	r29, 0xFE	; 254
     5d0:	88 81       	ld	r24, Y
     5d2:	99 81       	ldd	r25, Y+1	; 0x01
     5d4:	aa 81       	ldd	r26, Y+2	; 0x02
     5d6:	bb 81       	ldd	r27, Y+3	; 0x03
     5d8:	c7 59       	subi	r28, 0x97	; 151
     5da:	d1 40       	sbci	r29, 0x01	; 1
     5dc:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <gsm+0x196>
     5e0:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <gsm+0x197>
     5e4:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <gsm+0x198>
     5e8:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <gsm+0x199>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:50

#ifndef GCC_VERSION
#define GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
#endif

class SoftwareSerial : public Stream
     5ec:	c5 56       	subi	r28, 0x65	; 101
     5ee:	de 4f       	sbci	r29, 0xFE	; 254
     5f0:	88 81       	ld	r24, Y
     5f2:	cb 59       	subi	r28, 0x9B	; 155
     5f4:	d1 40       	sbci	r29, 0x01	; 1
     5f6:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <gsm+0x19a>
     5fa:	c4 56       	subi	r28, 0x64	; 100
     5fc:	de 4f       	sbci	r29, 0xFE	; 254
     5fe:	88 81       	ld	r24, Y
     600:	cc 59       	subi	r28, 0x9C	; 156
     602:	d1 40       	sbci	r29, 0x01	; 1
     604:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <gsm+0x19b>
     608:	c3 56       	subi	r28, 0x63	; 99
     60a:	de 4f       	sbci	r29, 0xFE	; 254
     60c:	88 81       	ld	r24, Y
     60e:	99 81       	ldd	r25, Y+1	; 0x01
     610:	cd 59       	subi	r28, 0x9D	; 157
     612:	d1 40       	sbci	r29, 0x01	; 1
     614:	90 93 56 04 	sts	0x0456, r25	; 0x800456 <gsm+0x19d>
     618:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <gsm+0x19c>
     61c:	c1 56       	subi	r28, 0x61	; 97
     61e:	de 4f       	sbci	r29, 0xFE	; 254
     620:	88 81       	ld	r24, Y
     622:	cf 59       	subi	r28, 0x9F	; 159
     624:	d1 40       	sbci	r29, 0x01	; 1
     626:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <gsm+0x19e>
     62a:	c0 56       	subi	r28, 0x60	; 96
     62c:	de 4f       	sbci	r29, 0xFE	; 254
     62e:	88 81       	ld	r24, Y
     630:	99 81       	ldd	r25, Y+1	; 0x01
     632:	c0 5a       	subi	r28, 0xA0	; 160
     634:	d1 40       	sbci	r29, 0x01	; 1
     636:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <gsm+0x1a0>
     63a:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <gsm+0x19f>
     63e:	ce 55       	subi	r28, 0x5E	; 94
     640:	de 4f       	sbci	r29, 0xFE	; 254
     642:	88 81       	ld	r24, Y
     644:	99 81       	ldd	r25, Y+1	; 0x01
     646:	c2 5a       	subi	r28, 0xA2	; 162
     648:	d1 40       	sbci	r29, 0x01	; 1
     64a:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <gsm+0x1a2>
     64e:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <gsm+0x1a1>
     652:	cc 55       	subi	r28, 0x5C	; 92
     654:	de 4f       	sbci	r29, 0xFE	; 254
     656:	88 81       	ld	r24, Y
     658:	c4 5a       	subi	r28, 0xA4	; 164
     65a:	d1 40       	sbci	r29, 0x01	; 1
     65c:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <gsm+0x1a3>
     660:	cb 55       	subi	r28, 0x5B	; 91
     662:	de 4f       	sbci	r29, 0xFE	; 254
     664:	88 81       	ld	r24, Y
     666:	99 81       	ldd	r25, Y+1	; 0x01
     668:	c5 5a       	subi	r28, 0xA5	; 165
     66a:	d1 40       	sbci	r29, 0x01	; 1
     66c:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <gsm+0x1a5>
     670:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <gsm+0x1a4>
     674:	c9 55       	subi	r28, 0x59	; 89
     676:	de 4f       	sbci	r29, 0xFE	; 254
     678:	88 81       	ld	r24, Y
     67a:	99 81       	ldd	r25, Y+1	; 0x01
     67c:	c7 5a       	subi	r28, 0xA7	; 167
     67e:	d1 40       	sbci	r29, 0x01	; 1
     680:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <gsm+0x1a7>
     684:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <gsm+0x1a6>
     688:	c7 55       	subi	r28, 0x57	; 87
     68a:	de 4f       	sbci	r29, 0xFE	; 254
     68c:	88 81       	ld	r24, Y
     68e:	99 81       	ldd	r25, Y+1	; 0x01
     690:	c9 5a       	subi	r28, 0xA9	; 169
     692:	d1 40       	sbci	r29, 0x01	; 1
     694:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <gsm+0x1a9>
     698:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <gsm+0x1a8>
     69c:	c5 55       	subi	r28, 0x55	; 85
     69e:	de 4f       	sbci	r29, 0xFE	; 254
     6a0:	88 81       	ld	r24, Y
     6a2:	99 81       	ldd	r25, Y+1	; 0x01
     6a4:	cb 5a       	subi	r28, 0xAB	; 171
     6a6:	d1 40       	sbci	r29, 0x01	; 1
     6a8:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <gsm+0x1ab>
     6ac:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <gsm+0x1aa>
     6b0:	c3 55       	subi	r28, 0x53	; 83
     6b2:	de 4f       	sbci	r29, 0xFE	; 254
     6b4:	98 81       	ld	r25, Y
     6b6:	cd 5a       	subi	r28, 0xAD	; 173
     6b8:	d1 40       	sbci	r29, 0x01	; 1
     6ba:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <gsm+0x1ac>
     6be:	90 fb       	bst	r25, 0
     6c0:	80 f9       	bld	r24, 0
     6c2:	96 95       	lsr	r25
     6c4:	91 70       	andi	r25, 0x01	; 1
     6c6:	90 fb       	bst	r25, 0
     6c8:	81 f9       	bld	r24, 1
     6ca:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <gsm+0x1ac>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:29
     6ce:	ce 01       	movw	r24, r28
     6d0:	81 57       	subi	r24, 0x71	; 113
     6d2:	9e 4f       	sbci	r25, 0xFE	; 254
     6d4:	0e 94 b9 11 	call	0x2372	; 0x2372 <SoftwareSerial::~SoftwareSerial()>
bin/bbda.cpp:43
  Serial.println("GSM Shield init");
     6d8:	66 e1       	ldi	r22, 0x16	; 22
     6da:	71 e0       	ldi	r23, 0x01	; 1
     6dc:	8e ec       	ldi	r24, 0xCE	; 206
     6de:	94 e0       	ldi	r25, 0x04	; 4
     6e0:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
bin/bbda.cpp:46
    n=gsm.init_gsm_module();
     6e4:	89 eb       	ldi	r24, 0xB9	; 185
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	0e 94 45 0c 	call	0x188a	; 0x188a <Gsm_Ard::init_gsm_module()>
     6ec:	7c 01       	movw	r14, r24
bin/bbda.cpp:47
    if(n){
     6ee:	89 2b       	or	r24, r25
     6f0:	79 f5       	brne	.+94     	; 0x750 <setup+0x2b8>
bin/bbda.cpp:57
      started=true;
     6f2:	11 e0       	ldi	r17, 0x01	; 1
bin/bbda.cpp:55
    n=gsm.attachGPRS();
     6f4:	89 eb       	ldi	r24, 0xB9	; 185
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	ea d6       	rcall	.+3540   	; 0x14ce <Gsm_Ard::attachGPRS()>
     6fa:	7c 01       	movw	r14, r24
bin/bbda.cpp:56
    if(!n){
     6fc:	89 2b       	or	r24, r25
     6fe:	09 f0       	breq	.+2      	; 0x702 <setup+0x26a>
bin/bbda.cpp:57
      started=true;
     700:	56 c0       	rjmp	.+172    	; 0x7ae <setup+0x316>
     702:	10 93 b8 02 	sts	0x02B8, r17	; 0x8002b8 <__data_end>
bin/bbda.cpp:58
      n=syncTimeWithServer();
     706:	f4 dd       	rcall	.-1048   	; 0x2f0 <syncTimeWithServer()>
     708:	7c 01       	movw	r14, r24
bin/bbda.cpp:59
      if(n){
     70a:	89 2b       	or	r24, r25
     70c:	69 f0       	breq	.+26     	; 0x728 <setup+0x290>
bin/bbda.cpp:60
        Serial.print("ERROR: SYNC TIME ");
     70e:	6e e4       	ldi	r22, 0x4E	; 78
     710:	71 e0       	ldi	r23, 0x01	; 1
     712:	8e ec       	ldi	r24, 0xCE	; 206
     714:	94 e0       	ldi	r25, 0x04	; 4
     716:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
bin/bbda.cpp:61
        Serial.println(n);
     71a:	4a e0       	ldi	r20, 0x0A	; 10
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	b7 01       	movw	r22, r14
     720:	8e ec       	ldi	r24, 0xCE	; 206
     722:	94 e0       	ldi	r25, 0x04	; 4
     724:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <Print::println(int, int)>
bin/bbda.cpp:63
      n=gsm.dettachGPRS();
     728:	89 eb       	ldi	r24, 0xB9	; 185
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	3f d2       	rcall	.+1150   	; 0xbac <Gsm_Ard::dettachGPRS()>
     72e:	7c 01       	movw	r14, r24
bin/bbda.cpp:64
      if(n){
     730:	89 2b       	or	r24, r25
     732:	11 f1       	breq	.+68     	; 0x778 <setup+0x2e0>
bin/bbda.cpp:65
        Serial.print("ERROR: DETTACH GPRS ");
     734:	60 e6       	ldi	r22, 0x60	; 96
     736:	71 e0       	ldi	r23, 0x01	; 1
bin/bbda.cpp:75
      Serial.print("ERROR: COULD NOT ATTACH GPRS ");
     738:	8e ec       	ldi	r24, 0xCE	; 206
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
bin/bbda.cpp:76
      Serial.println(n);
     740:	4a e0       	ldi	r20, 0x0A	; 10
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	b7 01       	movw	r22, r14
     746:	8e ec       	ldi	r24, 0xCE	; 206
     748:	94 e0       	ldi	r25, 0x04	; 4
     74a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <Print::println(int, int)>
     74e:	1d c0       	rjmp	.+58     	; 0x78a <setup+0x2f2>
bin/bbda.cpp:48
      Serial.print("ERROR: COULD NOT INITIALIZE GSM MODULE ");
     750:	66 e2       	ldi	r22, 0x26	; 38
     752:	71 e0       	ldi	r23, 0x01	; 1
     754:	8e ec       	ldi	r24, 0xCE	; 206
     756:	94 e0       	ldi	r25, 0x04	; 4
     758:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
bin/bbda.cpp:49
      Serial.println(n);
     75c:	4a e0       	ldi	r20, 0x0A	; 10
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	b7 01       	movw	r22, r14
     762:	8e ec       	ldi	r24, 0xCE	; 206
     764:	94 e0       	ldi	r25, 0x04	; 4
     766:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <Print::println(int, int)>
bin/bbda.cpp:50
      delay(10000);
     76a:	60 e1       	ldi	r22, 0x10	; 16
     76c:	77 e2       	ldi	r23, 0x27	; 39
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 4c 13 	call	0x2698	; 0x2698 <delay>
     776:	b6 cf       	rjmp	.-148    	; 0x6e4 <setup+0x24c>
bin/bbda.cpp:69
        Serial.println("CLOCK");
     778:	65 e7       	ldi	r22, 0x75	; 117
     77a:	71 e0       	ldi	r23, 0x01	; 1
     77c:	8e ec       	ldi	r24, 0xCE	; 206
     77e:	94 e0       	ldi	r25, 0x04	; 4
     780:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
bin/bbda.cpp:70
        digitalClockDisplay();
     784:	4f de       	rcall	.-866    	; 0x424 <digitalClockDisplay()>
bin/bbda.cpp:71
        started=true;
     786:	10 93 b8 02 	sts	0x02B8, r17	; 0x8002b8 <__data_end>
bin/bbda.cpp:79
  } while(!started);
     78a:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end>
     78e:	88 23       	and	r24, r24
     790:	09 f4       	brne	.+2      	; 0x794 <setup+0x2fc>
     792:	b0 cf       	rjmp	.-160    	; 0x6f4 <setup+0x25c>
bin/bbda.cpp:81
}
     794:	c3 55       	subi	r28, 0x53	; 83
     796:	de 4f       	sbci	r29, 0xFE	; 254
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	08 95       	ret
bin/bbda.cpp:75
      Serial.print("ERROR: COULD NOT ATTACH GPRS ");
     7ae:	6b e7       	ldi	r22, 0x7B	; 123
     7b0:	71 e0       	ldi	r23, 0x01	; 1
     7b2:	c2 cf       	rjmp	.-124    	; 0x738 <setup+0x2a0>

000007b4 <_GLOBAL__sub_I_timeSynced>:
_GLOBAL__sub_I_timeSynced():
bin/bbda.cpp:23
Gsm_Ard gsm;
     7b4:	89 eb       	ldi	r24, 0xB9	; 185
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	30 c2       	rjmp	.+1120   	; 0xc1a <Gsm_Ard::Gsm_Ard()>

000007ba <_GLOBAL__sub_D_timeSynced>:
_GLOBAL__sub_D_timeSynced():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.h:29
     7ba:	87 e4       	ldi	r24, 0x47	; 71
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <SoftwareSerial::~SoftwareSerial()>

000007c2 <breakTime(unsigned long, tmElements_t&)>:
_Z9breakTimemR12tmElements_t():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:151
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
     7c2:	6f 92       	push	r6
     7c4:	7f 92       	push	r7
     7c6:	8f 92       	push	r8
     7c8:	9f 92       	push	r9
     7ca:	af 92       	push	r10
     7cc:	bf 92       	push	r11
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	6b 01       	movw	r12, r22
     7e0:	7c 01       	movw	r14, r24
     7e2:	ea 01       	movw	r28, r20
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:162
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     7e4:	8c e3       	ldi	r24, 0x3C	; 60
     7e6:	88 2e       	mov	r8, r24
     7e8:	91 2c       	mov	r9, r1
     7ea:	a1 2c       	mov	r10, r1
     7ec:	b1 2c       	mov	r11, r1
     7ee:	c7 01       	movw	r24, r14
     7f0:	b6 01       	movw	r22, r12
     7f2:	a5 01       	movw	r20, r10
     7f4:	94 01       	movw	r18, r8
     7f6:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
     7fa:	68 83       	st	Y, r22
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:164
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     7fc:	ca 01       	movw	r24, r20
     7fe:	b9 01       	movw	r22, r18
     800:	a5 01       	movw	r20, r10
     802:	94 01       	movw	r18, r8
     804:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
     808:	69 83       	std	Y+1, r22	; 0x01
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:165
  time /= 60; // now it is hours
     80a:	c7 01       	movw	r24, r14
     80c:	b6 01       	movw	r22, r12
     80e:	20 e1       	ldi	r18, 0x10	; 16
     810:	3e e0       	ldi	r19, 0x0E	; 14
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:166
  tm.Hour = time % 24;
     81a:	ca 01       	movw	r24, r20
     81c:	b9 01       	movw	r22, r18
     81e:	28 e1       	ldi	r18, 0x18	; 24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
     82a:	6a 83       	std	Y+2, r22	; 0x02
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:167
  time /= 24; // now it is days
     82c:	c7 01       	movw	r24, r14
     82e:	b6 01       	movw	r22, r12
     830:	20 e8       	ldi	r18, 0x80	; 128
     832:	31 e5       	ldi	r19, 0x51	; 81
     834:	41 e0       	ldi	r20, 0x01	; 1
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
     83c:	69 01       	movw	r12, r18
     83e:	7a 01       	movw	r14, r20
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:168
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     840:	ca 01       	movw	r24, r20
     842:	b9 01       	movw	r22, r18
     844:	6c 5f       	subi	r22, 0xFC	; 252
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	8f 4f       	sbci	r24, 0xFF	; 255
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	27 e0       	ldi	r18, 0x07	; 7
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__udivmodsi4>
     858:	6f 5f       	subi	r22, 0xFF	; 255
     85a:	6b 83       	std	Y+3, r22	; 0x03
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:171
  
  year = 0;  
  days = 0;
     85c:	81 2c       	mov	r8, r1
     85e:	91 2c       	mov	r9, r1
     860:	54 01       	movw	r10, r8
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:170
  year = 0;  
     862:	40 e0       	ldi	r20, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:172
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     864:	94 e6       	ldi	r25, 0x64	; 100
     866:	69 2e       	mov	r6, r25
     868:	71 2c       	mov	r7, r1
     86a:	00 e9       	ldi	r16, 0x90	; 144
     86c:	11 e0       	ldi	r17, 0x01	; 1
     86e:	24 2f       	mov	r18, r20
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	2e 54       	subi	r18, 0x4E	; 78
     874:	38 4f       	sbci	r19, 0xF8	; 248
     876:	f9 01       	movw	r30, r18
     878:	e3 70       	andi	r30, 0x03	; 3
     87a:	ff 27       	eor	r31, r31
     87c:	30 97       	sbiw	r30, 0x00	; 0
     87e:	f9 f4       	brne	.+62     	; 0x8be <breakTime(unsigned long, tmElements_t&)+0xfc>
     880:	c9 01       	movw	r24, r18
     882:	b3 01       	movw	r22, r6
     884:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__divmodhi4>
     888:	89 2b       	or	r24, r25
     88a:	31 f4       	brne	.+12     	; 0x898 <breakTime(unsigned long, tmElements_t&)+0xd6>
     88c:	c9 01       	movw	r24, r18
     88e:	b8 01       	movw	r22, r16
     890:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__divmodhi4>
     894:	89 2b       	or	r24, r25
     896:	99 f4       	brne	.+38     	; 0x8be <breakTime(unsigned long, tmElements_t&)+0xfc>
     898:	8e e6       	ldi	r24, 0x6E	; 110
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	a0 e0       	ldi	r26, 0x00	; 0
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	88 0e       	add	r8, r24
     8a2:	99 1e       	adc	r9, r25
     8a4:	aa 1e       	adc	r10, r26
     8a6:	bb 1e       	adc	r11, r27
     8a8:	d5 01       	movw	r26, r10
     8aa:	c4 01       	movw	r24, r8
     8ac:	aa 27       	eor	r26, r26
     8ae:	bb 27       	eor	r27, r27
     8b0:	c8 16       	cp	r12, r24
     8b2:	d9 06       	cpc	r13, r25
     8b4:	ea 06       	cpc	r14, r26
     8b6:	fb 06       	cpc	r15, r27
     8b8:	38 f0       	brcs	.+14     	; 0x8c8 <breakTime(unsigned long, tmElements_t&)+0x106>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:173
    year++;
     8ba:	4f 5f       	subi	r20, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:172
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     8bc:	d8 cf       	rjmp	.-80     	; 0x86e <breakTime(unsigned long, tmElements_t&)+0xac>
     8be:	8d e6       	ldi	r24, 0x6D	; 109
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	ec cf       	rjmp	.-40     	; 0x8a0 <breakTime(unsigned long, tmElements_t&)+0xde>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:175
  }
  tm.Year = year; // year is offset from 1970 
     8c8:	4e 83       	std	Y+6, r20	; 0x06
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:177
  
  days -= LEAP_YEAR(year) ? 366 : 365;
     8ca:	30 97       	sbiw	r30, 0x00	; 0
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <breakTime(unsigned long, tmElements_t&)+0x10e>
     8ce:	4c c0       	rjmp	.+152    	; 0x968 <__stack+0x69>
     8d0:	c9 01       	movw	r24, r18
     8d2:	64 e6       	ldi	r22, 0x64	; 100
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__divmodhi4>
     8da:	89 2b       	or	r24, r25
     8dc:	39 f4       	brne	.+14     	; 0x8ec <breakTime(unsigned long, tmElements_t&)+0x12a>
     8de:	c9 01       	movw	r24, r18
     8e0:	60 e9       	ldi	r22, 0x90	; 144
     8e2:	71 e0       	ldi	r23, 0x01	; 1
     8e4:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__divmodhi4>
     8e8:	89 2b       	or	r24, r25
     8ea:	f1 f5       	brne	.+124    	; 0x968 <__stack+0x69>
     8ec:	8e e6       	ldi	r24, 0x6E	; 110
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	88 1a       	sub	r8, r24
     8f6:	99 0a       	sbc	r9, r25
     8f8:	aa 0a       	sbc	r10, r26
     8fa:	bb 0a       	sbc	r11, r27
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:178
  time  -= days; // now it is days in this year, starting at 0
     8fc:	c8 18       	sub	r12, r8
     8fe:	d9 08       	sbc	r13, r9
     900:	ea 08       	sbc	r14, r10
     902:	fb 08       	sbc	r15, r11
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:185
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
     904:	c9 01       	movw	r24, r18
     906:	64 e6       	ldi	r22, 0x64	; 100
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__divmodhi4>
     90e:	8c 01       	movw	r16, r24
     910:	c9 01       	movw	r24, r18
     912:	60 e9       	ldi	r22, 0x90	; 144
     914:	71 e0       	ldi	r23, 0x01	; 1
     916:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__divmodhi4>
     91a:	a9 e9       	ldi	r26, 0x99	; 153
     91c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:183
  for (month=0; month<12; month++) {
     91e:	20 e0       	ldi	r18, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:191
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
     920:	4c 91       	ld	r20, X
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:194
    }
    
    if (time >= monthLength) {
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	11 96       	adiw	r26, 0x01	; 1
     92a:	c4 16       	cp	r12, r20
     92c:	d5 06       	cpc	r13, r21
     92e:	e6 06       	cpc	r14, r22
     930:	f7 06       	cpc	r15, r23
     932:	38 f0       	brcs	.+14     	; 0x942 <__stack+0x43>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:195
      time -= monthLength;
     934:	c4 1a       	sub	r12, r20
     936:	d5 0a       	sbc	r13, r21
     938:	e6 0a       	sbc	r14, r22
     93a:	f7 0a       	sbc	r15, r23
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:183
  for (month=0; month<12; month++) {
     93c:	2f 5f       	subi	r18, 0xFF	; 255
     93e:	2c 30       	cpi	r18, 0x0C	; 12
     940:	c1 f4       	brne	.+48     	; 0x972 <__stack+0x73>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:200
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
     942:	2f 5f       	subi	r18, 0xFF	; 255
     944:	2d 83       	std	Y+5, r18	; 0x05
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:201
  tm.Day = time + 1;     // day of month
     946:	c3 94       	inc	r12
     948:	cc 82       	std	Y+4, r12	; 0x04
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:202
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	7f 90       	pop	r7
     964:	6f 90       	pop	r6
     966:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:177
  days -= LEAP_YEAR(year) ? 366 : 365;
     968:	8d e6       	ldi	r24, 0x6D	; 109
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	c1 cf       	rjmp	.-126    	; 0x8f4 <breakTime(unsigned long, tmElements_t&)+0x132>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:184
    if (month==1) { // february
     972:	21 30       	cpi	r18, 0x01	; 1
     974:	a9 f6       	brne	.-86     	; 0x920 <__stack+0x21>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:185
      if (LEAP_YEAR(year)) {
     976:	30 97       	sbiw	r30, 0x00	; 0
     978:	39 f4       	brne	.+14     	; 0x988 <__stack+0x89>
     97a:	01 15       	cp	r16, r1
     97c:	11 05       	cpc	r17, r1
     97e:	11 f4       	brne	.+4      	; 0x984 <__stack+0x85>
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	11 f4       	brne	.+4      	; 0x988 <__stack+0x89>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:186
        monthLength=29;
     984:	4d e1       	ldi	r20, 0x1D	; 29
     986:	cd cf       	rjmp	.-102    	; 0x922 <__stack+0x23>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:188
        monthLength=28;
     988:	4c e1       	ldi	r20, 0x1C	; 28
     98a:	cb cf       	rjmp	.-106    	; 0x922 <__stack+0x23>

0000098c <refreshCache(unsigned long)>:
_Z12refreshCachem():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:42
void refreshCache(time_t t) {
     98c:	cf 92       	push	r12
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	6b 01       	movw	r12, r22
     996:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:43
  if (t != cacheTime) {
     998:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <cacheTime>
     99c:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <cacheTime+0x1>
     9a0:	a0 91 78 04 	lds	r26, 0x0478	; 0x800478 <cacheTime+0x2>
     9a4:	b0 91 79 04 	lds	r27, 0x0479	; 0x800479 <cacheTime+0x3>
     9a8:	8c 15       	cp	r24, r12
     9aa:	9d 05       	cpc	r25, r13
     9ac:	ae 05       	cpc	r26, r14
     9ae:	bf 05       	cpc	r27, r15
     9b0:	69 f0       	breq	.+26     	; 0x9cc <refreshCache(unsigned long)+0x40>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:44
    breakTime(t, tm); 
     9b2:	4a e7       	ldi	r20, 0x7A	; 122
     9b4:	54 e0       	ldi	r21, 0x04	; 4
     9b6:	c7 01       	movw	r24, r14
     9b8:	b6 01       	movw	r22, r12
     9ba:	03 df       	rcall	.-506    	; 0x7c2 <breakTime(unsigned long, tmElements_t&)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:45
    cacheTime = t; 
     9bc:	c0 92 76 04 	sts	0x0476, r12	; 0x800476 <cacheTime>
     9c0:	d0 92 77 04 	sts	0x0477, r13	; 0x800477 <cacheTime+0x1>
     9c4:	e0 92 78 04 	sts	0x0478, r14	; 0x800478 <cacheTime+0x2>
     9c8:	f0 92 79 04 	sts	0x0479, r15	; 0x800479 <cacheTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:47
}
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	08 95       	ret

000009d6 <year(unsigned long)>:
_Z4yearm():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:137
int year(time_t t) { // the year for the given time
     9d6:	da df       	rcall	.-76     	; 0x98c <refreshCache(unsigned long)>
     9d8:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <tm+0x6>
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	8e 54       	subi	r24, 0x4E	; 78
     9e0:	98 4f       	sbci	r25, 0xF8	; 248
     9e2:	08 95       	ret

000009e4 <setTime(unsigned long)>:
_Z7setTimem():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:274
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:280
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
     9e8:	60 93 72 04 	sts	0x0472, r22	; 0x800472 <sysTime>
     9ec:	70 93 73 04 	sts	0x0473, r23	; 0x800473 <sysTime+0x1>
     9f0:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <sysTime+0x2>
     9f4:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:281
  nextSyncTime = (uint32_t)t + syncInterval;
     9f8:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <syncInterval>
     9fc:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <syncInterval+0x1>
     a00:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <syncInterval+0x2>
     a04:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <syncInterval+0x3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	80 0f       	add	r24, r16
     a0e:	91 1f       	adc	r25, r17
     a10:	a2 1f       	adc	r26, r18
     a12:	b3 1f       	adc	r27, r19
     a14:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <nextSyncTime>
     a18:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <nextSyncTime+0x1>
     a1c:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <nextSyncTime+0x2>
     a20:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:282
  Status = timeSet;
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	90 93 69 04 	sts	0x0469, r25	; 0x800469 <Status+0x1>
     a2c:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <Status>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:283
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     a30:	0e 94 1b 13 	call	0x2636	; 0x2636 <millis>
     a34:	60 93 6e 04 	sts	0x046E, r22	; 0x80046e <prevMillis>
     a38:	70 93 6f 04 	sts	0x046F, r23	; 0x80046f <prevMillis+0x1>
     a3c:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <prevMillis+0x2>
     a40:	90 93 71 04 	sts	0x0471, r25	; 0x800471 <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:284
} 
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	08 95       	ret

00000a4a <now()>:
_Z3nowv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:250
time_t now() {
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     a56:	0e 94 1b 13 	call	0x2636	; 0x2636 <millis>
     a5a:	c0 90 6e 04 	lds	r12, 0x046E	; 0x80046e <prevMillis>
     a5e:	d0 90 6f 04 	lds	r13, 0x046F	; 0x80046f <prevMillis+0x1>
     a62:	e0 90 70 04 	lds	r14, 0x0470	; 0x800470 <prevMillis+0x2>
     a66:	f0 90 71 04 	lds	r15, 0x0471	; 0x800471 <prevMillis+0x3>
     a6a:	8b 01       	movw	r16, r22
     a6c:	9c 01       	movw	r18, r24
     a6e:	0c 19       	sub	r16, r12
     a70:	1d 09       	sbc	r17, r13
     a72:	2e 09       	sbc	r18, r14
     a74:	3f 09       	sbc	r19, r15
     a76:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <sysTime>
     a7a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <sysTime+0x1>
     a7e:	a0 91 74 04 	lds	r26, 0x0474	; 0x800474 <sysTime+0x2>
     a82:	b0 91 75 04 	lds	r27, 0x0475	; 0x800475 <sysTime+0x3>
     a86:	08 3e       	cpi	r16, 0xE8	; 232
     a88:	13 40       	sbci	r17, 0x03	; 3
     a8a:	21 05       	cpc	r18, r1
     a8c:	31 05       	cpc	r19, r1
     a8e:	d0 f0       	brcs	.+52     	; 0xac4 <now()+0x7a>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:254
    sysTime++;
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <sysTime>
     a9a:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <sysTime+0x1>
     a9e:	a0 93 74 04 	sts	0x0474, r26	; 0x800474 <sysTime+0x2>
     aa2:	b0 93 75 04 	sts	0x0475, r27	; 0x800475 <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:255
    prevMillis += 1000;	
     aa6:	b7 01       	movw	r22, r14
     aa8:	a6 01       	movw	r20, r12
     aaa:	48 51       	subi	r20, 0x18	; 24
     aac:	5c 4f       	sbci	r21, 0xFC	; 252
     aae:	6f 4f       	sbci	r22, 0xFF	; 255
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	40 93 6e 04 	sts	0x046E, r20	; 0x80046e <prevMillis>
     ab6:	50 93 6f 04 	sts	0x046F, r21	; 0x80046f <prevMillis+0x1>
     aba:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <prevMillis+0x2>
     abe:	70 93 71 04 	sts	0x0471, r23	; 0x800471 <prevMillis+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:252
  while (millis() - prevMillis >= 1000) {
     ac2:	c9 cf       	rjmp	.-110    	; 0xa56 <now()+0xc>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:260
  if (nextSyncTime <= sysTime) {
     ac4:	40 91 6a 04 	lds	r20, 0x046A	; 0x80046a <nextSyncTime>
     ac8:	50 91 6b 04 	lds	r21, 0x046B	; 0x80046b <nextSyncTime+0x1>
     acc:	60 91 6c 04 	lds	r22, 0x046C	; 0x80046c <nextSyncTime+0x2>
     ad0:	70 91 6d 04 	lds	r23, 0x046D	; 0x80046d <nextSyncTime+0x3>
     ad4:	84 17       	cp	r24, r20
     ad6:	95 07       	cpc	r25, r21
     ad8:	a6 07       	cpc	r26, r22
     ada:	b7 07       	cpc	r27, r23
     adc:	68 f0       	brcs	.+26     	; 0xaf8 <now()+0xae>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:261
    if (getTimePtr != 0) {
     ade:	e0 91 66 04 	lds	r30, 0x0466	; 0x800466 <getTimePtr>
     ae2:	f0 91 67 04 	lds	r31, 0x0467	; 0x800467 <getTimePtr+0x1>
     ae6:	30 97       	sbiw	r30, 0x00	; 0
     ae8:	39 f0       	breq	.+14     	; 0xaf8 <now()+0xae>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:262
      time_t t = getTimePtr();
     aea:	09 95       	icall
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:263
      if (t != 0) {
     aec:	61 15       	cp	r22, r1
     aee:	71 05       	cpc	r23, r1
     af0:	81 05       	cpc	r24, r1
     af2:	91 05       	cpc	r25, r1
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:264
        setTime(t);
     af4:	81 f0       	breq	.+32     	; 0xb16 <now()+0xcc>
     af6:	76 df       	rcall	.-276    	; 0x9e4 <setTime(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:271
  return (time_t)sysTime;
     af8:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <sysTime>
     afc:	70 91 73 04 	lds	r23, 0x0473	; 0x800473 <sysTime+0x1>
     b00:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <sysTime+0x2>
     b04:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <sysTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:272
}
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:266
        nextSyncTime = sysTime + syncInterval;
     b16:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <sysTime>
     b1a:	90 91 73 04 	lds	r25, 0x0473	; 0x800473 <sysTime+0x1>
     b1e:	a0 91 74 04 	lds	r26, 0x0474	; 0x800474 <sysTime+0x2>
     b22:	b0 91 75 04 	lds	r27, 0x0475	; 0x800475 <sysTime+0x3>
     b26:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <syncInterval>
     b2a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <syncInterval+0x1>
     b2e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <syncInterval+0x2>
     b32:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <syncInterval+0x3>
     b36:	84 0f       	add	r24, r20
     b38:	95 1f       	adc	r25, r21
     b3a:	a6 1f       	adc	r26, r22
     b3c:	b7 1f       	adc	r27, r23
     b3e:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <nextSyncTime>
     b42:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <nextSyncTime+0x1>
     b46:	a0 93 6c 04 	sts	0x046C, r26	; 0x80046c <nextSyncTime+0x2>
     b4a:	b0 93 6d 04 	sts	0x046D, r27	; 0x80046d <nextSyncTime+0x3>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:267
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <Status>
     b56:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <Status+0x1>
     b5a:	23 2b       	or	r18, r19
     b5c:	11 f4       	brne	.+4      	; 0xb62 <now()+0x118>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	90 93 69 04 	sts	0x0469, r25	; 0x800469 <Status+0x1>
     b66:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <Status>
     b6a:	c6 cf       	rjmp	.-116    	; 0xaf8 <now()+0xae>

00000b6c <hour()>:
_Z4hourv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:54
  refreshCache(t);
     b6c:	6e df       	rcall	.-292    	; 0xa4a <now()>
     b6e:	0e df       	rcall	.-484    	; 0x98c <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:55
  return tm.Hour;  
     b70:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <tm+0x2>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:51
}
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	08 95       	ret

00000b78 <minute()>:
_Z6minutev():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:93
  refreshCache(t);
     b78:	68 df       	rcall	.-304    	; 0xa4a <now()>
     b7a:	08 df       	rcall	.-496    	; 0x98c <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:94
  return tm.Minute;  
     b7c:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <tm+0x1>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:90
}
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	08 95       	ret

00000b84 <second()>:
_Z6secondv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:102
  refreshCache(t);
     b84:	62 df       	rcall	.-316    	; 0xa4a <now()>
     b86:	02 df       	rcall	.-508    	; 0x98c <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:103
  return tm.Second;
     b88:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <tm>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:99
}
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	08 95       	ret

00000b90 <day()>:
_Z3dayv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:111
  refreshCache(t);
     b90:	5c df       	rcall	.-328    	; 0xa4a <now()>
     b92:	fc de       	rcall	.-520    	; 0x98c <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:112
  return tm.Day;
     b94:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <tm+0x4>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:108
}
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	08 95       	ret

00000b9c <month()>:
_Z5monthv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:129
  refreshCache(t);
     b9c:	56 df       	rcall	.-340    	; 0xa4a <now()>
     b9e:	f6 de       	rcall	.-532    	; 0x98c <refreshCache(unsigned long)>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:130
  return tm.Month;
     ba0:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <tm+0x5>
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:126
}
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	08 95       	ret

00000ba8 <year()>:
_Z4yearv():
/home/jlr/Documents/bbd/arduino/lib/Time/Time.cpp:134
  return year(now()); 
     ba8:	50 df       	rcall	.-352    	; 0xa4a <now()>
     baa:	15 cf       	rjmp	.-470    	; 0x9d6 <year(unsigned long)>

00000bac <Gsm_Ard::dettachGPRS()>:
_ZN7Gsm_Ard11dettachGPRSEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:367
int Gsm_Ard::dettachGPRS(){
  if(_gsm_state!=GSM_IP_STATE){
    return 1;
  }
  return 1;
}
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	08 95       	ret

00000bb2 <Gsm_Ard::_clear_recv_buff()>:
_ZN7Gsm_Ard16_clear_recv_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:763
  _recv_buff_state=BUFF_USED;
  return 0;
}

void Gsm_Ard::_clear_recv_buff(){
  _recv_buff_idx=0;
     bb2:	fc 01       	movw	r30, r24
     bb4:	e0 58       	subi	r30, 0x80	; 128
     bb6:	fe 4f       	sbci	r31, 0xFE	; 254
     bb8:	11 82       	std	Z+1, r1	; 0x01
     bba:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:764
  memset(_recv_buff, 0, RECV_BUFF_LEN);
     bbc:	20 e8       	ldi	r18, 0x80	; 128
     bbe:	fc 01       	movw	r30, r24
     bc0:	11 92       	st	Z+, r1
     bc2:	2a 95       	dec	r18
     bc4:	e9 f7       	brne	.-6      	; 0xbc0 <Gsm_Ard::_clear_recv_buff()+0xe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:765
  _recv_buff_state=BUFF_READY;
     bc6:	88 57       	subi	r24, 0x78	; 120
     bc8:	9e 4f       	sbci	r25, 0xFE	; 254
     bca:	fc 01       	movw	r30, r24
     bcc:	11 82       	std	Z+1, r1	; 0x01
     bce:	10 82       	st	Z, r1
     bd0:	08 95       	ret

00000bd2 <Gsm_Ard::_clear_rsp_buff()>:
_ZN7Gsm_Ard15_clear_rsp_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:769
}

void Gsm_Ard::_clear_rsp_buff(){
  _rsp_buff_idx=0;
     bd2:	fc 01       	movw	r30, r24
     bd4:	ee 57       	subi	r30, 0x7E	; 126
     bd6:	fe 4f       	sbci	r31, 0xFE	; 254
     bd8:	11 82       	std	Z+1, r1	; 0x01
     bda:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:770
  memset(_rsp_buff, 0, RSP_BUFF_LEN);
     bdc:	e2 50       	subi	r30, 0x02	; 2
     bde:	f1 40       	sbci	r31, 0x01	; 1
     be0:	20 e8       	ldi	r18, 0x80	; 128
     be2:	df 01       	movw	r26, r30
     be4:	1d 92       	st	X+, r1
     be6:	2a 95       	dec	r18
     be8:	e9 f7       	brne	.-6      	; 0xbe4 <Gsm_Ard::_clear_rsp_buff()+0x12>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:771
  _rsp_buff_state=BUFF_READY;
     bea:	86 57       	subi	r24, 0x76	; 118
     bec:	9e 4f       	sbci	r25, 0xFE	; 254
     bee:	fc 01       	movw	r30, r24
     bf0:	11 82       	std	Z+1, r1	; 0x01
     bf2:	10 82       	st	Z, r1
     bf4:	08 95       	ret

00000bf6 <Gsm_Ard::_clear_sock_buff()>:
_ZN7Gsm_Ard16_clear_sock_buffEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:775
}

void Gsm_Ard::_clear_sock_buff(){
  _sock_buff_idx=0;
     bf6:	fc 01       	movw	r30, r24
     bf8:	ec 57       	subi	r30, 0x7C	; 124
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	11 82       	std	Z+1, r1	; 0x01
     bfe:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:776
  memset(_sock_buff, 0, SOCK_BUFF_LEN);
     c00:	e4 58       	subi	r30, 0x84	; 132
     c02:	f1 09       	sbc	r31, r1
     c04:	20 e8       	ldi	r18, 0x80	; 128
     c06:	df 01       	movw	r26, r30
     c08:	1d 92       	st	X+, r1
     c0a:	2a 95       	dec	r18
     c0c:	e9 f7       	brne	.-6      	; 0xc08 <Gsm_Ard::_clear_sock_buff()+0x12>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:777
  _sock_buff_state=BUFF_READY;
     c0e:	84 57       	subi	r24, 0x74	; 116
     c10:	9e 4f       	sbci	r25, 0xFE	; 254
     c12:	fc 01       	movw	r30, r24
     c14:	11 82       	std	Z+1, r1	; 0x01
     c16:	10 82       	st	Z, r1
     c18:	08 95       	ret

00000c1a <Gsm_Ard::Gsm_Ard()>:
_ZN7Gsm_ArdC2Ev():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:64
Gsm_Ard::Gsm_Ard(){
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	48 e0       	ldi	r20, 0x08	; 8
     c24:	67 e0       	ldi	r22, 0x07	; 7
     c26:	82 57       	subi	r24, 0x72	; 114
     c28:	9e 4f       	sbci	r25, 0xFE	; 254
     c2a:	0e 94 0d 12 	call	0x241a	; 0x241a <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:65
  _gsm_state=GSM_OFF_STATE;
     c2e:	fe 01       	movw	r30, r28
     c30:	ea 57       	subi	r30, 0x7A	; 122
     c32:	fe 4f       	sbci	r31, 0xFE	; 254
     c34:	11 82       	std	Z+1, r1	; 0x01
     c36:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:66
  _clear_recv_buff();
     c38:	ce 01       	movw	r24, r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:67
  _clear_rsp_buff();
     c3a:	bb df       	rcall	.-138    	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
     c3c:	ce 01       	movw	r24, r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:68
  _clear_sock_buff();
     c3e:	c9 df       	rcall	.-110    	; 0xbd2 <Gsm_Ard::_clear_rsp_buff()>
     c40:	ce 01       	movw	r24, r28
     c42:	d9 df       	rcall	.-78     	; 0xbf6 <Gsm_Ard::_clear_sock_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:70
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     c44:	65 ea       	ldi	r22, 0xA5	; 165
     c46:	71 e0       	ldi	r23, 0x01	; 1
     c48:	8e ec       	ldi	r24, 0xCE	; 206
     c4a:	94 e0       	ldi	r25, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:72
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:70
  Serial.println("DB: GSM_STATE=GSM_OFF_STATE");
     c50:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <Print::println(char const*)>

00000c54 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>:
_ZN7Gsm_Ard20_fetch_rsp_from_recvEPKcjPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:780
}

int Gsm_Ard::_fetch_rsp_from_recv(const char* cmd, unsigned int cmd_size, unsigned int* rsp_len){
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	ec 01       	movw	r28, r24
     c62:	89 01       	movw	r16, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:782
  unsigned int i, start_idx;
  if(_rsp_buff_state!=BUFF_READY || _recv_buff_state!=BUFF_USED){
     c64:	dc 01       	movw	r26, r24
     c66:	a6 57       	subi	r26, 0x76	; 118
     c68:	be 4f       	sbci	r27, 0xFE	; 254
     c6a:	8d 91       	ld	r24, X+
     c6c:	9c 91       	ld	r25, X
     c6e:	11 97       	sbiw	r26, 0x01	; 1
     c70:	89 2b       	or	r24, r25
     c72:	09 f0       	breq	.+2      	; 0xc76 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x22>
     c74:	6b c0       	rjmp	.+214    	; 0xd4c <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xf8>
     c76:	fe 01       	movw	r30, r28
     c78:	e8 57       	subi	r30, 0x78	; 120
     c7a:	fe 4f       	sbci	r31, 0xFE	; 254
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	09 f0       	breq	.+2      	; 0xc86 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x32>
     c84:	63 c0       	rjmp	.+198    	; 0xd4c <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xf8>
     c86:	7b 01       	movw	r14, r22
     c88:	9e 01       	movw	r18, r28
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:785
    return 1;
  }
  for(i=0;i<cmd_size;i++){
     c8e:	48 17       	cp	r20, r24
     c90:	59 07       	cpc	r21, r25
     c92:	51 f0       	breq	.+20     	; 0xca8 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x54>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:786
    if(cmd[i]!=_recv_buff[i]){
     c94:	f7 01       	movw	r30, r14
     c96:	71 91       	ld	r23, Z+
     c98:	7f 01       	movw	r14, r30
     c9a:	f9 01       	movw	r30, r18
     c9c:	61 91       	ld	r22, Z+
     c9e:	9f 01       	movw	r18, r30
     ca0:	76 13       	cpse	r23, r22
     ca2:	57 c0       	rjmp	.+174    	; 0xd52 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xfe>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:785
  for(i=0;i<cmd_size;i++){
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	f3 cf       	rjmp	.-26     	; 0xc8e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x3a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:791
      return 2;
    }
  }

  if(_recv_buff[i]!=CR_CHAR || _recv_buff[i+1]!=NL_CHAR || _recv_buff[i+2]!=CR_CHAR || _recv_buff[i+3]!=NL_CHAR){
     ca8:	fe 01       	movw	r30, r28
     caa:	e4 0f       	add	r30, r20
     cac:	f5 1f       	adc	r31, r21
     cae:	80 81       	ld	r24, Z
     cb0:	8d 30       	cpi	r24, 0x0D	; 13
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x62>
     cb4:	51 c0       	rjmp	.+162    	; 0xd58 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x104>
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	8a 30       	cpi	r24, 0x0A	; 10
     cba:	09 f0       	breq	.+2      	; 0xcbe <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x6a>
     cbc:	4d c0       	rjmp	.+154    	; 0xd58 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x104>
     cbe:	82 81       	ldd	r24, Z+2	; 0x02
     cc0:	8d 30       	cpi	r24, 0x0D	; 13
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x72>
     cc4:	49 c0       	rjmp	.+146    	; 0xd58 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x104>
     cc6:	83 81       	ldd	r24, Z+3	; 0x03
     cc8:	8a 30       	cpi	r24, 0x0A	; 10
     cca:	09 f0       	breq	.+2      	; 0xcce <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x7a>
     ccc:	45 c0       	rjmp	.+138    	; 0xd58 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x104>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:795
    return 3;
  }

  i+=4;
     cce:	4c 5f       	subi	r20, 0xFC	; 252
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	fe 01       	movw	r30, r28
     cd4:	e4 0f       	add	r30, r20
     cd6:	f5 1f       	adc	r31, r21
     cd8:	bf 01       	movw	r22, r30
     cda:	9f 01       	movw	r18, r30
     cdc:	2c 1b       	sub	r18, r28
     cde:	3d 0b       	sbc	r19, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:798
  start_idx=i;

  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     ce0:	81 91       	ld	r24, Z+
     ce2:	8d 30       	cpi	r24, 0x0D	; 13
     ce4:	79 f5       	brne	.+94     	; 0xd44 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xf0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:802
    i++;
  }

  if(i!=_recv_buff_idx-2){
     ce6:	fe 01       	movw	r30, r28
     ce8:	e0 58       	subi	r30, 0x80	; 128
     cea:	fe 4f       	sbci	r31, 0xFE	; 254
     cec:	80 81       	ld	r24, Z
     cee:	91 81       	ldd	r25, Z+1	; 0x01
     cf0:	02 97       	sbiw	r24, 0x02	; 2
     cf2:	82 17       	cp	r24, r18
     cf4:	93 07       	cpc	r25, r19
     cf6:	99 f5       	brne	.+102    	; 0xd5e <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x10a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:806
    return 4;
  }

  _rsp_buff_idx=i-start_idx;
     cf8:	c9 01       	movw	r24, r18
     cfa:	84 1b       	sub	r24, r20
     cfc:	95 0b       	sbc	r25, r21
     cfe:	ac 01       	movw	r20, r24
     d00:	7e 01       	movw	r14, r28
     d02:	9e e7       	ldi	r25, 0x7E	; 126
     d04:	e9 1a       	sub	r14, r25
     d06:	9e ef       	ldi	r25, 0xFE	; 254
     d08:	f9 0a       	sbc	r15, r25
     d0a:	f7 01       	movw	r30, r14
     d0c:	51 83       	std	Z+1, r21	; 0x01
     d0e:	40 83       	st	Z, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:807
  _rsp_buff_state=BUFF_USED;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	8d 93       	st	X+, r24
     d16:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:809

  strncpy(_rsp_buff, _recv_buff+start_idx, _rsp_buff_idx);
     d18:	ce 01       	movw	r24, r28
     d1a:	80 58       	subi	r24, 0x80	; 128
     d1c:	9f 4f       	sbci	r25, 0xFF	; 255
     d1e:	0e 94 c0 18 	call	0x3180	; 0x3180 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:811

  _clear_recv_buff();
     d22:	ce 01       	movw	r24, r28
     d24:	46 df       	rcall	.-372    	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:813

  *rsp_len=_rsp_buff_idx;
     d26:	f7 01       	movw	r30, r14
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	f8 01       	movw	r30, r16
     d2e:	91 83       	std	Z+1, r25	; 0x01
     d30:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:814
  return 0;
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:815
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:798
  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     d44:	80 81       	ld	r24, Z
     d46:	8a 30       	cpi	r24, 0x0A	; 10
     d48:	41 f6       	brne	.-112    	; 0xcda <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x86>
     d4a:	cd cf       	rjmp	.-102    	; 0xce6 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0x92>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:783
    return 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	f2 cf       	rjmp	.-28     	; 0xd36 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xe2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:787
      return 2;
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	ef cf       	rjmp	.-34     	; 0xd36 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xe2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:792
    return 3;
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	ec cf       	rjmp	.-40     	; 0xd36 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xe2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:803
    return 4;
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	e9 cf       	rjmp	.-46     	; 0xd36 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)+0xe2>

00000d64 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>:
_ZN7Gsm_Ard17_fetch_rsp_wo_cmdEPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:817

int Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int* rsp_len){
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	ec 01       	movw	r28, r24
     d72:	8b 01       	movw	r16, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:819
  unsigned int i, start_idx;
  if(_rsp_buff_state!=BUFF_READY || _recv_buff_state!=BUFF_USED){
     d74:	dc 01       	movw	r26, r24
     d76:	a6 57       	subi	r26, 0x76	; 118
     d78:	be 4f       	sbci	r27, 0xFE	; 254
     d7a:	8d 91       	ld	r24, X+
     d7c:	9c 91       	ld	r25, X
     d7e:	11 97       	sbiw	r26, 0x01	; 1
     d80:	89 2b       	or	r24, r25
     d82:	09 f0       	breq	.+2      	; 0xd86 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x22>
     d84:	49 c0       	rjmp	.+146    	; 0xe18 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xb4>
     d86:	fe 01       	movw	r30, r28
     d88:	e8 57       	subi	r30, 0x78	; 120
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	80 81       	ld	r24, Z
     d8e:	91 81       	ldd	r25, Z+1	; 0x01
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	09 f0       	breq	.+2      	; 0xd96 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x32>
     d94:	41 c0       	rjmp	.+130    	; 0xe18 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xb4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:822
    return 1;
  }
  if(_recv_buff[0]!=CR_CHAR || _recv_buff[1]!=NL_CHAR){
     d96:	88 81       	ld	r24, Y
     d98:	8d 30       	cpi	r24, 0x0D	; 13
     d9a:	09 f0       	breq	.+2      	; 0xd9e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x3a>
     d9c:	40 c0       	rjmp	.+128    	; 0xe1e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xba>
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	8a 30       	cpi	r24, 0x0A	; 10
     da2:	e9 f5       	brne	.+122    	; 0xe1e <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xba>
     da4:	e6 58       	subi	r30, 0x86	; 134
     da6:	f1 40       	sbci	r31, 0x01	; 1
     da8:	bf 01       	movw	r22, r30
     daa:	af 01       	movw	r20, r30
     dac:	4c 1b       	sub	r20, r28
     dae:	5d 0b       	sbc	r21, r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:828
    return 2;
  }

  start_idx=i=2;

  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     db0:	81 91       	ld	r24, Z+
     db2:	8d 30       	cpi	r24, 0x0D	; 13
     db4:	69 f5       	brne	.+90     	; 0xe10 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xac>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:832
    i++;
  }

  if(i!=_recv_buff_idx-2){
     db6:	fe 01       	movw	r30, r28
     db8:	e0 58       	subi	r30, 0x80	; 128
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	80 81       	ld	r24, Z
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	02 97       	sbiw	r24, 0x02	; 2
     dc2:	84 17       	cp	r24, r20
     dc4:	95 07       	cpc	r25, r21
     dc6:	71 f5       	brne	.+92     	; 0xe24 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:836
    return 3;
  }

  _rsp_buff_idx=i-start_idx;
     dc8:	42 50       	subi	r20, 0x02	; 2
     dca:	51 09       	sbc	r21, r1
     dcc:	7e 01       	movw	r14, r28
     dce:	8e e7       	ldi	r24, 0x7E	; 126
     dd0:	e8 1a       	sub	r14, r24
     dd2:	8e ef       	ldi	r24, 0xFE	; 254
     dd4:	f8 0a       	sbc	r15, r24
     dd6:	f7 01       	movw	r30, r14
     dd8:	51 83       	std	Z+1, r21	; 0x01
     dda:	40 83       	st	Z, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:837
  _rsp_buff_state=BUFF_USED;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	8d 93       	st	X+, r24
     de2:	9c 93       	st	X, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:839

  strncpy(_rsp_buff, _recv_buff+start_idx, _rsp_buff_idx);
     de4:	ce 01       	movw	r24, r28
     de6:	80 58       	subi	r24, 0x80	; 128
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	0e 94 c0 18 	call	0x3180	; 0x3180 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:841

  _clear_recv_buff();
     dee:	ce 01       	movw	r24, r28
     df0:	e0 de       	rcall	.-576    	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:843

  *rsp_len=_rsp_buff_idx;
     df2:	f7 01       	movw	r30, r14
     df4:	80 81       	ld	r24, Z
     df6:	91 81       	ldd	r25, Z+1	; 0x01
     df8:	f8 01       	movw	r30, r16
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:844
  return 0;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:845
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	ef 90       	pop	r14
     e0e:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:828
  while(_recv_buff[i]!=CR_CHAR && _recv_buff[i+1]!=NL_CHAR){
     e10:	80 81       	ld	r24, Z
     e12:	8a 30       	cpi	r24, 0x0A	; 10
     e14:	51 f6       	brne	.-108    	; 0xdaa <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x46>
     e16:	cf cf       	rjmp	.-98     	; 0xdb6 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x52>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:820
    return 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	f2 cf       	rjmp	.-28     	; 0xe02 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x9e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:823
    return 2;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	ef cf       	rjmp	.-34     	; 0xe02 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x9e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:833
    return 3;
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	ec cf       	rjmp	.-40     	; 0xe02 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)+0x9e>

00000e2a <Gsm_Ard::_get_rsp(char**)>:
_ZN7Gsm_Ard8_get_rspEPPc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:848


int Gsm_Ard::_get_rsp(char** rsp){
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ec 01       	movw	r28, r24
     e30:	fb 01       	movw	r30, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:849
  if(_rsp_buff_state!=BUFF_USED){
     e32:	dc 01       	movw	r26, r24
     e34:	a6 57       	subi	r26, 0x76	; 118
     e36:	be 4f       	sbci	r27, 0xFE	; 254
     e38:	8d 91       	ld	r24, X+
     e3a:	9c 91       	ld	r25, X
     e3c:	11 97       	sbiw	r26, 0x01	; 1
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	89 f4       	brne	.+34     	; 0xe64 <Gsm_Ard::_get_rsp(char**)+0x3a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:852
    return 1;
  }
  strncpy(*rsp, _rsp_buff, _rsp_buff_idx);
     e42:	18 97       	sbiw	r26, 0x08	; 8
     e44:	4d 91       	ld	r20, X+
     e46:	5c 91       	ld	r21, X
     e48:	be 01       	movw	r22, r28
     e4a:	60 58       	subi	r22, 0x80	; 128
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	0e 94 c0 18 	call	0x3180	; 0x3180 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:853
  _clear_rsp_buff();
     e56:	ce 01       	movw	r24, r28
     e58:	bc de       	rcall	.-648    	; 0xbd2 <Gsm_Ard::_clear_rsp_buff()>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:855
  return 0;
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:850
    return 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	fa cf       	rjmp	.-12     	; 0xe5e <Gsm_Ard::_get_rsp(char**)+0x34>

00000e6a <Gsm_Ard::get_gsm_state()>:
_ZN7Gsm_Ard13get_gsm_stateEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:867
  _ss.write(CR_CHAR);
  _ss.write(NL_CHAR);
}

GSM_STATE Gsm_Ard::get_gsm_state(){
  return _gsm_state;
     e6a:	8a 57       	subi	r24, 0x7A	; 122
     e6c:	9e 4f       	sbci	r25, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:868
}
     e6e:	fc 01       	movw	r30, r24
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	08 95       	ret

00000e76 <Gsm_Ard::get_socket_rsp(char**)>:
_ZN7Gsm_Ard14get_socket_rspEPPc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:896
  }

  return 0;
}

int Gsm_Ard::get_socket_rsp(char** data){
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	ec 01       	movw	r28, r24
     e7c:	fb 01       	movw	r30, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:897
  if(_sock_buff_state!=BUFF_USED){
     e7e:	dc 01       	movw	r26, r24
     e80:	a4 57       	subi	r26, 0x74	; 116
     e82:	be 4f       	sbci	r27, 0xFE	; 254
     e84:	8d 91       	ld	r24, X+
     e86:	9c 91       	ld	r25, X
     e88:	11 97       	sbiw	r26, 0x01	; 1
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	81 f4       	brne	.+32     	; 0xeae <Gsm_Ard::get_socket_rsp(char**)+0x38>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:901
    return 1;
  }

  strncpy(*data, _sock_buff, _sock_buff_idx);
     e8e:	18 97       	sbiw	r26, 0x08	; 8
     e90:	4d 91       	ld	r20, X+
     e92:	5c 91       	ld	r21, X
     e94:	be 01       	movw	r22, r28
     e96:	73 95       	inc	r23
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	0e 94 c0 18 	call	0x3180	; 0x3180 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:902
  _clear_sock_buff();
     ea0:	ce 01       	movw	r24, r28
     ea2:	a9 de       	rcall	.-686    	; 0xbf6 <Gsm_Ard::_clear_sock_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:904

  return 0;
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:905
}
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:898
    return 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fa cf       	rjmp	.-12     	; 0xea8 <Gsm_Ard::get_socket_rsp(char**)+0x32>

00000eb4 <Gsm_Ard::_recv_string(int, int)>:
_ZN7Gsm_Ard12_recv_stringEii():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:650
int Gsm_Ard::_recv_string(int wait_period, int max_nl){
     eb4:	2f 92       	push	r2
     eb6:	3f 92       	push	r3
     eb8:	4f 92       	push	r4
     eba:	5f 92       	push	r5
     ebc:	6f 92       	push	r6
     ebe:	7f 92       	push	r7
     ec0:	8f 92       	push	r8
     ec2:	9f 92       	push	r9
     ec4:	af 92       	push	r10
     ec6:	bf 92       	push	r11
     ec8:	cf 92       	push	r12
     eca:	df 92       	push	r13
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	00 d0       	rcall	.+0      	; 0xeda <Gsm_Ard::_recv_string(int, int)+0x26>
     eda:	00 d0       	rcall	.+0      	; 0xedc <Gsm_Ard::_recv_string(int, int)+0x28>
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
     ee4:	cb 01       	movw	r24, r22
     ee6:	7a 01       	movw	r14, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:651
  if(_recv_buff_state!=BUFF_READY){
     ee8:	2b 81       	ldd	r18, Y+3	; 0x03
     eea:	3c 81       	ldd	r19, Y+4	; 0x04
     eec:	28 57       	subi	r18, 0x78	; 120
     eee:	3e 4f       	sbci	r19, 0xFE	; 254
     ef0:	3a 83       	std	Y+2, r19	; 0x02
     ef2:	29 83       	std	Y+1, r18	; 0x01
     ef4:	f9 01       	movw	r30, r18
     ef6:	20 81       	ld	r18, Z
     ef8:	31 81       	ldd	r19, Z+1	; 0x01
     efa:	23 2b       	or	r18, r19
     efc:	09 f0       	breq	.+2      	; 0xf00 <Gsm_Ard::_recv_string(int, int)+0x4c>
     efe:	ce c0       	rjmp	.+412    	; 0x109c <Gsm_Ard::_recv_string(int, int)+0x1e8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:658
      delay(wait_period/10);
     f00:	6a e0       	ldi	r22, 0x0A	; 10
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__divmodhi4>
     f08:	2b 01       	movw	r4, r22
     f0a:	77 0f       	add	r23, r23
     f0c:	66 08       	sbc	r6, r6
     f0e:	77 08       	sbc	r7, r7
     f10:	8a e0       	ldi	r24, 0x0A	; 10
     f12:	88 2e       	mov	r8, r24
     f14:	91 2c       	mov	r9, r1
     f16:	00 e0       	ldi	r16, 0x00	; 0
     f18:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:657
    if(!_ss.available()){
     f1a:	cb 80       	ldd	r12, Y+3	; 0x03
     f1c:	dc 80       	ldd	r13, Y+4	; 0x04
     f1e:	f2 e7       	ldi	r31, 0x72	; 114
     f20:	cf 1a       	sub	r12, r31
     f22:	fe ef       	ldi	r31, 0xFE	; 254
     f24:	df 0a       	sbc	r13, r31
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:661
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && nl_counter<max_nl){
     f26:	ab 80       	ldd	r10, Y+3	; 0x03
     f28:	bc 80       	ldd	r11, Y+4	; 0x04
     f2a:	20 e8       	ldi	r18, 0x80	; 128
     f2c:	a2 1a       	sub	r10, r18
     f2e:	2e ef       	ldi	r18, 0xFE	; 254
     f30:	b2 0a       	sbc	r11, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:656
  for(int i=0;i<10 && nl_counter<max_nl;i++){
     f32:	0e 15       	cp	r16, r14
     f34:	1f 05       	cpc	r17, r15
     f36:	74 f4       	brge	.+28     	; 0xf54 <Gsm_Ard::_recv_string(int, int)+0xa0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:657
    if(!_ss.available()){
     f38:	c6 01       	movw	r24, r12
     f3a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <SoftwareSerial::available()>
     f3e:	89 2b       	or	r24, r25
     f40:	09 f0       	breq	.+2      	; 0xf44 <Gsm_Ard::_recv_string(int, int)+0x90>
     f42:	44 c0       	rjmp	.+136    	; 0xfcc <Gsm_Ard::_recv_string(int, int)+0x118>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:658
      delay(wait_period/10);
     f44:	c3 01       	movw	r24, r6
     f46:	b2 01       	movw	r22, r4
     f48:	0e 94 4c 13 	call	0x2698	; 0x2698 <delay>
     f4c:	f1 e0       	ldi	r31, 0x01	; 1
     f4e:	8f 1a       	sub	r8, r31
     f50:	91 08       	sbc	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:656
  for(int i=0;i<10 && nl_counter<max_nl;i++){
     f52:	79 f7       	brne	.-34     	; 0xf32 <Gsm_Ard::_recv_string(int, int)+0x7e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:671
  Serial.print("RECV: [");
     f54:	68 ec       	ldi	r22, 0xC8	; 200
     f56:	71 e0       	ldi	r23, 0x01	; 1
     f58:	8e ec       	ldi	r24, 0xCE	; 206
     f5a:	94 e0       	ldi	r25, 0x04	; 4
     f5c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
     f60:	ab 80       	ldd	r10, Y+3	; 0x03
     f62:	bc 80       	ldd	r11, Y+4	; 0x04
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:672
  for(unsigned int j=0;j<_recv_buff_idx;j++){
     f64:	65 01       	movw	r12, r10
     f66:	20 e8       	ldi	r18, 0x80	; 128
     f68:	c2 1a       	sub	r12, r18
     f6a:	2e ef       	ldi	r18, 0xFE	; 254
     f6c:	d2 0a       	sbc	r13, r18
     f6e:	f6 01       	movw	r30, r12
     f70:	20 81       	ld	r18, Z
     f72:	31 81       	ldd	r19, Z+1	; 0x01
     f74:	c5 01       	movw	r24, r10
     f76:	4b 81       	ldd	r20, Y+3	; 0x03
     f78:	5c 81       	ldd	r21, Y+4	; 0x04
     f7a:	84 1b       	sub	r24, r20
     f7c:	95 0b       	sbc	r25, r21
     f7e:	82 17       	cp	r24, r18
     f80:	93 07       	cpc	r25, r19
     f82:	08 f0       	brcs	.+2      	; 0xf86 <Gsm_Ard::_recv_string(int, int)+0xd2>
     f84:	49 c0       	rjmp	.+146    	; 0x1018 <Gsm_Ard::_recv_string(int, int)+0x164>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:673
    Serial.print((unsigned int)_recv_buff[j]);
     f86:	f5 01       	movw	r30, r10
     f88:	61 91       	ld	r22, Z+
     f8a:	5f 01       	movw	r10, r30
     f8c:	06 2e       	mov	r0, r22
     f8e:	00 0c       	add	r0, r0
     f90:	77 0b       	sbc	r23, r23
     f92:	4a e0       	ldi	r20, 0x0A	; 10
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	8e ec       	ldi	r24, 0xCE	; 206
     f98:	94 e0       	ldi	r25, 0x04	; 4
     f9a:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <Print::print(unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:674
    Serial.print(" ");
     f9e:	6c e4       	ldi	r22, 0x4C	; 76
     fa0:	71 e0       	ldi	r23, 0x01	; 1
     fa2:	8e ec       	ldi	r24, 0xCE	; 206
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
     faa:	e1 cf       	rjmp	.-62     	; 0xf6e <Gsm_Ard::_recv_string(int, int)+0xba>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:663
        if(_recv_buff_idx>1 && _recv_buff[_recv_buff_idx-1]==NL_CHAR && _recv_buff[_recv_buff_idx-2]==CR_CHAR){
     fac:	2b 81       	ldd	r18, Y+3	; 0x03
     fae:	3c 81       	ldd	r19, Y+4	; 0x04
     fb0:	82 0f       	add	r24, r18
     fb2:	93 1f       	adc	r25, r19
     fb4:	fc 01       	movw	r30, r24
     fb6:	31 97       	sbiw	r30, 0x01	; 1
     fb8:	20 81       	ld	r18, Z
     fba:	2a 30       	cpi	r18, 0x0A	; 10
     fbc:	39 f4       	brne	.+14     	; 0xfcc <Gsm_Ard::_recv_string(int, int)+0x118>
     fbe:	02 97       	sbiw	r24, 0x02	; 2
     fc0:	fc 01       	movw	r30, r24
     fc2:	80 81       	ld	r24, Z
     fc4:	8d 30       	cpi	r24, 0x0D	; 13
     fc6:	11 f4       	brne	.+4      	; 0xfcc <Gsm_Ard::_recv_string(int, int)+0x118>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:664
          nl_counter++;
     fc8:	0f 5f       	subi	r16, 0xFF	; 255
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:661
      while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && nl_counter<max_nl){
     fcc:	c6 01       	movw	r24, r12
     fce:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <SoftwareSerial::available()>
     fd2:	89 2b       	or	r24, r25
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <Gsm_Ard::_recv_string(int, int)+0x124>
     fd6:	ba cf       	rjmp	.-140    	; 0xf4c <Gsm_Ard::_recv_string(int, int)+0x98>
     fd8:	f5 01       	movw	r30, r10
     fda:	20 80       	ld	r2, Z
     fdc:	31 80       	ldd	r3, Z+1	; 0x01
     fde:	f0 e8       	ldi	r31, 0x80	; 128
     fe0:	2f 16       	cp	r2, r31
     fe2:	31 04       	cpc	r3, r1
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <Gsm_Ard::_recv_string(int, int)+0x134>
     fe6:	b2 cf       	rjmp	.-156    	; 0xf4c <Gsm_Ard::_recv_string(int, int)+0x98>
     fe8:	0e 15       	cp	r16, r14
     fea:	1f 05       	cpc	r17, r15
     fec:	0c f0       	brlt	.+2      	; 0xff0 <Gsm_Ard::_recv_string(int, int)+0x13c>
     fee:	ae cf       	rjmp	.-164    	; 0xf4c <Gsm_Ard::_recv_string(int, int)+0x98>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:662
        _recv_buff[_recv_buff_idx++]=_ss.read();
     ff0:	c1 01       	movw	r24, r2
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	f5 01       	movw	r30, r10
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	80 83       	st	Z, r24
     ffa:	c6 01       	movw	r24, r12
     ffc:	0e 94 57 10 	call	0x20ae	; 0x20ae <SoftwareSerial::read()>
    1000:	eb 81       	ldd	r30, Y+3	; 0x03
    1002:	fc 81       	ldd	r31, Y+4	; 0x04
    1004:	e2 0d       	add	r30, r2
    1006:	f3 1d       	adc	r31, r3
    1008:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:663
        if(_recv_buff_idx>1 && _recv_buff[_recv_buff_idx-1]==NL_CHAR && _recv_buff[_recv_buff_idx-2]==CR_CHAR){
    100a:	f5 01       	movw	r30, r10
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	91 05       	cpc	r25, r1
    1014:	58 f6       	brcc	.-106    	; 0xfac <Gsm_Ard::_recv_string(int, int)+0xf8>
    1016:	da cf       	rjmp	.-76     	; 0xfcc <Gsm_Ard::_recv_string(int, int)+0x118>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:676
  Serial.println("]");
    1018:	61 ec       	ldi	r22, 0xC1	; 193
    101a:	71 e0       	ldi	r23, 0x01	; 1
    101c:	8e ec       	ldi	r24, 0xCE	; 206
    101e:	94 e0       	ldi	r25, 0x04	; 4
    1020:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:679
  if(_recv_buff_idx==RECV_BUFF_LEN){
    1024:	f6 01       	movw	r30, r12
    1026:	80 81       	ld	r24, Z
    1028:	91 81       	ldd	r25, Z+1	; 0x01
    102a:	80 38       	cpi	r24, 0x80	; 128
    102c:	91 05       	cpc	r25, r1
    102e:	e1 f4       	brne	.+56     	; 0x1068 <Gsm_Ard::_recv_string(int, int)+0x1b4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:680
    _clear_recv_buff();
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	be dd       	rcall	.-1156   	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:681
    return 2;
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:693
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	bf 90       	pop	r11
    1054:	af 90       	pop	r10
    1056:	9f 90       	pop	r9
    1058:	8f 90       	pop	r8
    105a:	7f 90       	pop	r7
    105c:	6f 90       	pop	r6
    105e:	5f 90       	pop	r5
    1060:	4f 90       	pop	r4
    1062:	3f 90       	pop	r3
    1064:	2f 90       	pop	r2
    1066:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:683
  else if(!_recv_buff_idx){
    1068:	89 2b       	or	r24, r25
    106a:	31 f4       	brne	.+12     	; 0x1078 <Gsm_Ard::_recv_string(int, int)+0x1c4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:684
    _clear_recv_buff();
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	a0 dd       	rcall	.-1216   	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:685
    return 3;
    1072:	83 e0       	ldi	r24, 0x03	; 3
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	e1 cf       	rjmp	.-62     	; 0x103a <Gsm_Ard::_recv_string(int, int)+0x186>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:687
  else if(nl_counter!=max_nl){
    1078:	e0 16       	cp	r14, r16
    107a:	f1 06       	cpc	r15, r17
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:688
    _clear_recv_buff();
    107c:	31 f0       	breq	.+12     	; 0x108a <Gsm_Ard::_recv_string(int, int)+0x1d6>
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	97 dd       	rcall	.-1234   	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:689
    return 4;
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	d8 cf       	rjmp	.-80     	; 0x103a <Gsm_Ard::_recv_string(int, int)+0x186>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:691
  _recv_buff_state=BUFF_USED;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	e9 81       	ldd	r30, Y+1	; 0x01
    1090:	fa 81       	ldd	r31, Y+2	; 0x02
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:692
  return 0;
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	cf cf       	rjmp	.-98     	; 0x103a <Gsm_Ard::_recv_string(int, int)+0x186>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:652
    return 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	cc cf       	rjmp	.-104    	; 0x103a <Gsm_Ard::_recv_string(int, int)+0x186>

000010a2 <Gsm_Ard::_recv_tcp_data(unsigned int*)>:
_ZN7Gsm_Ard14_recv_tcp_dataEPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:544
int Gsm_Ard::_recv_tcp_data(unsigned int* data_len){
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
    10b8:	5b 01       	movw	r10, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:546
  if(_sock_buff_state==BUFF_USED){
    10ba:	7c 01       	movw	r14, r24
    10bc:	84 e7       	ldi	r24, 0x74	; 116
    10be:	e8 1a       	sub	r14, r24
    10c0:	8e ef       	ldi	r24, 0xFE	; 254
    10c2:	f8 0a       	sbc	r15, r24
    10c4:	f7 01       	movw	r30, r14
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	d1 f1       	breq	.+116    	; 0x1142 <Gsm_Ard::_recv_tcp_data(unsigned int*)+0xa0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:551
  n=_recv_string(10000, 1);
    10ce:	41 e0       	ldi	r20, 0x01	; 1
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	60 e1       	ldi	r22, 0x10	; 16
    10d4:	77 e2       	ldi	r23, 0x27	; 39
    10d6:	ce 01       	movw	r24, r28
    10d8:	ed de       	rcall	.-550    	; 0xeb4 <Gsm_Ard::_recv_string(int, int)>
    10da:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:552
  if(n){
    10dc:	89 2b       	or	r24, r25
    10de:	a1 f5       	brne	.+104    	; 0x1148 <Gsm_Ard::_recv_tcp_data(unsigned int*)+0xa6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:556
  _sock_buff_state=BUFF_USED;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	f7 01       	movw	r30, r14
    10e6:	91 83       	std	Z+1, r25	; 0x01
    10e8:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:557
  strncpy(_sock_buff, _recv_buff, _recv_buff_idx);
    10ea:	6e 01       	movw	r12, r28
    10ec:	f0 e8       	ldi	r31, 0x80	; 128
    10ee:	cf 1a       	sub	r12, r31
    10f0:	fe ef       	ldi	r31, 0xFE	; 254
    10f2:	df 0a       	sbc	r13, r31
    10f4:	f6 01       	movw	r30, r12
    10f6:	40 81       	ld	r20, Z
    10f8:	51 81       	ldd	r21, Z+1	; 0x01
    10fa:	be 01       	movw	r22, r28
    10fc:	ce 01       	movw	r24, r28
    10fe:	93 95       	inc	r25
    1100:	0e 94 c0 18 	call	0x3180	; 0x3180 <strncpy>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:558
  _sock_buff_idx=_recv_buff_idx;
    1104:	7e 01       	movw	r14, r28
    1106:	fc e7       	ldi	r31, 0x7C	; 124
    1108:	ef 1a       	sub	r14, r31
    110a:	fe ef       	ldi	r31, 0xFE	; 254
    110c:	ff 0a       	sbc	r15, r31
    110e:	f6 01       	movw	r30, r12
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
    1114:	f7 01       	movw	r30, r14
    1116:	91 83       	std	Z+1, r25	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:560
  _clear_recv_buff();
    1118:	80 83       	st	Z, r24
    111a:	ce 01       	movw	r24, r28
    111c:	4a dd       	rcall	.-1388   	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:561
  *data_len=_sock_buff_idx;
    111e:	f7 01       	movw	r30, r14
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	f5 01       	movw	r30, r10
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:563
}
    112a:	c8 01       	movw	r24, r16
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:547
    return 1;
    1142:	01 e0       	ldi	r16, 0x01	; 1
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	f1 cf       	rjmp	.-30     	; 0x112a <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:553
    return 2;
    1148:	02 e0       	ldi	r16, 0x02	; 2
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	ee cf       	rjmp	.-36     	; 0x112a <Gsm_Ard::_recv_tcp_data(unsigned int*)+0x88>

0000114e <Gsm_Ard::_recv_socket(int)>:
_ZN7Gsm_Ard12_recv_socketEi():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:695
int Gsm_Ard::_recv_socket(int wait_period){
    114e:	2f 92       	push	r2
    1150:	3f 92       	push	r3
    1152:	4f 92       	push	r4
    1154:	5f 92       	push	r5
    1156:	6f 92       	push	r6
    1158:	7f 92       	push	r7
    115a:	8f 92       	push	r8
    115c:	9f 92       	push	r9
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	00 d0       	rcall	.+0      	; 0x1174 <Gsm_Ard::_recv_socket(int)+0x26>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <Gsm_Ard::_recv_socket(int)+0x28>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <Gsm_Ard::_recv_socket(int)+0x2a>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9e 83       	std	Y+6, r25	; 0x06
    117e:	8d 83       	std	Y+5, r24	; 0x05
    1180:	cb 01       	movw	r24, r22
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:696
  if(_recv_buff_state!=BUFF_READY){
    1182:	2d 80       	ldd	r2, Y+5	; 0x05
    1184:	3e 80       	ldd	r3, Y+6	; 0x06
    1186:	28 e7       	ldi	r18, 0x78	; 120
    1188:	22 1a       	sub	r2, r18
    118a:	2e ef       	ldi	r18, 0xFE	; 254
    118c:	32 0a       	sbc	r3, r18
    118e:	f1 01       	movw	r30, r2
    1190:	20 81       	ld	r18, Z
    1192:	31 81       	ldd	r19, Z+1	; 0x01
    1194:	23 2b       	or	r18, r19
    1196:	09 f0       	breq	.+2      	; 0x119a <Gsm_Ard::_recv_socket(int)+0x4c>
    1198:	c9 c0       	rjmp	.+402    	; 0x132c <Gsm_Ard::_recv_socket(int)+0x1de>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:699
  if(_gsm_state!=GSM_TCP_STATE){
    119a:	ed 81       	ldd	r30, Y+5	; 0x05
    119c:	fe 81       	ldd	r31, Y+6	; 0x06
    119e:	ea 57       	subi	r30, 0x7A	; 122
    11a0:	fe 4f       	sbci	r31, 0xFE	; 254
    11a2:	20 81       	ld	r18, Z
    11a4:	31 81       	ldd	r19, Z+1	; 0x01
    11a6:	25 30       	cpi	r18, 0x05	; 5
    11a8:	31 05       	cpc	r19, r1
    11aa:	09 f0       	breq	.+2      	; 0x11ae <Gsm_Ard::_recv_socket(int)+0x60>
    11ac:	8c c0       	rjmp	.+280    	; 0x12c6 <Gsm_Ard::_recv_socket(int)+0x178>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:710
      delay(wait_period/10);
    11ae:	6a e0       	ldi	r22, 0x0A	; 10
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__divmodhi4>
    11b6:	2b 01       	movw	r4, r22
    11b8:	77 0f       	add	r23, r23
    11ba:	66 08       	sbc	r6, r6
    11bc:	77 08       	sbc	r7, r7
    11be:	8a e0       	ldi	r24, 0x0A	; 10
    11c0:	a8 2e       	mov	r10, r24
    11c2:	b1 2c       	mov	r11, r1
    11c4:	e1 2c       	mov	r14, r1
    11c6:	f1 2c       	mov	r15, r1
    11c8:	c1 2c       	mov	r12, r1
    11ca:	d1 2c       	mov	r13, r1
    11cc:	1a 82       	std	Y+2, r1	; 0x02
    11ce:	81 2c       	mov	r8, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:709
    if(!_ss.available()){
    11d0:	0d 81       	ldd	r16, Y+5	; 0x05
    11d2:	1e 81       	ldd	r17, Y+6	; 0x06
    11d4:	02 57       	subi	r16, 0x72	; 114
    11d6:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:726
        while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && data_read<trans_size){
    11d8:	4d 81       	ldd	r20, Y+5	; 0x05
    11da:	5e 81       	ldd	r21, Y+6	; 0x06
    11dc:	40 58       	subi	r20, 0x80	; 128
    11de:	5e 4f       	sbci	r21, 0xFE	; 254
    11e0:	5c 83       	std	Y+4, r21	; 0x04
    11e2:	4b 83       	std	Y+3, r20	; 0x03
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:709
    if(!_ss.available()){
    11e4:	c8 01       	movw	r24, r16
    11e6:	fd d7       	rcall	.+4090   	; 0x21e2 <SoftwareSerial::available()>
    11e8:	89 2b       	or	r24, r25
    11ea:	a9 f5       	brne	.+106    	; 0x1256 <Gsm_Ard::_recv_socket(int)+0x108>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:710
      delay(wait_period/10);
    11ec:	c3 01       	movw	r24, r6
    11ee:	b2 01       	movw	r22, r4
    11f0:	0e 94 4c 13 	call	0x2698	; 0x2698 <delay>
    11f4:	91 2c       	mov	r9, r1
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	a2 1a       	sub	r10, r18
    11fa:	b1 08       	sbc	r11, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:708
  for(int i=0;i<10 && !done;i++){
    11fc:	11 f0       	breq	.+4      	; 0x1202 <Gsm_Ard::_recv_socket(int)+0xb4>
    11fe:	99 20       	and	r9, r9
    1200:	89 f3       	breq	.-30     	; 0x11e4 <Gsm_Ard::_recv_socket(int)+0x96>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:738
  Serial.print("SOCK_RECV: [");
    1202:	63 ec       	ldi	r22, 0xC3	; 195
    1204:	71 e0       	ldi	r23, 0x01	; 1
    1206:	8e ec       	ldi	r24, 0xCE	; 206
    1208:	94 e0       	ldi	r25, 0x04	; 4
    120a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
    120e:	ed 80       	ldd	r14, Y+5	; 0x05
    1210:	fe 80       	ldd	r15, Y+6	; 0x06
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:739
  for(unsigned int j=0;j<_recv_buff_idx;j++){
    1212:	87 01       	movw	r16, r14
    1214:	00 58       	subi	r16, 0x80	; 128
    1216:	1e 4f       	sbci	r17, 0xFE	; 254
    1218:	f8 01       	movw	r30, r16
    121a:	20 81       	ld	r18, Z
    121c:	31 81       	ldd	r19, Z+1	; 0x01
    121e:	c7 01       	movw	r24, r14
    1220:	4d 81       	ldd	r20, Y+5	; 0x05
    1222:	5e 81       	ldd	r21, Y+6	; 0x06
    1224:	84 1b       	sub	r24, r20
    1226:	95 0b       	sbc	r25, r21
    1228:	82 17       	cp	r24, r18
    122a:	93 07       	cpc	r25, r19
    122c:	08 f0       	brcs	.+2      	; 0x1230 <Gsm_Ard::_recv_socket(int)+0xe2>
    122e:	3c c0       	rjmp	.+120    	; 0x12a8 <Gsm_Ard::_recv_socket(int)+0x15a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:740
    Serial.print((unsigned int)_recv_buff[j]);
    1230:	f7 01       	movw	r30, r14
    1232:	61 91       	ld	r22, Z+
    1234:	7f 01       	movw	r14, r30
    1236:	06 2e       	mov	r0, r22
    1238:	00 0c       	add	r0, r0
    123a:	77 0b       	sbc	r23, r23
    123c:	4a e0       	ldi	r20, 0x0A	; 10
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	8e ec       	ldi	r24, 0xCE	; 206
    1242:	94 e0       	ldi	r25, 0x04	; 4
    1244:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <Print::print(unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:741
    Serial.print(" ");
    1248:	6c e4       	ldi	r22, 0x4C	; 76
    124a:	71 e0       	ldi	r23, 0x01	; 1
    124c:	8e ec       	ldi	r24, 0xCE	; 206
    124e:	94 e0       	ldi	r25, 0x04	; 4
    1250:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
    1254:	e1 cf       	rjmp	.-62     	; 0x1218 <Gsm_Ard::_recv_socket(int)+0xca>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:713
      if(ready_for_confirm){
    1256:	88 20       	and	r8, r8
    1258:	39 f0       	breq	.+14     	; 0x1268 <Gsm_Ard::_recv_socket(int)+0x11a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:714
        if(_ss.read()!=0xff){
    125a:	c8 01       	movw	r24, r16
    125c:	28 d7       	rcall	.+3664   	; 0x20ae <SoftwareSerial::read()>
    125e:	8f 3f       	cpi	r24, 0xFF	; 255
    1260:	91 05       	cpc	r25, r1
    1262:	c9 f5       	brne	.+114    	; 0x12d6 <Gsm_Ard::_recv_socket(int)+0x188>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:718
          done=true;
    1264:	98 2c       	mov	r9, r8
    1266:	c7 cf       	rjmp	.-114    	; 0x11f6 <Gsm_Ard::_recv_socket(int)+0xa8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:722
        if(!size_set){
    1268:	5a 81       	ldd	r21, Y+2	; 0x02
    126a:	51 11       	cpse	r21, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:723
          trans_size=(unsigned int) _ss.read();
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <Gsm_Ard::_recv_socket(int)+0x126>
    126e:	c8 01       	movw	r24, r16
    1270:	1e d7       	rcall	.+3644   	; 0x20ae <SoftwareSerial::read()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:726
        while(_ss.available() && _recv_buff_idx<RECV_BUFF_LEN && data_read<trans_size){
    1272:	6c 01       	movw	r12, r24
    1274:	c8 01       	movw	r24, r16
    1276:	b5 d7       	rcall	.+3946   	; 0x21e2 <SoftwareSerial::available()>
    1278:	89 2b       	or	r24, r25
    127a:	61 f0       	breq	.+24     	; 0x1294 <Gsm_Ard::_recv_socket(int)+0x146>
    127c:	eb 81       	ldd	r30, Y+3	; 0x03
    127e:	fc 81       	ldd	r31, Y+4	; 0x04
    1280:	80 80       	ld	r8, Z
    1282:	91 80       	ldd	r9, Z+1	; 0x01
    1284:	f0 e8       	ldi	r31, 0x80	; 128
    1286:	8f 16       	cp	r8, r31
    1288:	91 04       	cpc	r9, r1
    128a:	20 f4       	brcc	.+8      	; 0x1294 <Gsm_Ard::_recv_socket(int)+0x146>
    128c:	ec 14       	cp	r14, r12
    128e:	fd 04       	cpc	r15, r13
    1290:	08 f4       	brcc	.+2      	; 0x1294 <Gsm_Ard::_recv_socket(int)+0x146>
    1292:	4f c0       	rjmp	.+158    	; 0x1332 <Gsm_Ard::_recv_socket(int)+0x1e4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:730
        if(data_read==trans_size){
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	ec 14       	cp	r14, r12
    1298:	fd 04       	cpc	r15, r13
    129a:	09 f0       	breq	.+2      	; 0x129e <Gsm_Ard::_recv_socket(int)+0x150>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	91 2c       	mov	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:731
          ready_for_confirm=true;
    12a0:	88 2e       	mov	r8, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:730
        if(data_read==trans_size){
    12a2:	21 e0       	ldi	r18, 0x01	; 1
    12a4:	2a 83       	std	Y+2, r18	; 0x02
    12a6:	a7 cf       	rjmp	.-178    	; 0x11f6 <Gsm_Ard::_recv_socket(int)+0xa8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:743
  Serial.println("]");
    12a8:	61 ec       	ldi	r22, 0xC1	; 193
    12aa:	71 e0       	ldi	r23, 0x01	; 1
    12ac:	8e ec       	ldi	r24, 0xCE	; 206
    12ae:	94 e0       	ldi	r25, 0x04	; 4
    12b0:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:746
  if(_recv_buff_idx==RECV_BUFF_LEN){
    12b4:	f8 01       	movw	r30, r16
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	80 38       	cpi	r24, 0x80	; 128
    12bc:	91 05       	cpc	r25, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:747
    _clear_recv_buff();
    12be:	31 f4       	brne	.+12     	; 0x12cc <Gsm_Ard::_recv_socket(int)+0x17e>
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	76 dc       	rcall	.-1812   	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:700
    return 2;
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:750
  else if(!_recv_buff_idx){
    12ca:	0f c0       	rjmp	.+30     	; 0x12ea <Gsm_Ard::_recv_socket(int)+0x19c>
    12cc:	89 2b       	or	r24, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:751
    _clear_recv_buff();
    12ce:	31 f4       	brne	.+12     	; 0x12dc <Gsm_Ard::_recv_socket(int)+0x18e>
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	6e dc       	rcall	.-1828   	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:715
          return 3;
    12d6:	83 e0       	ldi	r24, 0x03	; 3
    12d8:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:754
  else if(!done){
    12da:	07 c0       	rjmp	.+14     	; 0x12ea <Gsm_Ard::_recv_socket(int)+0x19c>
    12dc:	91 10       	cpse	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:755
    _clear_recv_buff();
    12de:	1e c0       	rjmp	.+60     	; 0x131c <Gsm_Ard::_recv_socket(int)+0x1ce>
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	66 dc       	rcall	.-1844   	; 0xbb2 <Gsm_Ard::_clear_recv_buff()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:756
    return 4;
    12e6:	84 e0       	ldi	r24, 0x04	; 4
    12e8:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:760
}
    12ea:	26 96       	adiw	r28, 0x06	; 6
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	bf 90       	pop	r11
    1308:	af 90       	pop	r10
    130a:	9f 90       	pop	r9
    130c:	8f 90       	pop	r8
    130e:	7f 90       	pop	r7
    1310:	6f 90       	pop	r6
    1312:	5f 90       	pop	r5
    1314:	4f 90       	pop	r4
    1316:	3f 90       	pop	r3
    1318:	2f 90       	pop	r2
    131a:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:758
  _recv_buff_state=BUFF_USED;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	f1 01       	movw	r30, r2
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:759
  return 0;
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	df cf       	rjmp	.-66     	; 0x12ea <Gsm_Ard::_recv_socket(int)+0x19c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:697
    return 1;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	dc cf       	rjmp	.-72     	; 0x12ea <Gsm_Ard::_recv_socket(int)+0x19c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:727
          _recv_buff[_recv_buff_idx++]=_ss.read();
    1332:	c4 01       	movw	r24, r8
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	eb 81       	ldd	r30, Y+3	; 0x03
    1338:	fc 81       	ldd	r31, Y+4	; 0x04
    133a:	91 83       	std	Z+1, r25	; 0x01
    133c:	80 83       	st	Z, r24
    133e:	c8 01       	movw	r24, r16
    1340:	b6 d6       	rcall	.+3436   	; 0x20ae <SoftwareSerial::read()>
    1342:	ed 81       	ldd	r30, Y+5	; 0x05
    1344:	fe 81       	ldd	r31, Y+6	; 0x06
    1346:	e8 0d       	add	r30, r8
    1348:	f9 1d       	adc	r31, r9
    134a:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:728
          data_read++;
    134c:	ff ef       	ldi	r31, 0xFF	; 255
    134e:	ef 1a       	sub	r14, r31
    1350:	ff 0a       	sbc	r15, r31
    1352:	90 cf       	rjmp	.-224    	; 0x1274 <Gsm_Ard::_recv_socket(int)+0x126>

00001354 <Gsm_Ard::_write_cmd(char const*)>:
_ZN7Gsm_Ard10_write_cmdEPKc():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:857
void Gsm_Ard::_write_cmd(const char* cmd){
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:858
  unsigned int cmd_len=strlen(cmd);
    1360:	fb 01       	movw	r30, r22
    1362:	01 90       	ld	r0, Z+
    1364:	00 20       	and	r0, r0
    1366:	e9 f7       	brne	.-6      	; 0x1362 <Gsm_Ard::_write_cmd(char const*)+0xe>
    1368:	eb 01       	movw	r28, r22
    136a:	9f 01       	movw	r18, r30
    136c:	21 50       	subi	r18, 0x01	; 1
    136e:	31 09       	sbc	r19, r1
    1370:	79 01       	movw	r14, r18
    1372:	8c 01       	movw	r16, r24
    1374:	02 57       	subi	r16, 0x72	; 114
    1376:	1e 4f       	sbci	r17, 0xFE	; 254
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:859
  for(unsigned int i=0;i<cmd_len;i++){
    1378:	ce 15       	cp	r28, r14
    137a:	df 05       	cpc	r29, r15
    137c:	21 f0       	breq	.+8      	; 0x1386 <Gsm_Ard::_write_cmd(char const*)+0x32>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:860
    _ss.write(cmd[i]);
    137e:	69 91       	ld	r22, Y+
    1380:	c8 01       	movw	r24, r16
    1382:	b6 d6       	rcall	.+3436   	; 0x20f0 <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:859
  for(unsigned int i=0;i<cmd_len;i++){
    1384:	f9 cf       	rjmp	.-14     	; 0x1378 <Gsm_Ard::_write_cmd(char const*)+0x24>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:862
  _ss.write(CR_CHAR);
    1386:	6d e0       	ldi	r22, 0x0D	; 13
    1388:	c8 01       	movw	r24, r16
    138a:	b2 d6       	rcall	.+3428   	; 0x20f0 <SoftwareSerial::write(unsigned char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:863
  _ss.write(NL_CHAR);
    138c:	6a e0       	ldi	r22, 0x0A	; 10
    138e:	c8 01       	movw	r24, r16
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:864
}
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:863
  _ss.write(NL_CHAR);
    139a:	ef 90       	pop	r14
    139c:	a9 c6       	rjmp	.+3410   	; 0x20f0 <SoftwareSerial::write(unsigned char)>

0000139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>:
_ZN7Gsm_Ard18_send_cmd_comp_rspEPKcS1_i():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:569
int Gsm_Ard::_send_cmd_comp_rsp(const char* cmd, const char* exp_rsp, int recv_wait_period){
    139e:	6f 92       	push	r6
    13a0:	7f 92       	push	r7
    13a2:	8f 92       	push	r8
    13a4:	9f 92       	push	r9
    13a6:	af 92       	push	r10
    13a8:	bf 92       	push	r11
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x1e>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x20>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	6c 01       	movw	r12, r24
    13c4:	8b 01       	movw	r16, r22
    13c6:	3a 01       	movw	r6, r20
    13c8:	49 01       	movw	r8, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:571
  int cmd_size=strlen(cmd);
    13ca:	fb 01       	movw	r30, r22
    13cc:	01 90       	ld	r0, Z+
    13ce:	00 20       	and	r0, r0
    13d0:	e9 f7       	brne	.-6      	; 0x13cc <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x2e>
    13d2:	31 97       	sbiw	r30, 0x01	; 1
    13d4:	7f 01       	movw	r14, r30
    13d6:	e6 1a       	sub	r14, r22
    13d8:	f7 0a       	sbc	r15, r23
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:575
  while(_ss.available()) _ss.read();
    13da:	5c 01       	movw	r10, r24
    13dc:	82 e7       	ldi	r24, 0x72	; 114
    13de:	a8 1a       	sub	r10, r24
    13e0:	8e ef       	ldi	r24, 0xFE	; 254
    13e2:	b8 0a       	sbc	r11, r24
    13e4:	c5 01       	movw	r24, r10
    13e6:	fd d6       	rcall	.+3578   	; 0x21e2 <SoftwareSerial::available()>
    13e8:	89 2b       	or	r24, r25
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x54>
    13ec:	c5 01       	movw	r24, r10
    13ee:	5f d6       	rcall	.+3262   	; 0x20ae <SoftwareSerial::read()>
    13f0:	f9 cf       	rjmp	.-14     	; 0x13e4 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x46>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:578
  Serial.print("DB-SND: [");
    13f2:	60 ed       	ldi	r22, 0xD0	; 208
    13f4:	71 e0       	ldi	r23, 0x01	; 1
    13f6:	8e ec       	ldi	r24, 0xCE	; 206
    13f8:	94 e0       	ldi	r25, 0x04	; 4
    13fa:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
    13fe:	58 01       	movw	r10, r16
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:579
  for(int i=0;i<cmd_size;i++){
    1400:	c5 01       	movw	r24, r10
    1402:	80 1b       	sub	r24, r16
    1404:	91 0b       	sbc	r25, r17
    1406:	8e 15       	cp	r24, r14
    1408:	9f 05       	cpc	r25, r15
    140a:	9c f4       	brge	.+38     	; 0x1432 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x94>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:580
    Serial.print((unsigned int) cmd[i]);
    140c:	f5 01       	movw	r30, r10
    140e:	61 91       	ld	r22, Z+
    1410:	5f 01       	movw	r10, r30
    1412:	06 2e       	mov	r0, r22
    1414:	00 0c       	add	r0, r0
    1416:	77 0b       	sbc	r23, r23
    1418:	4a e0       	ldi	r20, 0x0A	; 10
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	8e ec       	ldi	r24, 0xCE	; 206
    141e:	94 e0       	ldi	r25, 0x04	; 4
    1420:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <Print::print(unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:581
    Serial.print(" ");
    1424:	6c e4       	ldi	r22, 0x4C	; 76
    1426:	71 e0       	ldi	r23, 0x01	; 1
    1428:	8e ec       	ldi	r24, 0xCE	; 206
    142a:	94 e0       	ldi	r25, 0x04	; 4
    142c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:579
  for(int i=0;i<cmd_size;i++){
    1430:	e7 cf       	rjmp	.-50     	; 0x1400 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x62>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:583
  Serial.println("]");
    1432:	61 ec       	ldi	r22, 0xC1	; 193
    1434:	71 e0       	ldi	r23, 0x01	; 1
    1436:	8e ec       	ldi	r24, 0xCE	; 206
    1438:	94 e0       	ldi	r25, 0x04	; 4
    143a:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:585
  _write_cmd(cmd);
    143e:	b8 01       	movw	r22, r16
    1440:	c6 01       	movw	r24, r12
    1442:	88 df       	rcall	.-240    	; 0x1354 <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:586
  n=_recv_string(recv_wait_period);
    1444:	43 e0       	ldi	r20, 0x03	; 3
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	b4 01       	movw	r22, r8
    144a:	c6 01       	movw	r24, r12
    144c:	33 dd       	rcall	.-1434   	; 0xeb4 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:587
  if(!n){
    144e:	89 2b       	or	r24, r25
    1450:	b9 f5       	brne	.+110    	; 0x14c0 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x122>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:588
    n=_fetch_rsp_from_recv(cmd, cmd_size, &rsp_len);
    1452:	9e 01       	movw	r18, r28
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	a7 01       	movw	r20, r14
    145a:	b8 01       	movw	r22, r16
    145c:	c6 01       	movw	r24, r12
    145e:	fa db       	rcall	.-2060   	; 0xc54 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:589
    if(!n){
    1460:	89 2b       	or	r24, r25
    1462:	89 f5       	brne	.+98     	; 0x14c6 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x128>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:590
      rsp=new char[rsp_len];
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	0e 94 ef 15 	call	0x2bde	; 0x2bde <operator new[](unsigned int)>
    146c:	9c 83       	std	Y+4, r25	; 0x04
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:591
      n=_get_rsp(&rsp);
    146e:	8b 83       	std	Y+3, r24	; 0x03
    1470:	be 01       	movw	r22, r28
    1472:	6d 5f       	subi	r22, 0xFD	; 253
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	c6 01       	movw	r24, r12
    1478:	d8 dc       	rcall	.-1616   	; 0xe2a <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:592
      if(n){
    147a:	89 2b       	or	r24, r25
    147c:	31 f5       	brne	.+76     	; 0x14ca <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x12c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:595
      if(!strncmp(rsp, exp_rsp, rsp_len)) return 0;
    147e:	49 81       	ldd	r20, Y+1	; 0x01
    1480:	5a 81       	ldd	r21, Y+2	; 0x02
    1482:	b3 01       	movw	r22, r6
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	0e 94 b2 18 	call	0x3164	; 0x3164 <strncmp>
    148c:	31 e0       	ldi	r19, 0x01	; 1
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	89 2b       	or	r24, r25
    1492:	09 f4       	brne	.+2      	; 0x1496 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0xf8>
    1494:	30 e0       	ldi	r19, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:593
        return 2;
    1496:	83 2f       	mov	r24, r19
    1498:	92 2f       	mov	r25, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:607
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	bf 90       	pop	r11
    14b4:	af 90       	pop	r10
    14b6:	9f 90       	pop	r9
    14b8:	8f 90       	pop	r8
    14ba:	7f 90       	pop	r7
    14bc:	6f 90       	pop	r6
    14be:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:605
    return 4;
    14c0:	84 e0       	ldi	r24, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:593
        return 2;
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	ea cf       	rjmp	.-44     	; 0x149a <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0xfc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:601
      return 3;
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	fc cf       	rjmp	.-8      	; 0x14c2 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x124>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:593
        return 2;
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	fa cf       	rjmp	.-12     	; 0x14c2 <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)+0x124>

000014ce <Gsm_Ard::attachGPRS()>:
_ZN7Gsm_Ard10attachGPRSEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:265
int Gsm_Ard::attachGPRS(){
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	e3 97       	sbiw	r28, 0x33	; 51
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	7c 01       	movw	r14, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:268
  if(_gsm_state!=GSM_GPRS_STATE){
    14f0:	6c 01       	movw	r12, r24
    14f2:	8a e7       	ldi	r24, 0x7A	; 122
    14f4:	c8 1a       	sub	r12, r24
    14f6:	8e ef       	ldi	r24, 0xFE	; 254
    14f8:	d8 0a       	sbc	r13, r24
    14fa:	f6 01       	movw	r30, r12
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	03 97       	sbiw	r24, 0x03	; 3
    1502:	09 f0       	breq	.+2      	; 0x1506 <Gsm_Ard::attachGPRS()+0x38>
    1504:	c4 c0       	rjmp	.+392    	; 0x168e <Gsm_Ard::attachGPRS()+0x1c0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:275
    strcpy_P(at_cmd_buffer, AT_CIFSR);
    1506:	6b ea       	ldi	r22, 0xAB	; 171
    1508:	71 e0       	ldi	r23, 0x01	; 1
    150a:	ce 01       	movw	r24, r28
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:276
    strcpy_P(at_rsp_buffer, AT_ERROR);
    1512:	6d e7       	ldi	r22, 0x7D	; 125
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	ce 01       	movw	r24, r28
    1518:	86 96       	adiw	r24, 0x26	; 38
    151a:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:277
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    151e:	28 e8       	ldi	r18, 0x88	; 136
    1520:	33 e1       	ldi	r19, 0x13	; 19
    1522:	ae 01       	movw	r20, r28
    1524:	4a 5d       	subi	r20, 0xDA	; 218
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	be 01       	movw	r22, r28
    152a:	6f 5f       	subi	r22, 0xFF	; 255
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	c7 01       	movw	r24, r14
    1530:	36 df       	rcall	.-404    	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:279
  switch(n){
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	01 f1       	breq	.+64     	; 0x1576 <Gsm_Ard::attachGPRS()+0xa8>
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	09 f0       	breq	.+2      	; 0x153c <Gsm_Ard::attachGPRS()+0x6e>
    153a:	ac c0       	rjmp	.+344    	; 0x1694 <Gsm_Ard::attachGPRS()+0x1c6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:285
      Serial.println("DB: GSM_STATE=GSM_IP_STATE");
    153c:	6a ed       	ldi	r22, 0xDA	; 218
    153e:	71 e0       	ldi	r23, 0x01	; 1
    1540:	8e ec       	ldi	r24, 0xCE	; 206
    1542:	94 e0       	ldi	r25, 0x04	; 4
    1544:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:287
      _gsm_state=GSM_IP_STATE;
    1548:	84 e0       	ldi	r24, 0x04	; 4
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	f6 01       	movw	r30, r12
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:288
      return 0;
    1552:	00 e0       	ldi	r16, 0x00	; 0
    1554:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:360
}
    1556:	c8 01       	movw	r24, r16
    1558:	e3 96       	adiw	r28, 0x33	; 51
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:297
    strcpy_P(at_cmd_buffer, AT_CIPSERVER_R);
    1576:	63 e4       	ldi	r22, 0x43	; 67
    1578:	71 e0       	ldi	r23, 0x01	; 1
    157a:	ce 01       	movw	r24, r28
    157c:	86 96       	adiw	r24, 0x26	; 38
    157e:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:298
    strcpy_P(at_rsp_buffer, AT_CIPSERVER_RESP);
    1582:	65 e3       	ldi	r22, 0x35	; 53
    1584:	71 e0       	ldi	r23, 0x01	; 1
    1586:	ce 01       	movw	r24, r28
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:299
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    158e:	28 e8       	ldi	r18, 0x88	; 136
    1590:	33 e1       	ldi	r19, 0x13	; 19
    1592:	ae 01       	movw	r20, r28
    1594:	4f 5f       	subi	r20, 0xFF	; 255
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	be 01       	movw	r22, r28
    159a:	6a 5d       	subi	r22, 0xDA	; 218
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	c7 01       	movw	r24, r14
    15a0:	fe de       	rcall	.-516    	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:301
  switch(n){
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	f1 f0       	breq	.+60     	; 0x15e2 <Gsm_Ard::attachGPRS()+0x114>
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	09 f0       	breq	.+2      	; 0x15ac <Gsm_Ard::attachGPRS()+0xde>
    15aa:	77 c0       	rjmp	.+238    	; 0x169a <Gsm_Ard::attachGPRS()+0x1cc>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:309
        strcpy_P(at_cmd_buffer, AT_CIPSERVER_SET);
    15ac:	66 e2       	ldi	r22, 0x26	; 38
    15ae:	71 e0       	ldi	r23, 0x01	; 1
    15b0:	ce 01       	movw	r24, r28
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:310
        strcpy_P(at_rsp_buffer, AT_OK);
    15b8:	63 e8       	ldi	r22, 0x83	; 131
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	ce 01       	movw	r24, r28
    15be:	86 96       	adiw	r24, 0x26	; 38
    15c0:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:311
        n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    15c4:	28 e8       	ldi	r18, 0x88	; 136
    15c6:	33 e1       	ldi	r19, 0x13	; 19
    15c8:	ae 01       	movw	r20, r28
    15ca:	4a 5d       	subi	r20, 0xDA	; 218
    15cc:	5f 4f       	sbci	r21, 0xFF	; 255
    15ce:	be 01       	movw	r22, r28
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	c7 01       	movw	r24, r14
    15d6:	e3 de       	rcall	.-570    	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:312
        if(!n){
    15d8:	89 2b       	or	r24, r25
    15da:	19 f4       	brne	.+6      	; 0x15e2 <Gsm_Ard::attachGPRS()+0x114>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:313
          return 4;
    15dc:	04 e0       	ldi	r16, 0x04	; 4
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	ba cf       	rjmp	.-140    	; 0x1556 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:324
    strcpy_P(at_cmd_buffer, AT_CSTT);
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	71 e0       	ldi	r23, 0x01	; 1
    15e6:	ce 01       	movw	r24, r28
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:325
    strcpy_P(at_rsp_buffer, AT_OK);
    15ee:	63 e8       	ldi	r22, 0x83	; 131
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	ce 01       	movw	r24, r28
    15f4:	86 96       	adiw	r24, 0x26	; 38
    15f6:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:326
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    15fa:	28 e8       	ldi	r18, 0x88	; 136
    15fc:	33 e1       	ldi	r19, 0x13	; 19
    15fe:	ae 01       	movw	r20, r28
    1600:	4a 5d       	subi	r20, 0xDA	; 218
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	be 01       	movw	r22, r28
    1606:	6f 5f       	subi	r22, 0xFF	; 255
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	c7 01       	movw	r24, r14
    160c:	c8 de       	rcall	.-624    	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:328
  if(n){
    160e:	89 2b       	or	r24, r25
    1610:	09 f0       	breq	.+2      	; 0x1614 <Gsm_Ard::attachGPRS()+0x146>
    1612:	46 c0       	rjmp	.+140    	; 0x16a0 <Gsm_Ard::attachGPRS()+0x1d2>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:335
    strcpy_P(at_cmd_buffer, AT_CIICR);
    1614:	68 ef       	ldi	r22, 0xF8	; 248
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	ce 01       	movw	r24, r28
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:336
    strcpy_P(at_rsp_buffer, AT_OK);
    1620:	63 e8       	ldi	r22, 0x83	; 131
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	ce 01       	movw	r24, r28
    1626:	86 96       	adiw	r24, 0x26	; 38
    1628:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:337
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    162c:	28 e8       	ldi	r18, 0x88	; 136
    162e:	33 e1       	ldi	r19, 0x13	; 19
    1630:	ae 01       	movw	r20, r28
    1632:	4a 5d       	subi	r20, 0xDA	; 218
    1634:	5f 4f       	sbci	r21, 0xFF	; 255
    1636:	be 01       	movw	r22, r28
    1638:	6f 5f       	subi	r22, 0xFF	; 255
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	c7 01       	movw	r24, r14
    163e:	af de       	rcall	.-674    	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
    1640:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:339
  if(n){
    1642:	89 2b       	or	r24, r25
    1644:	81 f5       	brne	.+96     	; 0x16a6 <Gsm_Ard::attachGPRS()+0x1d8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:347
    strcpy_P(at_cmd_buffer, AT_CIFSR);
    1646:	6b ea       	ldi	r22, 0xAB	; 171
    1648:	71 e0       	ldi	r23, 0x01	; 1
    164a:	ce 01       	movw	r24, r28
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:348
    strcpy_P(at_rsp_buffer, AT_ERROR);
    1652:	6d e7       	ldi	r22, 0x7D	; 125
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	ce 01       	movw	r24, r28
    1658:	86 96       	adiw	r24, 0x26	; 38
    165a:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:349
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    165e:	28 e8       	ldi	r18, 0x88	; 136
    1660:	33 e1       	ldi	r19, 0x13	; 19
    1662:	ae 01       	movw	r20, r28
    1664:	4a 5d       	subi	r20, 0xDA	; 218
    1666:	5f 4f       	sbci	r21, 0xFF	; 255
    1668:	be 01       	movw	r22, r28
    166a:	6f 5f       	subi	r22, 0xFF	; 255
    166c:	7f 4f       	sbci	r23, 0xFF	; 255
    166e:	c7 01       	movw	r24, r14
    1670:	96 de       	rcall	.-724    	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:351
  if(n!=1){
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	d9 f4       	brne	.+54     	; 0x16ac <Gsm_Ard::attachGPRS()+0x1de>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:356
  Serial.println("DB: GSM_STATE=GSM_IP_STATE");
    1676:	6a ed       	ldi	r22, 0xDA	; 218
    1678:	71 e0       	ldi	r23, 0x01	; 1
    167a:	8e ec       	ldi	r24, 0xCE	; 206
    167c:	94 e0       	ldi	r25, 0x04	; 4
    167e:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:358
  _gsm_state=GSM_IP_STATE;
    1682:	84 e0       	ldi	r24, 0x04	; 4
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	f6 01       	movw	r30, r12
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:359
  return 0;
    168c:	64 cf       	rjmp	.-312    	; 0x1556 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:269
    return 1;
    168e:	01 e0       	ldi	r16, 0x01	; 1
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	61 cf       	rjmp	.-318    	; 0x1556 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:281
      return 2;
    1694:	02 e0       	ldi	r16, 0x02	; 2
    1696:	10 e0       	ldi	r17, 0x00	; 0
    1698:	5e cf       	rjmp	.-324    	; 0x1556 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:303
      return 3;
    169a:	03 e0       	ldi	r16, 0x03	; 3
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	5b cf       	rjmp	.-330    	; 0x1556 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:329
    return 6;
    16a0:	06 e0       	ldi	r16, 0x06	; 6
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	58 cf       	rjmp	.-336    	; 0x1556 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:340
    return 7;
    16a6:	07 e0       	ldi	r16, 0x07	; 7
    16a8:	10 e0       	ldi	r17, 0x00	; 0
    16aa:	55 cf       	rjmp	.-342    	; 0x1556 <Gsm_Ard::attachGPRS()+0x88>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:352
    return 8;
    16ac:	08 e0       	ldi	r16, 0x08	; 8
    16ae:	10 e0       	ldi	r17, 0x00	; 0
    16b0:	52 cf       	rjmp	.-348    	; 0x1556 <Gsm_Ard::attachGPRS()+0x88>

000016b2 <Gsm_Ard::_disconnect_tcp_socket()>:
_ZN7Gsm_Ard22_disconnect_tcp_socketEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:453
int Gsm_Ard::_disconnect_tcp_socket(){
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	65 97       	sbiw	r28, 0x15	; 21
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	8c 01       	movw	r16, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:455
  if(_gsm_state!=GSM_TCP_STATE){
    16cc:	fc 01       	movw	r30, r24
    16ce:	ea 57       	subi	r30, 0x7A	; 122
    16d0:	fe 4f       	sbci	r31, 0xFE	; 254
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
    16d6:	05 97       	sbiw	r24, 0x05	; 5
    16d8:	19 f5       	brne	.+70     	; 0x1720 <Gsm_Ard::_disconnect_tcp_socket()+0x6e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:462
    strcpy_P(at_cmd_buffer, AT_CIPCLOSE);
    16da:	61 e7       	ldi	r22, 0x71	; 113
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	ce 01       	movw	r24, r28
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:463
    strcpy_P(at_rsp_buffer, AT_CIPCLOSE_OK);
    16e6:	68 e6       	ldi	r22, 0x68	; 104
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	ce 01       	movw	r24, r28
    16ec:	0d 96       	adiw	r24, 0x0d	; 13
    16ee:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:464
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    16f2:	28 e8       	ldi	r18, 0x88	; 136
    16f4:	33 e1       	ldi	r19, 0x13	; 19
    16f6:	ae 01       	movw	r20, r28
    16f8:	43 5f       	subi	r20, 0xF3	; 243
    16fa:	5f 4f       	sbci	r21, 0xFF	; 255
    16fc:	be 01       	movw	r22, r28
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	c8 01       	movw	r24, r16
    1704:	4c de       	rcall	.-872    	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:466
  if(n){
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	71 f4       	brne	.+28     	; 0x1726 <Gsm_Ard::_disconnect_tcp_socket()+0x74>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:471
}
    170a:	65 96       	adiw	r28, 0x15	; 21
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:456
    return 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	f2 cf       	rjmp	.-28     	; 0x170a <Gsm_Ard::_disconnect_tcp_socket()+0x58>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:467
    return 2;
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	ef cf       	rjmp	.-34     	; 0x170a <Gsm_Ard::_disconnect_tcp_socket()+0x58>

0000172c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>:
_ZN7Gsm_Ard26_send_cmd_comp_several_rspEPKcPPcji():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:609
int Gsm_Ard::_send_cmd_comp_several_rsp(const char* cmd, char** exp_rsps, unsigned int exp_rsps_len, int recv_wait_period){
    172c:	4f 92       	push	r4
    172e:	5f 92       	push	r5
    1730:	6f 92       	push	r6
    1732:	7f 92       	push	r7
    1734:	8f 92       	push	r8
    1736:	9f 92       	push	r9
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	00 d0       	rcall	.+0      	; 0x174e <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x22>
    174e:	00 d0       	rcall	.+0      	; 0x1750 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x24>
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	5c 01       	movw	r10, r24
    1756:	7b 01       	movw	r14, r22
    1758:	54 2e       	mov	r5, r20
    175a:	45 2e       	mov	r4, r21
    175c:	39 01       	movw	r6, r18
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:611
  int cmd_size=strlen(cmd);
    175e:	fb 01       	movw	r30, r22
    1760:	01 90       	ld	r0, Z+
    1762:	00 20       	and	r0, r0
    1764:	e9 f7       	brne	.-6      	; 0x1760 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x34>
    1766:	31 97       	sbiw	r30, 0x01	; 1
    1768:	6f 01       	movw	r12, r30
    176a:	c6 1a       	sub	r12, r22
    176c:	d7 0a       	sbc	r13, r23
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:614
  while(_ss.available()) _ss.read();
    176e:	4c 01       	movw	r8, r24
    1770:	82 e7       	ldi	r24, 0x72	; 114
    1772:	88 1a       	sub	r8, r24
    1774:	8e ef       	ldi	r24, 0xFE	; 254
    1776:	98 0a       	sbc	r9, r24
    1778:	c4 01       	movw	r24, r8
    177a:	33 d5       	rcall	.+2662   	; 0x21e2 <SoftwareSerial::available()>
    177c:	89 2b       	or	r24, r25
    177e:	19 f0       	breq	.+6      	; 0x1786 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x5a>
    1780:	c4 01       	movw	r24, r8
    1782:	95 d4       	rcall	.+2346   	; 0x20ae <SoftwareSerial::read()>
    1784:	f9 cf       	rjmp	.-14     	; 0x1778 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x4c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:616
  Serial.print("DB-SND: [");
    1786:	60 ed       	ldi	r22, 0xD0	; 208
    1788:	71 e0       	ldi	r23, 0x01	; 1
    178a:	8e ec       	ldi	r24, 0xCE	; 206
    178c:	94 e0       	ldi	r25, 0x04	; 4
    178e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
    1792:	47 01       	movw	r8, r14
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:617
  for(int i=0;i<cmd_size;i++){
    1794:	c4 01       	movw	r24, r8
    1796:	8e 19       	sub	r24, r14
    1798:	9f 09       	sbc	r25, r15
    179a:	8c 15       	cp	r24, r12
    179c:	9d 05       	cpc	r25, r13
    179e:	9c f4       	brge	.+38     	; 0x17c6 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x9a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:618
    Serial.print((unsigned int) cmd[i]);
    17a0:	f4 01       	movw	r30, r8
    17a2:	61 91       	ld	r22, Z+
    17a4:	4f 01       	movw	r8, r30
    17a6:	06 2e       	mov	r0, r22
    17a8:	00 0c       	add	r0, r0
    17aa:	77 0b       	sbc	r23, r23
    17ac:	4a e0       	ldi	r20, 0x0A	; 10
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	8e ec       	ldi	r24, 0xCE	; 206
    17b2:	94 e0       	ldi	r25, 0x04	; 4
    17b4:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <Print::print(unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:619
    Serial.print(" ");
    17b8:	6c e4       	ldi	r22, 0x4C	; 76
    17ba:	71 e0       	ldi	r23, 0x01	; 1
    17bc:	8e ec       	ldi	r24, 0xCE	; 206
    17be:	94 e0       	ldi	r25, 0x04	; 4
    17c0:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::print(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:617
  for(int i=0;i<cmd_size;i++){
    17c4:	e7 cf       	rjmp	.-50     	; 0x1794 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x68>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:621
  Serial.println("]");
    17c6:	61 ec       	ldi	r22, 0xC1	; 193
    17c8:	71 e0       	ldi	r23, 0x01	; 1
    17ca:	8e ec       	ldi	r24, 0xCE	; 206
    17cc:	94 e0       	ldi	r25, 0x04	; 4
    17ce:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:623
  _write_cmd(cmd);
    17d2:	b7 01       	movw	r22, r14
    17d4:	c5 01       	movw	r24, r10
    17d6:	be dd       	rcall	.-1156   	; 0x1354 <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:624
  n=_recv_string(recv_wait_period);
    17d8:	43 e0       	ldi	r20, 0x03	; 3
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	b8 01       	movw	r22, r16
    17de:	c5 01       	movw	r24, r10
    17e0:	69 db       	rcall	.-2350   	; 0xeb4 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:625
  if(!n){
    17e2:	89 2b       	or	r24, r25
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0xbc>
    17e6:	4a c0       	rjmp	.+148    	; 0x187c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x150>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:626
    n=_fetch_rsp_from_recv(cmd, cmd_size, &rsp_len);
    17e8:	9e 01       	movw	r18, r28
    17ea:	2f 5f       	subi	r18, 0xFF	; 255
    17ec:	3f 4f       	sbci	r19, 0xFF	; 255
    17ee:	a6 01       	movw	r20, r12
    17f0:	b7 01       	movw	r22, r14
    17f2:	c5 01       	movw	r24, r10
    17f4:	2f da       	rcall	.-2978   	; 0xc54 <Gsm_Ard::_fetch_rsp_from_recv(char const*, unsigned int, unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:627
    if(!n){
    17f6:	89 2b       	or	r24, r25
    17f8:	09 f0       	breq	.+2      	; 0x17fc <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0xd0>
    17fa:	43 c0       	rjmp	.+134    	; 0x1882 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x156>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:628
      rsp=new char[rsp_len];
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	0e 94 ef 15 	call	0x2bde	; 0x2bde <operator new[](unsigned int)>
    1804:	9c 83       	std	Y+4, r25	; 0x04
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:629
      n=_get_rsp(&rsp);
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	be 01       	movw	r22, r28
    180a:	6d 5f       	subi	r22, 0xFD	; 253
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	c5 01       	movw	r24, r10
    1810:	0c db       	rcall	.-2536   	; 0xe2a <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:630
      if(n){
    1812:	89 2b       	or	r24, r25
    1814:	c1 f5       	brne	.+112    	; 0x1886 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x15a>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:634
        if(!strncmp(exp_rsps[j], rsp, strlen(exp_rsps[j]))) return j;
    1816:	cb 80       	ldd	r12, Y+3	; 0x03
    1818:	dc 80       	ldd	r13, Y+4	; 0x04
    181a:	e5 2c       	mov	r14, r5
    181c:	f4 2c       	mov	r15, r4
    181e:	00 e0       	ldi	r16, 0x00	; 0
    1820:	10 e0       	ldi	r17, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:633
      for(unsigned int j=0;j<exp_rsps_len;j++){
    1822:	06 15       	cp	r16, r6
    1824:	17 05       	cpc	r17, r7
    1826:	51 f1       	breq	.+84     	; 0x187c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x150>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:634
        if(!strncmp(exp_rsps[j], rsp, strlen(exp_rsps[j]))) return j;
    1828:	f7 01       	movw	r30, r14
    182a:	81 91       	ld	r24, Z+
    182c:	91 91       	ld	r25, Z+
    182e:	7f 01       	movw	r14, r30
    1830:	fc 01       	movw	r30, r24
    1832:	01 90       	ld	r0, Z+
    1834:	00 20       	and	r0, r0
    1836:	e9 f7       	brne	.-6      	; 0x1832 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x106>
    1838:	31 97       	sbiw	r30, 0x01	; 1
    183a:	af 01       	movw	r20, r30
    183c:	48 1b       	sub	r20, r24
    183e:	59 0b       	sbc	r21, r25
    1840:	b6 01       	movw	r22, r12
    1842:	0e 94 b2 18 	call	0x3164	; 0x3164 <strncmp>
    1846:	89 2b       	or	r24, r25
    1848:	b1 f4       	brne	.+44     	; 0x1876 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x14a>
    184a:	c8 01       	movw	r24, r16
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:642
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	bf 90       	pop	r11
    1866:	af 90       	pop	r10
    1868:	9f 90       	pop	r9
    186a:	8f 90       	pop	r8
    186c:	7f 90       	pop	r7
    186e:	6f 90       	pop	r6
    1870:	5f 90       	pop	r5
    1872:	4f 90       	pop	r4
    1874:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:633
      for(unsigned int j=0;j<exp_rsps_len;j++){
    1876:	0f 5f       	subi	r16, 0xFF	; 255
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	d3 cf       	rjmp	.-90     	; 0x1822 <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0xf6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:641
  return -1;
    187c:	8f ef       	ldi	r24, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:631
        return -2;
    187e:	9f ef       	ldi	r25, 0xFF	; 255
    1880:	e5 cf       	rjmp	.-54     	; 0x184c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x120>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:638
      return -3;
    1882:	8d ef       	ldi	r24, 0xFD	; 253
    1884:	fc cf       	rjmp	.-8      	; 0x187e <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x152>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:631
        return -2;
    1886:	8e ef       	ldi	r24, 0xFE	; 254
    1888:	fa cf       	rjmp	.-12     	; 0x187e <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)+0x152>

0000188a <Gsm_Ard::init_gsm_module()>:
_ZN7Gsm_Ard15init_gsm_moduleEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:74
int Gsm_Ard::init_gsm_module(){
    188a:	4f 92       	push	r4
    188c:	5f 92       	push	r5
    188e:	6f 92       	push	r6
    1890:	7f 92       	push	r7
    1892:	8f 92       	push	r8
    1894:	9f 92       	push	r9
    1896:	af 92       	push	r10
    1898:	bf 92       	push	r11
    189a:	cf 92       	push	r12
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	c6 54       	subi	r28, 0x46	; 70
    18b0:	d1 09       	sbc	r29, r1
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	5c 01       	movw	r10, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:76
  _gsm_state=GSM_OFF_STATE;
    18be:	4c 01       	movw	r8, r24
    18c0:	8a e7       	ldi	r24, 0x7A	; 122
    18c2:	88 1a       	sub	r8, r24
    18c4:	8e ef       	ldi	r24, 0xFE	; 254
    18c6:	98 0a       	sbc	r9, r24
    18c8:	f4 01       	movw	r30, r8
    18ca:	11 82       	std	Z+1, r1	; 0x01
    18cc:	10 82       	st	Z, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:77
  _ss = SoftwareSerial(_GSM_RXPIN_, _GSM_TXPIN_);
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	48 e0       	ldi	r20, 0x08	; 8
    18d2:	67 e0       	ldi	r22, 0x07	; 7
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	7c 01       	movw	r14, r24
    18da:	9f d5       	rcall	.+2878   	; 0x241a <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>
    18dc:	85 01       	movw	r16, r10
    18de:	02 57       	subi	r16, 0x72	; 114
    18e0:	1e 4f       	sbci	r17, 0xFE	; 254
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:34
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	f8 01       	movw	r30, r16
    18e8:	93 83       	std	Z+3, r25	; 0x03
    18ea:	82 83       	std	Z+2, r24	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:49
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	9e 81       	ldd	r25, Y+6	; 0x06
    18f0:	af 81       	ldd	r26, Y+7	; 0x07
    18f2:	b8 85       	ldd	r27, Y+8	; 0x08
    18f4:	84 83       	std	Z+4, r24	; 0x04
    18f6:	95 83       	std	Z+5, r25	; 0x05
    18f8:	a6 83       	std	Z+6, r26	; 0x06
    18fa:	b7 83       	std	Z+7, r27	; 0x07
    18fc:	89 85       	ldd	r24, Y+9	; 0x09
    18fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1900:	ab 85       	ldd	r26, Y+11	; 0x0b
    1902:	bc 85       	ldd	r27, Y+12	; 0x0c
    1904:	80 87       	std	Z+8, r24	; 0x08
    1906:	91 87       	std	Z+9, r25	; 0x09
    1908:	a2 87       	std	Z+10, r26	; 0x0a
    190a:	b3 87       	std	Z+11, r27	; 0x0b
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:50
    190c:	8d 85       	ldd	r24, Y+13	; 0x0d
    190e:	84 87       	std	Z+12, r24	; 0x0c
    1910:	8e 85       	ldd	r24, Y+14	; 0x0e
    1912:	85 87       	std	Z+13, r24	; 0x0d
    1914:	8f 85       	ldd	r24, Y+15	; 0x0f
    1916:	98 89       	ldd	r25, Y+16	; 0x10
    1918:	97 87       	std	Z+15, r25	; 0x0f
    191a:	86 87       	std	Z+14, r24	; 0x0e
    191c:	89 89       	ldd	r24, Y+17	; 0x11
    191e:	80 8b       	std	Z+16, r24	; 0x10
    1920:	8a 89       	ldd	r24, Y+18	; 0x12
    1922:	9b 89       	ldd	r25, Y+19	; 0x13
    1924:	92 8b       	std	Z+18, r25	; 0x12
    1926:	81 8b       	std	Z+17, r24	; 0x11
    1928:	8c 89       	ldd	r24, Y+20	; 0x14
    192a:	9d 89       	ldd	r25, Y+21	; 0x15
    192c:	94 8b       	std	Z+20, r25	; 0x14
    192e:	83 8b       	std	Z+19, r24	; 0x13
    1930:	8e 89       	ldd	r24, Y+22	; 0x16
    1932:	85 8b       	std	Z+21, r24	; 0x15
    1934:	8f 89       	ldd	r24, Y+23	; 0x17
    1936:	98 8d       	ldd	r25, Y+24	; 0x18
    1938:	97 8b       	std	Z+23, r25	; 0x17
    193a:	86 8b       	std	Z+22, r24	; 0x16
    193c:	89 8d       	ldd	r24, Y+25	; 0x19
    193e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1940:	91 8f       	std	Z+25, r25	; 0x19
    1942:	80 8f       	std	Z+24, r24	; 0x18
    1944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1948:	93 8f       	std	Z+27, r25	; 0x1b
    194a:	82 8f       	std	Z+26, r24	; 0x1a
    194c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1950:	95 8f       	std	Z+29, r25	; 0x1d
    1952:	84 8f       	std	Z+28, r24	; 0x1c
    1954:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1956:	86 8d       	ldd	r24, Z+30	; 0x1e
    1958:	90 fb       	bst	r25, 0
    195a:	80 f9       	bld	r24, 0
    195c:	96 95       	lsr	r25
    195e:	91 70       	andi	r25, 0x01	; 1
    1960:	90 fb       	bst	r25, 0
    1962:	81 f9       	bld	r24, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:77
  static uint8_t _receive_buffer[_SS_MAX_RX_BUFF]; 
  static volatile uint8_t _receive_buffer_tail;
  static volatile uint8_t _receive_buffer_head;
  static SoftwareSerial *active_object;

  // private methods
    1964:	86 8f       	std	Z+30, r24	; 0x1e
    1966:	c7 01       	movw	r24, r14
    1968:	04 d5       	rcall	.+2568   	; 0x2372 <SoftwareSerial::~SoftwareSerial()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:79
  inline void recv() __attribute__((__always_inline__));
  uint8_t rx_pin_read();
    196a:	65 ea       	ldi	r22, 0xA5	; 165
    196c:	71 e0       	ldi	r23, 0x01	; 1
    196e:	8e ec       	ldi	r24, 0xCE	; 206
    1970:	94 e0       	ldi	r25, 0x04	; 4
    1972:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:81
  void setTX(uint8_t transmitPin);
  void setRX(uint8_t receivePin);
    1976:	40 e6       	ldi	r20, 0x60	; 96
    1978:	59 e0       	ldi	r21, 0x09	; 9
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	c8 01       	movw	r24, r16
    1980:	75 d5       	rcall	.+2794   	; 0x246c <SoftwareSerial::begin(long)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:85
  inline void setRxIntMsk(bool enable) __attribute__((__always_inline__));

  // Return num - sub, or 1 if the result would be < 1
  static uint16_t subtract_cap(uint16_t num, uint16_t sub);
    1982:	6e 01       	movw	r12, r28
    1984:	fa e2       	ldi	r31, 0x2A	; 42
    1986:	cf 0e       	add	r12, r31
    1988:	d1 1c       	adc	r13, r1
    198a:	68 e3       	ldi	r22, 0x38	; 56
    198c:	72 e0       	ldi	r23, 0x02	; 2
    198e:	c6 01       	movw	r24, r12
    1990:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:86

    1994:	63 e8       	ldi	r22, 0x83	; 131
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	c7 01       	movw	r24, r14
    199a:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:87
  // private static method for timing
    199e:	28 e8       	ldi	r18, 0x88	; 136
    19a0:	33 e1       	ldi	r19, 0x13	; 19
    19a2:	a7 01       	movw	r20, r14
    19a4:	b6 01       	movw	r22, r12
    19a6:	c5 01       	movw	r24, r10
    19a8:	fa dc       	rcall	.-1548   	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:89
  static inline void tunedDelay(uint16_t delay);

    19aa:	89 2b       	or	r24, r25
    19ac:	59 f4       	brne	.+22     	; 0x19c4 <Gsm_Ard::init_gsm_module()+0x13a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:90
public:
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	f4 01       	movw	r30, r8
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:92
  // public methods
  SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic = false);
    19b8:	65 ef       	ldi	r22, 0xF5	; 245
    19ba:	71 e0       	ldi	r23, 0x01	; 1
    19bc:	8e ec       	ldi	r24, 0xCE	; 206
    19be:	94 e0       	ldi	r25, 0x04	; 4
    19c0:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <Print::println(char const*)>
    19c4:	85 e7       	ldi	r24, 0x75	; 117
    19c6:	68 2e       	mov	r6, r24
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	78 2e       	mov	r7, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:105
  int peek();

  virtual size_t write(uint8_t byte);
  virtual int read();
  virtual int available();
  virtual void flush();
    19cc:	44 24       	eor	r4, r4
    19ce:	43 94       	inc	r4
    19d0:	51 2c       	mov	r5, r1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:95
  bool listen();
    19d2:	f4 01       	movw	r30, r8
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	91 f5       	brne	.+100    	; 0x1a40 <Gsm_Ard::init_gsm_module()+0x1b6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:112
  
  using Print::write;

  // public only for easy access by interrupt handlers
  static inline void handle_interrupt() __attribute__((__always_inline__));
};
    19dc:	f4 01       	movw	r30, r8
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <Gsm_Ard::init_gsm_module()+0x15e>
    19e6:	60 c1       	rjmp	.+704    	; 0x1ca8 <Gsm_Ard::init_gsm_module()+0x41e>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:118

// Arduino 0012 workaround
#undef int
#undef char
#undef long
#undef byte
    19e8:	6f e2       	ldi	r22, 0x2F	; 47
    19ea:	72 e0       	ldi	r23, 0x02	; 2
    19ec:	ce 01       	movw	r24, r28
    19ee:	c7 96       	adiw	r24, 0x37	; 55
    19f0:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:122
#undef float
#undef abs
#undef round

    19f4:	62 e2       	ldi	r22, 0x22	; 34
    19f6:	72 e0       	ldi	r23, 0x02	; 2
    19f8:	c6 01       	movw	r24, r12
    19fa:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:123
#endif
    19fe:	63 e1       	ldi	r22, 0x13	; 19
    1a00:	72 e0       	ldi	r23, 0x02	; 2
    1a02:	c7 01       	movw	r24, r14
    1a04:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:124
    1a08:	25 96       	adiw	r28, 0x05	; 5
    1a0a:	df ae       	std	Y+63, r13	; 0x3f
    1a0c:	ce ae       	std	Y+62, r12	; 0x3e
    1a0e:	25 97       	sbiw	r28, 0x05	; 5
    1a10:	27 96       	adiw	r28, 0x07	; 7
    1a12:	ff ae       	std	Y+63, r15	; 0x3f
    1a14:	ee ae       	std	Y+62, r14	; 0x3e
    1a16:	27 97       	sbiw	r28, 0x07	; 7
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:125
    1a18:	08 e8       	ldi	r16, 0x88	; 136
    1a1a:	13 e1       	ldi	r17, 0x13	; 19
    1a1c:	22 e0       	ldi	r18, 0x02	; 2
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	ae 01       	movw	r20, r28
    1a22:	4d 5b       	subi	r20, 0xBD	; 189
    1a24:	5f 4f       	sbci	r21, 0xFF	; 255
    1a26:	be 01       	movw	r22, r28
    1a28:	69 5c       	subi	r22, 0xC9	; 201
    1a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2c:	c5 01       	movw	r24, r10
    1a2e:	7e de       	rcall	.-772    	; 0x172c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:127
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <Gsm_Ard::init_gsm_module()+0x1ac>
    1a34:	41 c0       	rjmp	.+130    	; 0x1ab8 <Gsm_Ard::init_gsm_module()+0x22e>
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	61 f1       	breq	.+88     	; 0x1a92 <Gsm_Ard::init_gsm_module()+0x208>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:129
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	16 c1       	rjmp	.+556    	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:96
  void end();
    1a40:	f3 01       	movw	r30, r6
    1a42:	41 91       	ld	r20, Z+
    1a44:	51 91       	ld	r21, Z+
    1a46:	61 91       	ld	r22, Z+
    1a48:	71 91       	ld	r23, Z+
    1a4a:	3f 01       	movw	r6, r30
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	0e d5       	rcall	.+2588   	; 0x246c <SoftwareSerial::begin(long)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:100
  int peek();
    1a50:	68 e3       	ldi	r22, 0x38	; 56
    1a52:	72 e0       	ldi	r23, 0x02	; 2
    1a54:	c6 01       	movw	r24, r12
    1a56:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:101

    1a5a:	63 e8       	ldi	r22, 0x83	; 131
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	c7 01       	movw	r24, r14
    1a60:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:102
  virtual size_t write(uint8_t byte);
    1a64:	28 e8       	ldi	r18, 0x88	; 136
    1a66:	33 e1       	ldi	r19, 0x13	; 19
    1a68:	a7 01       	movw	r20, r14
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	c5 01       	movw	r24, r10
    1a6e:	97 dc       	rcall	.-1746   	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:104
  virtual int available();
    1a70:	89 2b       	or	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:105
  virtual void flush();
    1a72:	41 f4       	brne	.+16     	; 0x1a84 <Gsm_Ard::init_gsm_module()+0x1fa>
    1a74:	f4 01       	movw	r30, r8
    1a76:	51 82       	std	Z+1, r5	; 0x01
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:107
  
    1a78:	40 82       	st	Z, r4
    1a7a:	65 ef       	ldi	r22, 0xF5	; 245
    1a7c:	71 e0       	ldi	r23, 0x01	; 1
    1a7e:	8e ec       	ldi	r24, 0xCE	; 206
    1a80:	94 e0       	ldi	r25, 0x04	; 4
    1a82:	e5 d7       	rcall	.+4042   	; 0x2a4e <Print::println(char const*)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:95
  bool listen();
    1a84:	f5 e9       	ldi	r31, 0x95	; 149
    1a86:	6f 16       	cp	r6, r31
    1a88:	f2 e0       	ldi	r31, 0x02	; 2
    1a8a:	7f 06       	cpc	r7, r31
    1a8c:	09 f0       	breq	.+2      	; 0x1a90 <Gsm_Ard::init_gsm_module()+0x206>
    1a8e:	a1 cf       	rjmp	.-190    	; 0x19d2 <Gsm_Ard::init_gsm_module()+0x148>
    1a90:	a5 cf       	rjmp	.-182    	; 0x19dc <Gsm_Ard::init_gsm_module()+0x152>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:141
    1a92:	66 e0       	ldi	r22, 0x06	; 6
    1a94:	72 e0       	ldi	r23, 0x02	; 2
    1a96:	c7 01       	movw	r24, r14
    1a98:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:142
    1a9c:	63 e8       	ldi	r22, 0x83	; 131
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	c6 01       	movw	r24, r12
    1aa2:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:143
    1aa6:	28 e8       	ldi	r18, 0x88	; 136
    1aa8:	33 e1       	ldi	r19, 0x13	; 19
    1aaa:	a6 01       	movw	r20, r12
    1aac:	b7 01       	movw	r22, r14
    1aae:	c5 01       	movw	r24, r10
    1ab0:	76 dc       	rcall	.-1812   	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:145
    1ab2:	89 2b       	or	r24, r25
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <Gsm_Ard::init_gsm_module()+0x22e>
    1ab6:	fb c0       	rjmp	.+502    	; 0x1cae <Gsm_Ard::init_gsm_module()+0x424>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:148
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	f4 01       	movw	r30, r8
    1abe:	91 83       	std	Z+1, r25	; 0x01
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:150
    1ac0:	80 83       	st	Z, r24
    1ac2:	60 e1       	ldi	r22, 0x10	; 16
    1ac4:	72 e0       	ldi	r23, 0x02	; 2
    1ac6:	8e ec       	ldi	r24, 0xCE	; 206
    1ac8:	94 e0       	ldi	r25, 0x04	; 4
    1aca:	c1 d7       	rcall	.+3970   	; 0x2a4e <Print::println(char const*)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:157
    1acc:	6c ef       	ldi	r22, 0xFC	; 252
    1ace:	71 e0       	ldi	r23, 0x01	; 1
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	c7 96       	adiw	r24, 0x37	; 55
    1ad4:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:161
    1ad8:	62 ef       	ldi	r22, 0xF2	; 242
    1ada:	71 e0       	ldi	r23, 0x01	; 1
    1adc:	c6 01       	movw	r24, r12
    1ade:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:162
    1ae2:	68 ee       	ldi	r22, 0xE8	; 232
    1ae4:	71 e0       	ldi	r23, 0x01	; 1
    1ae6:	c7 01       	movw	r24, r14
    1ae8:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:163
    1aec:	25 96       	adiw	r28, 0x05	; 5
    1aee:	df ae       	std	Y+63, r13	; 0x3f
    1af0:	ce ae       	std	Y+62, r12	; 0x3e
    1af2:	25 97       	sbiw	r28, 0x05	; 5
    1af4:	27 96       	adiw	r28, 0x07	; 7
    1af6:	ff ae       	std	Y+63, r15	; 0x3f
    1af8:	ee ae       	std	Y+62, r14	; 0x3e
    1afa:	27 97       	sbiw	r28, 0x07	; 7
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:164
    1afc:	08 e8       	ldi	r16, 0x88	; 136
    1afe:	13 e1       	ldi	r17, 0x13	; 19
    1b00:	22 e0       	ldi	r18, 0x02	; 2
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	ae 01       	movw	r20, r28
    1b06:	4d 5b       	subi	r20, 0xBD	; 189
    1b08:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0a:	be 01       	movw	r22, r28
    1b0c:	69 5c       	subi	r22, 0xC9	; 201
    1b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b10:	c5 01       	movw	r24, r10
    1b12:	0c de       	rcall	.-1000   	; 0x172c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:166
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <Gsm_Ard::init_gsm_module()+0x298>
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	b1 f0       	breq	.+44     	; 0x1b48 <Gsm_Ard::init_gsm_module()+0x2be>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:168
    1b1c:	84 e0       	ldi	r24, 0x04	; 4
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a5 c0       	rjmp	.+330    	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:174
    1b22:	6d ed       	ldi	r22, 0xDD	; 221
    1b24:	71 e0       	ldi	r23, 0x01	; 1
    1b26:	c7 01       	movw	r24, r14
    1b28:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:175
    1b2c:	63 e8       	ldi	r22, 0x83	; 131
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	c6 01       	movw	r24, r12
    1b32:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:176
    1b36:	28 e8       	ldi	r18, 0x88	; 136
    1b38:	33 e1       	ldi	r19, 0x13	; 19
    1b3a:	a6 01       	movw	r20, r12
    1b3c:	b7 01       	movw	r22, r14
    1b3e:	c5 01       	movw	r24, r10
    1b40:	2e dc       	rcall	.-1956   	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:178
    1b42:	89 2b       	or	r24, r25
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <Gsm_Ard::init_gsm_module()+0x2be>
    1b46:	b6 c0       	rjmp	.+364    	; 0x1cb4 <Gsm_Ard::init_gsm_module()+0x42a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:188
    1b48:	63 ed       	ldi	r22, 0xD3	; 211
    1b4a:	71 e0       	ldi	r23, 0x01	; 1
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	c7 96       	adiw	r24, 0x37	; 55
    1b50:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:192
    1b54:	69 ec       	ldi	r22, 0xC9	; 201
    1b56:	71 e0       	ldi	r23, 0x01	; 1
    1b58:	c6 01       	movw	r24, r12
    1b5a:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:193
    1b5e:	6f eb       	ldi	r22, 0xBF	; 191
    1b60:	71 e0       	ldi	r23, 0x01	; 1
    1b62:	c7 01       	movw	r24, r14
    1b64:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:194
    1b68:	25 96       	adiw	r28, 0x05	; 5
    1b6a:	df ae       	std	Y+63, r13	; 0x3f
    1b6c:	ce ae       	std	Y+62, r12	; 0x3e
    1b6e:	25 97       	sbiw	r28, 0x05	; 5
    1b70:	27 96       	adiw	r28, 0x07	; 7
    1b72:	ff ae       	std	Y+63, r15	; 0x3f
    1b74:	ee ae       	std	Y+62, r14	; 0x3e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:195
    1b76:	27 97       	sbiw	r28, 0x07	; 7
    1b78:	08 e8       	ldi	r16, 0x88	; 136
    1b7a:	13 e1       	ldi	r17, 0x13	; 19
    1b7c:	22 e0       	ldi	r18, 0x02	; 2
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	ae 01       	movw	r20, r28
    1b82:	4d 5b       	subi	r20, 0xBD	; 189
    1b84:	5f 4f       	sbci	r21, 0xFF	; 255
    1b86:	be 01       	movw	r22, r28
    1b88:	69 5c       	subi	r22, 0xC9	; 201
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	c5 01       	movw	r24, r10
    1b8e:	ce dd       	rcall	.-1124   	; 0x172c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:197
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	31 f0       	breq	.+12     	; 0x1ba0 <Gsm_Ard::init_gsm_module()+0x316>
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <Gsm_Ard::init_gsm_module()+0x310>
    1b98:	81 c0       	rjmp	.+258    	; 0x1c9c <Gsm_Ard::init_gsm_module()+0x412>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:199
    1b9a:	86 e0       	ldi	r24, 0x06	; 6
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	66 c0       	rjmp	.+204    	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:205
    1ba0:	64 eb       	ldi	r22, 0xB4	; 180
    1ba2:	71 e0       	ldi	r23, 0x01	; 1
    1ba4:	c7 01       	movw	r24, r14
    1ba6:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:206
    1baa:	63 e8       	ldi	r22, 0x83	; 131
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	c6 01       	movw	r24, r12
    1bb0:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:207
    1bb4:	20 e1       	ldi	r18, 0x10	; 16
    1bb6:	37 e2       	ldi	r19, 0x27	; 39
    1bb8:	a6 01       	movw	r20, r12
    1bba:	b7 01       	movw	r22, r14
    1bbc:	c5 01       	movw	r24, r10
    1bbe:	ef db       	rcall	.-2082   	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:209
    1bc0:	89 2b       	or	r24, r25
    1bc2:	09 f0       	breq	.+2      	; 0x1bc6 <Gsm_Ard::init_gsm_module()+0x33c>
    1bc4:	7a c0       	rjmp	.+244    	; 0x1cba <Gsm_Ard::init_gsm_module()+0x430>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:222
    1bc6:	6f e9       	ldi	r22, 0x9F	; 159
    1bc8:	71 e0       	ldi	r23, 0x01	; 1
    1bca:	ce 01       	movw	r24, r28
    1bcc:	c7 96       	adiw	r24, 0x37	; 55
    1bce:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:226
    1bd2:	63 e9       	ldi	r22, 0x93	; 147
    1bd4:	71 e0       	ldi	r23, 0x01	; 1
    1bd6:	c6 01       	movw	r24, r12
    1bd8:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:227
    1bdc:	67 e8       	ldi	r22, 0x87	; 135
    1bde:	71 e0       	ldi	r23, 0x01	; 1
    1be0:	c7 01       	movw	r24, r14
    1be2:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:228
    1be6:	25 96       	adiw	r28, 0x05	; 5
    1be8:	df ae       	std	Y+63, r13	; 0x3f
    1bea:	ce ae       	std	Y+62, r12	; 0x3e
    1bec:	25 97       	sbiw	r28, 0x05	; 5
    1bee:	27 96       	adiw	r28, 0x07	; 7
    1bf0:	ff ae       	std	Y+63, r15	; 0x3f
    1bf2:	ee ae       	std	Y+62, r14	; 0x3e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:229
    1bf4:	27 97       	sbiw	r28, 0x07	; 7
    1bf6:	08 e8       	ldi	r16, 0x88	; 136
    1bf8:	13 e1       	ldi	r17, 0x13	; 19
    1bfa:	22 e0       	ldi	r18, 0x02	; 2
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	ae 01       	movw	r20, r28
    1c00:	4d 5b       	subi	r20, 0xBD	; 189
    1c02:	5f 4f       	sbci	r21, 0xFF	; 255
    1c04:	be 01       	movw	r22, r28
    1c06:	69 5c       	subi	r22, 0xC9	; 201
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	c5 01       	movw	r24, r10
    1c0c:	8f dd       	rcall	.-1250   	; 0x172c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:231
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	b1 f0       	breq	.+44     	; 0x1c3e <Gsm_Ard::init_gsm_module()+0x3b4>
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <Gsm_Ard::init_gsm_module()+0x38e>
    1c16:	54 c0       	rjmp	.+168    	; 0x1cc0 <Gsm_Ard::init_gsm_module()+0x436>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:241
    1c18:	6a e7       	ldi	r22, 0x7A	; 122
    1c1a:	71 e0       	ldi	r23, 0x01	; 1
    1c1c:	c7 01       	movw	r24, r14
    1c1e:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:242
    1c22:	63 e8       	ldi	r22, 0x83	; 131
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	c6 01       	movw	r24, r12
    1c28:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:243
    1c2c:	28 e8       	ldi	r18, 0x88	; 136
    1c2e:	33 e1       	ldi	r19, 0x13	; 19
    1c30:	a6 01       	movw	r20, r12
    1c32:	b7 01       	movw	r22, r14
    1c34:	c5 01       	movw	r24, r10
    1c36:	b3 db       	rcall	.-2202   	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:245
    1c38:	89 2b       	or	r24, r25
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <Gsm_Ard::init_gsm_module()+0x3b4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:254
    1c3c:	44 c0       	rjmp	.+136    	; 0x1cc6 <Gsm_Ard::init_gsm_module()+0x43c>
    1c3e:	61 e5       	ldi	r22, 0x51	; 81
    1c40:	71 e0       	ldi	r23, 0x01	; 1
    1c42:	c7 01       	movw	r24, r14
    1c44:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:255
    1c48:	63 e8       	ldi	r22, 0x83	; 131
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	c6 01       	movw	r24, r12
    1c4e:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:256
    1c52:	28 e8       	ldi	r18, 0x88	; 136
    1c54:	33 e1       	ldi	r19, 0x13	; 19
    1c56:	a6 01       	movw	r20, r12
    1c58:	b7 01       	movw	r22, r14
    1c5a:	c5 01       	movw	r24, r10
    1c5c:	a0 db       	rcall	.-2240   	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:258
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	a9 f5       	brne	.+106    	; 0x1ccc <Gsm_Ard::init_gsm_module()+0x442>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:261
    1c62:	23 e0       	ldi	r18, 0x03	; 3
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	f4 01       	movw	r30, r8
    1c68:	31 83       	std	Z+1, r19	; 0x01
    1c6a:	20 83       	st	Z, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:263
    1c6c:	ca 5b       	subi	r28, 0xBA	; 186
    1c6e:	df 4f       	sbci	r29, 0xFF	; 255
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	df 90       	pop	r13
    1c88:	cf 90       	pop	r12
    1c8a:	bf 90       	pop	r11
    1c8c:	af 90       	pop	r10
    1c8e:	9f 90       	pop	r9
    1c90:	8f 90       	pop	r8
    1c92:	7f 90       	pop	r7
    1c94:	6f 90       	pop	r6
    1c96:	5f 90       	pop	r5
    1c98:	4f 90       	pop	r4
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:215
    1c9a:	08 95       	ret
    1c9c:	6c e2       	ldi	r22, 0x2C	; 44
    1c9e:	72 e0       	ldi	r23, 0x02	; 2
    1ca0:	8e ec       	ldi	r24, 0xCE	; 206
    1ca2:	94 e0       	ldi	r25, 0x04	; 4
    1ca4:	d4 d6       	rcall	.+3496   	; 0x2a4e <Print::println(char const*)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:217
    1ca6:	8f cf       	rjmp	.-226    	; 0x1bc6 <Gsm_Ard::init_gsm_module()+0x33c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:113

    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	df cf       	rjmp	.-66     	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:146
    1cae:	83 e0       	ldi	r24, 0x03	; 3
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	dc cf       	rjmp	.-72     	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:179
    1cb4:	85 e0       	ldi	r24, 0x05	; 5
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	d9 cf       	rjmp	.-78     	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:210
    1cba:	87 e0       	ldi	r24, 0x07	; 7
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	d6 cf       	rjmp	.-84     	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:233
    1cc0:	88 e0       	ldi	r24, 0x08	; 8
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	d3 cf       	rjmp	.-90     	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:246
    1cc6:	89 e0       	ldi	r24, 0x09	; 9
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	d0 cf       	rjmp	.-96     	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.h:259
    1ccc:	8a e0       	ldi	r24, 0x0A	; 10
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	cd cf       	rjmp	.-102    	; 0x1c6c <Gsm_Ard::init_gsm_module()+0x3e2>

00001cd2 <Gsm_Ard::_connect_tcp_socket()>:
_ZN7Gsm_Ard19_connect_tcp_socketEv():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:369
int Gsm_Ard::_connect_tcp_socket(){
    1cd2:	8f 92       	push	r8
    1cd4:	9f 92       	push	r9
    1cd6:	af 92       	push	r10
    1cd8:	bf 92       	push	r11
    1cda:	cf 92       	push	r12
    1cdc:	df 92       	push	r13
    1cde:	ef 92       	push	r14
    1ce0:	ff 92       	push	r15
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	ef 97       	sbiw	r28, 0x3f	; 63
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	5c 01       	movw	r10, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:371
  if(_gsm_state!=GSM_IP_STATE){
    1cfc:	6c 01       	movw	r12, r24
    1cfe:	8a e7       	ldi	r24, 0x7A	; 122
    1d00:	c8 1a       	sub	r12, r24
    1d02:	8e ef       	ldi	r24, 0xFE	; 254
    1d04:	d8 0a       	sbc	r13, r24
    1d06:	f6 01       	movw	r30, r12
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	04 97       	sbiw	r24, 0x04	; 4
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <Gsm_Ard::_connect_tcp_socket()+0x40>
    1d10:	b2 c0       	rjmp	.+356    	; 0x1e76 <Gsm_Ard::_connect_tcp_socket()+0x1a4>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:377
    strcpy_P(at_cmd_buffer, AT_CIPMUX_R);
    1d12:	6d ee       	ldi	r22, 0xED	; 237
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	ce 01       	movw	r24, r28
    1d18:	c1 96       	adiw	r24, 0x31	; 49
    1d1a:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:381
    strcpy_P(rsp1, AT_CIPMUX_0);
    1d1e:	4e 01       	movw	r8, r28
    1d20:	f6 e2       	ldi	r31, 0x26	; 38
    1d22:	8f 0e       	add	r8, r31
    1d24:	91 1c       	adc	r9, r1
    1d26:	62 ee       	ldi	r22, 0xE2	; 226
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	c4 01       	movw	r24, r8
    1d2c:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:382
    strcpy_P(rsp2, AT_CIPMUX_1);
    1d30:	67 ed       	ldi	r22, 0xD7	; 215
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	ce 01       	movw	r24, r28
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	7c 01       	movw	r14, r24
    1d3a:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:383
    char* rsps[]={rsp1, rsp2};
    1d3e:	9d ae       	std	Y+61, r9	; 0x3d
    1d40:	8c ae       	std	Y+60, r8	; 0x3c
    1d42:	ff ae       	std	Y+63, r15	; 0x3f
    1d44:	ee ae       	std	Y+62, r14	; 0x3e
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:384
    n=_send_cmd_comp_several_rsp(at_cmd_buffer, rsps,2,5000);
    1d46:	08 e8       	ldi	r16, 0x88	; 136
    1d48:	13 e1       	ldi	r17, 0x13	; 19
    1d4a:	22 e0       	ldi	r18, 0x02	; 2
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	ae 01       	movw	r20, r28
    1d50:	44 5c       	subi	r20, 0xC4	; 196
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	be 01       	movw	r22, r28
    1d56:	6f 5c       	subi	r22, 0xCF	; 207
    1d58:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5a:	c5 01       	movw	r24, r10
    1d5c:	e7 dc       	rcall	.-1586   	; 0x172c <Gsm_Ard::_send_cmd_comp_several_rsp(char const*, char**, unsigned int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:386
  switch(n){
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	61 f1       	breq	.+88     	; 0x1dba <Gsm_Ard::_connect_tcp_socket()+0xe8>
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <Gsm_Ard::_connect_tcp_socket()+0x96>
    1d66:	8a c0       	rjmp	.+276    	; 0x1e7c <Gsm_Ard::_connect_tcp_socket()+0x1aa>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:396
        strcpy_P(at_cmd_buffer, AT_CIPMUX_SET);
    1d68:	6b ec       	ldi	r22, 0xCB	; 203
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	c7 01       	movw	r24, r14
    1d6e:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:397
        strcpy_P(at_rsp_buffer, AT_OK);
    1d72:	63 e8       	ldi	r22, 0x83	; 131
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	c4 01       	movw	r24, r8
    1d78:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:398
        n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    1d7c:	28 e8       	ldi	r18, 0x88	; 136
    1d7e:	33 e1       	ldi	r19, 0x13	; 19
    1d80:	a4 01       	movw	r20, r8
    1d82:	b7 01       	movw	r22, r14
    1d84:	c5 01       	movw	r24, r10
    1d86:	0b db       	rcall	.-2538   	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:400
      if(n){
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	b9 f0       	breq	.+46     	; 0x1dba <Gsm_Ard::_connect_tcp_socket()+0xe8>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:401
        return 30+n;
    1d8c:	8c 01       	movw	r16, r24
    1d8e:	02 5e       	subi	r16, 0xE2	; 226
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:451
}
    1d92:	c8 01       	movw	r24, r16
    1d94:	ef 96       	adiw	r28, 0x3f	; 63
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	df 90       	pop	r13
    1dae:	cf 90       	pop	r12
    1db0:	bf 90       	pop	r11
    1db2:	af 90       	pop	r10
    1db4:	9f 90       	pop	r9
    1db6:	8f 90       	pop	r8
    1db8:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:409
    strcpy_P(at_cmd_buffer, AT_CIPSTART_SET);
    1dba:	66 ea       	ldi	r22, 0xA6	; 166
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	c7 01       	movw	r24, r14
    1dc0:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:410
    strcpy_P(at_rsp_buffer, AT_OK);
    1dc4:	63 e8       	ldi	r22, 0x83	; 131
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	c4 01       	movw	r24, r8
    1dca:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:411
    n=_send_cmd_comp_rsp(at_cmd_buffer,at_rsp_buffer,5000);
    1dce:	28 e8       	ldi	r18, 0x88	; 136
    1dd0:	33 e1       	ldi	r19, 0x13	; 19
    1dd2:	a4 01       	movw	r20, r8
    1dd4:	b7 01       	movw	r22, r14
    1dd6:	c5 01       	movw	r24, r10
    1dd8:	e2 da       	rcall	.-2620   	; 0x139e <Gsm_Ard::_send_cmd_comp_rsp(char const*, char const*, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:413
  if(n){
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	21 f0       	breq	.+8      	; 0x1de6 <Gsm_Ard::_connect_tcp_socket()+0x114>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:414
    return 40+n;
    1dde:	8c 01       	movw	r16, r24
    1de0:	08 5d       	subi	r16, 0xD8	; 216
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	d6 cf       	rjmp	.-84     	; 0x1d92 <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:417
  n=_recv_string(10000,2);
    1de6:	42 e0       	ldi	r20, 0x02	; 2
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	60 e1       	ldi	r22, 0x10	; 16
    1dec:	77 e2       	ldi	r23, 0x27	; 39
    1dee:	c5 01       	movw	r24, r10
    1df0:	61 d8       	rcall	.-3902   	; 0xeb4 <Gsm_Ard::_recv_string(int, int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:418
  if(n){
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	21 f0       	breq	.+8      	; 0x1dfe <Gsm_Ard::_connect_tcp_socket()+0x12c>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:419
    return 50+n;
    1df6:	8c 01       	movw	r16, r24
    1df8:	0e 5c       	subi	r16, 0xCE	; 206
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	ca cf       	rjmp	.-108    	; 0x1d92 <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:425
    n=_fetch_rsp_wo_cmd(&rsp_len);
    1dfe:	be 01       	movw	r22, r28
    1e00:	6f 5c       	subi	r22, 0xCF	; 207
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	c5 01       	movw	r24, r10
    1e06:	0e 94 b2 06 	call	0xd64	; 0xd64 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:426
    if(n){
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	21 f0       	breq	.+8      	; 0x1e16 <Gsm_Ard::_connect_tcp_socket()+0x144>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:427
      return 60+n;
    1e0e:	8c 01       	movw	r16, r24
    1e10:	04 5c       	subi	r16, 0xC4	; 196
    1e12:	1f 4f       	sbci	r17, 0xFF	; 255
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:429
    if(!rsp_len){
    1e14:	be cf       	rjmp	.-132    	; 0x1d92 <Gsm_Ard::_connect_tcp_socket()+0xc0>
    1e16:	89 a9       	ldd	r24, Y+49	; 0x31
    1e18:	9a a9       	ldd	r25, Y+50	; 0x32
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:433
    rsp=new char[rsp_len];
    1e1c:	31 f1       	breq	.+76     	; 0x1e6a <Gsm_Ard::_connect_tcp_socket()+0x198>
    1e1e:	df d6       	rcall	.+3518   	; 0x2bde <operator new[](unsigned int)>
    1e20:	9f a3       	std	Y+39, r25	; 0x27
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:434
    n=_get_rsp(&rsp);
    1e22:	8e a3       	std	Y+38, r24	; 0x26
    1e24:	b4 01       	movw	r22, r8
    1e26:	c5 01       	movw	r24, r10
    1e28:	00 d8       	rcall	.-4096   	; 0xe2a <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:435
    if(n){
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	21 f0       	breq	.+8      	; 0x1e36 <Gsm_Ard::_connect_tcp_socket()+0x164>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:436
      return 80+n;
    1e2e:	8c 01       	movw	r16, r24
    1e30:	00 5b       	subi	r16, 0xB0	; 176
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	ae cf       	rjmp	.-164    	; 0x1d92 <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:440
    strcpy_P(exp_rsp, AT_CONNECT_OK);
    1e36:	6b e9       	ldi	r22, 0x9B	; 155
    1e38:	70 e0       	ldi	r23, 0x00	; 0
    1e3a:	c7 01       	movw	r24, r14
    1e3c:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:441
    if(strncmp(rsp, exp_rsp, rsp_len)!=0){
    1e40:	49 a9       	ldd	r20, Y+49	; 0x31
    1e42:	5a a9       	ldd	r21, Y+50	; 0x32
    1e44:	b7 01       	movw	r22, r14
    1e46:	8e a1       	ldd	r24, Y+38	; 0x26
    1e48:	9f a1       	ldd	r25, Y+39	; 0x27
    1e4a:	0e 94 b2 18 	call	0x3164	; 0x3164 <strncmp>
    1e4e:	8c 01       	movw	r16, r24
    1e50:	89 2b       	or	r24, r25
    1e52:	71 f4       	brne	.+28     	; 0x1e70 <Gsm_Ard::_connect_tcp_socket()+0x19e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:444
    _gsm_state=GSM_TCP_STATE;
    1e54:	85 e0       	ldi	r24, 0x05	; 5
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	f6 01       	movw	r30, r12
    1e5a:	91 83       	std	Z+1, r25	; 0x01
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:446
    Serial.println("DB: GSM_STATE=GSM_TCP_STATE");
    1e5c:	80 83       	st	Z, r24
    1e5e:	69 e4       	ldi	r22, 0x49	; 73
    1e60:	72 e0       	ldi	r23, 0x02	; 2
    1e62:	8e ec       	ldi	r24, 0xCE	; 206
    1e64:	94 e0       	ldi	r25, 0x04	; 4
    1e66:	f3 d5       	rcall	.+3046   	; 0x2a4e <Print::println(char const*)>
    1e68:	94 cf       	rjmp	.-216    	; 0x1d92 <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:430
      return 70;
    1e6a:	06 e4       	ldi	r16, 0x46	; 70
    1e6c:	10 e0       	ldi	r17, 0x00	; 0
    1e6e:	91 cf       	rjmp	.-222    	; 0x1d92 <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:442
      return 90;
    1e70:	0a e5       	ldi	r16, 0x5A	; 90
    1e72:	10 e0       	ldi	r17, 0x00	; 0
    1e74:	8e cf       	rjmp	.-228    	; 0x1d92 <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:372
    return 10;
    1e76:	0a e0       	ldi	r16, 0x0A	; 10
    1e78:	10 e0       	ldi	r17, 0x00	; 0
    1e7a:	8b cf       	rjmp	.-234    	; 0x1d92 <Gsm_Ard::_connect_tcp_socket()+0xc0>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:388
      return 20;
    1e7c:	04 e1       	ldi	r16, 0x14	; 20
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
    1e80:	88 cf       	rjmp	.-240    	; 0x1d92 <Gsm_Ard::_connect_tcp_socket()+0xc0>

00001e82 <Gsm_Ard::_send_tcp_data(char*, unsigned int)>:
_ZN7Gsm_Ard14_send_tcp_dataEPcj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:473
int Gsm_Ard::_send_tcp_data(char* data, unsigned int data_len){
    1e82:	6f 92       	push	r6
    1e84:	7f 92       	push	r7
    1e86:	8f 92       	push	r8
    1e88:	9f 92       	push	r9
    1e8a:	af 92       	push	r10
    1e8c:	bf 92       	push	r11
    1e8e:	cf 92       	push	r12
    1e90:	df 92       	push	r13
    1e92:	ef 92       	push	r14
    1e94:	ff 92       	push	r15
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	2f 97       	sbiw	r28, 0x0f	; 15
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	8c 01       	movw	r16, r24
    1eb0:	3b 01       	movw	r6, r22
    1eb2:	5a 01       	movw	r10, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:475
  if(_gsm_state!=GSM_TCP_STATE){
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	ea 57       	subi	r30, 0x7A	; 122
    1eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	05 97       	sbiw	r24, 0x05	; 5
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x42>
    1ec2:	a6 c0       	rjmp	.+332    	; 0x2010 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x18e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:485
    strcpy_P(cmd, AT_CIPSEND);
    1ec4:	60 e9       	ldi	r22, 0x90	; 144
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	ce 01       	movw	r24, r28
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:486
    strcpy_P(rsp, AT_CIPSEND_PROMPT);
    1ed0:	6e e8       	ldi	r22, 0x8E	; 142
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	0c 96       	adiw	r24, 0x0c	; 12
    1ed8:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:487
    _write_cmd(cmd);
    1edc:	be 01       	movw	r22, r28
    1ede:	6f 5f       	subi	r22, 0xFF	; 255
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	c8 01       	movw	r24, r16
    1ee4:	37 da       	rcall	.-2962   	; 0x1354 <Gsm_Ard::_write_cmd(char const*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:490
    Serial.println("WAITING PROMPT:");  ///
    1ee6:	65 e6       	ldi	r22, 0x65	; 101
    1ee8:	72 e0       	ldi	r23, 0x02	; 2
    1eea:	8e ec       	ldi	r24, 0xCE	; 206
    1eec:	94 e0       	ldi	r25, 0x04	; 4
    1eee:	af d5       	rcall	.+2910   	; 0x2a4e <Print::println(char const*)>
    1ef0:	84 e6       	ldi	r24, 0x64	; 100
    1ef2:	88 2e       	mov	r8, r24
    1ef4:	91 2c       	mov	r9, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:492
      if(!_ss.available()){
    1ef6:	68 01       	movw	r12, r16
    1ef8:	82 e7       	ldi	r24, 0x72	; 114
    1efa:	c8 1a       	sub	r12, r24
    1efc:	8e ef       	ldi	r24, 0xFE	; 254
    1efe:	d8 0a       	sbc	r13, r24
    1f00:	c6 01       	movw	r24, r12
    1f02:	6f d1       	rcall	.+734    	; 0x21e2 <SoftwareSerial::available()>
    1f04:	89 2b       	or	r24, r25
    1f06:	39 f4       	brne	.+14     	; 0x1f16 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x94>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:493
        delay(500);
    1f08:	64 ef       	ldi	r22, 0xF4	; 244
    1f0a:	71 e0       	ldi	r23, 0x01	; 1
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:499
        if(temp==rsp[0]){
    1f10:	c3 d3       	rcall	.+1926   	; 0x2698 <delay>
    1f12:	f1 2c       	mov	r15, r1
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:496
        temp=_ss.read();
    1f14:	14 c0       	rjmp	.+40     	; 0x1f3e <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xbc>
    1f16:	c6 01       	movw	r24, r12
    1f18:	ca d0       	rcall	.+404    	; 0x20ae <SoftwareSerial::read()>
    1f1a:	e8 2e       	mov	r14, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:497
        Serial.print((unsigned int)temp);   ////
    1f1c:	68 2f       	mov	r22, r24
    1f1e:	88 0f       	add	r24, r24
    1f20:	77 0b       	sbc	r23, r23
    1f22:	4a e0       	ldi	r20, 0x0A	; 10
    1f24:	50 e0       	ldi	r21, 0x00	; 0
    1f26:	8e ec       	ldi	r24, 0xCE	; 206
    1f28:	94 e0       	ldi	r25, 0x04	; 4
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:498
        Serial.print(' ');
    1f2a:	54 d6       	rcall	.+3240   	; 0x2bd4 <Print::print(unsigned int, int)>
    1f2c:	60 e2       	ldi	r22, 0x20	; 32
    1f2e:	8e ec       	ldi	r24, 0xCE	; 206
    1f30:	94 e0       	ldi	r25, 0x04	; 4
    1f32:	83 d5       	rcall	.+2822   	; 0x2a3a <Print::print(char)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:499
        if(temp==rsp[0]){
    1f34:	ff 24       	eor	r15, r15
    1f36:	f3 94       	inc	r15
    1f38:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f3a:	8e 11       	cpse	r24, r14
    1f3c:	ea cf       	rjmp	.-44     	; 0x1f12 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x90>
    1f3e:	e1 e0       	ldi	r30, 0x01	; 1
    1f40:	8e 1a       	sub	r8, r30
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:491
    for(int i=0;i<100 && !prompt_received;i++){
    1f42:	91 08       	sbc	r9, r1
    1f44:	11 f0       	breq	.+4      	; 0x1f4a <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xc8>
    1f46:	ff 20       	and	r15, r15
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:504
    Serial.println();
    1f48:	d9 f2       	breq	.-74     	; 0x1f00 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x7e>
    1f4a:	8e ec       	ldi	r24, 0xCE	; 206
    1f4c:	94 e0       	ldi	r25, 0x04	; 4
    1f4e:	7c d5       	rcall	.+2808   	; 0x2a48 <Print::println()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:505
    if(!prompt_received){
    1f50:	f1 10       	cpse	r15, r1
    1f52:	17 c0       	rjmp	.+46     	; 0x1f82 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x100>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:506
      return 20;
    1f54:	84 e1       	ldi	r24, 0x14	; 20
    1f56:	90 e0       	ldi	r25, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:542
}
    1f58:	2f 96       	adiw	r28, 0x0f	; 15
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	cf 90       	pop	r12
    1f74:	bf 90       	pop	r11
    1f76:	af 90       	pop	r10
    1f78:	9f 90       	pop	r9
    1f7a:	8f 90       	pop	r8
    1f7c:	7f 90       	pop	r7
    1f7e:	6f 90       	pop	r6
    1f80:	08 95       	ret
    1f82:	73 01       	movw	r14, r6
    1f84:	a6 0c       	add	r10, r6
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:510
  for(unsigned int i=0;i<data_len;i++){
    1f86:	b7 1c       	adc	r11, r7
    1f88:	ae 14       	cp	r10, r14
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:511
    _ss.write(data[i]);
    1f8a:	bf 04       	cpc	r11, r15
    1f8c:	31 f0       	breq	.+12     	; 0x1f9a <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x118>
    1f8e:	f7 01       	movw	r30, r14
    1f90:	61 91       	ld	r22, Z+
    1f92:	7f 01       	movw	r14, r30
    1f94:	c6 01       	movw	r24, r12
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:513
  _ss.write(SUB_CHAR);
    1f96:	ac d0       	rcall	.+344    	; 0x20f0 <SoftwareSerial::write(unsigned char)>
    1f98:	f7 cf       	rjmp	.-18     	; 0x1f88 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x106>
    1f9a:	6a e1       	ldi	r22, 0x1A	; 26
    1f9c:	c6 01       	movw	r24, r12
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:515
  n=_recv_socket(10000);
    1f9e:	a8 d0       	rcall	.+336    	; 0x20f0 <SoftwareSerial::write(unsigned char)>
    1fa0:	60 e1       	ldi	r22, 0x10	; 16
    1fa2:	77 e2       	ldi	r23, 0x27	; 39
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	d3 d8       	rcall	.-3674   	; 0x114e <Gsm_Ard::_recv_socket(int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:517
  if(n){
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	11 f0       	breq	.+4      	; 0x1fb0 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x12e>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:518
    return 30+n;
    1fac:	4e 96       	adiw	r24, 0x1e	; 30
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:524
    n=_fetch_rsp_wo_cmd(&rsp_len);
    1fae:	d4 cf       	rjmp	.-88     	; 0x1f58 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xd6>
    1fb0:	be 01       	movw	r22, r28
    1fb2:	62 5f       	subi	r22, 0xF2	; 242
    1fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb6:	c8 01       	movw	r24, r16
    1fb8:	0e 94 b2 06 	call	0xd64	; 0xd64 <Gsm_Ard::_fetch_rsp_wo_cmd(unsigned int*)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:525
    if(n){
    1fbc:	89 2b       	or	r24, r25
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:529
    rsp=new char[rsp_len];
    1fbe:	11 f5       	brne	.+68     	; 0x2004 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x182>
    1fc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc4:	0c d6       	rcall	.+3096   	; 0x2bde <operator new[](unsigned int)>
    1fc6:	9d 87       	std	Y+13, r25	; 0x0d
    1fc8:	8c 87       	std	Y+12, r24	; 0x0c
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:530
    n=_get_rsp(&rsp);
    1fca:	be 01       	movw	r22, r28
    1fcc:	64 5f       	subi	r22, 0xF4	; 244
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	0e 94 15 07 	call	0xe2a	; 0xe2a <Gsm_Ard::_get_rsp(char**)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:531
    if(n){
    1fd6:	89 2b       	or	r24, r25
    1fd8:	c1 f4       	brne	.+48     	; 0x200a <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x188>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:536
    strcpy_P(exp_rsp, AT_CIPSEND_OK);
    1fda:	66 e8       	ldi	r22, 0x86	; 134
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	ce 01       	movw	r24, r28
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	0e 94 ab 18 	call	0x3156	; 0x3156 <strcpy_P>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:537
    if(strncmp(rsp, exp_rsp, rsp_len)){
    1fe6:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fe8:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fea:	be 01       	movw	r22, r28
    1fec:	6f 5f       	subi	r22, 0xFF	; 255
    1fee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ff2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ff4:	0e 94 b2 18 	call	0x3164	; 0x3164 <strncmp>
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0x17c>
    1ffc:	ad cf       	rjmp	.-166    	; 0x1f58 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xd6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:538
      return 6;
    1ffe:	86 e0       	ldi	r24, 0x06	; 6
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	aa cf       	rjmp	.-172    	; 0x1f58 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xd6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:526
      return 4;
    2004:	84 e0       	ldi	r24, 0x04	; 4
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a7 cf       	rjmp	.-178    	; 0x1f58 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xd6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:532
      return 5;
    200a:	85 e0       	ldi	r24, 0x05	; 5
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a4 cf       	rjmp	.-184    	; 0x1f58 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xd6>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:476
    return 10;
    2010:	8a e0       	ldi	r24, 0x0A	; 10
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a1 cf       	rjmp	.-190    	; 0x1f58 <Gsm_Ard::_send_tcp_data(char*, unsigned int)+0xd6>

00002016 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)>:
_ZN7Gsm_Ard15send_socket_msgEPcjPj():
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:870
int Gsm_Ard::send_socket_msg(char* data, unsigned int data_len, unsigned int* rsp_len){
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	8c 01       	movw	r16, r24
    2028:	7b 01       	movw	r14, r22
    202a:	6a 01       	movw	r12, r20
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:872
  n=_connect_tcp_socket();
    202c:	e9 01       	movw	r28, r18
    202e:	51 de       	rcall	.-862    	; 0x1cd2 <Gsm_Ard::_connect_tcp_socket()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:873
  if(n){
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	59 f0       	breq	.+22     	; 0x204a <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x34>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:874
    return 1000+n;
    2034:	88 51       	subi	r24, 0x18	; 24
    2036:	9c 4f       	sbci	r25, 0xFC	; 252
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:894
}
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	ff 90       	pop	r15
    2042:	ef 90       	pop	r14
    2044:	df 90       	pop	r13
    2046:	cf 90       	pop	r12
    2048:	08 95       	ret
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:877
  n=_send_tcp_data(data, data_len);
    204a:	a6 01       	movw	r20, r12
    204c:	b7 01       	movw	r22, r14
    204e:	c8 01       	movw	r24, r16
    2050:	18 df       	rcall	.-464    	; 0x1e82 <Gsm_Ard::_send_tcp_data(char*, unsigned int)>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:878
  if(n){
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	19 f0       	breq	.+6      	; 0x205c <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x46>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:879
    return 2000+n;
    2056:	80 53       	subi	r24, 0x30	; 48
    2058:	98 4f       	sbci	r25, 0xF8	; 248
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:882
  n=_recv_tcp_data(rsp_len);
    205a:	ee cf       	rjmp	.-36     	; 0x2038 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x22>
    205c:	be 01       	movw	r22, r28
    205e:	c8 01       	movw	r24, r16
    2060:	20 d8       	rcall	.-4032   	; 0x10a2 <Gsm_Ard::_recv_tcp_data(unsigned int*)>
    2062:	ec 01       	movw	r28, r24
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:883
  if(n){
    2064:	c8 01       	movw	r24, r16
    2066:	20 97       	sbiw	r28, 0x00	; 0
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:884
    _disconnect_tcp_socket();
    2068:	29 f0       	breq	.+10     	; 0x2074 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x5e>
    206a:	23 db       	rcall	.-2490   	; 0x16b2 <Gsm_Ard::_disconnect_tcp_socket()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:885
    return 3000+n;
    206c:	ce 01       	movw	r24, r28
    206e:	88 54       	subi	r24, 0x48	; 72
    2070:	94 4f       	sbci	r25, 0xF4	; 244
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:888
  n=_disconnect_tcp_socket();
    2072:	e2 cf       	rjmp	.-60     	; 0x2038 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x22>
    2074:	1e db       	rcall	.-2500   	; 0x16b2 <Gsm_Ard::_disconnect_tcp_socket()>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:889
  if(n){
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	f9 f2       	breq	.-66     	; 0x2038 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x22>
/home/jlr/Documents/bbd/arduino/lib/gsmArd/gsm_ard.cpp:890
    return 4000+n;
    207a:	80 56       	subi	r24, 0x60	; 96
    207c:	90 4f       	sbci	r25, 0xF0	; 240
    207e:	dc cf       	rjmp	.-72     	; 0x2038 <Gsm_Ard::send_socket_msg(char*, unsigned int, unsigned int*)+0x22>

00002080 <get_time_request_msg(char**)>:
_Z20get_time_request_msgPPc():
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:4
#include "socket_bbd.h"

int get_time_request_msg(char** msg){
    memcpy(*msg, &SOCKET_HEADER, sizeof(SOCKET_HEADER));
    2080:	dc 01       	movw	r26, r24
    2082:	ed 91       	ld	r30, X+
    2084:	fc 91       	ld	r31, X
    2086:	11 97       	sbiw	r26, 0x01	; 1
    2088:	21 e9       	ldi	r18, 0x91	; 145
    208a:	20 83       	st	Z, r18
    208c:	2f ea       	ldi	r18, 0xAF	; 175
    208e:	21 83       	std	Z+1, r18	; 0x01
    2090:	2e e1       	ldi	r18, 0x1E	; 30
    2092:	22 83       	std	Z+2, r18	; 0x02
    2094:	26 e0       	ldi	r18, 0x06	; 6
    2096:	23 83       	std	Z+3, r18	; 0x03
    2098:	14 82       	std	Z+4, r1	; 0x04
    209a:	15 82       	std	Z+5, r1	; 0x05
    209c:	16 82       	std	Z+6, r1	; 0x06
    209e:	17 82       	std	Z+7, r1	; 0x07
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:5
    memcpy(*msg+sizeof(SOCKET_HEADER), &SYNC_TIME_MSG, 1);
    20a0:	ed 91       	ld	r30, X+
    20a2:	fc 91       	ld	r31, X
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	80 87       	std	Z+8, r24	; 0x08
/home/jlr/Documents/bbd/arduino/lib/socket_bbd/socket_bbd.cpp:7
    return 0;
}
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	08 95       	ret

000020ae <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:394


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    20ae:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <SoftwareSerial::active_object>
    20b2:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <SoftwareSerial::active_object+0x1>
    20b6:	28 17       	cp	r18, r24
    20b8:	39 07       	cpc	r19, r25
    20ba:	b9 f4       	brne	.+46     	; 0x20ea <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:398
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    20bc:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <SoftwareSerial::_receive_buffer_head>
    20c0:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <SoftwareSerial::_receive_buffer_tail>
    20c4:	98 17       	cp	r25, r24
    20c6:	89 f0       	breq	.+34     	; 0x20ea <SoftwareSerial::read()+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:402
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    20c8:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <SoftwareSerial::_receive_buffer_head>
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	ed 57       	subi	r30, 0x7D	; 125
    20d0:	fb 4f       	sbci	r31, 0xFB	; 251
    20d2:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:403
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    20d4:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <SoftwareSerial::_receive_buffer_head>
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	2f 5f       	subi	r18, 0xFF	; 255
    20dc:	3f 4f       	sbci	r19, 0xFF	; 255
    20de:	2f 73       	andi	r18, 0x3F	; 63
    20e0:	33 27       	eor	r19, r19
    20e2:	20 93 81 04 	sts	0x0481, r18	; 0x800481 <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:404
  return d;
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:395
    return -1;
    20ea:	8f ef       	ldi	r24, 0xFF	; 255
    20ec:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:405
}
    20ee:	08 95       	ret

000020f0 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:416

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
    20f0:	ff 92       	push	r15
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	dc 01       	movw	r26, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:417
  if (_tx_delay == 0) {
    20fc:	5c 96       	adiw	r26, 0x1c	; 28
    20fe:	4d 91       	ld	r20, X+
    2100:	5c 91       	ld	r21, X
    2102:	5d 97       	sbiw	r26, 0x1d	; 29
    2104:	41 15       	cp	r20, r1
    2106:	51 05       	cpc	r21, r1
    2108:	71 f4       	brne	.+28     	; 0x2126 <SoftwareSerial::write(unsigned char)+0x36>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:41
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	13 96       	adiw	r26, 0x03	; 3
    2110:	9c 93       	st	X, r25
    2112:	8e 93       	st	-X, r24
    2114:	12 97       	sbiw	r26, 0x02	; 2
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:419
    setWriteError();
    return 0;
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:468

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:426
  volatile uint8_t *reg = _transmitPortRegister;
    2126:	51 96       	adiw	r26, 0x11	; 17
    2128:	ed 91       	ld	r30, X+
    212a:	fc 91       	ld	r31, X
    212c:	52 97       	sbiw	r26, 0x12	; 18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:427
  uint8_t reg_mask = _transmitBitMask;
    212e:	50 96       	adiw	r26, 0x10	; 16
    2130:	8c 91       	ld	r24, X
    2132:	50 97       	sbiw	r26, 0x10	; 16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:428
  uint8_t inv_mask = ~_transmitBitMask;
    2134:	98 2f       	mov	r25, r24
    2136:	90 95       	com	r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:429
  uint8_t oldSREG = SREG;
    2138:	1f b7       	in	r17, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:430
  bool inv = _inverse_logic;
    213a:	5e 96       	adiw	r26, 0x1e	; 30
    213c:	2c 91       	ld	r18, X
    213e:	5e 97       	sbiw	r26, 0x1e	; 30
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:433
  if (inv)
    2140:	02 2f       	mov	r16, r18
    2142:	02 70       	andi	r16, 0x02	; 2
    2144:	21 fd       	sbrc	r18, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:434
    b = ~b;
    2146:	60 95       	com	r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:436
  cli();  // turn off interrupts for a clean txmit
    2148:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
    214a:	20 81       	ld	r18, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:439
  if (inv)
    214c:	00 23       	and	r16, r16
    214e:	c1 f0       	breq	.+48     	; 0x2180 <SoftwareSerial::write(unsigned char)+0x90>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:440
    *reg |= reg_mask;
    2150:	28 2b       	or	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
    2152:	20 83       	st	Z, r18
/usr/avr/include/util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2154:	ea 01       	movw	r28, r20
    2156:	21 97       	sbiw	r28, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <SoftwareSerial::write(unsigned char)+0x66>
    215a:	39 e0       	ldi	r19, 0x09	; 9
    215c:	f3 2e       	mov	r15, r19
    215e:	fa 94       	dec	r15
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:447
  for (uint8_t i = 8; i > 0; --i)
    2160:	ff 20       	and	r15, r15
    2162:	99 f0       	breq	.+38     	; 0x218a <SoftwareSerial::write(unsigned char)+0x9a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:449
    if (b & 1) // choose bit
    2164:	26 2f       	mov	r18, r22
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	60 ff       	sbrs	r22, 0
    216a:	0c c0       	rjmp	.+24     	; 0x2184 <SoftwareSerial::write(unsigned char)+0x94>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:450
      *reg |= reg_mask; // send 1
    216c:	60 81       	ld	r22, Z
    216e:	68 2b       	or	r22, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
    2170:	60 83       	st	Z, r22
/usr/avr/include/util/delay_basic.h:110
    2172:	ea 01       	movw	r28, r20
    2174:	21 97       	sbiw	r28, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <SoftwareSerial::write(unsigned char)+0x84>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:455
    b >>= 1;
    2178:	b9 01       	movw	r22, r18
    217a:	75 95       	asr	r23
    217c:	67 95       	ror	r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:447
  for (uint8_t i = 8; i > 0; --i)
    217e:	ef cf       	rjmp	.-34     	; 0x215e <SoftwareSerial::write(unsigned char)+0x6e>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:442
    *reg &= inv_mask;
    2180:	29 23       	and	r18, r25
    2182:	e7 cf       	rjmp	.-50     	; 0x2152 <SoftwareSerial::write(unsigned char)+0x62>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:452
      *reg &= inv_mask; // send 0
    2184:	60 81       	ld	r22, Z
    2186:	69 23       	and	r22, r25
    2188:	f3 cf       	rjmp	.-26     	; 0x2170 <SoftwareSerial::write(unsigned char)+0x80>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:459
  if (inv)
    218a:	00 23       	and	r16, r16
    218c:	69 f0       	breq	.+26     	; 0x21a8 <SoftwareSerial::write(unsigned char)+0xb8>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:460
    *reg &= inv_mask;
    218e:	80 81       	ld	r24, Z
    2190:	98 23       	and	r25, r24
    2192:	90 83       	st	Z, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:464
  SREG = oldSREG; // turn interrupts back on
    2194:	1f bf       	out	0x3f, r17	; 63
/usr/avr/include/util/delay_basic.h:110
    2196:	5c 96       	adiw	r26, 0x1c	; 28
    2198:	8d 91       	ld	r24, X+
    219a:	9c 91       	ld	r25, X
    219c:	5d 97       	sbiw	r26, 0x1d	; 29
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <SoftwareSerial::write(unsigned char)+0xae>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:467
  return 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	b9 cf       	rjmp	.-142    	; 0x211a <SoftwareSerial::write(unsigned char)+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:462
    *reg |= reg_mask;
    21a8:	90 81       	ld	r25, Z
    21aa:	89 2b       	or	r24, r25
    21ac:	80 83       	st	Z, r24
    21ae:	f2 cf       	rjmp	.-28     	; 0x2194 <SoftwareSerial::write(unsigned char)+0xa4>

000021b0 <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:471

void SoftwareSerial::flush()
{
    21b0:	08 95       	ret

000021b2 <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:477
  // There is no tx buffering, simply return
}

int SoftwareSerial::peek()
{
  if (!isListening())
    21b2:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <SoftwareSerial::active_object>
    21b6:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <SoftwareSerial::active_object+0x1>
    21ba:	28 17       	cp	r18, r24
    21bc:	39 07       	cpc	r19, r25
    21be:	71 f4       	brne	.+28     	; 0x21dc <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:481
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    21c0:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <SoftwareSerial::_receive_buffer_head>
    21c4:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <SoftwareSerial::_receive_buffer_tail>
    21c8:	98 17       	cp	r25, r24
    21ca:	41 f0       	breq	.+16     	; 0x21dc <SoftwareSerial::peek()+0x2a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:485
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    21cc:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <SoftwareSerial::_receive_buffer_head>
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	ed 57       	subi	r30, 0x7D	; 125
    21d4:	fb 4f       	sbci	r31, 0xFB	; 251
    21d6:	80 81       	ld	r24, Z
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:478
    return -1;
    21dc:	8f ef       	ldi	r24, 0xFF	; 255
    21de:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:486
}
    21e0:	08 95       	ret

000021e2 <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:409
  if (!isListening())
    21e2:	20 91 c3 04 	lds	r18, 0x04C3	; 0x8004c3 <SoftwareSerial::active_object>
    21e6:	30 91 c4 04 	lds	r19, 0x04C4	; 0x8004c4 <SoftwareSerial::active_object+0x1>
    21ea:	28 17       	cp	r18, r24
    21ec:	39 07       	cpc	r19, r25
    21ee:	61 f4       	brne	.+24     	; 0x2208 <SoftwareSerial::available()+0x26>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:412
  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    21f0:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <SoftwareSerial::_receive_buffer_tail>
    21f4:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <SoftwareSerial::_receive_buffer_head>
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	80 5c       	subi	r24, 0xC0	; 192
    21fc:	9f 4f       	sbci	r25, 0xFF	; 255
    21fe:	82 1b       	sub	r24, r18
    2200:	91 09       	sbc	r25, r1
    2202:	60 e4       	ldi	r22, 0x40	; 64
    2204:	70 e0       	ldi	r23, 0x00	; 0
    2206:	1b c6       	rjmp	.+3126   	; 0x2e3e <__divmodhi4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:410
    return 0;
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:413
}
    220c:	08 95       	ret

0000220e <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:111
  if (active_object == this)
    220e:	e0 91 c3 04 	lds	r30, 0x04C3	; 0x8004c3 <SoftwareSerial::active_object>
    2212:	f0 91 c4 04 	lds	r31, 0x04C4	; 0x8004c4 <SoftwareSerial::active_object+0x1>
    2216:	e8 17       	cp	r30, r24
    2218:	f9 07       	cpc	r31, r25
    221a:	69 f4       	brne	.+26     	; 0x2236 <SoftwareSerial::stopListening()+0x28>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
    221c:	a3 89       	ldd	r26, Z+19	; 0x13
    221e:	b4 89       	ldd	r27, Z+20	; 0x14
    2220:	9c 91       	ld	r25, X
    2222:	85 89       	ldd	r24, Z+21	; 0x15
    2224:	80 95       	com	r24
    2226:	89 23       	and	r24, r25
    2228:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:114
    active_object = NULL;
    222a:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <SoftwareSerial::active_object+0x1>
    222e:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <SoftwareSerial::active_object>
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:117
  return false;
    2236:	80 e0       	ldi	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:118
}
    2238:	08 95       	ret

0000223a <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:88
{
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:89
  if (!_rx_delay_stopbit)
    2240:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2242:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2244:	89 2b       	or	r24, r25
    2246:	f9 f0       	breq	.+62     	; 0x2286 <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:92
  if (active_object != this)
    2248:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <SoftwareSerial::active_object>
    224c:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <SoftwareSerial::active_object+0x1>
    2250:	c8 17       	cp	r28, r24
    2252:	d9 07       	cpc	r29, r25
    2254:	c1 f0       	breq	.+48     	; 0x2286 <SoftwareSerial::listen()+0x4c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:94
    if (active_object)
    2256:	00 97       	sbiw	r24, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:95
      active_object->stopListening();
    2258:	09 f0       	breq	.+2      	; 0x225c <SoftwareSerial::listen()+0x22>
    225a:	d9 df       	rcall	.-78     	; 0x220e <SoftwareSerial::stopListening()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:97
    _buffer_overflow = false;
    225c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    225e:	8e 7f       	andi	r24, 0xFE	; 254
    2260:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:98
    _receive_buffer_head = _receive_buffer_tail = 0;
    2262:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <SoftwareSerial::_receive_buffer_tail>
    2266:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <SoftwareSerial::_receive_buffer_head>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:99
    active_object = this;
    226a:	d0 93 c4 04 	sts	0x04C4, r29	; 0x8004c4 <SoftwareSerial::active_object+0x1>
    226e:	c0 93 c3 04 	sts	0x04C3, r28	; 0x8004c3 <SoftwareSerial::active_object>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
    2272:	eb 89       	ldd	r30, Y+19	; 0x13
    2274:	fc 89       	ldd	r31, Y+20	; 0x14
    2276:	80 81       	ld	r24, Z
    2278:	9d 89       	ldd	r25, Y+21	; 0x15
    227a:	89 2b       	or	r24, r25
    227c:	80 83       	st	Z, r24
    227e:	81 e0       	ldi	r24, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:106
}
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:90
    return false;
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	fb cf       	rjmp	.-10     	; 0x2280 <SoftwareSerial::listen()+0x46>

0000228a <__vector_3>:
__vector_3():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:229
{
    228a:	1f 92       	push	r1
    228c:	0f 92       	push	r0
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	0f 92       	push	r0
    2292:	11 24       	eor	r1, r1
    2294:	2f 93       	push	r18
    2296:	3f 93       	push	r19
    2298:	4f 93       	push	r20
    229a:	5f 93       	push	r21
    229c:	8f 93       	push	r24
    229e:	9f 93       	push	r25
    22a0:	af 93       	push	r26
    22a2:	bf 93       	push	r27
    22a4:	ef 93       	push	r30
    22a6:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:221
  if (active_object)
    22a8:	e0 91 c3 04 	lds	r30, 0x04C3	; 0x8004c3 <SoftwareSerial::active_object>
    22ac:	f0 91 c4 04 	lds	r31, 0x04C4	; 0x8004c4 <SoftwareSerial::active_object+0x1>
    22b0:	30 97       	sbiw	r30, 0x00	; 0
    22b2:	49 f0       	breq	.+18     	; 0x22c6 <__vector_3+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    22b4:	86 8d       	ldd	r24, Z+30	; 0x1e
    22b6:	a6 85       	ldd	r26, Z+14	; 0x0e
    22b8:	b7 85       	ldd	r27, Z+15	; 0x0f
    22ba:	95 85       	ldd	r25, Z+13	; 0x0d
    22bc:	81 ff       	sbrs	r24, 1
    22be:	12 c0       	rjmp	.+36     	; 0x22e4 <__vector_3+0x5a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    22c0:	8c 91       	ld	r24, X
    22c2:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    22c4:	91 f4       	brne	.+36     	; 0x22ea <__vector_3+0x60>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
    22c6:	ff 91       	pop	r31
    22c8:	ef 91       	pop	r30
    22ca:	bf 91       	pop	r27
    22cc:	af 91       	pop	r26
    22ce:	9f 91       	pop	r25
    22d0:	8f 91       	pop	r24
    22d2:	5f 91       	pop	r21
    22d4:	4f 91       	pop	r20
    22d6:	3f 91       	pop	r19
    22d8:	2f 91       	pop	r18
    22da:	0f 90       	pop	r0
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	0f 90       	pop	r0
    22e0:	1f 90       	pop	r1
    22e2:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    22e4:	8c 91       	ld	r24, X
    22e6:	89 23       	and	r24, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:146
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    22e8:	71 f7       	brne	.-36     	; 0x22c6 <__vector_3+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:382
      *_pcint_maskreg &= ~_pcint_maskvalue;
    22ea:	a3 89       	ldd	r26, Z+19	; 0x13
    22ec:	b4 89       	ldd	r27, Z+20	; 0x14
    22ee:	9c 91       	ld	r25, X
    22f0:	85 89       	ldd	r24, Z+21	; 0x15
    22f2:	80 95       	com	r24
    22f4:	89 23       	and	r24, r25
    22f6:	8c 93       	st	X, r24
/usr/avr/include/util/delay_basic.h:110
    22f8:	86 89       	ldd	r24, Z+22	; 0x16
    22fa:	97 89       	ldd	r25, Z+23	; 0x17
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <__vector_3+0x72>
    2300:	39 e0       	ldi	r19, 0x09	; 9
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:142
  uint8_t d = 0;
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	31 50       	subi	r19, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:158
    for (uint8_t i=8; i > 0; --i)
    2306:	89 f0       	breq	.+34     	; 0x232a <__vector_3+0xa0>
/usr/avr/include/util/delay_basic.h:110
    2308:	80 8d       	ldd	r24, Z+24	; 0x18
    230a:	91 8d       	ldd	r25, Z+25	; 0x19
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <__vector_3+0x82>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:161
      d >>= 1;
    2310:	82 2f       	mov	r24, r18
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	95 95       	asr	r25
    2316:	87 95       	ror	r24
    2318:	28 2f       	mov	r18, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:211
  return *_receivePortRegister & _receiveBitMask;
    231a:	a6 85       	ldd	r26, Z+14	; 0x0e
    231c:	b7 85       	ldd	r27, Z+15	; 0x0f
    231e:	4c 91       	ld	r20, X
    2320:	55 85       	ldd	r21, Z+13	; 0x0d
    2322:	45 23       	and	r20, r21
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:163
      if (rx_pin_read())
    2324:	79 f3       	breq	.-34     	; 0x2304 <__vector_3+0x7a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:164
        d |= 0x80;
    2326:	20 68       	ori	r18, 0x80	; 128
    2328:	ed cf       	rjmp	.-38     	; 0x2304 <__vector_3+0x7a>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:167
    if (_inverse_logic)
    232a:	86 8d       	ldd	r24, Z+30	; 0x1e
    232c:	81 fd       	sbrc	r24, 1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:168
      d = ~d;
    232e:	20 95       	com	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:171
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    2330:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <SoftwareSerial::_receive_buffer_tail>
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	01 96       	adiw	r24, 0x01	; 1
    2338:	8f 73       	andi	r24, 0x3F	; 63
    233a:	99 27       	eor	r25, r25
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:172
    if (next != _receive_buffer_head)
    233c:	30 91 81 04 	lds	r19, 0x0481	; 0x800481 <SoftwareSerial::_receive_buffer_head>
    2340:	38 17       	cp	r19, r24
    2342:	99 f0       	breq	.+38     	; 0x236a <__vector_3+0xe0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:175
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    2344:	a0 91 82 04 	lds	r26, 0x0482	; 0x800482 <SoftwareSerial::_receive_buffer_tail>
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	ad 57       	subi	r26, 0x7D	; 125
    234c:	bb 4f       	sbci	r27, 0xFB	; 251
    234e:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:176
      _receive_buffer_tail = next;
    2350:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <SoftwareSerial::_receive_buffer_tail>
/usr/avr/include/util/delay_basic.h:110
    2354:	82 8d       	ldd	r24, Z+26	; 0x1a
    2356:	93 8d       	ldd	r25, Z+27	; 0x1b
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <__vector_3+0xce>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:380
      *_pcint_maskreg |= _pcint_maskvalue;
    235c:	a3 89       	ldd	r26, Z+19	; 0x13
    235e:	b4 89       	ldd	r27, Z+20	; 0x14
    2360:	8c 91       	ld	r24, X
    2362:	95 89       	ldd	r25, Z+21	; 0x15
    2364:	89 2b       	or	r24, r25
    2366:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:231
}
    2368:	ae cf       	rjmp	.-164    	; 0x22c6 <__vector_3+0x3c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:181
      _buffer_overflow = true;
    236a:	86 8d       	ldd	r24, Z+30	; 0x1e
    236c:	81 60       	ori	r24, 0x01	; 1
    236e:	86 8f       	std	Z+30, r24	; 0x1e
    2370:	f1 cf       	rjmp	.-30     	; 0x2354 <__vector_3+0xca>

00002372 <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:264
SoftwareSerial::~SoftwareSerial()
    2372:	29 e9       	ldi	r18, 0x99	; 153
    2374:	32 e0       	ldi	r19, 0x02	; 2
    2376:	fc 01       	movw	r30, r24
    2378:	31 83       	std	Z+1, r19	; 0x01
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:387
  stopListening();
    237a:	20 83       	st	Z, r18
    237c:	48 cf       	rjmp	.-368    	; 0x220e <SoftwareSerial::stopListening()>

0000237e <SoftwareSerial::setTX(unsigned char)>:
_ZN14SoftwareSerial5setTXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:270
{
    237e:	1f 93       	push	r17
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	ec 01       	movw	r28, r24
    2386:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:275
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    2388:	6e 8d       	ldd	r22, Y+30	; 0x1e
    238a:	66 95       	lsr	r22
    238c:	61 70       	andi	r22, 0x01	; 1
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	68 27       	eor	r22, r24
    2392:	81 2f       	mov	r24, r17
    2394:	58 d2       	rcall	.+1200   	; 0x2846 <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:276
  pinMode(tx, OUTPUT);
    2396:	61 e0       	ldi	r22, 0x01	; 1
    2398:	81 2f       	mov	r24, r17
    239a:	19 d2       	rcall	.+1074   	; 0x27ce <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:277
  _transmitBitMask = digitalPinToBitMask(tx);
    239c:	81 2f       	mov	r24, r17
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	fc 01       	movw	r30, r24
    23a2:	e1 5b       	subi	r30, 0xB1	; 177
    23a4:	fd 4f       	sbci	r31, 0xFD	; 253
    23a6:	e4 91       	lpm	r30, Z
    23a8:	e8 8b       	std	Y+16, r30	; 0x10
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:278
  uint8_t port = digitalPinToPort(tx);
    23aa:	fc 01       	movw	r30, r24
    23ac:	ed 59       	subi	r30, 0x9D	; 157
    23ae:	fd 4f       	sbci	r31, 0xFD	; 253
    23b0:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:279
  _transmitPortRegister = portOutputRegister(port);
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	ef 57       	subi	r30, 0x7F	; 127
    23ba:	fd 4f       	sbci	r31, 0xFD	; 253
    23bc:	85 91       	lpm	r24, Z+
    23be:	94 91       	lpm	r25, Z
    23c0:	9a 8b       	std	Y+18, r25	; 0x12
    23c2:	89 8b       	std	Y+17, r24	; 0x11
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:280
}
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	08 95       	ret

000023cc <SoftwareSerial::setRX(unsigned char)>:
_ZN14SoftwareSerial5setRXEh():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:283
{
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	ec 01       	movw	r28, r24
    23d4:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:284
  pinMode(rx, INPUT);
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	81 2f       	mov	r24, r17
    23da:	f9 d1       	rcall	.+1010   	; 0x27ce <pinMode>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:285
  if (!_inverse_logic)
    23dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23de:	81 fd       	sbrc	r24, 1
    23e0:	03 c0       	rjmp	.+6      	; 0x23e8 <SoftwareSerial::setRX(unsigned char)+0x1c>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:286
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    23e2:	61 e0       	ldi	r22, 0x01	; 1
    23e4:	81 2f       	mov	r24, r17
    23e6:	2f d2       	rcall	.+1118   	; 0x2846 <digitalWrite>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:287
  _receivePin = rx;
    23e8:	1c 87       	std	Y+12, r17	; 0x0c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:288
  _receiveBitMask = digitalPinToBitMask(rx);
    23ea:	81 2f       	mov	r24, r17
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	fc 01       	movw	r30, r24
    23f0:	e1 5b       	subi	r30, 0xB1	; 177
    23f2:	fd 4f       	sbci	r31, 0xFD	; 253
    23f4:	e4 91       	lpm	r30, Z
    23f6:	ed 87       	std	Y+13, r30	; 0x0d
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:289
  uint8_t port = digitalPinToPort(rx);
    23f8:	fc 01       	movw	r30, r24
    23fa:	ed 59       	subi	r30, 0x9D	; 157
    23fc:	fd 4f       	sbci	r31, 0xFD	; 253
    23fe:	e4 91       	lpm	r30, Z
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:290
  _receivePortRegister = portInputRegister(port);
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	ee 0f       	add	r30, r30
    2404:	ff 1f       	adc	r31, r31
    2406:	e9 58       	subi	r30, 0x89	; 137
    2408:	fd 4f       	sbci	r31, 0xFD	; 253
    240a:	85 91       	lpm	r24, Z+
    240c:	94 91       	lpm	r25, Z
    240e:	9f 87       	std	Y+15, r25	; 0x0f
    2410:	8e 87       	std	Y+14, r24	; 0x0e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:291
}
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	1f 91       	pop	r17
    2418:	08 95       	ret

0000241a <SoftwareSerial::SoftwareSerial(unsigned char, unsigned char, bool)>:
_ZN14SoftwareSerialC2Ehhb():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:249
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	ec 01       	movw	r28, r24
    2422:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:43
  public:
    Print() : write_error(0) {}
    2424:	1b 82       	std	Y+3, r1	; 0x03
    2426:	1a 82       	std	Y+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2428:	88 ee       	ldi	r24, 0xE8	; 232
    242a:	93 e0       	ldi	r25, 0x03	; 3
    242c:	a0 e0       	ldi	r26, 0x00	; 0
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	8c 83       	std	Y+4, r24	; 0x04
    2432:	9d 83       	std	Y+5, r25	; 0x05
    2434:	ae 83       	std	Y+6, r26	; 0x06
    2436:	bf 83       	std	Y+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:255
  _inverse_logic(inverse_logic)
    2438:	89 e9       	ldi	r24, 0x99	; 153
    243a:	92 e0       	ldi	r25, 0x02	; 2
    243c:	99 83       	std	Y+1, r25	; 0x01
    243e:	88 83       	st	Y, r24
    2440:	1f 8a       	std	Y+23, r1	; 0x17
    2442:	1e 8a       	std	Y+22, r1	; 0x16
    2444:	19 8e       	std	Y+25, r1	; 0x19
    2446:	18 8e       	std	Y+24, r1	; 0x18
    2448:	1b 8e       	std	Y+27, r1	; 0x1b
    244a:	1a 8e       	std	Y+26, r1	; 0x1a
    244c:	1d 8e       	std	Y+29, r1	; 0x1d
    244e:	1c 8e       	std	Y+28, r1	; 0x1c
    2450:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2452:	8e 7f       	andi	r24, 0xFE	; 254
    2454:	20 fb       	bst	r18, 0
    2456:	81 f9       	bld	r24, 1
    2458:	8e 8f       	std	Y+30, r24	; 0x1e
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:257
  setTX(transmitPin);
    245a:	64 2f       	mov	r22, r20
    245c:	ce 01       	movw	r24, r28
    245e:	8f df       	rcall	.-226    	; 0x237e <SoftwareSerial::setTX(unsigned char)>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
    2460:	61 2f       	mov	r22, r17
    2462:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:259
}
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:258
  setRX(receivePin);
    2468:	1f 91       	pop	r17
    246a:	b0 cf       	rjmp	.-160    	; 0x23cc <SoftwareSerial::setRX(unsigned char)>

0000246c <SoftwareSerial::begin(long)>:
_ZN14SoftwareSerial5beginEl():
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:305
{
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	ec 01       	movw	r28, r24
    2472:	9a 01       	movw	r18, r20
    2474:	ab 01       	movw	r20, r22
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:306
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2476:	1b 8e       	std	Y+27, r1	; 0x1b
    2478:	1a 8e       	std	Y+26, r1	; 0x1a
    247a:	19 8e       	std	Y+25, r1	; 0x19
    247c:	18 8e       	std	Y+24, r1	; 0x18
    247e:	1f 8a       	std	Y+23, r1	; 0x17
    2480:	1e 8a       	std	Y+22, r1	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:309
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	79 e0       	ldi	r23, 0x09	; 9
    2486:	8d e3       	ldi	r24, 0x3D	; 61
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e d5       	rcall	.+2588   	; 0x2ea8 <__divmodsi4>
    248c:	f9 01       	movw	r30, r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    248e:	24 30       	cpi	r18, 0x04	; 4
    2490:	31 05       	cpc	r19, r1
    2492:	08 f4       	brcc	.+2      	; 0x2496 <SoftwareSerial::begin(long)+0x2a>
    2494:	60 c0       	rjmp	.+192    	; 0x2556 <SoftwareSerial::begin(long)+0xea>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    2496:	c9 01       	movw	r24, r18
    2498:	03 97       	sbiw	r24, 0x03	; 3
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:316
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    249a:	9d 8f       	std	Y+29, r25	; 0x1d
    249c:	8c 8f       	std	Y+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:319
  if (digitalPinToPCICR(_receivePin)) {
    249e:	6c 85       	ldd	r22, Y+12	; 0x0c
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	66 31       	cpi	r22, 0x16	; 22
    24a4:	71 05       	cpc	r23, r1
    24a6:	0c f0       	brlt	.+2      	; 0x24aa <SoftwareSerial::begin(long)+0x3e>
    24a8:	52 c0       	rjmp	.+164    	; 0x254e <SoftwareSerial::begin(long)+0xe2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    24aa:	c9 01       	movw	r24, r18
    24ac:	96 95       	lsr	r25
    24ae:	87 95       	ror	r24
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    24b0:	84 31       	cpi	r24, 0x14	; 20
    24b2:	91 05       	cpc	r25, r1
    24b4:	08 f4       	brcc	.+2      	; 0x24b8 <SoftwareSerial::begin(long)+0x4c>
    24b6:	52 c0       	rjmp	.+164    	; 0x255c <SoftwareSerial::begin(long)+0xf0>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    24b8:	43 97       	sbiw	r24, 0x13	; 19
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:334
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    24ba:	9f 8b       	std	Y+23, r25	; 0x17
    24bc:	8e 8b       	std	Y+22, r24	; 0x16
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    24be:	36 97       	sbiw	r30, 0x06	; 6
    24c0:	08 f4       	brcc	.+2      	; 0x24c4 <SoftwareSerial::begin(long)+0x58>
    24c2:	4f c0       	rjmp	.+158    	; 0x2562 <SoftwareSerial::begin(long)+0xf6>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    24c4:	c9 01       	movw	r24, r18
    24c6:	05 97       	sbiw	r24, 0x05	; 5
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:337
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    24c8:	99 8f       	std	Y+25, r25	; 0x19
    24ca:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    24cc:	c9 01       	movw	r24, r18
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	28 0f       	add	r18, r24
    24d4:	39 1f       	adc	r19, r25
    24d6:	36 95       	lsr	r19
    24d8:	27 95       	ror	r18
    24da:	36 95       	lsr	r19
    24dc:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:294
  if (num > sub)
    24de:	2d 30       	cpi	r18, 0x0D	; 13
    24e0:	31 05       	cpc	r19, r1
    24e2:	08 f4       	brcc	.+2      	; 0x24e6 <SoftwareSerial::begin(long)+0x7a>
    24e4:	41 c0       	rjmp	.+130    	; 0x2568 <SoftwareSerial::begin(long)+0xfc>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:295
    return num - sub;
    24e6:	2c 50       	subi	r18, 0x0C	; 12
    24e8:	31 09       	sbc	r19, r1
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:346
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    24ea:	3b 8f       	std	Y+27, r19	; 0x1b
    24ec:	2a 8f       	std	Y+26, r18	; 0x1a
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:360
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    24ee:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    24f2:	68 30       	cpi	r22, 0x08	; 8
    24f4:	71 05       	cpc	r23, r1
    24f6:	dc f1       	brlt	.+118    	; 0x256e <SoftwareSerial::begin(long)+0x102>
    24f8:	31 e0       	ldi	r19, 0x01	; 1
    24fa:	6e 30       	cpi	r22, 0x0E	; 14
    24fc:	71 05       	cpc	r23, r1
    24fe:	0c f4       	brge	.+2      	; 0x2502 <SoftwareSerial::begin(long)+0x96>
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	01 c0       	rjmp	.+2      	; 0x250a <SoftwareSerial::begin(long)+0x9e>
    2508:	88 0f       	add	r24, r24
    250a:	3a 95       	dec	r19
    250c:	ea f7       	brpl	.-6      	; 0x2508 <SoftwareSerial::begin(long)+0x9c>
    250e:	82 2b       	or	r24, r18
    2510:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:363
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2514:	4c 85       	ldd	r20, Y+12	; 0x0c
    2516:	84 2f       	mov	r24, r20
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	88 30       	cpi	r24, 0x08	; 8
    251c:	91 05       	cpc	r25, r1
    251e:	54 f1       	brlt	.+84     	; 0x2574 <SoftwareSerial::begin(long)+0x108>
    2520:	8e 30       	cpi	r24, 0x0E	; 14
    2522:	91 05       	cpc	r25, r1
    2524:	54 f1       	brlt	.+84     	; 0x257a <SoftwareSerial::begin(long)+0x10e>
    2526:	86 31       	cpi	r24, 0x16	; 22
    2528:	91 05       	cpc	r25, r1
    252a:	54 f1       	brlt	.+84     	; 0x2580 <SoftwareSerial::begin(long)+0x114>
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	3c 8b       	std	Y+20, r19	; 0x14
    2532:	2b 8b       	std	Y+19, r18	; 0x13
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2534:	88 30       	cpi	r24, 0x08	; 8
    2536:	91 05       	cpc	r25, r1
    2538:	34 f5       	brge	.+76     	; 0x2586 <SoftwareSerial::begin(long)+0x11a>
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <SoftwareSerial::begin(long)+0xd4>
    253e:	88 0f       	add	r24, r24
    2540:	4a 95       	dec	r20
    2542:	ea f7       	brpl	.-6      	; 0x253e <SoftwareSerial::begin(long)+0xd2>
    2544:	8d 8b       	std	Y+21, r24	; 0x15
/usr/avr/include/util/delay_basic.h:110
    2546:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2548:	9d 8d       	ldd	r25, Y+29	; 0x1d
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <SoftwareSerial::begin(long)+0xde>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    254e:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:375
}
    2550:	df 91       	pop	r29
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:374
  listen();
    2552:	cf 91       	pop	r28
    2554:	72 ce       	rjmp	.-796    	; 0x223a <SoftwareSerial::listen()>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:297
    return 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9f cf       	rjmp	.-194    	; 0x249a <SoftwareSerial::begin(long)+0x2e>
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	ac cf       	rjmp	.-168    	; 0x24ba <SoftwareSerial::begin(long)+0x4e>
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	b0 cf       	rjmp	.-160    	; 0x24c8 <SoftwareSerial::begin(long)+0x5c>
    2568:	21 e0       	ldi	r18, 0x01	; 1
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	be cf       	rjmp	.-132    	; 0x24ea <SoftwareSerial::begin(long)+0x7e>
    256e:	84 e0       	ldi	r24, 0x04	; 4
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	cd cf       	rjmp	.-102    	; 0x250e <SoftwareSerial::begin(long)+0xa2>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:363
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    2574:	2d e6       	ldi	r18, 0x6D	; 109
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	db cf       	rjmp	.-74     	; 0x2530 <SoftwareSerial::begin(long)+0xc4>
    257a:	2b e6       	ldi	r18, 0x6B	; 107
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	d8 cf       	rjmp	.-80     	; 0x2530 <SoftwareSerial::begin(long)+0xc4>
    2580:	2c e6       	ldi	r18, 0x6C	; 108
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	d5 cf       	rjmp	.-86     	; 0x2530 <SoftwareSerial::begin(long)+0xc4>
/usr/share/arduino/hardware/arduino/avr/libraries/SoftwareSerial/src/SoftwareSerial.cpp:364
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    2586:	9c 01       	movw	r18, r24
    2588:	0e 97       	sbiw	r24, 0x0e	; 14
    258a:	44 f4       	brge	.+16     	; 0x259c <SoftwareSerial::begin(long)+0x130>
    258c:	28 50       	subi	r18, 0x08	; 8
    258e:	31 09       	sbc	r19, r1
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	01 c0       	rjmp	.+2      	; 0x2596 <SoftwareSerial::begin(long)+0x12a>
    2594:	88 0f       	add	r24, r24
    2596:	2a 95       	dec	r18
    2598:	ea f7       	brpl	.-6      	; 0x2594 <SoftwareSerial::begin(long)+0x128>
    259a:	d4 cf       	rjmp	.-88     	; 0x2544 <SoftwareSerial::begin(long)+0xd8>
    259c:	2e 50       	subi	r18, 0x0E	; 14
    259e:	31 09       	sbc	r19, r1
    25a0:	f7 cf       	rjmp	.-18     	; 0x2590 <SoftwareSerial::begin(long)+0x124>

000025a2 <__vector_16>:
__vector_16():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:47
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    25a2:	1f 92       	push	r1
    25a4:	0f 92       	push	r0
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	0f 92       	push	r0
    25aa:	11 24       	eor	r1, r1
    25ac:	2f 93       	push	r18
    25ae:	3f 93       	push	r19
    25b0:	8f 93       	push	r24
    25b2:	9f 93       	push	r25
    25b4:	af 93       	push	r26
    25b6:	bf 93       	push	r27
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:50
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    25b8:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <timer0_millis>
    25bc:	90 91 c7 04 	lds	r25, 0x04C7	; 0x8004c7 <timer0_millis+0x1>
    25c0:	a0 91 c8 04 	lds	r26, 0x04C8	; 0x8004c8 <timer0_millis+0x2>
    25c4:	b0 91 c9 04 	lds	r27, 0x04C9	; 0x8004c9 <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:51
	unsigned char f = timer0_fract;
    25c8:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:54

	m += MILLIS_INC;
	f += FRACT_INC;
    25cc:	23 e0       	ldi	r18, 0x03	; 3
    25ce:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:55
	if (f >= FRACT_MAX) {
    25d0:	2d 37       	cpi	r18, 0x7D	; 125
    25d2:	58 f5       	brcc	.+86     	; 0x262a <__vector_16+0x88>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:53
	m += MILLIS_INC;
    25d4:	01 96       	adiw	r24, 0x01	; 1
    25d6:	a1 1d       	adc	r26, r1
    25d8:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:60
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
    25da:	20 93 c5 04 	sts	0x04C5, r18	; 0x8004c5 <timer0_fract>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:61
	timer0_millis = m;
    25de:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <timer0_millis>
    25e2:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <timer0_millis+0x1>
    25e6:	a0 93 c8 04 	sts	0x04C8, r26	; 0x8004c8 <timer0_millis+0x2>
    25ea:	b0 93 c9 04 	sts	0x04C9, r27	; 0x8004c9 <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:62
	timer0_overflow_count++;
    25ee:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <timer0_overflow_count>
    25f2:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <timer0_overflow_count+0x1>
    25f6:	a0 91 cc 04 	lds	r26, 0x04CC	; 0x8004cc <timer0_overflow_count+0x2>
    25fa:	b0 91 cd 04 	lds	r27, 0x04CD	; 0x8004cd <timer0_overflow_count+0x3>
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	a1 1d       	adc	r26, r1
    2602:	b1 1d       	adc	r27, r1
    2604:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <timer0_overflow_count>
    2608:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <timer0_overflow_count+0x1>
    260c:	a0 93 cc 04 	sts	0x04CC, r26	; 0x8004cc <timer0_overflow_count+0x2>
    2610:	b0 93 cd 04 	sts	0x04CD, r27	; 0x8004cd <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:63
}
    2614:	bf 91       	pop	r27
    2616:	af 91       	pop	r26
    2618:	9f 91       	pop	r25
    261a:	8f 91       	pop	r24
    261c:	3f 91       	pop	r19
    261e:	2f 91       	pop	r18
    2620:	0f 90       	pop	r0
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	0f 90       	pop	r0
    2626:	1f 90       	pop	r1
    2628:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:56
		f -= FRACT_MAX;
    262a:	26 e8       	ldi	r18, 0x86	; 134
    262c:	23 0f       	add	r18, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:57
		m += 1;
    262e:	02 96       	adiw	r24, 0x02	; 2
    2630:	a1 1d       	adc	r26, r1
    2632:	b1 1d       	adc	r27, r1
    2634:	d2 cf       	rjmp	.-92     	; 0x25da <__vector_16+0x38>

00002636 <millis>:
millis():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:68

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2636:	2f b7       	in	r18, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:72

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2638:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:73
	m = timer0_millis;
    263a:	60 91 c6 04 	lds	r22, 0x04C6	; 0x8004c6 <timer0_millis>
    263e:	70 91 c7 04 	lds	r23, 0x04C7	; 0x8004c7 <timer0_millis+0x1>
    2642:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <timer0_millis+0x2>
    2646:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <timer0_millis+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:74
	SREG = oldSREG;
    264a:	2f bf       	out	0x3f, r18	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:77

	return m;
}
    264c:	08 95       	ret

0000264e <micros>:
micros():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:81

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    264e:	3f b7       	in	r19, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:83
	
	cli();
    2650:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:84
	m = timer0_overflow_count;
    2652:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <timer0_overflow_count>
    2656:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <timer0_overflow_count+0x1>
    265a:	a0 91 cc 04 	lds	r26, 0x04CC	; 0x8004cc <timer0_overflow_count+0x2>
    265e:	b0 91 cd 04 	lds	r27, 0x04CD	; 0x8004cd <timer0_overflow_count+0x3>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:86
#if defined(TCNT0)
	t = TCNT0;
    2662:	26 b5       	in	r18, 0x26	; 38
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:94
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2664:	a8 9b       	sbis	0x15, 0	; 21
    2666:	05 c0       	rjmp	.+10     	; 0x2672 <micros+0x24>
    2668:	2f 3f       	cpi	r18, 0xFF	; 255
    266a:	19 f0       	breq	.+6      	; 0x2672 <micros+0x24>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:95
		m++;
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	a1 1d       	adc	r26, r1
    2670:	b1 1d       	adc	r27, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:101
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2672:	3f bf       	out	0x3f, r19	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:103
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2674:	ba 2f       	mov	r27, r26
    2676:	a9 2f       	mov	r26, r25
    2678:	98 2f       	mov	r25, r24
    267a:	88 27       	eor	r24, r24
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	62 0f       	add	r22, r18
    2682:	71 1d       	adc	r23, r1
    2684:	81 1d       	adc	r24, r1
    2686:	91 1d       	adc	r25, r1
    2688:	42 e0       	ldi	r20, 0x02	; 2
    268a:	66 0f       	add	r22, r22
    268c:	77 1f       	adc	r23, r23
    268e:	88 1f       	adc	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	4a 95       	dec	r20
    2694:	d1 f7       	brne	.-12     	; 0x268a <micros+0x3c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:104
}
    2696:	08 95       	ret

00002698 <delay>:
delay():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:107

void delay(unsigned long ms)
{
    2698:	8f 92       	push	r8
    269a:	9f 92       	push	r9
    269c:	af 92       	push	r10
    269e:	bf 92       	push	r11
    26a0:	cf 92       	push	r12
    26a2:	df 92       	push	r13
    26a4:	ef 92       	push	r14
    26a6:	ff 92       	push	r15
    26a8:	6b 01       	movw	r12, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:108
	uint32_t start = micros();
    26aa:	7c 01       	movw	r14, r24
    26ac:	d0 df       	rcall	.-96     	; 0x264e <micros>
    26ae:	4b 01       	movw	r8, r22
    26b0:	5c 01       	movw	r10, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:110

	while (ms > 0) {
    26b2:	c1 14       	cp	r12, r1
    26b4:	d1 04       	cpc	r13, r1
    26b6:	e1 04       	cpc	r14, r1
    26b8:	f1 04       	cpc	r15, r1
    26ba:	49 f4       	brne	.+18     	; 0x26ce <delay+0x36>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:117
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	cf 90       	pop	r12
    26c4:	bf 90       	pop	r11
    26c6:	af 90       	pop	r10
    26c8:	9f 90       	pop	r9
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:111
		yield();
    26ca:	8f 90       	pop	r8
    26cc:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    26ce:	e8 d0       	rcall	.+464    	; 0x28a0 <yield>
    26d0:	be df       	rcall	.-132    	; 0x264e <micros>
    26d2:	68 19       	sub	r22, r8
    26d4:	79 09       	sbc	r23, r9
    26d6:	8a 09       	sbc	r24, r10
    26d8:	9b 09       	sbc	r25, r11
    26da:	68 3e       	cpi	r22, 0xE8	; 232
    26dc:	73 40       	sbci	r23, 0x03	; 3
    26de:	81 05       	cpc	r24, r1
    26e0:	91 05       	cpc	r25, r1
    26e2:	38 f3       	brcs	.-50     	; 0x26b2 <delay+0x1a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:113
			ms--;
    26e4:	21 e0       	ldi	r18, 0x01	; 1
    26e6:	c2 1a       	sub	r12, r18
    26e8:	d1 08       	sbc	r13, r1
    26ea:	e1 08       	sbc	r14, r1
    26ec:	f1 08       	sbc	r15, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:114
			start += 1000;
    26ee:	88 ee       	ldi	r24, 0xE8	; 232
    26f0:	88 0e       	add	r8, r24
    26f2:	83 e0       	ldi	r24, 0x03	; 3
    26f4:	98 1e       	adc	r9, r24
    26f6:	a1 1c       	adc	r10, r1
    26f8:	b1 1c       	adc	r11, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:112
		while ( ms > 0 && (micros() - start) >= 1000) {
    26fa:	c1 14       	cp	r12, r1
    26fc:	d1 04       	cpc	r13, r1
    26fe:	e1 04       	cpc	r14, r1
    2700:	f1 04       	cpc	r15, r1
    2702:	31 f7       	brne	.-52     	; 0x26d0 <delay+0x38>
    2704:	d6 cf       	rjmp	.-84     	; 0x26b2 <delay+0x1a>

00002706 <init>:
init():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:245

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2706:	78 94       	sei
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:251
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2708:	84 b5       	in	r24, 0x24	; 36
    270a:	82 60       	ori	r24, 0x02	; 2
    270c:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:252
	sbi(TCCR0A, WGM00);
    270e:	84 b5       	in	r24, 0x24	; 36
    2710:	81 60       	ori	r24, 0x01	; 1
    2712:	84 bd       	out	0x24, r24	; 36
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:265
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2714:	85 b5       	in	r24, 0x25	; 37
    2716:	82 60       	ori	r24, 0x02	; 2
    2718:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:266
	sbi(TCCR0B, CS00);
    271a:	85 b5       	in	r24, 0x25	; 37
    271c:	81 60       	ori	r24, 0x01	; 1
    271e:	85 bd       	out	0x25, r24	; 37
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:279

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2720:	ee e6       	ldi	r30, 0x6E	; 110
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	81 60       	ori	r24, 0x01	; 1
    2728:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:290
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    272a:	e1 e8       	ldi	r30, 0x81	; 129
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:293

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2730:	80 81       	ld	r24, Z
    2732:	82 60       	ori	r24, 0x02	; 2
    2734:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:295
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2736:	80 81       	ld	r24, Z
    2738:	81 60       	ori	r24, 0x01	; 1
    273a:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:305
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    273c:	e0 e8       	ldi	r30, 0x80	; 128
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	81 60       	ori	r24, 0x01	; 1
    2744:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:312

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2746:	e1 eb       	ldi	r30, 0xB1	; 177
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	84 60       	ori	r24, 0x04	; 4
    274e:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:321

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2750:	e0 eb       	ldi	r30, 0xB0	; 176
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	81 60       	ori	r24, 0x01	; 1
    2758:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:356
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    275a:	ea e7       	ldi	r30, 0x7A	; 122
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	84 60       	ori	r24, 0x04	; 4
    2762:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:357
		sbi(ADCSRA, ADPS1);
    2764:	80 81       	ld	r24, Z
    2766:	82 60       	ori	r24, 0x02	; 2
    2768:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:358
		sbi(ADCSRA, ADPS0);
    276a:	80 81       	ld	r24, Z
    276c:	81 60       	ori	r24, 0x01	; 1
    276e:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:381
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2770:	80 81       	ld	r24, Z
    2772:	80 68       	ori	r24, 0x80	; 128
    2774:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring.c:390
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2776:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    277a:	08 95       	ret

0000277c <turnOffPWM>:
turnOffPWM():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    277c:	83 30       	cpi	r24, 0x03	; 3
    277e:	81 f0       	breq	.+32     	; 0x27a0 <turnOffPWM+0x24>
    2780:	28 f4       	brcc	.+10     	; 0x278c <turnOffPWM+0x10>
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	99 f0       	breq	.+38     	; 0x27ac <turnOffPWM+0x30>
    2786:	82 30       	cpi	r24, 0x02	; 2
    2788:	a9 f0       	breq	.+42     	; 0x27b4 <turnOffPWM+0x38>
    278a:	08 95       	ret
    278c:	87 30       	cpi	r24, 0x07	; 7
    278e:	a9 f0       	breq	.+42     	; 0x27ba <turnOffPWM+0x3e>
    2790:	88 30       	cpi	r24, 0x08	; 8
    2792:	c9 f0       	breq	.+50     	; 0x27c6 <turnOffPWM+0x4a>
    2794:	84 30       	cpi	r24, 0x04	; 4
    2796:	b1 f4       	brne	.+44     	; 0x27c4 <turnOffPWM+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2798:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    279c:	8f 7d       	andi	r24, 0xDF	; 223
    279e:	03 c0       	rjmp	.+6      	; 0x27a6 <turnOffPWM+0x2a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:80
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    27a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    27a4:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:83
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    27a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    27aa:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:94
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    27ac:	84 b5       	in	r24, 0x24	; 36
    27ae:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:98
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    27b0:	84 bd       	out	0x24, r24	; 36
    27b2:	08 95       	ret
    27b4:	84 b5       	in	r24, 0x24	; 36
    27b6:	8f 7d       	andi	r24, 0xDF	; 223
    27b8:	fb cf       	rjmp	.-10     	; 0x27b0 <turnOffPWM+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:101
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    27ba:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    27be:	8f 77       	andi	r24, 0x7F	; 127
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:104
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    27c0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    27c4:	08 95       	ret
    27c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    27ca:	8f 7d       	andi	r24, 0xDF	; 223
    27cc:	f9 cf       	rjmp	.-14     	; 0x27c0 <turnOffPWM+0x44>

000027ce <pinMode>:
pinMode():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:30
{
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:31
	uint8_t bit = digitalPinToBitMask(pin);
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	fc 01       	movw	r30, r24
    27d6:	e1 5b       	subi	r30, 0xB1	; 177
    27d8:	fd 4f       	sbci	r31, 0xFD	; 253
    27da:	24 91       	lpm	r18, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:32
	uint8_t port = digitalPinToPort(pin);
    27dc:	8d 59       	subi	r24, 0x9D	; 157
    27de:	9d 4f       	sbci	r25, 0xFD	; 253
    27e0:	fc 01       	movw	r30, r24
    27e2:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:35
	if (port == NOT_A_PIN) return;
    27e4:	88 23       	and	r24, r24
    27e6:	c9 f0       	breq	.+50     	; 0x281a <pinMode+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:38
	reg = portModeRegister(port);
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	fc 01       	movw	r30, r24
    27f0:	e5 57       	subi	r30, 0x75	; 117
    27f2:	fd 4f       	sbci	r31, 0xFD	; 253
    27f4:	a5 91       	lpm	r26, Z+
    27f6:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:39
	out = portOutputRegister(port);
    27f8:	fc 01       	movw	r30, r24
    27fa:	ef 57       	subi	r30, 0x7F	; 127
    27fc:	fd 4f       	sbci	r31, 0xFD	; 253
    27fe:	c5 91       	lpm	r28, Z+
    2800:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:41
	if (mode == INPUT) { 
    2802:	61 11       	cpse	r22, r1
    2804:	0d c0       	rjmp	.+26     	; 0x2820 <pinMode+0x52>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:42
		uint8_t oldSREG = SREG;
    2806:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:43
                cli();
    2808:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:44
		*reg &= ~bit;
    280a:	8c 91       	ld	r24, X
    280c:	20 95       	com	r18
    280e:	82 23       	and	r24, r18
    2810:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:45
		*out &= ~bit;
    2812:	88 81       	ld	r24, Y
    2814:	28 23       	and	r18, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    2816:	28 83       	st	Y, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:52
		SREG = oldSREG;
    2818:	9f bf       	out	0x3f, r25	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:59
}
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:47
	} else if (mode == INPUT_PULLUP) {
    2820:	62 30       	cpi	r22, 0x02	; 2
    2822:	51 f4       	brne	.+20     	; 0x2838 <pinMode+0x6a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:48
		uint8_t oldSREG = SREG;
    2824:	9f b7       	in	r25, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:49
                cli();
    2826:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:50
		*reg &= ~bit;
    2828:	3c 91       	ld	r19, X
    282a:	82 2f       	mov	r24, r18
    282c:	80 95       	com	r24
    282e:	83 23       	and	r24, r19
    2830:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:51
		*out |= bit;
    2832:	e8 81       	ld	r30, Y
    2834:	2e 2b       	or	r18, r30
    2836:	ef cf       	rjmp	.-34     	; 0x2816 <pinMode+0x48>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:54
		uint8_t oldSREG = SREG;
    2838:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:55
                cli();
    283a:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:56
		*reg |= bit;
    283c:	ec 91       	ld	r30, X
    283e:	2e 2b       	or	r18, r30
    2840:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:57
		SREG = oldSREG;
    2842:	8f bf       	out	0x3f, r24	; 63
    2844:	ea cf       	rjmp	.-44     	; 0x281a <pinMode+0x4c>

00002846 <digitalWrite>:
digitalWrite():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:139
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2846:	1f 93       	push	r17
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	16 2f       	mov	r17, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:140
	uint8_t timer = digitalPinToTimer(pin);
    284e:	28 2f       	mov	r18, r24
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	f9 01       	movw	r30, r18
    2854:	e5 5c       	subi	r30, 0xC5	; 197
    2856:	fd 4f       	sbci	r31, 0xFD	; 253
    2858:	84 91       	lpm	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:141
	uint8_t bit = digitalPinToBitMask(pin);
    285a:	f9 01       	movw	r30, r18
    285c:	e1 5b       	subi	r30, 0xB1	; 177
    285e:	fd 4f       	sbci	r31, 0xFD	; 253
    2860:	d4 91       	lpm	r29, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:142
	uint8_t port = digitalPinToPort(pin);
    2862:	f9 01       	movw	r30, r18
    2864:	ed 59       	subi	r30, 0x9D	; 157
    2866:	fd 4f       	sbci	r31, 0xFD	; 253
    2868:	c4 91       	lpm	r28, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:145
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    286a:	cc 23       	and	r28, r28
    286c:	99 f0       	breq	.+38     	; 0x2894 <digitalWrite+0x4e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:149

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    286e:	81 11       	cpse	r24, r1
    2870:	85 df       	rcall	.-246    	; 0x277c <turnOffPWM>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:151

	out = portOutputRegister(port);
    2872:	ec 2f       	mov	r30, r28
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	ee 0f       	add	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	ef 57       	subi	r30, 0x7F	; 127
    287c:	fd 4f       	sbci	r31, 0xFD	; 253
    287e:	a5 91       	lpm	r26, Z+
    2880:	b4 91       	lpm	r27, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:153

	uint8_t oldSREG = SREG;
    2882:	8f b7       	in	r24, 0x3f	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:154
	cli();
    2884:	f8 94       	cli
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157

	if (val == LOW) {
		*out &= ~bit;
    2886:	ec 91       	ld	r30, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:156
	if (val == LOW) {
    2888:	11 11       	cpse	r17, r1
    288a:	08 c0       	rjmp	.+16     	; 0x289c <digitalWrite+0x56>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:157
		*out &= ~bit;
    288c:	d0 95       	com	r29
    288e:	de 23       	and	r29, r30
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
	} else {
		*out |= bit;
    2890:	dc 93       	st	X, r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:162
	}

	SREG = oldSREG;
    2892:	8f bf       	out	0x3f, r24	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:163
}
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/wiring_digital.c:159
		*out |= bit;
    289c:	de 2b       	or	r29, r30
    289e:	f8 cf       	rjmp	.-16     	; 0x2890 <digitalWrite+0x4a>

000028a0 <yield>:
__empty():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/hooks.c:28
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    28a0:	08 95       	ret

000028a2 <__vector_18>:
__vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    28a2:	1f 92       	push	r1
    28a4:	0f 92       	push	r0
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	0f 92       	push	r0
    28aa:	11 24       	eor	r1, r1
    28ac:	2f 93       	push	r18
    28ae:	8f 93       	push	r24
    28b0:	9f 93       	push	r25
    28b2:	ef 93       	push	r30
    28b4:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    28b6:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <Serial+0x10>
    28ba:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <Serial+0x11>
    28be:	80 81       	ld	r24, Z
    28c0:	e0 91 e4 04 	lds	r30, 0x04E4	; 0x8004e4 <Serial+0x16>
    28c4:	f0 91 e5 04 	lds	r31, 0x04E5	; 0x8004e5 <Serial+0x17>
    28c8:	82 fd       	sbrc	r24, 2
    28ca:	1b c0       	rjmp	.+54     	; 0x2902 <__vector_18+0x60>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    28cc:	90 81       	ld	r25, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    28ce:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <Serial+0x19>
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	8f 73       	andi	r24, 0x3F	; 63
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    28d6:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <Serial+0x1a>
    28da:	82 17       	cp	r24, r18
    28dc:	41 f0       	breq	.+16     	; 0x28ee <__vector_18+0x4c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    28de:	e0 91 e7 04 	lds	r30, 0x04E7	; 0x8004e7 <Serial+0x19>
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	e2 53       	subi	r30, 0x32	; 50
    28e6:	fb 4f       	sbci	r31, 0xFB	; 251
    28e8:	95 8f       	std	Z+29, r25	; 0x1d
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    28ea:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <Serial+0x19>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
    28ee:	ff 91       	pop	r31
    28f0:	ef 91       	pop	r30
    28f2:	9f 91       	pop	r25
    28f4:	8f 91       	pop	r24
    28f6:	2f 91       	pop	r18
    28f8:	0f 90       	pop	r0
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	0f 90       	pop	r0
    28fe:	1f 90       	pop	r1
    2900:	18 95       	reti
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2902:	80 81       	ld	r24, Z
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:50
    2904:	f4 cf       	rjmp	.-24     	; 0x28ee <__vector_18+0x4c>

00002906 <__vector_19>:
__vector_19():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2906:	1f 92       	push	r1
    2908:	0f 92       	push	r0
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	0f 92       	push	r0
    290e:	11 24       	eor	r1, r1
    2910:	2f 93       	push	r18
    2912:	3f 93       	push	r19
    2914:	4f 93       	push	r20
    2916:	5f 93       	push	r21
    2918:	6f 93       	push	r22
    291a:	7f 93       	push	r23
    291c:	8f 93       	push	r24
    291e:	9f 93       	push	r25
    2920:	af 93       	push	r26
    2922:	bf 93       	push	r27
    2924:	ef 93       	push	r30
    2926:	ff 93       	push	r31
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2928:	8e ec       	ldi	r24, 0xCE	; 206
    292a:	94 e0       	ldi	r25, 0x04	; 4
    292c:	a1 d1       	rcall	.+834    	; 0x2c70 <HardwareSerial::_tx_udr_empty_irq()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:65
}
    292e:	ff 91       	pop	r31
    2930:	ef 91       	pop	r30
    2932:	bf 91       	pop	r27
    2934:	af 91       	pop	r26
    2936:	9f 91       	pop	r25
    2938:	8f 91       	pop	r24
    293a:	7f 91       	pop	r23
    293c:	6f 91       	pop	r22
    293e:	5f 91       	pop	r21
    2940:	4f 91       	pop	r20
    2942:	3f 91       	pop	r19
    2944:	2f 91       	pop	r18
    2946:	0f 90       	pop	r0
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	0f 90       	pop	r0
    294c:	1f 90       	pop	r1
    294e:	18 95       	reti

00002950 <Serial0_available()>:
_Z17Serial0_availablev():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2950:	8e ec       	ldi	r24, 0xCE	; 206
    2952:	94 e0       	ldi	r25, 0x04	; 4
    2954:	52 d1       	rcall	.+676    	; 0x2bfa <HardwareSerial::available()>
    2956:	21 e0       	ldi	r18, 0x01	; 1
    2958:	89 2b       	or	r24, r25
    295a:	09 f4       	brne	.+2      	; 0x295e <Serial0_available()+0xe>
    295c:	20 e0       	ldi	r18, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial0.cpp:77
}
    295e:	82 2f       	mov	r24, r18
    2960:	08 95       	ret

00002962 <_GLOBAL__sub_I___vector_18>:
_GLOBAL__sub_I___vector_18():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:43
    2962:	ee ec       	ldi	r30, 0xCE	; 206
    2964:	f4 e0       	ldi	r31, 0x04	; 4
    2966:	13 82       	std	Z+3, r1	; 0x03
    2968:	12 82       	std	Z+2, r1	; 0x02
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Stream.h:64
    296a:	88 ee       	ldi	r24, 0xE8	; 232
    296c:	93 e0       	ldi	r25, 0x03	; 3
    296e:	a0 e0       	ldi	r26, 0x00	; 0
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	84 83       	std	Z+4, r24	; 0x04
    2974:	95 83       	std	Z+5, r25	; 0x05
    2976:	a6 83       	std	Z+6, r26	; 0x06
    2978:	b7 83       	std	Z+7, r27	; 0x07
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial_private.h:95
    _tx_buffer_head(0), _tx_buffer_tail(0)
    297a:	8c ea       	ldi	r24, 0xAC	; 172
    297c:	92 e0       	ldi	r25, 0x02	; 2
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	85 ec       	ldi	r24, 0xC5	; 197
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	95 87       	std	Z+13, r25	; 0x0d
    2988:	84 87       	std	Z+12, r24	; 0x0c
    298a:	84 ec       	ldi	r24, 0xC4	; 196
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	97 87       	std	Z+15, r25	; 0x0f
    2990:	86 87       	std	Z+14, r24	; 0x0e
    2992:	80 ec       	ldi	r24, 0xC0	; 192
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	91 8b       	std	Z+17, r25	; 0x11
    2998:	80 8b       	std	Z+16, r24	; 0x10
    299a:	81 ec       	ldi	r24, 0xC1	; 193
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	93 8b       	std	Z+19, r25	; 0x13
    29a0:	82 8b       	std	Z+18, r24	; 0x12
    29a2:	82 ec       	ldi	r24, 0xC2	; 194
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	95 8b       	std	Z+21, r25	; 0x15
    29a8:	84 8b       	std	Z+20, r24	; 0x14
    29aa:	86 ec       	ldi	r24, 0xC6	; 198
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	97 8b       	std	Z+23, r25	; 0x17
    29b0:	86 8b       	std	Z+22, r24	; 0x16
    29b2:	11 8e       	std	Z+25, r1	; 0x19
    29b4:	12 8e       	std	Z+26, r1	; 0x1a
    29b6:	13 8e       	std	Z+27, r1	; 0x1b
    29b8:	14 8e       	std	Z+28, r1	; 0x1c
    29ba:	08 95       	ret

000029bc <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    29bc:	cf 92       	push	r12
    29be:	df 92       	push	r13
    29c0:	ef 92       	push	r14
    29c2:	ff 92       	push	r15
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	7c 01       	movw	r14, r24
    29ce:	6a 01       	movw	r12, r20
    29d0:	8b 01       	movw	r16, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:36
  size_t n = 0;
    29d2:	c0 e0       	ldi	r28, 0x00	; 0
    29d4:	d0 e0       	ldi	r29, 0x00	; 0
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:37
  while (size--) {
    29d6:	cc 15       	cp	r28, r12
    29d8:	dd 05       	cpc	r29, r13
    29da:	79 f0       	breq	.+30     	; 0x29fa <Print::write(unsigned char const*, unsigned int)+0x3e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:38
    if (write(*buffer++)) n++;
    29dc:	d8 01       	movw	r26, r16
    29de:	6d 91       	ld	r22, X+
    29e0:	8d 01       	movw	r16, r26
    29e2:	d7 01       	movw	r26, r14
    29e4:	ed 91       	ld	r30, X+
    29e6:	fc 91       	ld	r31, X
    29e8:	01 90       	ld	r0, Z+
    29ea:	f0 81       	ld	r31, Z
    29ec:	e0 2d       	mov	r30, r0
    29ee:	c7 01       	movw	r24, r14
    29f0:	09 95       	icall
    29f2:	89 2b       	or	r24, r25
    29f4:	11 f0       	breq	.+4      	; 0x29fa <Print::write(unsigned char const*, unsigned int)+0x3e>
    29f6:	21 96       	adiw	r28, 0x01	; 1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:37
  while (size--) {
    29f8:	ee cf       	rjmp	.-36     	; 0x29d6 <Print::write(unsigned char const*, unsigned int)+0x1a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:42
    else break;
  }
  return n;
}
    29fa:	ce 01       	movw	r24, r28
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	1f 91       	pop	r17
    2a02:	0f 91       	pop	r16
    2a04:	ff 90       	pop	r15
    2a06:	ef 90       	pop	r14
    2a08:	df 90       	pop	r13
    2a0a:	cf 90       	pop	r12
    2a0c:	08 95       	ret

00002a0e <Print::write(char const*)>:
_ZN5Print5writeEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:50
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2a0e:	61 15       	cp	r22, r1
    2a10:	71 05       	cpc	r23, r1
    2a12:	79 f0       	breq	.+30     	; 0x2a32 <Print::write(char const*)+0x24>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:51
      return write((const uint8_t *)str, strlen(str));
    2a14:	fb 01       	movw	r30, r22
    2a16:	01 90       	ld	r0, Z+
    2a18:	00 20       	and	r0, r0
    2a1a:	e9 f7       	brne	.-6      	; 0x2a16 <Print::write(char const*)+0x8>
    2a1c:	31 97       	sbiw	r30, 0x01	; 1
    2a1e:	af 01       	movw	r20, r30
    2a20:	46 1b       	sub	r20, r22
    2a22:	57 0b       	sbc	r21, r23
    2a24:	dc 01       	movw	r26, r24
    2a26:	ed 91       	ld	r30, X+
    2a28:	fc 91       	ld	r31, X
    2a2a:	02 80       	ldd	r0, Z+2	; 0x02
    2a2c:	f3 81       	ldd	r31, Z+3	; 0x03
    2a2e:	e0 2d       	mov	r30, r0
    2a30:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.h:52
    }
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	08 95       	ret

00002a38 <Print::print(char const*)>:
_ZN5Print5printEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:63
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
    2a38:	ea cf       	rjmp	.-44     	; 0x2a0e <Print::write(char const*)>

00002a3a <Print::print(char)>:
_ZN5Print5printEc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:69
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	ed 91       	ld	r30, X+
    2a3e:	fc 91       	ld	r31, X
    2a40:	01 90       	ld	r0, Z+
    2a42:	f0 81       	ld	r31, Z
    2a44:	e0 2d       	mov	r30, r0
    2a46:	09 94       	ijmp

00002a48 <Print::println()>:
_ZN5Print7printlnEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:128
  return x.printTo(*this);
}

size_t Print::println(void)
{
  return write("\r\n");
    2a48:	65 ea       	ldi	r22, 0xA5	; 165
    2a4a:	72 e0       	ldi	r23, 0x02	; 2
    2a4c:	e0 cf       	rjmp	.-64     	; 0x2a0e <Print::write(char const*)>

00002a4e <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:139
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
    2a52:	cf 93       	push	r28
    2a54:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:64
  return write(str);
    2a56:	ec 01       	movw	r28, r24
    2a58:	da df       	rcall	.-76     	; 0x2a0e <Print::write(char const*)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:141
  size_t n = print(c);
  n += println();
    2a5a:	8c 01       	movw	r16, r24
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	f4 df       	rcall	.-24     	; 0x2a48 <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:143
  return n;
}
    2a60:	80 0f       	add	r24, r16
    2a62:	91 1f       	adc	r25, r17
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	08 95       	ret

00002a6e <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:204
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    2a6e:	8f 92       	push	r8
    2a70:	9f 92       	push	r9
    2a72:	af 92       	push	r10
    2a74:	bf 92       	push	r11
    2a76:	ef 92       	push	r14
    2a78:	ff 92       	push	r15
    2a7a:	0f 93       	push	r16
    2a7c:	1f 93       	push	r17
    2a7e:	cf 93       	push	r28
    2a80:	df 93       	push	r29
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	a1 97       	sbiw	r28, 0x21	; 33
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
    2a92:	7c 01       	movw	r14, r24
    2a94:	fa 01       	movw	r30, r20
    2a96:	cb 01       	movw	r24, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:208
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    2a98:	19 a2       	std	Y+33, r1	; 0x21
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:211

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    2a9a:	42 2f       	mov	r20, r18
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	42 30       	cpi	r20, 0x02	; 2
    2aa0:	51 05       	cpc	r21, r1
    2aa2:	0c f4       	brge	.+2      	; 0x2aa6 <Print::printNumber(unsigned long, unsigned char)+0x38>
    2aa4:	2a e0       	ldi	r18, 0x0A	; 10
    2aa6:	8e 01       	movw	r16, r28
    2aa8:	0f 5d       	subi	r16, 0xDF	; 223
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:214

  do {
    char c = n % base;
    2aac:	82 2e       	mov	r8, r18
    2aae:	91 2c       	mov	r9, r1
    2ab0:	a1 2c       	mov	r10, r1
    2ab2:	b1 2c       	mov	r11, r1
    2ab4:	bf 01       	movw	r22, r30
    2ab6:	a5 01       	movw	r20, r10
    2ab8:	94 01       	movw	r18, r8
    2aba:	d4 d1       	rcall	.+936    	; 0x2e64 <__udivmodsi4>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:215
    n /= base;
    2abc:	f9 01       	movw	r30, r18
    2abe:	ca 01       	movw	r24, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2ac0:	01 50       	subi	r16, 0x01	; 1
    2ac2:	11 09       	sbc	r17, r1
    2ac4:	6a 30       	cpi	r22, 0x0A	; 10
    2ac6:	dc f4       	brge	.+54     	; 0x2afe <Print::printNumber(unsigned long, unsigned char)+0x90>
    2ac8:	60 5d       	subi	r22, 0xD0	; 208
    2aca:	d8 01       	movw	r26, r16
    2acc:	6c 93       	st	X, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:218
  } while(n);
    2ace:	23 2b       	or	r18, r19
    2ad0:	24 2b       	or	r18, r20
    2ad2:	25 2b       	or	r18, r21
    2ad4:	79 f7       	brne	.-34     	; 0x2ab4 <Print::printNumber(unsigned long, unsigned char)+0x46>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:220

  return write(str);
    2ad6:	b8 01       	movw	r22, r16
    2ad8:	c7 01       	movw	r24, r14
    2ada:	99 df       	rcall	.-206    	; 0x2a0e <Print::write(char const*)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:221
}
    2adc:	a1 96       	adiw	r28, 0x21	; 33
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	1f 91       	pop	r17
    2aee:	0f 91       	pop	r16
    2af0:	ff 90       	pop	r15
    2af2:	ef 90       	pop	r14
    2af4:	bf 90       	pop	r11
    2af6:	af 90       	pop	r10
    2af8:	9f 90       	pop	r9
    2afa:	8f 90       	pop	r8
    2afc:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:217
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2afe:	69 5c       	subi	r22, 0xC9	; 201
    2b00:	e4 cf       	rjmp	.-56     	; 0x2aca <Print::printNumber(unsigned long, unsigned char)+0x5c>

00002b02 <Print::print(long, int)>:
_ZN5Print5printEli():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:88
{
    2b02:	cf 92       	push	r12
    2b04:	df 92       	push	r13
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	ec 01       	movw	r28, r24
    2b14:	6a 01       	movw	r12, r20
    2b16:	7b 01       	movw	r14, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:89
  if (base == 0) {
    2b18:	21 15       	cp	r18, r1
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	79 f4       	brne	.+30     	; 0x2b3c <Print::print(long, int)+0x3a>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    2b1e:	e8 81       	ld	r30, Y
    2b20:	f9 81       	ldd	r31, Y+1	; 0x01
    2b22:	01 90       	ld	r0, Z+
    2b24:	f0 81       	ld	r31, Z
    2b26:	e0 2d       	mov	r30, r0
    2b28:	64 2f       	mov	r22, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	1f 91       	pop	r17
    2b30:	0f 91       	pop	r16
    2b32:	ff 90       	pop	r15
    2b34:	ef 90       	pop	r14
    2b36:	df 90       	pop	r13
    2b38:	cf 90       	pop	r12
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:90
    return write(n);
    2b3a:	09 94       	ijmp
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:91
  } else if (base == 10) {
    2b3c:	2a 30       	cpi	r18, 0x0A	; 10
    2b3e:	31 05       	cpc	r19, r1
    2b40:	d9 f4       	brne	.+54     	; 0x2b78 <Print::print(long, int)+0x76>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:92
    if (n < 0) {
    2b42:	77 ff       	sbrs	r23, 7
    2b44:	18 c0       	rjmp	.+48     	; 0x2b76 <Print::print(long, int)+0x74>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:93
      int t = print('-');
    2b46:	6d e2       	ldi	r22, 0x2D	; 45
    2b48:	78 df       	rcall	.-272    	; 0x2a3a <Print::print(char)>
    2b4a:	8c 01       	movw	r16, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:94
      n = -n;
    2b4c:	44 27       	eor	r20, r20
    2b4e:	55 27       	eor	r21, r21
    2b50:	ba 01       	movw	r22, r20
    2b52:	4c 19       	sub	r20, r12
    2b54:	5d 09       	sbc	r21, r13
    2b56:	6e 09       	sbc	r22, r14
    2b58:	7f 09       	sbc	r23, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:95
      return printNumber(n, 10) + t;
    2b5a:	2a e0       	ldi	r18, 0x0A	; 10
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	87 df       	rcall	.-242    	; 0x2a6e <Print::printNumber(unsigned long, unsigned char)>
    2b60:	80 0f       	add	r24, r16
    2b62:	91 1f       	adc	r25, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	1f 91       	pop	r17
    2b6a:	0f 91       	pop	r16
    2b6c:	ff 90       	pop	r15
    2b6e:	ef 90       	pop	r14
    2b70:	df 90       	pop	r13
    2b72:	cf 90       	pop	r12
    2b74:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:97
    return printNumber(n, 10);
    2b76:	2a e0       	ldi	r18, 0x0A	; 10
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    2b78:	b7 01       	movw	r22, r14
    2b7a:	a6 01       	movw	r20, r12
    2b7c:	ce 01       	movw	r24, r28
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:101
}
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	ff 90       	pop	r15
    2b88:	ef 90       	pop	r14
    2b8a:	df 90       	pop	r13
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:99
    return printNumber(n, base);
    2b8c:	cf 90       	pop	r12
    2b8e:	6f cf       	rjmp	.-290    	; 0x2a6e <Print::printNumber(unsigned long, unsigned char)>

00002b90 <Print::print(int, int)>:
_ZN5Print5printEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:78
{
    2b90:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:79
  return print((long) n, base);
    2b92:	ab 01       	movw	r20, r22
    2b94:	77 0f       	add	r23, r23
    2b96:	66 0b       	sbc	r22, r22
    2b98:	77 0b       	sbc	r23, r23
    2b9a:	b3 cf       	rjmp	.-154    	; 0x2b02 <Print::print(long, int)>

00002b9c <Print::println(int, int)>:
_ZN5Print7printlnEii():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:160
{
    2b9c:	0f 93       	push	r16
    2b9e:	1f 93       	push	r17
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:161
  size_t n = print(num, base);
    2ba4:	ec 01       	movw	r28, r24
    2ba6:	f4 df       	rcall	.-24     	; 0x2b90 <Print::print(int, int)>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:162
  n += println();
    2ba8:	8c 01       	movw	r16, r24
    2baa:	ce 01       	movw	r24, r28
    2bac:	4d df       	rcall	.-358    	; 0x2a48 <Print::println()>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:164
}
    2bae:	80 0f       	add	r24, r16
    2bb0:	91 1f       	adc	r25, r17
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	08 95       	ret

00002bbc <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:105
  if (base == 0) return write(n);
    2bbc:	21 15       	cp	r18, r1
    2bbe:	31 05       	cpc	r19, r1
    2bc0:	41 f4       	brne	.+16     	; 0x2bd2 <Print::print(unsigned long, int)+0x16>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	ed 91       	ld	r30, X+
    2bc6:	fc 91       	ld	r31, X
    2bc8:	01 90       	ld	r0, Z+
    2bca:	f0 81       	ld	r31, Z
    2bcc:	e0 2d       	mov	r30, r0
    2bce:	64 2f       	mov	r22, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:106
  else return printNumber(n, base);
    2bd0:	09 94       	ijmp
    2bd2:	4d cf       	rjmp	.-358    	; 0x2a6e <Print::printNumber(unsigned long, unsigned char)>

00002bd4 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:83
{
    2bd4:	9a 01       	movw	r18, r20
/usr/share/arduino/hardware/arduino/avr/cores/arduino/Print.cpp:84
  return print((unsigned long) n, base);
    2bd6:	ab 01       	movw	r20, r22
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	ef cf       	rjmp	.-34     	; 0x2bbc <Print::print(unsigned long, int)>

00002bde <operator new[](unsigned int)>:
_Znaj():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/new.cpp:25

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
    2bde:	9a c1       	rjmp	.+820    	; 0x2f14 <malloc>

00002be0 <initVariant>:
    2be0:	08 95       	ret

00002be2 <main>:
main():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:37

int main(void)
{
	init();

	initVariant();
    2be2:	91 dd       	rcall	.-1246   	; 0x2706 <init>
    2be4:	fd df       	rcall	.-6      	; 0x2be0 <initVariant>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:43

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2be6:	0e 94 4c 02 	call	0x498	; 0x498 <setup>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2bea:	cb e2       	ldi	r28, 0x2B	; 43
    2bec:	d6 e1       	ldi	r29, 0x16	; 22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:46
		loop();
    2bee:	0e 94 77 01 	call	0x2ee	; 0x2ee <loop>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/main.cpp:47
		if (serialEventRun) serialEventRun();
    2bf2:	20 97       	sbiw	r28, 0x00	; 0
    2bf4:	e1 f3       	breq	.-8      	; 0x2bee <main+0xc>
    2bf6:	2f d0       	rcall	.+94     	; 0x2c56 <serialEventRun()>
    2bf8:	fa cf       	rjmp	.-12     	; 0x2bee <main+0xc>

00002bfa <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:153
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2bfa:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:154
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2bfc:	91 8d       	ldd	r25, Z+25	; 0x19
    2bfe:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c00:	89 2f       	mov	r24, r25
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	80 5c       	subi	r24, 0xC0	; 192
    2c06:	9f 4f       	sbci	r25, 0xFF	; 255
    2c08:	82 1b       	sub	r24, r18
    2c0a:	91 09       	sbc	r25, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:155
}
    2c0c:	8f 73       	andi	r24, 0x3F	; 63
    2c0e:	99 27       	eor	r25, r25
    2c10:	08 95       	ret

00002c12 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:158

int HardwareSerial::peek(void)
{
    2c12:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:159
  if (_rx_buffer_head == _rx_buffer_tail) {
    2c14:	91 8d       	ldd	r25, Z+25	; 0x19
    2c16:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c18:	98 17       	cp	r25, r24
    2c1a:	31 f0       	breq	.+12     	; 0x2c28 <HardwareSerial::peek()+0x16>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:162
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2c1c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c1e:	e8 0f       	add	r30, r24
    2c20:	f1 1d       	adc	r31, r1
    2c22:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:160
    return -1;
    2c28:	8f ef       	ldi	r24, 0xFF	; 255
    2c2a:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:164
  }
}
    2c2c:	08 95       	ret

00002c2e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
    2c2e:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:169
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2c30:	91 8d       	ldd	r25, Z+25	; 0x19
    2c32:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c34:	98 17       	cp	r25, r24
    2c36:	61 f0       	breq	.+24     	; 0x2c50 <HardwareSerial::read()+0x22>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:172
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2c38:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c3a:	df 01       	movw	r26, r30
    2c3c:	a8 0f       	add	r26, r24
    2c3e:	b1 1d       	adc	r27, r1
    2c40:	5d 96       	adiw	r26, 0x1d	; 29
    2c42:	8c 91       	ld	r24, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:173
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2c44:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c46:	9f 5f       	subi	r25, 0xFF	; 255
    2c48:	9f 73       	andi	r25, 0x3F	; 63
    2c4a:	92 8f       	std	Z+26, r25	; 0x1a
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:174
    return c;
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:170
    return -1;
    2c50:	8f ef       	ldi	r24, 0xFF	; 255
    2c52:	9f ef       	ldi	r25, 0xFF	; 255
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:176
  }
}
    2c54:	08 95       	ret

00002c56 <serialEventRun()>:
_Z14serialEventRunv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:66
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2c56:	88 ea       	ldi	r24, 0xA8	; 168
    2c58:	94 e1       	ldi	r25, 0x14	; 20
    2c5a:	89 2b       	or	r24, r25
    2c5c:	41 f0       	breq	.+16     	; 0x2c6e <serialEventRun()+0x18>
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	89 2b       	or	r24, r25
    2c64:	21 f0       	breq	.+8      	; 0x2c6e <serialEventRun()+0x18>
    2c66:	74 de       	rcall	.-792    	; 0x2950 <Serial0_available()>
    2c68:	81 11       	cpse	r24, r1
    2c6a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2c6e:	08 95       	ret

00002c70 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:82
{
    2c70:	fc 01       	movw	r30, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:85
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2c72:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c74:	df 01       	movw	r26, r30
    2c76:	a8 0f       	add	r26, r24
    2c78:	b1 1d       	adc	r27, r1
    2c7a:	a3 5a       	subi	r26, 0xA3	; 163
    2c7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c7e:	2c 91       	ld	r18, X
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2c80:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	01 96       	adiw	r24, 0x01	; 1
    2c86:	8f 73       	andi	r24, 0x3F	; 63
    2c88:	99 27       	eor	r25, r25
    2c8a:	84 8f       	std	Z+28, r24	; 0x1c
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:88
  *_udr = c;
    2c8c:	a6 89       	ldd	r26, Z+22	; 0x16
    2c8e:	b7 89       	ldd	r27, Z+23	; 0x17
    2c90:	2c 93       	st	X, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:93
  sbi(*_ucsra, TXC0);
    2c92:	a0 89       	ldd	r26, Z+16	; 0x10
    2c94:	b1 89       	ldd	r27, Z+17	; 0x11
    2c96:	8c 91       	ld	r24, X
    2c98:	80 64       	ori	r24, 0x40	; 64
    2c9a:	8c 93       	st	X, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:95
  if (_tx_buffer_head == _tx_buffer_tail) {
    2c9c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c9e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ca0:	98 13       	cpse	r25, r24
    2ca2:	06 c0       	rjmp	.+12     	; 0x2cb0 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:97
    cbi(*_ucsrb, UDRIE0);
    2ca4:	02 88       	ldd	r0, Z+18	; 0x12
    2ca6:	f3 89       	ldd	r31, Z+19	; 0x13
    2ca8:	e0 2d       	mov	r30, r0
    2caa:	80 81       	ld	r24, Z
    2cac:	8f 7d       	andi	r24, 0xDF	; 223
    2cae:	80 83       	st	Z, r24
    2cb0:	08 95       	ret

00002cb2 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:194
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	ec 01       	movw	r28, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:198
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2cb8:	88 8d       	ldd	r24, Y+24	; 0x18
    2cba:	88 23       	and	r24, r24
    2cbc:	51 f0       	breq	.+20     	; 0x2cd2 <HardwareSerial::flush()+0x20>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:201
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2cbe:	ea 89       	ldd	r30, Y+18	; 0x12
    2cc0:	fb 89       	ldd	r31, Y+19	; 0x13
    2cc2:	80 81       	ld	r24, Z
    2cc4:	85 fd       	sbrc	r24, 5
    2cc6:	08 c0       	rjmp	.+16     	; 0x2cd8 <HardwareSerial::flush()+0x26>
    2cc8:	a8 89       	ldd	r26, Y+16	; 0x10
    2cca:	b9 89       	ldd	r27, Y+17	; 0x11
    2ccc:	8c 91       	ld	r24, X
    2cce:	86 ff       	sbrs	r24, 6
    2cd0:	03 c0       	rjmp	.+6      	; 0x2cd8 <HardwareSerial::flush()+0x26>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:211
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:202
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	07 fc       	sbrc	r0, 7
    2cdc:	f2 cf       	rjmp	.-28     	; 0x2cc2 <HardwareSerial::flush()+0x10>
    2cde:	80 81       	ld	r24, Z
    2ce0:	85 ff       	sbrs	r24, 5
    2ce2:	ef cf       	rjmp	.-34     	; 0x2cc2 <HardwareSerial::flush()+0x10>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:206
	if (bit_is_set(*_ucsra, UDRE0))
    2ce4:	e8 89       	ldd	r30, Y+16	; 0x10
    2ce6:	f9 89       	ldd	r31, Y+17	; 0x11
    2ce8:	80 81       	ld	r24, Z
    2cea:	85 ff       	sbrs	r24, 5
    2cec:	e8 cf       	rjmp	.-48     	; 0x2cbe <HardwareSerial::flush()+0xc>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:207
	  _tx_udr_empty_irq();
    2cee:	ce 01       	movw	r24, r28
    2cf0:	bf df       	rcall	.-130    	; 0x2c70 <HardwareSerial::_tx_udr_empty_irq()>
    2cf2:	e5 cf       	rjmp	.-54     	; 0x2cbe <HardwareSerial::flush()+0xc>

00002cf4 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:214

size_t HardwareSerial::write(uint8_t c)
{
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	ec 01       	movw	r28, r24
    2d02:	f6 2e       	mov	r15, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:215
  _written = true;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	88 8f       	std	Y+24, r24	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:220
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2d08:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d0c:	98 13       	cpse	r25, r24
    2d0e:	05 c0       	rjmp	.+10     	; 0x2d1a <HardwareSerial::write(unsigned char)+0x26>
    2d10:	e8 89       	ldd	r30, Y+16	; 0x10
    2d12:	f9 89       	ldd	r31, Y+17	; 0x11
    2d14:	80 81       	ld	r24, Z
    2d16:	85 fd       	sbrc	r24, 5
    2d18:	2b c0       	rjmp	.+86     	; 0x2d70 <HardwareSerial::write(unsigned char)+0x7c>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:225
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2d1a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2d1c:	10 e0       	ldi	r17, 0x00	; 0
    2d1e:	0f 5f       	subi	r16, 0xFF	; 255
    2d20:	1f 4f       	sbci	r17, 0xFF	; 255
    2d22:	0f 73       	andi	r16, 0x3F	; 63
    2d24:	11 27       	eor	r17, r17
    2d26:	e0 2e       	mov	r14, r16
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:229
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2d28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d2a:	e8 12       	cpse	r14, r24
    2d2c:	0b c0       	rjmp	.+22     	; 0x2d44 <HardwareSerial::write(unsigned char)+0x50>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:230
    if (bit_is_clear(SREG, SREG_I)) {
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	07 fc       	sbrc	r0, 7
    2d32:	fa cf       	rjmp	.-12     	; 0x2d28 <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:235
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2d34:	e8 89       	ldd	r30, Y+16	; 0x10
    2d36:	f9 89       	ldd	r31, Y+17	; 0x11
    2d38:	80 81       	ld	r24, Z
    2d3a:	85 ff       	sbrs	r24, 5
    2d3c:	f5 cf       	rjmp	.-22     	; 0x2d28 <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:236
	_tx_udr_empty_irq();
    2d3e:	ce 01       	movw	r24, r28
    2d40:	97 df       	rcall	.-210    	; 0x2c70 <HardwareSerial::_tx_udr_empty_irq()>
    2d42:	f2 cf       	rjmp	.-28     	; 0x2d28 <HardwareSerial::write(unsigned char)+0x34>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:242
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d46:	fe 01       	movw	r30, r28
    2d48:	e8 0f       	add	r30, r24
    2d4a:	f1 1d       	adc	r31, r1
    2d4c:	e3 5a       	subi	r30, 0xA3	; 163
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	f0 82       	st	Z, r15
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:243
  _tx_buffer_head = i;
    2d52:	0b 8f       	std	Y+27, r16	; 0x1b
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:245
	
  sbi(*_ucsrb, UDRIE0);
    2d54:	ea 89       	ldd	r30, Y+18	; 0x12
    2d56:	fb 89       	ldd	r31, Y+19	; 0x13
    2d58:	80 81       	ld	r24, Z
    2d5a:	80 62       	ori	r24, 0x20	; 32
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
    2d5c:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:248
  
  return 1;
}
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	08 95       	ret
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:221
    *_udr = c;
    2d70:	ee 89       	ldd	r30, Y+22	; 0x16
    2d72:	ff 89       	ldd	r31, Y+23	; 0x17
    2d74:	60 83       	st	Z, r22
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:222
    sbi(*_ucsra, TXC0);
    2d76:	e8 89       	ldd	r30, Y+16	; 0x10
    2d78:	f9 89       	ldd	r31, Y+17	; 0x11
    2d7a:	80 81       	ld	r24, Z
    2d7c:	80 64       	ori	r24, 0x40	; 64
    2d7e:	ee cf       	rjmp	.-36     	; 0x2d5c <HardwareSerial::write(unsigned char)+0x68>

00002d80 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:104
{
    2d80:	cf 92       	push	r12
    2d82:	df 92       	push	r13
    2d84:	ef 92       	push	r14
    2d86:	ff 92       	push	r15
    2d88:	1f 93       	push	r17
    2d8a:	cf 93       	push	r28
    2d8c:	df 93       	push	r29
    2d8e:	ec 01       	movw	r28, r24
    2d90:	6a 01       	movw	r12, r20
    2d92:	7b 01       	movw	r14, r22
    2d94:	12 2f       	mov	r17, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:107
  *_ucsra = 1 << U2X0;
    2d96:	e8 89       	ldd	r30, Y+16	; 0x10
    2d98:	f9 89       	ldd	r31, Y+17	; 0x11
    2d9a:	82 e0       	ldi	r24, 0x02	; 2
    2d9c:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2d9e:	41 15       	cp	r20, r1
    2da0:	51 4e       	sbci	r21, 0xE1	; 225
    2da2:	61 05       	cpc	r22, r1
    2da4:	71 05       	cpc	r23, r1
    2da6:	99 f0       	breq	.+38     	; 0x2dce <HardwareSerial::begin(unsigned long, unsigned char)+0x4e>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:106
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	79 e0       	ldi	r23, 0x09	; 9
    2dac:	8d e3       	ldi	r24, 0x3D	; 61
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	a7 01       	movw	r20, r14
    2db2:	96 01       	movw	r18, r12
    2db4:	57 d0       	rcall	.+174    	; 0x2e64 <__udivmodsi4>
    2db6:	21 50       	subi	r18, 0x01	; 1
    2db8:	31 09       	sbc	r19, r1
    2dba:	41 09       	sbc	r20, r1
    2dbc:	51 09       	sbc	r21, r1
    2dbe:	56 95       	lsr	r21
    2dc0:	47 95       	ror	r20
    2dc2:	37 95       	ror	r19
    2dc4:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:114
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2dc6:	21 15       	cp	r18, r1
    2dc8:	80 e1       	ldi	r24, 0x10	; 16
    2dca:	38 07       	cpc	r19, r24
    2dcc:	90 f0       	brcs	.+36     	; 0x2df2 <HardwareSerial::begin(unsigned long, unsigned char)+0x72>
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:116
    *_ucsra = 0;
    2dce:	e8 89       	ldd	r30, Y+16	; 0x10
    2dd0:	f9 89       	ldd	r31, Y+17	; 0x11
    2dd2:	10 82       	st	Z, r1
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2dd4:	60 e8       	ldi	r22, 0x80	; 128
    2dd6:	74 e8       	ldi	r23, 0x84	; 132
    2dd8:	8e e1       	ldi	r24, 0x1E	; 30
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	a7 01       	movw	r20, r14
    2dde:	96 01       	movw	r18, r12
    2de0:	41 d0       	rcall	.+130    	; 0x2e64 <__udivmodsi4>
    2de2:	21 50       	subi	r18, 0x01	; 1
    2de4:	31 09       	sbc	r19, r1
    2de6:	41 09       	sbc	r20, r1
    2de8:	51 09       	sbc	r21, r1
    2dea:	56 95       	lsr	r21
    2dec:	47 95       	ror	r20
    2dee:	37 95       	ror	r19
    2df0:	27 95       	ror	r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:121
  *_ubrrh = baud_setting >> 8;
    2df2:	ec 85       	ldd	r30, Y+12	; 0x0c
    2df4:	fd 85       	ldd	r31, Y+13	; 0x0d
    2df6:	30 83       	st	Z, r19
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    2df8:	ee 85       	ldd	r30, Y+14	; 0x0e
    2dfa:	ff 85       	ldd	r31, Y+15	; 0x0f
    2dfc:	20 83       	st	Z, r18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:124
  _written = false;
    2dfe:	18 8e       	std	Y+24, r1	; 0x18
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:130
  *_ucsrc = config;
    2e00:	ec 89       	ldd	r30, Y+20	; 0x14
    2e02:	fd 89       	ldd	r31, Y+21	; 0x15
    2e04:	10 83       	st	Z, r17
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:132
  sbi(*_ucsrb, RXEN0);
    2e06:	ea 89       	ldd	r30, Y+18	; 0x12
    2e08:	fb 89       	ldd	r31, Y+19	; 0x13
    2e0a:	80 81       	ld	r24, Z
    2e0c:	80 61       	ori	r24, 0x10	; 16
    2e0e:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:133
  sbi(*_ucsrb, TXEN0);
    2e10:	ea 89       	ldd	r30, Y+18	; 0x12
    2e12:	fb 89       	ldd	r31, Y+19	; 0x13
    2e14:	80 81       	ld	r24, Z
    2e16:	88 60       	ori	r24, 0x08	; 8
    2e18:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:134
  sbi(*_ucsrb, RXCIE0);
    2e1a:	ea 89       	ldd	r30, Y+18	; 0x12
    2e1c:	fb 89       	ldd	r31, Y+19	; 0x13
    2e1e:	80 81       	ld	r24, Z
    2e20:	80 68       	ori	r24, 0x80	; 128
    2e22:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:135
  cbi(*_ucsrb, UDRIE0);
    2e24:	ea 89       	ldd	r30, Y+18	; 0x12
    2e26:	fb 89       	ldd	r31, Y+19	; 0x13
    2e28:	80 81       	ld	r24, Z
    2e2a:	8f 7d       	andi	r24, 0xDF	; 223
    2e2c:	80 83       	st	Z, r24
/usr/share/arduino/hardware/arduino/avr/cores/arduino/HardwareSerial.cpp:136
}
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
    2e34:	ff 90       	pop	r15
    2e36:	ef 90       	pop	r14
    2e38:	df 90       	pop	r13
    2e3a:	cf 90       	pop	r12
    2e3c:	08 95       	ret

00002e3e <__divmodhi4>:
    2e3e:	97 fb       	bst	r25, 7
    2e40:	07 2e       	mov	r0, r23
    2e42:	16 f4       	brtc	.+4      	; 0x2e48 <__divmodhi4+0xa>
    2e44:	00 94       	com	r0
    2e46:	06 d0       	rcall	.+12     	; 0x2e54 <__divmodhi4_neg1>
    2e48:	77 fd       	sbrc	r23, 7
    2e4a:	08 d0       	rcall	.+16     	; 0x2e5c <__divmodhi4_neg2>
    2e4c:	49 d0       	rcall	.+146    	; 0x2ee0 <__udivmodhi4>
    2e4e:	07 fc       	sbrc	r0, 7
    2e50:	05 d0       	rcall	.+10     	; 0x2e5c <__divmodhi4_neg2>
    2e52:	3e f4       	brtc	.+14     	; 0x2e62 <__divmodhi4_exit>

00002e54 <__divmodhi4_neg1>:
    2e54:	90 95       	com	r25
    2e56:	81 95       	neg	r24
    2e58:	9f 4f       	sbci	r25, 0xFF	; 255
    2e5a:	08 95       	ret

00002e5c <__divmodhi4_neg2>:
    2e5c:	70 95       	com	r23
    2e5e:	61 95       	neg	r22
    2e60:	7f 4f       	sbci	r23, 0xFF	; 255

00002e62 <__divmodhi4_exit>:
    2e62:	08 95       	ret

00002e64 <__udivmodsi4>:
    2e64:	a1 e2       	ldi	r26, 0x21	; 33
    2e66:	1a 2e       	mov	r1, r26
    2e68:	aa 1b       	sub	r26, r26
    2e6a:	bb 1b       	sub	r27, r27
    2e6c:	fd 01       	movw	r30, r26
    2e6e:	0d c0       	rjmp	.+26     	; 0x2e8a <__udivmodsi4_ep>

00002e70 <__udivmodsi4_loop>:
    2e70:	aa 1f       	adc	r26, r26
    2e72:	bb 1f       	adc	r27, r27
    2e74:	ee 1f       	adc	r30, r30
    2e76:	ff 1f       	adc	r31, r31
    2e78:	a2 17       	cp	r26, r18
    2e7a:	b3 07       	cpc	r27, r19
    2e7c:	e4 07       	cpc	r30, r20
    2e7e:	f5 07       	cpc	r31, r21
    2e80:	20 f0       	brcs	.+8      	; 0x2e8a <__udivmodsi4_ep>
    2e82:	a2 1b       	sub	r26, r18
    2e84:	b3 0b       	sbc	r27, r19
    2e86:	e4 0b       	sbc	r30, r20
    2e88:	f5 0b       	sbc	r31, r21

00002e8a <__udivmodsi4_ep>:
    2e8a:	66 1f       	adc	r22, r22
    2e8c:	77 1f       	adc	r23, r23
    2e8e:	88 1f       	adc	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	1a 94       	dec	r1
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <__udivmodsi4_loop>
    2e96:	60 95       	com	r22
    2e98:	70 95       	com	r23
    2e9a:	80 95       	com	r24
    2e9c:	90 95       	com	r25
    2e9e:	9b 01       	movw	r18, r22
    2ea0:	ac 01       	movw	r20, r24
    2ea2:	bd 01       	movw	r22, r26
    2ea4:	cf 01       	movw	r24, r30
    2ea6:	08 95       	ret

00002ea8 <__divmodsi4>:
    2ea8:	05 2e       	mov	r0, r21
    2eaa:	97 fb       	bst	r25, 7
    2eac:	16 f4       	brtc	.+4      	; 0x2eb2 <__divmodsi4+0xa>
    2eae:	00 94       	com	r0
    2eb0:	0f d0       	rcall	.+30     	; 0x2ed0 <__negsi2>
    2eb2:	57 fd       	sbrc	r21, 7
    2eb4:	05 d0       	rcall	.+10     	; 0x2ec0 <__divmodsi4_neg2>
    2eb6:	d6 df       	rcall	.-84     	; 0x2e64 <__udivmodsi4>
    2eb8:	07 fc       	sbrc	r0, 7
    2eba:	02 d0       	rcall	.+4      	; 0x2ec0 <__divmodsi4_neg2>
    2ebc:	46 f4       	brtc	.+16     	; 0x2ece <__divmodsi4_exit>
    2ebe:	08 c0       	rjmp	.+16     	; 0x2ed0 <__negsi2>

00002ec0 <__divmodsi4_neg2>:
    2ec0:	50 95       	com	r21
    2ec2:	40 95       	com	r20
    2ec4:	30 95       	com	r19
    2ec6:	21 95       	neg	r18
    2ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eca:	4f 4f       	sbci	r20, 0xFF	; 255
    2ecc:	5f 4f       	sbci	r21, 0xFF	; 255

00002ece <__divmodsi4_exit>:
    2ece:	08 95       	ret

00002ed0 <__negsi2>:
    2ed0:	90 95       	com	r25
    2ed2:	80 95       	com	r24
    2ed4:	70 95       	com	r23
    2ed6:	61 95       	neg	r22
    2ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    2eda:	8f 4f       	sbci	r24, 0xFF	; 255
    2edc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ede:	08 95       	ret

00002ee0 <__udivmodhi4>:
    2ee0:	aa 1b       	sub	r26, r26
    2ee2:	bb 1b       	sub	r27, r27
    2ee4:	51 e1       	ldi	r21, 0x11	; 17
    2ee6:	07 c0       	rjmp	.+14     	; 0x2ef6 <__udivmodhi4_ep>

00002ee8 <__udivmodhi4_loop>:
    2ee8:	aa 1f       	adc	r26, r26
    2eea:	bb 1f       	adc	r27, r27
    2eec:	a6 17       	cp	r26, r22
    2eee:	b7 07       	cpc	r27, r23
    2ef0:	10 f0       	brcs	.+4      	; 0x2ef6 <__udivmodhi4_ep>
    2ef2:	a6 1b       	sub	r26, r22
    2ef4:	b7 0b       	sbc	r27, r23

00002ef6 <__udivmodhi4_ep>:
    2ef6:	88 1f       	adc	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	5a 95       	dec	r21
    2efc:	a9 f7       	brne	.-22     	; 0x2ee8 <__udivmodhi4_loop>
    2efe:	80 95       	com	r24
    2f00:	90 95       	com	r25
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	08 95       	ret

00002f08 <__tablejump2__>:
    2f08:	ee 0f       	add	r30, r30
    2f0a:	ff 1f       	adc	r31, r31
    2f0c:	05 90       	lpm	r0, Z+
    2f0e:	f4 91       	lpm	r31, Z
    2f10:	e0 2d       	mov	r30, r0
    2f12:	09 94       	ijmp

00002f14 <malloc>:
    2f14:	0f 93       	push	r16
    2f16:	1f 93       	push	r17
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	82 30       	cpi	r24, 0x02	; 2
    2f1e:	91 05       	cpc	r25, r1
    2f20:	10 f4       	brcc	.+4      	; 0x2f26 <malloc+0x12>
    2f22:	82 e0       	ldi	r24, 0x02	; 2
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <__flp>
    2f2a:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <__flp+0x1>
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	a0 e0       	ldi	r26, 0x00	; 0
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	30 97       	sbiw	r30, 0x00	; 0
    2f38:	19 f1       	breq	.+70     	; 0x2f80 <malloc+0x6c>
    2f3a:	40 81       	ld	r20, Z
    2f3c:	51 81       	ldd	r21, Z+1	; 0x01
    2f3e:	02 81       	ldd	r16, Z+2	; 0x02
    2f40:	13 81       	ldd	r17, Z+3	; 0x03
    2f42:	48 17       	cp	r20, r24
    2f44:	59 07       	cpc	r21, r25
    2f46:	c8 f0       	brcs	.+50     	; 0x2f7a <malloc+0x66>
    2f48:	84 17       	cp	r24, r20
    2f4a:	95 07       	cpc	r25, r21
    2f4c:	69 f4       	brne	.+26     	; 0x2f68 <malloc+0x54>
    2f4e:	10 97       	sbiw	r26, 0x00	; 0
    2f50:	31 f0       	breq	.+12     	; 0x2f5e <malloc+0x4a>
    2f52:	12 96       	adiw	r26, 0x02	; 2
    2f54:	0c 93       	st	X, r16
    2f56:	12 97       	sbiw	r26, 0x02	; 2
    2f58:	13 96       	adiw	r26, 0x03	; 3
    2f5a:	1c 93       	st	X, r17
    2f5c:	27 c0       	rjmp	.+78     	; 0x2fac <malloc+0x98>
    2f5e:	00 93 6d 05 	sts	0x056D, r16	; 0x80056d <__flp>
    2f62:	10 93 6e 05 	sts	0x056E, r17	; 0x80056e <__flp+0x1>
    2f66:	22 c0       	rjmp	.+68     	; 0x2fac <malloc+0x98>
    2f68:	21 15       	cp	r18, r1
    2f6a:	31 05       	cpc	r19, r1
    2f6c:	19 f0       	breq	.+6      	; 0x2f74 <malloc+0x60>
    2f6e:	42 17       	cp	r20, r18
    2f70:	53 07       	cpc	r21, r19
    2f72:	18 f4       	brcc	.+6      	; 0x2f7a <malloc+0x66>
    2f74:	9a 01       	movw	r18, r20
    2f76:	bd 01       	movw	r22, r26
    2f78:	ef 01       	movw	r28, r30
    2f7a:	df 01       	movw	r26, r30
    2f7c:	f8 01       	movw	r30, r16
    2f7e:	db cf       	rjmp	.-74     	; 0x2f36 <malloc+0x22>
    2f80:	21 15       	cp	r18, r1
    2f82:	31 05       	cpc	r19, r1
    2f84:	f9 f0       	breq	.+62     	; 0x2fc4 <malloc+0xb0>
    2f86:	28 1b       	sub	r18, r24
    2f88:	39 0b       	sbc	r19, r25
    2f8a:	24 30       	cpi	r18, 0x04	; 4
    2f8c:	31 05       	cpc	r19, r1
    2f8e:	80 f4       	brcc	.+32     	; 0x2fb0 <malloc+0x9c>
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	9b 81       	ldd	r25, Y+3	; 0x03
    2f94:	61 15       	cp	r22, r1
    2f96:	71 05       	cpc	r23, r1
    2f98:	21 f0       	breq	.+8      	; 0x2fa2 <malloc+0x8e>
    2f9a:	fb 01       	movw	r30, r22
    2f9c:	93 83       	std	Z+3, r25	; 0x03
    2f9e:	82 83       	std	Z+2, r24	; 0x02
    2fa0:	04 c0       	rjmp	.+8      	; 0x2faa <malloc+0x96>
    2fa2:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <__flp+0x1>
    2fa6:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <__flp>
    2faa:	fe 01       	movw	r30, r28
    2fac:	32 96       	adiw	r30, 0x02	; 2
    2fae:	44 c0       	rjmp	.+136    	; 0x3038 <malloc+0x124>
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e2 0f       	add	r30, r18
    2fb4:	f3 1f       	adc	r31, r19
    2fb6:	81 93       	st	Z+, r24
    2fb8:	91 93       	st	Z+, r25
    2fba:	22 50       	subi	r18, 0x02	; 2
    2fbc:	31 09       	sbc	r19, r1
    2fbe:	39 83       	std	Y+1, r19	; 0x01
    2fc0:	28 83       	st	Y, r18
    2fc2:	3a c0       	rjmp	.+116    	; 0x3038 <malloc+0x124>
    2fc4:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    2fc8:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    2fcc:	23 2b       	or	r18, r19
    2fce:	41 f4       	brne	.+16     	; 0x2fe0 <malloc+0xcc>
    2fd0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2fd4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2fd8:	30 93 6c 05 	sts	0x056C, r19	; 0x80056c <__brkval+0x1>
    2fdc:	20 93 6b 05 	sts	0x056B, r18	; 0x80056b <__brkval>
    2fe0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__malloc_heap_end>
    2fe4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__malloc_heap_end+0x1>
    2fe8:	21 15       	cp	r18, r1
    2fea:	31 05       	cpc	r19, r1
    2fec:	41 f4       	brne	.+16     	; 0x2ffe <malloc+0xea>
    2fee:	2d b7       	in	r18, 0x3d	; 61
    2ff0:	3e b7       	in	r19, 0x3e	; 62
    2ff2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2ff6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2ffa:	24 1b       	sub	r18, r20
    2ffc:	35 0b       	sbc	r19, r21
    2ffe:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <__brkval>
    3002:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <__brkval+0x1>
    3006:	e2 17       	cp	r30, r18
    3008:	f3 07       	cpc	r31, r19
    300a:	a0 f4       	brcc	.+40     	; 0x3034 <malloc+0x120>
    300c:	2e 1b       	sub	r18, r30
    300e:	3f 0b       	sbc	r19, r31
    3010:	28 17       	cp	r18, r24
    3012:	39 07       	cpc	r19, r25
    3014:	78 f0       	brcs	.+30     	; 0x3034 <malloc+0x120>
    3016:	ac 01       	movw	r20, r24
    3018:	4e 5f       	subi	r20, 0xFE	; 254
    301a:	5f 4f       	sbci	r21, 0xFF	; 255
    301c:	24 17       	cp	r18, r20
    301e:	35 07       	cpc	r19, r21
    3020:	48 f0       	brcs	.+18     	; 0x3034 <malloc+0x120>
    3022:	4e 0f       	add	r20, r30
    3024:	5f 1f       	adc	r21, r31
    3026:	50 93 6c 05 	sts	0x056C, r21	; 0x80056c <__brkval+0x1>
    302a:	40 93 6b 05 	sts	0x056B, r20	; 0x80056b <__brkval>
    302e:	81 93       	st	Z+, r24
    3030:	91 93       	st	Z+, r25
    3032:	02 c0       	rjmp	.+4      	; 0x3038 <malloc+0x124>
    3034:	e0 e0       	ldi	r30, 0x00	; 0
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	cf 01       	movw	r24, r30
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	08 95       	ret

00003044 <free>:
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	09 f4       	brne	.+2      	; 0x304e <free+0xa>
    304c:	81 c0       	rjmp	.+258    	; 0x3150 <free+0x10c>
    304e:	fc 01       	movw	r30, r24
    3050:	32 97       	sbiw	r30, 0x02	; 2
    3052:	13 82       	std	Z+3, r1	; 0x03
    3054:	12 82       	std	Z+2, r1	; 0x02
    3056:	a0 91 6d 05 	lds	r26, 0x056D	; 0x80056d <__flp>
    305a:	b0 91 6e 05 	lds	r27, 0x056E	; 0x80056e <__flp+0x1>
    305e:	10 97       	sbiw	r26, 0x00	; 0
    3060:	81 f4       	brne	.+32     	; 0x3082 <free+0x3e>
    3062:	20 81       	ld	r18, Z
    3064:	31 81       	ldd	r19, Z+1	; 0x01
    3066:	82 0f       	add	r24, r18
    3068:	93 1f       	adc	r25, r19
    306a:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    306e:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    3072:	28 17       	cp	r18, r24
    3074:	39 07       	cpc	r19, r25
    3076:	51 f5       	brne	.+84     	; 0x30cc <free+0x88>
    3078:	f0 93 6c 05 	sts	0x056C, r31	; 0x80056c <__brkval+0x1>
    307c:	e0 93 6b 05 	sts	0x056B, r30	; 0x80056b <__brkval>
    3080:	67 c0       	rjmp	.+206    	; 0x3150 <free+0x10c>
    3082:	ed 01       	movw	r28, r26
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	ce 17       	cp	r28, r30
    308a:	df 07       	cpc	r29, r31
    308c:	40 f4       	brcc	.+16     	; 0x309e <free+0x5a>
    308e:	4a 81       	ldd	r20, Y+2	; 0x02
    3090:	5b 81       	ldd	r21, Y+3	; 0x03
    3092:	9e 01       	movw	r18, r28
    3094:	41 15       	cp	r20, r1
    3096:	51 05       	cpc	r21, r1
    3098:	f1 f0       	breq	.+60     	; 0x30d6 <free+0x92>
    309a:	ea 01       	movw	r28, r20
    309c:	f5 cf       	rjmp	.-22     	; 0x3088 <free+0x44>
    309e:	d3 83       	std	Z+3, r29	; 0x03
    30a0:	c2 83       	std	Z+2, r28	; 0x02
    30a2:	40 81       	ld	r20, Z
    30a4:	51 81       	ldd	r21, Z+1	; 0x01
    30a6:	84 0f       	add	r24, r20
    30a8:	95 1f       	adc	r25, r21
    30aa:	c8 17       	cp	r28, r24
    30ac:	d9 07       	cpc	r29, r25
    30ae:	59 f4       	brne	.+22     	; 0x30c6 <free+0x82>
    30b0:	88 81       	ld	r24, Y
    30b2:	99 81       	ldd	r25, Y+1	; 0x01
    30b4:	84 0f       	add	r24, r20
    30b6:	95 1f       	adc	r25, r21
    30b8:	02 96       	adiw	r24, 0x02	; 2
    30ba:	91 83       	std	Z+1, r25	; 0x01
    30bc:	80 83       	st	Z, r24
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	9b 81       	ldd	r25, Y+3	; 0x03
    30c2:	93 83       	std	Z+3, r25	; 0x03
    30c4:	82 83       	std	Z+2, r24	; 0x02
    30c6:	21 15       	cp	r18, r1
    30c8:	31 05       	cpc	r19, r1
    30ca:	29 f4       	brne	.+10     	; 0x30d6 <free+0x92>
    30cc:	f0 93 6e 05 	sts	0x056E, r31	; 0x80056e <__flp+0x1>
    30d0:	e0 93 6d 05 	sts	0x056D, r30	; 0x80056d <__flp>
    30d4:	3d c0       	rjmp	.+122    	; 0x3150 <free+0x10c>
    30d6:	e9 01       	movw	r28, r18
    30d8:	fb 83       	std	Y+3, r31	; 0x03
    30da:	ea 83       	std	Y+2, r30	; 0x02
    30dc:	49 91       	ld	r20, Y+
    30de:	59 91       	ld	r21, Y+
    30e0:	c4 0f       	add	r28, r20
    30e2:	d5 1f       	adc	r29, r21
    30e4:	ec 17       	cp	r30, r28
    30e6:	fd 07       	cpc	r31, r29
    30e8:	61 f4       	brne	.+24     	; 0x3102 <free+0xbe>
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	84 0f       	add	r24, r20
    30f0:	95 1f       	adc	r25, r21
    30f2:	02 96       	adiw	r24, 0x02	; 2
    30f4:	e9 01       	movw	r28, r18
    30f6:	99 83       	std	Y+1, r25	; 0x01
    30f8:	88 83       	st	Y, r24
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
    30fc:	93 81       	ldd	r25, Z+3	; 0x03
    30fe:	9b 83       	std	Y+3, r25	; 0x03
    3100:	8a 83       	std	Y+2, r24	; 0x02
    3102:	e0 e0       	ldi	r30, 0x00	; 0
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	12 96       	adiw	r26, 0x02	; 2
    3108:	8d 91       	ld	r24, X+
    310a:	9c 91       	ld	r25, X
    310c:	13 97       	sbiw	r26, 0x03	; 3
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	19 f0       	breq	.+6      	; 0x3118 <free+0xd4>
    3112:	fd 01       	movw	r30, r26
    3114:	dc 01       	movw	r26, r24
    3116:	f7 cf       	rjmp	.-18     	; 0x3106 <free+0xc2>
    3118:	8d 91       	ld	r24, X+
    311a:	9c 91       	ld	r25, X
    311c:	11 97       	sbiw	r26, 0x01	; 1
    311e:	9d 01       	movw	r18, r26
    3120:	2e 5f       	subi	r18, 0xFE	; 254
    3122:	3f 4f       	sbci	r19, 0xFF	; 255
    3124:	82 0f       	add	r24, r18
    3126:	93 1f       	adc	r25, r19
    3128:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    312c:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    3130:	28 17       	cp	r18, r24
    3132:	39 07       	cpc	r19, r25
    3134:	69 f4       	brne	.+26     	; 0x3150 <free+0x10c>
    3136:	30 97       	sbiw	r30, 0x00	; 0
    3138:	29 f4       	brne	.+10     	; 0x3144 <free+0x100>
    313a:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <__flp+0x1>
    313e:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <__flp>
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <free+0x104>
    3144:	13 82       	std	Z+3, r1	; 0x03
    3146:	12 82       	std	Z+2, r1	; 0x02
    3148:	b0 93 6c 05 	sts	0x056C, r27	; 0x80056c <__brkval+0x1>
    314c:	a0 93 6b 05 	sts	0x056B, r26	; 0x80056b <__brkval>
    3150:	df 91       	pop	r29
    3152:	cf 91       	pop	r28
    3154:	08 95       	ret

00003156 <strcpy_P>:
    3156:	fb 01       	movw	r30, r22
    3158:	dc 01       	movw	r26, r24
    315a:	05 90       	lpm	r0, Z+
    315c:	0d 92       	st	X+, r0
    315e:	00 20       	and	r0, r0
    3160:	e1 f7       	brne	.-8      	; 0x315a <strcpy_P+0x4>
    3162:	08 95       	ret

00003164 <strncmp>:
    3164:	fb 01       	movw	r30, r22
    3166:	dc 01       	movw	r26, r24
    3168:	41 50       	subi	r20, 0x01	; 1
    316a:	50 40       	sbci	r21, 0x00	; 0
    316c:	30 f0       	brcs	.+12     	; 0x317a <strncmp+0x16>
    316e:	8d 91       	ld	r24, X+
    3170:	01 90       	ld	r0, Z+
    3172:	80 19       	sub	r24, r0
    3174:	19 f4       	brne	.+6      	; 0x317c <strncmp+0x18>
    3176:	00 20       	and	r0, r0
    3178:	b9 f7       	brne	.-18     	; 0x3168 <strncmp+0x4>
    317a:	88 1b       	sub	r24, r24
    317c:	99 0b       	sbc	r25, r25
    317e:	08 95       	ret

00003180 <strncpy>:
    3180:	fb 01       	movw	r30, r22
    3182:	dc 01       	movw	r26, r24
    3184:	41 50       	subi	r20, 0x01	; 1
    3186:	50 40       	sbci	r21, 0x00	; 0
    3188:	48 f0       	brcs	.+18     	; 0x319c <strncpy+0x1c>
    318a:	01 90       	ld	r0, Z+
    318c:	0d 92       	st	X+, r0
    318e:	00 20       	and	r0, r0
    3190:	c9 f7       	brne	.-14     	; 0x3184 <strncpy+0x4>
    3192:	01 c0       	rjmp	.+2      	; 0x3196 <strncpy+0x16>
    3194:	1d 92       	st	X+, r1
    3196:	41 50       	subi	r20, 0x01	; 1
    3198:	50 40       	sbci	r21, 0x00	; 0
    319a:	e0 f7       	brcc	.-8      	; 0x3194 <strncpy+0x14>
    319c:	08 95       	ret

0000319e <__do_global_dtors>:
    319e:	11 e0       	ldi	r17, 0x01	; 1
    31a0:	cd e4       	ldi	r28, 0x4D	; 77
    31a2:	d1 e0       	ldi	r29, 0x01	; 1
    31a4:	03 c0       	rjmp	.+6      	; 0x31ac <__do_global_dtors+0xe>
    31a6:	fe 01       	movw	r30, r28
    31a8:	af de       	rcall	.-674    	; 0x2f08 <__tablejump2__>
    31aa:	21 96       	adiw	r28, 0x01	; 1
    31ac:	ce 34       	cpi	r28, 0x4E	; 78
    31ae:	d1 07       	cpc	r29, r17
    31b0:	d1 f7       	brne	.-12     	; 0x31a6 <__do_global_dtors+0x8>
    31b2:	f8 94       	cli

000031b4 <__stop_program>:
    31b4:	ff cf       	rjmp	.-2      	; 0x31b4 <__stop_program>
